// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffe_extend.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "caffe_extend.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace caffe_ext {

namespace {

const ::google::protobuf::Descriptor* BBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImgBBoxAnnoDatum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImgBBoxAnnoDatum_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_caffe_5fextend_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_caffe_5fextend_2eproto() {
  protobuf_AddDesc_caffe_5fextend_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "caffe_extend.proto");
  GOOGLE_CHECK(file != NULL);
  BBox_descriptor_ = file->message_type(0);
  static const int BBox_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBox, x_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBox, y_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBox, x_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBox, y_max_),
  };
  BBox_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BBox_descriptor_,
      BBox::internal_default_instance(),
      BBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBox, _has_bits_),
      -1,
      -1,
      sizeof(BBox),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBox, _internal_metadata_));
  ImgBBoxAnnoDatum_descriptor_ = file->message_type(1);
  static const int ImgBBoxAnnoDatum_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgBBoxAnnoDatum, img_datum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgBBoxAnnoDatum, labels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgBBoxAnnoDatum, bboxes_),
  };
  ImgBBoxAnnoDatum_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ImgBBoxAnnoDatum_descriptor_,
      ImgBBoxAnnoDatum::internal_default_instance(),
      ImgBBoxAnnoDatum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgBBoxAnnoDatum, _has_bits_),
      -1,
      -1,
      sizeof(ImgBBoxAnnoDatum),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgBBoxAnnoDatum, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_caffe_5fextend_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BBox_descriptor_, BBox::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ImgBBoxAnnoDatum_descriptor_, ImgBBoxAnnoDatum::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_caffe_5fextend_2eproto() {
  BBox_default_instance_.Shutdown();
  delete BBox_reflection_;
  ImgBBoxAnnoDatum_default_instance_.Shutdown();
  delete ImgBBoxAnnoDatum_reflection_;
}

void protobuf_InitDefaults_caffe_5fextend_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::caffe::protobuf_InitDefaults_caffe_2eproto();
  BBox_default_instance_.DefaultConstruct();
  ImgBBoxAnnoDatum_default_instance_.DefaultConstruct();
  BBox_default_instance_.get_mutable()->InitAsDefaultInstance();
  ImgBBoxAnnoDatum_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_caffe_5fextend_2eproto_once_);
void protobuf_InitDefaults_caffe_5fextend_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_caffe_5fextend_2eproto_once_,
                 &protobuf_InitDefaults_caffe_5fextend_2eproto_impl);
}
void protobuf_AddDesc_caffe_5fextend_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_caffe_5fextend_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022caffe_extend.proto\022\tcaffe_ext\032\027caffe/p"
    "roto/caffe.proto\"B\n\004BBox\022\r\n\005x_min\030\001 \002(\002\022"
    "\r\n\005y_min\030\002 \002(\002\022\r\n\005x_max\030\003 \002(\002\022\r\n\005y_max\030\004"
    " \002(\002\"d\n\020ImgBBoxAnnoDatum\022\037\n\timg_datum\030\001 "
    "\002(\0132\014.caffe.Datum\022\016\n\006labels\030\002 \003(\005\022\037\n\006bbo"
    "xes\030\003 \003(\0132\017.caffe_ext.BBox", 226);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "caffe_extend.proto", &protobuf_RegisterTypes);
  ::caffe::protobuf_AddDesc_caffe_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_caffe_5fextend_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_caffe_5fextend_2eproto_once_);
void protobuf_AddDesc_caffe_5fextend_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_caffe_5fextend_2eproto_once_,
                 &protobuf_AddDesc_caffe_5fextend_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_caffe_5fextend_2eproto {
  StaticDescriptorInitializer_caffe_5fextend_2eproto() {
    protobuf_AddDesc_caffe_5fextend_2eproto();
  }
} static_descriptor_initializer_caffe_5fextend_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BBox::kXMinFieldNumber;
const int BBox::kYMinFieldNumber;
const int BBox::kXMaxFieldNumber;
const int BBox::kYMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BBox::BBox()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_5fextend_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe_ext.BBox)
}

void BBox::InitAsDefaultInstance() {
}

BBox::BBox(const BBox& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe_ext.BBox)
}

void BBox::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_min_, 0, reinterpret_cast<char*>(&y_max_) -
    reinterpret_cast<char*>(&x_min_) + sizeof(y_max_));
}

BBox::~BBox() {
  // @@protoc_insertion_point(destructor:caffe_ext.BBox)
  SharedDtor();
}

void BBox::SharedDtor() {
}

void BBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BBox_descriptor_;
}

const BBox& BBox::default_instance() {
  protobuf_InitDefaults_caffe_5fextend_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BBox> BBox_default_instance_;

BBox* BBox::New(::google::protobuf::Arena* arena) const {
  BBox* n = new BBox;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BBox::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe_ext.BBox)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BBox, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BBox*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_min_, y_max_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe_ext.BBox)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x_min = 1;
      case 1: {
        if (tag == 13) {
          set_has_x_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_min_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y_min;
        break;
      }

      // required float y_min = 2;
      case 2: {
        if (tag == 21) {
         parse_y_min:
          set_has_y_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_min_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_x_max;
        break;
      }

      // required float x_max = 3;
      case 3: {
        if (tag == 29) {
         parse_x_max:
          set_has_x_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_max_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_y_max;
        break;
      }

      // required float y_max = 4;
      case 4: {
        if (tag == 37) {
         parse_y_max:
          set_has_y_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_max_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe_ext.BBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe_ext.BBox)
  return false;
#undef DO_
}

void BBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe_ext.BBox)
  // required float x_min = 1;
  if (has_x_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x_min(), output);
  }

  // required float y_min = 2;
  if (has_y_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y_min(), output);
  }

  // required float x_max = 3;
  if (has_x_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->x_max(), output);
  }

  // required float y_max = 4;
  if (has_y_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->y_max(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe_ext.BBox)
}

::google::protobuf::uint8* BBox::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe_ext.BBox)
  // required float x_min = 1;
  if (has_x_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x_min(), target);
  }

  // required float y_min = 2;
  if (has_y_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y_min(), target);
  }

  // required float x_max = 3;
  if (has_x_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->x_max(), target);
  }

  // required float y_max = 4;
  if (has_y_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->y_max(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe_ext.BBox)
  return target;
}

size_t BBox::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe_ext.BBox)
  size_t total_size = 0;

  if (has_x_min()) {
    // required float x_min = 1;
    total_size += 1 + 4;
  }

  if (has_y_min()) {
    // required float y_min = 2;
    total_size += 1 + 4;
  }

  if (has_x_max()) {
    // required float x_max = 3;
    total_size += 1 + 4;
  }

  if (has_y_max()) {
    // required float y_max = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t BBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe_ext.BBox)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required float x_min = 1;
    total_size += 1 + 4;

    // required float y_min = 2;
    total_size += 1 + 4;

    // required float x_max = 3;
    total_size += 1 + 4;

    // required float y_max = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BBox::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe_ext.BBox)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BBox* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BBox>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe_ext.BBox)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe_ext.BBox)
    UnsafeMergeFrom(*source);
  }
}

void BBox::MergeFrom(const BBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe_ext.BBox)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BBox::UnsafeMergeFrom(const BBox& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x_min()) {
      set_x_min(from.x_min());
    }
    if (from.has_y_min()) {
      set_y_min(from.y_min());
    }
    if (from.has_x_max()) {
      set_x_max(from.x_max());
    }
    if (from.has_y_max()) {
      set_y_max(from.y_max());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void BBox::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe_ext.BBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BBox::CopyFrom(const BBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe_ext.BBox)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BBox::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void BBox::Swap(BBox* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BBox::InternalSwap(BBox* other) {
  std::swap(x_min_, other->x_min_);
  std::swap(y_min_, other->y_min_);
  std::swap(x_max_, other->x_max_);
  std::swap(y_max_, other->y_max_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BBox_descriptor_;
  metadata.reflection = BBox_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BBox

// required float x_min = 1;
bool BBox::has_x_min() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BBox::set_has_x_min() {
  _has_bits_[0] |= 0x00000001u;
}
void BBox::clear_has_x_min() {
  _has_bits_[0] &= ~0x00000001u;
}
void BBox::clear_x_min() {
  x_min_ = 0;
  clear_has_x_min();
}
float BBox::x_min() const {
  // @@protoc_insertion_point(field_get:caffe_ext.BBox.x_min)
  return x_min_;
}
void BBox::set_x_min(float value) {
  set_has_x_min();
  x_min_ = value;
  // @@protoc_insertion_point(field_set:caffe_ext.BBox.x_min)
}

// required float y_min = 2;
bool BBox::has_y_min() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BBox::set_has_y_min() {
  _has_bits_[0] |= 0x00000002u;
}
void BBox::clear_has_y_min() {
  _has_bits_[0] &= ~0x00000002u;
}
void BBox::clear_y_min() {
  y_min_ = 0;
  clear_has_y_min();
}
float BBox::y_min() const {
  // @@protoc_insertion_point(field_get:caffe_ext.BBox.y_min)
  return y_min_;
}
void BBox::set_y_min(float value) {
  set_has_y_min();
  y_min_ = value;
  // @@protoc_insertion_point(field_set:caffe_ext.BBox.y_min)
}

// required float x_max = 3;
bool BBox::has_x_max() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BBox::set_has_x_max() {
  _has_bits_[0] |= 0x00000004u;
}
void BBox::clear_has_x_max() {
  _has_bits_[0] &= ~0x00000004u;
}
void BBox::clear_x_max() {
  x_max_ = 0;
  clear_has_x_max();
}
float BBox::x_max() const {
  // @@protoc_insertion_point(field_get:caffe_ext.BBox.x_max)
  return x_max_;
}
void BBox::set_x_max(float value) {
  set_has_x_max();
  x_max_ = value;
  // @@protoc_insertion_point(field_set:caffe_ext.BBox.x_max)
}

// required float y_max = 4;
bool BBox::has_y_max() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BBox::set_has_y_max() {
  _has_bits_[0] |= 0x00000008u;
}
void BBox::clear_has_y_max() {
  _has_bits_[0] &= ~0x00000008u;
}
void BBox::clear_y_max() {
  y_max_ = 0;
  clear_has_y_max();
}
float BBox::y_max() const {
  // @@protoc_insertion_point(field_get:caffe_ext.BBox.y_max)
  return y_max_;
}
void BBox::set_y_max(float value) {
  set_has_y_max();
  y_max_ = value;
  // @@protoc_insertion_point(field_set:caffe_ext.BBox.y_max)
}

inline const BBox* BBox::internal_default_instance() {
  return &BBox_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImgBBoxAnnoDatum::kImgDatumFieldNumber;
const int ImgBBoxAnnoDatum::kLabelsFieldNumber;
const int ImgBBoxAnnoDatum::kBboxesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImgBBoxAnnoDatum::ImgBBoxAnnoDatum()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_5fextend_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe_ext.ImgBBoxAnnoDatum)
}

void ImgBBoxAnnoDatum::InitAsDefaultInstance() {
  img_datum_ = const_cast< ::caffe::Datum*>(
      ::caffe::Datum::internal_default_instance());
}

ImgBBoxAnnoDatum::ImgBBoxAnnoDatum(const ImgBBoxAnnoDatum& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe_ext.ImgBBoxAnnoDatum)
}

void ImgBBoxAnnoDatum::SharedCtor() {
  _cached_size_ = 0;
  img_datum_ = NULL;
}

ImgBBoxAnnoDatum::~ImgBBoxAnnoDatum() {
  // @@protoc_insertion_point(destructor:caffe_ext.ImgBBoxAnnoDatum)
  SharedDtor();
}

void ImgBBoxAnnoDatum::SharedDtor() {
  if (this != &ImgBBoxAnnoDatum_default_instance_.get()) {
    delete img_datum_;
  }
}

void ImgBBoxAnnoDatum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImgBBoxAnnoDatum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImgBBoxAnnoDatum_descriptor_;
}

const ImgBBoxAnnoDatum& ImgBBoxAnnoDatum::default_instance() {
  protobuf_InitDefaults_caffe_5fextend_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ImgBBoxAnnoDatum> ImgBBoxAnnoDatum_default_instance_;

ImgBBoxAnnoDatum* ImgBBoxAnnoDatum::New(::google::protobuf::Arena* arena) const {
  ImgBBoxAnnoDatum* n = new ImgBBoxAnnoDatum;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImgBBoxAnnoDatum::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe_ext.ImgBBoxAnnoDatum)
  if (has_img_datum()) {
    if (img_datum_ != NULL) img_datum_->::caffe::Datum::Clear();
  }
  labels_.Clear();
  bboxes_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ImgBBoxAnnoDatum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe_ext.ImgBBoxAnnoDatum)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .caffe.Datum img_datum = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_img_datum()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_labels;
        break;
      }

      // repeated int32 labels = 2;
      case 2: {
        if (tag == 16) {
         parse_labels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_labels())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_labels())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_labels;
        if (input->ExpectTag(26)) goto parse_bboxes;
        break;
      }

      // repeated .caffe_ext.BBox bboxes = 3;
      case 3: {
        if (tag == 26) {
         parse_bboxes:
          DO_(input->IncrementRecursionDepth());
         parse_loop_bboxes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_bboxes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_bboxes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe_ext.ImgBBoxAnnoDatum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe_ext.ImgBBoxAnnoDatum)
  return false;
#undef DO_
}

void ImgBBoxAnnoDatum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe_ext.ImgBBoxAnnoDatum)
  // required .caffe.Datum img_datum = 1;
  if (has_img_datum()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->img_datum_, output);
  }

  // repeated int32 labels = 2;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->labels(i), output);
  }

  // repeated .caffe_ext.BBox bboxes = 3;
  for (unsigned int i = 0, n = this->bboxes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bboxes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe_ext.ImgBBoxAnnoDatum)
}

::google::protobuf::uint8* ImgBBoxAnnoDatum::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe_ext.ImgBBoxAnnoDatum)
  // required .caffe.Datum img_datum = 1;
  if (has_img_datum()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->img_datum_, false, target);
  }

  // repeated int32 labels = 2;
  for (int i = 0; i < this->labels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->labels(i), target);
  }

  // repeated .caffe_ext.BBox bboxes = 3;
  for (unsigned int i = 0, n = this->bboxes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->bboxes(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe_ext.ImgBBoxAnnoDatum)
  return target;
}

size_t ImgBBoxAnnoDatum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe_ext.ImgBBoxAnnoDatum)
  size_t total_size = 0;

  // required .caffe.Datum img_datum = 1;
  if (has_img_datum()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->img_datum_);
  }
  // repeated int32 labels = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->labels_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->labels(i));
    }
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->labels_size());
    total_size += data_size;
  }

  // repeated .caffe_ext.BBox bboxes = 3;
  {
    unsigned int count = this->bboxes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bboxes(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImgBBoxAnnoDatum::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe_ext.ImgBBoxAnnoDatum)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ImgBBoxAnnoDatum* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImgBBoxAnnoDatum>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe_ext.ImgBBoxAnnoDatum)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe_ext.ImgBBoxAnnoDatum)
    UnsafeMergeFrom(*source);
  }
}

void ImgBBoxAnnoDatum::MergeFrom(const ImgBBoxAnnoDatum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe_ext.ImgBBoxAnnoDatum)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ImgBBoxAnnoDatum::UnsafeMergeFrom(const ImgBBoxAnnoDatum& from) {
  GOOGLE_DCHECK(&from != this);
  labels_.UnsafeMergeFrom(from.labels_);
  bboxes_.MergeFrom(from.bboxes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_img_datum()) {
      mutable_img_datum()->::caffe::Datum::MergeFrom(from.img_datum());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ImgBBoxAnnoDatum::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe_ext.ImgBBoxAnnoDatum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImgBBoxAnnoDatum::CopyFrom(const ImgBBoxAnnoDatum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe_ext.ImgBBoxAnnoDatum)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ImgBBoxAnnoDatum::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->bboxes())) return false;
  return true;
}

void ImgBBoxAnnoDatum::Swap(ImgBBoxAnnoDatum* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImgBBoxAnnoDatum::InternalSwap(ImgBBoxAnnoDatum* other) {
  std::swap(img_datum_, other->img_datum_);
  labels_.UnsafeArenaSwap(&other->labels_);
  bboxes_.UnsafeArenaSwap(&other->bboxes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImgBBoxAnnoDatum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImgBBoxAnnoDatum_descriptor_;
  metadata.reflection = ImgBBoxAnnoDatum_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImgBBoxAnnoDatum

// required .caffe.Datum img_datum = 1;
bool ImgBBoxAnnoDatum::has_img_datum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImgBBoxAnnoDatum::set_has_img_datum() {
  _has_bits_[0] |= 0x00000001u;
}
void ImgBBoxAnnoDatum::clear_has_img_datum() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImgBBoxAnnoDatum::clear_img_datum() {
  if (img_datum_ != NULL) img_datum_->::caffe::Datum::Clear();
  clear_has_img_datum();
}
const ::caffe::Datum& ImgBBoxAnnoDatum::img_datum() const {
  // @@protoc_insertion_point(field_get:caffe_ext.ImgBBoxAnnoDatum.img_datum)
  return img_datum_ != NULL ? *img_datum_
                         : *::caffe::Datum::internal_default_instance();
}
::caffe::Datum* ImgBBoxAnnoDatum::mutable_img_datum() {
  set_has_img_datum();
  if (img_datum_ == NULL) {
    img_datum_ = new ::caffe::Datum;
  }
  // @@protoc_insertion_point(field_mutable:caffe_ext.ImgBBoxAnnoDatum.img_datum)
  return img_datum_;
}
::caffe::Datum* ImgBBoxAnnoDatum::release_img_datum() {
  // @@protoc_insertion_point(field_release:caffe_ext.ImgBBoxAnnoDatum.img_datum)
  clear_has_img_datum();
  ::caffe::Datum* temp = img_datum_;
  img_datum_ = NULL;
  return temp;
}
void ImgBBoxAnnoDatum::set_allocated_img_datum(::caffe::Datum* img_datum) {
  delete img_datum_;
  img_datum_ = img_datum;
  if (img_datum) {
    set_has_img_datum();
  } else {
    clear_has_img_datum();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe_ext.ImgBBoxAnnoDatum.img_datum)
}

// repeated int32 labels = 2;
int ImgBBoxAnnoDatum::labels_size() const {
  return labels_.size();
}
void ImgBBoxAnnoDatum::clear_labels() {
  labels_.Clear();
}
::google::protobuf::int32 ImgBBoxAnnoDatum::labels(int index) const {
  // @@protoc_insertion_point(field_get:caffe_ext.ImgBBoxAnnoDatum.labels)
  return labels_.Get(index);
}
void ImgBBoxAnnoDatum::set_labels(int index, ::google::protobuf::int32 value) {
  labels_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe_ext.ImgBBoxAnnoDatum.labels)
}
void ImgBBoxAnnoDatum::add_labels(::google::protobuf::int32 value) {
  labels_.Add(value);
  // @@protoc_insertion_point(field_add:caffe_ext.ImgBBoxAnnoDatum.labels)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ImgBBoxAnnoDatum::labels() const {
  // @@protoc_insertion_point(field_list:caffe_ext.ImgBBoxAnnoDatum.labels)
  return labels_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ImgBBoxAnnoDatum::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:caffe_ext.ImgBBoxAnnoDatum.labels)
  return &labels_;
}

// repeated .caffe_ext.BBox bboxes = 3;
int ImgBBoxAnnoDatum::bboxes_size() const {
  return bboxes_.size();
}
void ImgBBoxAnnoDatum::clear_bboxes() {
  bboxes_.Clear();
}
const ::caffe_ext::BBox& ImgBBoxAnnoDatum::bboxes(int index) const {
  // @@protoc_insertion_point(field_get:caffe_ext.ImgBBoxAnnoDatum.bboxes)
  return bboxes_.Get(index);
}
::caffe_ext::BBox* ImgBBoxAnnoDatum::mutable_bboxes(int index) {
  // @@protoc_insertion_point(field_mutable:caffe_ext.ImgBBoxAnnoDatum.bboxes)
  return bboxes_.Mutable(index);
}
::caffe_ext::BBox* ImgBBoxAnnoDatum::add_bboxes() {
  // @@protoc_insertion_point(field_add:caffe_ext.ImgBBoxAnnoDatum.bboxes)
  return bboxes_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe_ext::BBox >*
ImgBBoxAnnoDatum::mutable_bboxes() {
  // @@protoc_insertion_point(field_mutable_list:caffe_ext.ImgBBoxAnnoDatum.bboxes)
  return &bboxes_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe_ext::BBox >&
ImgBBoxAnnoDatum::bboxes() const {
  // @@protoc_insertion_point(field_list:caffe_ext.ImgBBoxAnnoDatum.bboxes)
  return bboxes_;
}

inline const ImgBBoxAnnoDatum* ImgBBoxAnnoDatum::internal_default_instance() {
  return &ImgBBoxAnnoDatum_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace caffe_ext

// @@protoc_insertion_point(global_scope)
