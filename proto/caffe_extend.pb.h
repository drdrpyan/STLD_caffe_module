// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffe_extend.proto

#ifndef PROTOBUF_caffe_5fextend_2eproto__INCLUDED
#define PROTOBUF_caffe_5fextend_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "caffe/proto/caffe.pb.h"
// @@protoc_insertion_point(includes)

namespace caffe_ext {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_caffe_5fextend_2eproto();
void protobuf_InitDefaults_caffe_5fextend_2eproto();
void protobuf_AssignDesc_caffe_5fextend_2eproto();
void protobuf_ShutdownFile_caffe_5fextend_2eproto();

class BBox;
class ImgBBoxAnnoDatum;

// ===================================================================

class BBox : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe_ext.BBox) */ {
 public:
  BBox();
  virtual ~BBox();

  BBox(const BBox& from);

  inline BBox& operator=(const BBox& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BBox& default_instance();

  static const BBox* internal_default_instance();

  void Swap(BBox* other);

  // implements Message ----------------------------------------------

  inline BBox* New() const { return New(NULL); }

  BBox* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BBox& from);
  void MergeFrom(const BBox& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BBox* other);
  void UnsafeMergeFrom(const BBox& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x_min = 1;
  bool has_x_min() const;
  void clear_x_min();
  static const int kXMinFieldNumber = 1;
  float x_min() const;
  void set_x_min(float value);

  // required float y_min = 2;
  bool has_y_min() const;
  void clear_y_min();
  static const int kYMinFieldNumber = 2;
  float y_min() const;
  void set_y_min(float value);

  // required float x_max = 3;
  bool has_x_max() const;
  void clear_x_max();
  static const int kXMaxFieldNumber = 3;
  float x_max() const;
  void set_x_max(float value);

  // required float y_max = 4;
  bool has_y_max() const;
  void clear_y_max();
  static const int kYMaxFieldNumber = 4;
  float y_max() const;
  void set_y_max(float value);

  // @@protoc_insertion_point(class_scope:caffe_ext.BBox)
 private:
  inline void set_has_x_min();
  inline void clear_has_x_min();
  inline void set_has_y_min();
  inline void clear_has_y_min();
  inline void set_has_x_max();
  inline void clear_has_x_max();
  inline void set_has_y_max();
  inline void clear_has_y_max();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float x_min_;
  float y_min_;
  float x_max_;
  float y_max_;
  friend void  protobuf_InitDefaults_caffe_5fextend_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_5fextend_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_5fextend_2eproto();
  friend void protobuf_ShutdownFile_caffe_5fextend_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<BBox> BBox_default_instance_;

// -------------------------------------------------------------------

class ImgBBoxAnnoDatum : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe_ext.ImgBBoxAnnoDatum) */ {
 public:
  ImgBBoxAnnoDatum();
  virtual ~ImgBBoxAnnoDatum();

  ImgBBoxAnnoDatum(const ImgBBoxAnnoDatum& from);

  inline ImgBBoxAnnoDatum& operator=(const ImgBBoxAnnoDatum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImgBBoxAnnoDatum& default_instance();

  static const ImgBBoxAnnoDatum* internal_default_instance();

  void Swap(ImgBBoxAnnoDatum* other);

  // implements Message ----------------------------------------------

  inline ImgBBoxAnnoDatum* New() const { return New(NULL); }

  ImgBBoxAnnoDatum* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImgBBoxAnnoDatum& from);
  void MergeFrom(const ImgBBoxAnnoDatum& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ImgBBoxAnnoDatum* other);
  void UnsafeMergeFrom(const ImgBBoxAnnoDatum& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .caffe.Datum img_datum = 1;
  bool has_img_datum() const;
  void clear_img_datum();
  static const int kImgDatumFieldNumber = 1;
  const ::caffe::Datum& img_datum() const;
  ::caffe::Datum* mutable_img_datum();
  ::caffe::Datum* release_img_datum();
  void set_allocated_img_datum(::caffe::Datum* img_datum);

  // repeated int32 labels = 2;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 2;
  ::google::protobuf::int32 labels(int index) const;
  void set_labels(int index, ::google::protobuf::int32 value);
  void add_labels(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      labels() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_labels();

  // repeated .caffe_ext.BBox bboxes = 3;
  int bboxes_size() const;
  void clear_bboxes();
  static const int kBboxesFieldNumber = 3;
  const ::caffe_ext::BBox& bboxes(int index) const;
  ::caffe_ext::BBox* mutable_bboxes(int index);
  ::caffe_ext::BBox* add_bboxes();
  ::google::protobuf::RepeatedPtrField< ::caffe_ext::BBox >*
      mutable_bboxes();
  const ::google::protobuf::RepeatedPtrField< ::caffe_ext::BBox >&
      bboxes() const;

  // @@protoc_insertion_point(class_scope:caffe_ext.ImgBBoxAnnoDatum)
 private:
  inline void set_has_img_datum();
  inline void clear_has_img_datum();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > labels_;
  ::google::protobuf::RepeatedPtrField< ::caffe_ext::BBox > bboxes_;
  ::caffe::Datum* img_datum_;
  friend void  protobuf_InitDefaults_caffe_5fextend_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_5fextend_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_5fextend_2eproto();
  friend void protobuf_ShutdownFile_caffe_5fextend_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ImgBBoxAnnoDatum> ImgBBoxAnnoDatum_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// BBox

// required float x_min = 1;
inline bool BBox::has_x_min() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BBox::set_has_x_min() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BBox::clear_has_x_min() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BBox::clear_x_min() {
  x_min_ = 0;
  clear_has_x_min();
}
inline float BBox::x_min() const {
  // @@protoc_insertion_point(field_get:caffe_ext.BBox.x_min)
  return x_min_;
}
inline void BBox::set_x_min(float value) {
  set_has_x_min();
  x_min_ = value;
  // @@protoc_insertion_point(field_set:caffe_ext.BBox.x_min)
}

// required float y_min = 2;
inline bool BBox::has_y_min() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BBox::set_has_y_min() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BBox::clear_has_y_min() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BBox::clear_y_min() {
  y_min_ = 0;
  clear_has_y_min();
}
inline float BBox::y_min() const {
  // @@protoc_insertion_point(field_get:caffe_ext.BBox.y_min)
  return y_min_;
}
inline void BBox::set_y_min(float value) {
  set_has_y_min();
  y_min_ = value;
  // @@protoc_insertion_point(field_set:caffe_ext.BBox.y_min)
}

// required float x_max = 3;
inline bool BBox::has_x_max() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BBox::set_has_x_max() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BBox::clear_has_x_max() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BBox::clear_x_max() {
  x_max_ = 0;
  clear_has_x_max();
}
inline float BBox::x_max() const {
  // @@protoc_insertion_point(field_get:caffe_ext.BBox.x_max)
  return x_max_;
}
inline void BBox::set_x_max(float value) {
  set_has_x_max();
  x_max_ = value;
  // @@protoc_insertion_point(field_set:caffe_ext.BBox.x_max)
}

// required float y_max = 4;
inline bool BBox::has_y_max() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BBox::set_has_y_max() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BBox::clear_has_y_max() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BBox::clear_y_max() {
  y_max_ = 0;
  clear_has_y_max();
}
inline float BBox::y_max() const {
  // @@protoc_insertion_point(field_get:caffe_ext.BBox.y_max)
  return y_max_;
}
inline void BBox::set_y_max(float value) {
  set_has_y_max();
  y_max_ = value;
  // @@protoc_insertion_point(field_set:caffe_ext.BBox.y_max)
}

inline const BBox* BBox::internal_default_instance() {
  return &BBox_default_instance_.get();
}
// -------------------------------------------------------------------

// ImgBBoxAnnoDatum

// required .caffe.Datum img_datum = 1;
inline bool ImgBBoxAnnoDatum::has_img_datum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImgBBoxAnnoDatum::set_has_img_datum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImgBBoxAnnoDatum::clear_has_img_datum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImgBBoxAnnoDatum::clear_img_datum() {
  if (img_datum_ != NULL) img_datum_->::caffe::Datum::Clear();
  clear_has_img_datum();
}
inline const ::caffe::Datum& ImgBBoxAnnoDatum::img_datum() const {
  // @@protoc_insertion_point(field_get:caffe_ext.ImgBBoxAnnoDatum.img_datum)
  return img_datum_ != NULL ? *img_datum_
                         : *::caffe::Datum::internal_default_instance();
}
inline ::caffe::Datum* ImgBBoxAnnoDatum::mutable_img_datum() {
  set_has_img_datum();
  if (img_datum_ == NULL) {
    img_datum_ = new ::caffe::Datum;
  }
  // @@protoc_insertion_point(field_mutable:caffe_ext.ImgBBoxAnnoDatum.img_datum)
  return img_datum_;
}
inline ::caffe::Datum* ImgBBoxAnnoDatum::release_img_datum() {
  // @@protoc_insertion_point(field_release:caffe_ext.ImgBBoxAnnoDatum.img_datum)
  clear_has_img_datum();
  ::caffe::Datum* temp = img_datum_;
  img_datum_ = NULL;
  return temp;
}
inline void ImgBBoxAnnoDatum::set_allocated_img_datum(::caffe::Datum* img_datum) {
  delete img_datum_;
  img_datum_ = img_datum;
  if (img_datum) {
    set_has_img_datum();
  } else {
    clear_has_img_datum();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe_ext.ImgBBoxAnnoDatum.img_datum)
}

// repeated int32 labels = 2;
inline int ImgBBoxAnnoDatum::labels_size() const {
  return labels_.size();
}
inline void ImgBBoxAnnoDatum::clear_labels() {
  labels_.Clear();
}
inline ::google::protobuf::int32 ImgBBoxAnnoDatum::labels(int index) const {
  // @@protoc_insertion_point(field_get:caffe_ext.ImgBBoxAnnoDatum.labels)
  return labels_.Get(index);
}
inline void ImgBBoxAnnoDatum::set_labels(int index, ::google::protobuf::int32 value) {
  labels_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe_ext.ImgBBoxAnnoDatum.labels)
}
inline void ImgBBoxAnnoDatum::add_labels(::google::protobuf::int32 value) {
  labels_.Add(value);
  // @@protoc_insertion_point(field_add:caffe_ext.ImgBBoxAnnoDatum.labels)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ImgBBoxAnnoDatum::labels() const {
  // @@protoc_insertion_point(field_list:caffe_ext.ImgBBoxAnnoDatum.labels)
  return labels_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ImgBBoxAnnoDatum::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:caffe_ext.ImgBBoxAnnoDatum.labels)
  return &labels_;
}

// repeated .caffe_ext.BBox bboxes = 3;
inline int ImgBBoxAnnoDatum::bboxes_size() const {
  return bboxes_.size();
}
inline void ImgBBoxAnnoDatum::clear_bboxes() {
  bboxes_.Clear();
}
inline const ::caffe_ext::BBox& ImgBBoxAnnoDatum::bboxes(int index) const {
  // @@protoc_insertion_point(field_get:caffe_ext.ImgBBoxAnnoDatum.bboxes)
  return bboxes_.Get(index);
}
inline ::caffe_ext::BBox* ImgBBoxAnnoDatum::mutable_bboxes(int index) {
  // @@protoc_insertion_point(field_mutable:caffe_ext.ImgBBoxAnnoDatum.bboxes)
  return bboxes_.Mutable(index);
}
inline ::caffe_ext::BBox* ImgBBoxAnnoDatum::add_bboxes() {
  // @@protoc_insertion_point(field_add:caffe_ext.ImgBBoxAnnoDatum.bboxes)
  return bboxes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe_ext::BBox >*
ImgBBoxAnnoDatum::mutable_bboxes() {
  // @@protoc_insertion_point(field_mutable_list:caffe_ext.ImgBBoxAnnoDatum.bboxes)
  return &bboxes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe_ext::BBox >&
ImgBBoxAnnoDatum::bboxes() const {
  // @@protoc_insertion_point(field_list:caffe_ext.ImgBBoxAnnoDatum.bboxes)
  return bboxes_;
}

inline const ImgBBoxAnnoDatum* ImgBBoxAnnoDatum::internal_default_instance() {
  return &ImgBBoxAnnoDatum_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace caffe_ext

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_caffe_5fextend_2eproto__INCLUDED
