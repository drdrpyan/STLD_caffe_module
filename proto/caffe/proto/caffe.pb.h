// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffe.proto

#ifndef PROTOBUF_caffe_2eproto__INCLUDED
#define PROTOBUF_caffe_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace caffe {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_caffe_2eproto();
void protobuf_InitDefaults_caffe_2eproto();
void protobuf_AssignDesc_caffe_2eproto();
void protobuf_ShutdownFile_caffe_2eproto();

class AccuracyParameter;
class ActivationRegionParameter;
class AnnoToSegParameter;
class ArgMaxParameter;
class AugmentationParameter;
class BBoxAnnoMapParameter;
class BBoxParameter;
class BBoxToGridAndSizeParameter;
class BGSynthesisDataParameter;
class BatchNormParameter;
class BatchRejectionParameter;
class BiasParameter;
class BlobProto;
class BlobProtoVector;
class BlobShape;
class BlurParameter;
class CheckParameter;
class ConcatParameter;
class ConfCheckParameter;
class ContrastiveLossParameter;
class ConvolutionParameter;
class CropParameter;
class DataParameter;
class Datum;
class DetectionCheckParameter;
class DropoutParameter;
class DummyDataParameter;
class ELUParameter;
class EltwiseParameter;
class EmbedParameter;
class ExpParameter;
class FillerParameter;
class FlattenParameter;
class GTMapDataParameter;
class GTSubmapDataParameter;
class GaussianNoiseParameter;
class GridProposalLossParameter;
class HDF5DataParameter;
class HDF5OutputParameter;
class HeatmapConcatParameter;
class HeatmapParameter;
class HingeLossParameter;
class ImageDataParameter;
class ImgBBoxAnnoDatum;
class ImgBBoxAnnoParameter;
class InfogainLossParameter;
class InnerProductParameter;
class InputParameter;
class LRNParameter;
class LabelDiffIgnoreParameter;
class LabelParameter;
class LabelRemapParameter;
class LayerParameter;
class LogParameter;
class LossParameter;
class MVNParameter;
class MeanSubParameter;
class MemoryDataParameter;
class MinibatchDataParameter;
class MirrorParameter;
class NetParameter;
class NetState;
class NetStateRule;
class OffsetParameter;
class PReLUParameter;
class PaddingParameter;
class ParamSpec;
class ParameterParameter;
class PatchDataParameter;
class PatchDatum;
class Point2f;
class Point2i;
class PoolingParameter;
class PowerParameter;
class PythonParameter;
class RandomResizeParameter;
class ReLUParameter;
class Rect2f;
class Rect2i;
class RecurrentParameter;
class ReductionParameter;
class ReorgParameter;
class ReshapeParameter;
class RowColProposalTransformParameter;
class SPPParameter;
class ScaleParameter;
class SigmoidParameter;
class Size2f;
class Size2i;
class SizeFilterParameter;
class SizeRejectionParameter;
class SizeUnitParameter;
class SliceParameter;
class SlidingWindowInputParameter;
class SoftmaxParameter;
class SolverParameter;
class SolverState;
class SubwinOffsetParameter;
class TanHParameter;
class ThresholdParameter;
class TileParameter;
class TopSubmapDataParameter;
class TrainROIParameter;
class TransformationParameter;
class V0LayerParameter;
class V1LayerParameter;
class WeightedSoftmaxLossParameter;
class WindowDataParameter;
class YOLOLikeLossParameter;
class YOLOV2LossParameter;
class YOLOV2ResultParameter;

enum LabelParameter_LabelParamConstant {
  LabelParameter_LabelParamConstant_DUMMY_LABEL = -1,
  LabelParameter_LabelParamConstant_NONE = 0
};
bool LabelParameter_LabelParamConstant_IsValid(int value);
const LabelParameter_LabelParamConstant LabelParameter_LabelParamConstant_LabelParamConstant_MIN = LabelParameter_LabelParamConstant_DUMMY_LABEL;
const LabelParameter_LabelParamConstant LabelParameter_LabelParamConstant_LabelParamConstant_MAX = LabelParameter_LabelParamConstant_NONE;
const int LabelParameter_LabelParamConstant_LabelParamConstant_ARRAYSIZE = LabelParameter_LabelParamConstant_LabelParamConstant_MAX + 1;

const ::google::protobuf::EnumDescriptor* LabelParameter_LabelParamConstant_descriptor();
inline const ::std::string& LabelParameter_LabelParamConstant_Name(LabelParameter_LabelParamConstant value) {
  return ::google::protobuf::internal::NameOfEnum(
    LabelParameter_LabelParamConstant_descriptor(), value);
}
inline bool LabelParameter_LabelParamConstant_Parse(
    const ::std::string& name, LabelParameter_LabelParamConstant* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LabelParameter_LabelParamConstant>(
    LabelParameter_LabelParamConstant_descriptor(), name, value);
}
enum BBoxParameter_BBoxType {
  BBoxParameter_BBoxType_FULL = 1,
  BBoxParameter_BBoxType_VERTICAL = 2,
  BBoxParameter_BBoxType_HORIZONTAL = 3,
  BBoxParameter_BBoxType_TEMPLATE = 4
};
bool BBoxParameter_BBoxType_IsValid(int value);
const BBoxParameter_BBoxType BBoxParameter_BBoxType_BBoxType_MIN = BBoxParameter_BBoxType_FULL;
const BBoxParameter_BBoxType BBoxParameter_BBoxType_BBoxType_MAX = BBoxParameter_BBoxType_TEMPLATE;
const int BBoxParameter_BBoxType_BBoxType_ARRAYSIZE = BBoxParameter_BBoxType_BBoxType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BBoxParameter_BBoxType_descriptor();
inline const ::std::string& BBoxParameter_BBoxType_Name(BBoxParameter_BBoxType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BBoxParameter_BBoxType_descriptor(), value);
}
inline bool BBoxParameter_BBoxType_Parse(
    const ::std::string& name, BBoxParameter_BBoxType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BBoxParameter_BBoxType>(
    BBoxParameter_BBoxType_descriptor(), name, value);
}
enum BBoxParameter_BBoxAnchor {
  BBoxParameter_BBoxAnchor_TOP_LEFT = 1,
  BBoxParameter_BBoxAnchor_CENTER = 2
};
bool BBoxParameter_BBoxAnchor_IsValid(int value);
const BBoxParameter_BBoxAnchor BBoxParameter_BBoxAnchor_BBoxAnchor_MIN = BBoxParameter_BBoxAnchor_TOP_LEFT;
const BBoxParameter_BBoxAnchor BBoxParameter_BBoxAnchor_BBoxAnchor_MAX = BBoxParameter_BBoxAnchor_CENTER;
const int BBoxParameter_BBoxAnchor_BBoxAnchor_ARRAYSIZE = BBoxParameter_BBoxAnchor_BBoxAnchor_MAX + 1;

const ::google::protobuf::EnumDescriptor* BBoxParameter_BBoxAnchor_descriptor();
inline const ::std::string& BBoxParameter_BBoxAnchor_Name(BBoxParameter_BBoxAnchor value) {
  return ::google::protobuf::internal::NameOfEnum(
    BBoxParameter_BBoxAnchor_descriptor(), value);
}
inline bool BBoxParameter_BBoxAnchor_Parse(
    const ::std::string& name, BBoxParameter_BBoxAnchor* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BBoxParameter_BBoxAnchor>(
    BBoxParameter_BBoxAnchor_descriptor(), name, value);
}
enum BBoxParameter_BBoxConstant {
  BBoxParameter_BBoxConstant_DUMMY_VALUE = -1
};
bool BBoxParameter_BBoxConstant_IsValid(int value);
const BBoxParameter_BBoxConstant BBoxParameter_BBoxConstant_BBoxConstant_MIN = BBoxParameter_BBoxConstant_DUMMY_VALUE;
const BBoxParameter_BBoxConstant BBoxParameter_BBoxConstant_BBoxConstant_MAX = BBoxParameter_BBoxConstant_DUMMY_VALUE;
const int BBoxParameter_BBoxConstant_BBoxConstant_ARRAYSIZE = BBoxParameter_BBoxConstant_BBoxConstant_MAX + 1;

const ::google::protobuf::EnumDescriptor* BBoxParameter_BBoxConstant_descriptor();
inline const ::std::string& BBoxParameter_BBoxConstant_Name(BBoxParameter_BBoxConstant value) {
  return ::google::protobuf::internal::NameOfEnum(
    BBoxParameter_BBoxConstant_descriptor(), value);
}
inline bool BBoxParameter_BBoxConstant_Parse(
    const ::std::string& name, BBoxParameter_BBoxConstant* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BBoxParameter_BBoxConstant>(
    BBoxParameter_BBoxConstant_descriptor(), name, value);
}
enum PaddingParameter_PaddingType {
  PaddingParameter_PaddingType_ZERO = 0,
  PaddingParameter_PaddingType_MIRROR = 1
};
bool PaddingParameter_PaddingType_IsValid(int value);
const PaddingParameter_PaddingType PaddingParameter_PaddingType_PaddingType_MIN = PaddingParameter_PaddingType_ZERO;
const PaddingParameter_PaddingType PaddingParameter_PaddingType_PaddingType_MAX = PaddingParameter_PaddingType_MIRROR;
const int PaddingParameter_PaddingType_PaddingType_ARRAYSIZE = PaddingParameter_PaddingType_PaddingType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PaddingParameter_PaddingType_descriptor();
inline const ::std::string& PaddingParameter_PaddingType_Name(PaddingParameter_PaddingType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PaddingParameter_PaddingType_descriptor(), value);
}
inline bool PaddingParameter_PaddingType_Parse(
    const ::std::string& name, PaddingParameter_PaddingType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PaddingParameter_PaddingType>(
    PaddingParameter_PaddingType_descriptor(), name, value);
}
enum ActivationRegionParameter_ActivationMethod {
  ActivationRegionParameter_ActivationMethod_WHOLE = 1,
  ActivationRegionParameter_ActivationMethod_ANY = 2,
  ActivationRegionParameter_ActivationMethod_CENTER = 3
};
bool ActivationRegionParameter_ActivationMethod_IsValid(int value);
const ActivationRegionParameter_ActivationMethod ActivationRegionParameter_ActivationMethod_ActivationMethod_MIN = ActivationRegionParameter_ActivationMethod_WHOLE;
const ActivationRegionParameter_ActivationMethod ActivationRegionParameter_ActivationMethod_ActivationMethod_MAX = ActivationRegionParameter_ActivationMethod_CENTER;
const int ActivationRegionParameter_ActivationMethod_ActivationMethod_ARRAYSIZE = ActivationRegionParameter_ActivationMethod_ActivationMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* ActivationRegionParameter_ActivationMethod_descriptor();
inline const ::std::string& ActivationRegionParameter_ActivationMethod_Name(ActivationRegionParameter_ActivationMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    ActivationRegionParameter_ActivationMethod_descriptor(), value);
}
inline bool ActivationRegionParameter_ActivationMethod_Parse(
    const ::std::string& name, ActivationRegionParameter_ActivationMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActivationRegionParameter_ActivationMethod>(
    ActivationRegionParameter_ActivationMethod_descriptor(), name, value);
}
enum OffsetParameter_Anchor {
  OffsetParameter_Anchor_TOP_LEFT = 1,
  OffsetParameter_Anchor_CENTER = 2
};
bool OffsetParameter_Anchor_IsValid(int value);
const OffsetParameter_Anchor OffsetParameter_Anchor_Anchor_MIN = OffsetParameter_Anchor_TOP_LEFT;
const OffsetParameter_Anchor OffsetParameter_Anchor_Anchor_MAX = OffsetParameter_Anchor_CENTER;
const int OffsetParameter_Anchor_Anchor_ARRAYSIZE = OffsetParameter_Anchor_Anchor_MAX + 1;

const ::google::protobuf::EnumDescriptor* OffsetParameter_Anchor_descriptor();
inline const ::std::string& OffsetParameter_Anchor_Name(OffsetParameter_Anchor value) {
  return ::google::protobuf::internal::NameOfEnum(
    OffsetParameter_Anchor_descriptor(), value);
}
inline bool OffsetParameter_Anchor_Parse(
    const ::std::string& name, OffsetParameter_Anchor* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OffsetParameter_Anchor>(
    OffsetParameter_Anchor_descriptor(), name, value);
}
enum FillerParameter_VarianceNorm {
  FillerParameter_VarianceNorm_FAN_IN = 0,
  FillerParameter_VarianceNorm_FAN_OUT = 1,
  FillerParameter_VarianceNorm_AVERAGE = 2
};
bool FillerParameter_VarianceNorm_IsValid(int value);
const FillerParameter_VarianceNorm FillerParameter_VarianceNorm_VarianceNorm_MIN = FillerParameter_VarianceNorm_FAN_IN;
const FillerParameter_VarianceNorm FillerParameter_VarianceNorm_VarianceNorm_MAX = FillerParameter_VarianceNorm_AVERAGE;
const int FillerParameter_VarianceNorm_VarianceNorm_ARRAYSIZE = FillerParameter_VarianceNorm_VarianceNorm_MAX + 1;

const ::google::protobuf::EnumDescriptor* FillerParameter_VarianceNorm_descriptor();
inline const ::std::string& FillerParameter_VarianceNorm_Name(FillerParameter_VarianceNorm value) {
  return ::google::protobuf::internal::NameOfEnum(
    FillerParameter_VarianceNorm_descriptor(), value);
}
inline bool FillerParameter_VarianceNorm_Parse(
    const ::std::string& name, FillerParameter_VarianceNorm* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FillerParameter_VarianceNorm>(
    FillerParameter_VarianceNorm_descriptor(), name, value);
}
enum SolverParameter_SnapshotFormat {
  SolverParameter_SnapshotFormat_HDF5 = 0,
  SolverParameter_SnapshotFormat_BINARYPROTO = 1
};
bool SolverParameter_SnapshotFormat_IsValid(int value);
const SolverParameter_SnapshotFormat SolverParameter_SnapshotFormat_SnapshotFormat_MIN = SolverParameter_SnapshotFormat_HDF5;
const SolverParameter_SnapshotFormat SolverParameter_SnapshotFormat_SnapshotFormat_MAX = SolverParameter_SnapshotFormat_BINARYPROTO;
const int SolverParameter_SnapshotFormat_SnapshotFormat_ARRAYSIZE = SolverParameter_SnapshotFormat_SnapshotFormat_MAX + 1;

const ::google::protobuf::EnumDescriptor* SolverParameter_SnapshotFormat_descriptor();
inline const ::std::string& SolverParameter_SnapshotFormat_Name(SolverParameter_SnapshotFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    SolverParameter_SnapshotFormat_descriptor(), value);
}
inline bool SolverParameter_SnapshotFormat_Parse(
    const ::std::string& name, SolverParameter_SnapshotFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SolverParameter_SnapshotFormat>(
    SolverParameter_SnapshotFormat_descriptor(), name, value);
}
enum SolverParameter_SolverMode {
  SolverParameter_SolverMode_CPU = 0,
  SolverParameter_SolverMode_GPU = 1
};
bool SolverParameter_SolverMode_IsValid(int value);
const SolverParameter_SolverMode SolverParameter_SolverMode_SolverMode_MIN = SolverParameter_SolverMode_CPU;
const SolverParameter_SolverMode SolverParameter_SolverMode_SolverMode_MAX = SolverParameter_SolverMode_GPU;
const int SolverParameter_SolverMode_SolverMode_ARRAYSIZE = SolverParameter_SolverMode_SolverMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* SolverParameter_SolverMode_descriptor();
inline const ::std::string& SolverParameter_SolverMode_Name(SolverParameter_SolverMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    SolverParameter_SolverMode_descriptor(), value);
}
inline bool SolverParameter_SolverMode_Parse(
    const ::std::string& name, SolverParameter_SolverMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SolverParameter_SolverMode>(
    SolverParameter_SolverMode_descriptor(), name, value);
}
enum SolverParameter_SolverType {
  SolverParameter_SolverType_SGD = 0,
  SolverParameter_SolverType_NESTEROV = 1,
  SolverParameter_SolverType_ADAGRAD = 2,
  SolverParameter_SolverType_RMSPROP = 3,
  SolverParameter_SolverType_ADADELTA = 4,
  SolverParameter_SolverType_ADAM = 5
};
bool SolverParameter_SolverType_IsValid(int value);
const SolverParameter_SolverType SolverParameter_SolverType_SolverType_MIN = SolverParameter_SolverType_SGD;
const SolverParameter_SolverType SolverParameter_SolverType_SolverType_MAX = SolverParameter_SolverType_ADAM;
const int SolverParameter_SolverType_SolverType_ARRAYSIZE = SolverParameter_SolverType_SolverType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SolverParameter_SolverType_descriptor();
inline const ::std::string& SolverParameter_SolverType_Name(SolverParameter_SolverType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SolverParameter_SolverType_descriptor(), value);
}
inline bool SolverParameter_SolverType_Parse(
    const ::std::string& name, SolverParameter_SolverType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SolverParameter_SolverType>(
    SolverParameter_SolverType_descriptor(), name, value);
}
enum ParamSpec_DimCheckMode {
  ParamSpec_DimCheckMode_STRICT = 0,
  ParamSpec_DimCheckMode_PERMISSIVE = 1
};
bool ParamSpec_DimCheckMode_IsValid(int value);
const ParamSpec_DimCheckMode ParamSpec_DimCheckMode_DimCheckMode_MIN = ParamSpec_DimCheckMode_STRICT;
const ParamSpec_DimCheckMode ParamSpec_DimCheckMode_DimCheckMode_MAX = ParamSpec_DimCheckMode_PERMISSIVE;
const int ParamSpec_DimCheckMode_DimCheckMode_ARRAYSIZE = ParamSpec_DimCheckMode_DimCheckMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ParamSpec_DimCheckMode_descriptor();
inline const ::std::string& ParamSpec_DimCheckMode_Name(ParamSpec_DimCheckMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ParamSpec_DimCheckMode_descriptor(), value);
}
inline bool ParamSpec_DimCheckMode_Parse(
    const ::std::string& name, ParamSpec_DimCheckMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ParamSpec_DimCheckMode>(
    ParamSpec_DimCheckMode_descriptor(), name, value);
}
enum LossParameter_NormalizationMode {
  LossParameter_NormalizationMode_FULL = 0,
  LossParameter_NormalizationMode_VALID = 1,
  LossParameter_NormalizationMode_BATCH_SIZE = 2,
  LossParameter_NormalizationMode_NONE = 3
};
bool LossParameter_NormalizationMode_IsValid(int value);
const LossParameter_NormalizationMode LossParameter_NormalizationMode_NormalizationMode_MIN = LossParameter_NormalizationMode_FULL;
const LossParameter_NormalizationMode LossParameter_NormalizationMode_NormalizationMode_MAX = LossParameter_NormalizationMode_NONE;
const int LossParameter_NormalizationMode_NormalizationMode_ARRAYSIZE = LossParameter_NormalizationMode_NormalizationMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* LossParameter_NormalizationMode_descriptor();
inline const ::std::string& LossParameter_NormalizationMode_Name(LossParameter_NormalizationMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    LossParameter_NormalizationMode_descriptor(), value);
}
inline bool LossParameter_NormalizationMode_Parse(
    const ::std::string& name, LossParameter_NormalizationMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LossParameter_NormalizationMode>(
    LossParameter_NormalizationMode_descriptor(), name, value);
}
enum ConvolutionParameter_Engine {
  ConvolutionParameter_Engine_DEFAULT = 0,
  ConvolutionParameter_Engine_CAFFE = 1,
  ConvolutionParameter_Engine_CUDNN = 2
};
bool ConvolutionParameter_Engine_IsValid(int value);
const ConvolutionParameter_Engine ConvolutionParameter_Engine_Engine_MIN = ConvolutionParameter_Engine_DEFAULT;
const ConvolutionParameter_Engine ConvolutionParameter_Engine_Engine_MAX = ConvolutionParameter_Engine_CUDNN;
const int ConvolutionParameter_Engine_Engine_ARRAYSIZE = ConvolutionParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* ConvolutionParameter_Engine_descriptor();
inline const ::std::string& ConvolutionParameter_Engine_Name(ConvolutionParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConvolutionParameter_Engine_descriptor(), value);
}
inline bool ConvolutionParameter_Engine_Parse(
    const ::std::string& name, ConvolutionParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConvolutionParameter_Engine>(
    ConvolutionParameter_Engine_descriptor(), name, value);
}
enum DataParameter_DB {
  DataParameter_DB_LEVELDB = 0,
  DataParameter_DB_LMDB = 1
};
bool DataParameter_DB_IsValid(int value);
const DataParameter_DB DataParameter_DB_DB_MIN = DataParameter_DB_LEVELDB;
const DataParameter_DB DataParameter_DB_DB_MAX = DataParameter_DB_LMDB;
const int DataParameter_DB_DB_ARRAYSIZE = DataParameter_DB_DB_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataParameter_DB_descriptor();
inline const ::std::string& DataParameter_DB_Name(DataParameter_DB value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataParameter_DB_descriptor(), value);
}
inline bool DataParameter_DB_Parse(
    const ::std::string& name, DataParameter_DB* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataParameter_DB>(
    DataParameter_DB_descriptor(), name, value);
}
enum EltwiseParameter_EltwiseOp {
  EltwiseParameter_EltwiseOp_PROD = 0,
  EltwiseParameter_EltwiseOp_SUM = 1,
  EltwiseParameter_EltwiseOp_MAX = 2
};
bool EltwiseParameter_EltwiseOp_IsValid(int value);
const EltwiseParameter_EltwiseOp EltwiseParameter_EltwiseOp_EltwiseOp_MIN = EltwiseParameter_EltwiseOp_PROD;
const EltwiseParameter_EltwiseOp EltwiseParameter_EltwiseOp_EltwiseOp_MAX = EltwiseParameter_EltwiseOp_MAX;
const int EltwiseParameter_EltwiseOp_EltwiseOp_ARRAYSIZE = EltwiseParameter_EltwiseOp_EltwiseOp_MAX + 1;

const ::google::protobuf::EnumDescriptor* EltwiseParameter_EltwiseOp_descriptor();
inline const ::std::string& EltwiseParameter_EltwiseOp_Name(EltwiseParameter_EltwiseOp value) {
  return ::google::protobuf::internal::NameOfEnum(
    EltwiseParameter_EltwiseOp_descriptor(), value);
}
inline bool EltwiseParameter_EltwiseOp_Parse(
    const ::std::string& name, EltwiseParameter_EltwiseOp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EltwiseParameter_EltwiseOp>(
    EltwiseParameter_EltwiseOp_descriptor(), name, value);
}
enum HingeLossParameter_Norm {
  HingeLossParameter_Norm_L1 = 1,
  HingeLossParameter_Norm_L2 = 2
};
bool HingeLossParameter_Norm_IsValid(int value);
const HingeLossParameter_Norm HingeLossParameter_Norm_Norm_MIN = HingeLossParameter_Norm_L1;
const HingeLossParameter_Norm HingeLossParameter_Norm_Norm_MAX = HingeLossParameter_Norm_L2;
const int HingeLossParameter_Norm_Norm_ARRAYSIZE = HingeLossParameter_Norm_Norm_MAX + 1;

const ::google::protobuf::EnumDescriptor* HingeLossParameter_Norm_descriptor();
inline const ::std::string& HingeLossParameter_Norm_Name(HingeLossParameter_Norm value) {
  return ::google::protobuf::internal::NameOfEnum(
    HingeLossParameter_Norm_descriptor(), value);
}
inline bool HingeLossParameter_Norm_Parse(
    const ::std::string& name, HingeLossParameter_Norm* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HingeLossParameter_Norm>(
    HingeLossParameter_Norm_descriptor(), name, value);
}
enum LRNParameter_NormRegion {
  LRNParameter_NormRegion_ACROSS_CHANNELS = 0,
  LRNParameter_NormRegion_WITHIN_CHANNEL = 1
};
bool LRNParameter_NormRegion_IsValid(int value);
const LRNParameter_NormRegion LRNParameter_NormRegion_NormRegion_MIN = LRNParameter_NormRegion_ACROSS_CHANNELS;
const LRNParameter_NormRegion LRNParameter_NormRegion_NormRegion_MAX = LRNParameter_NormRegion_WITHIN_CHANNEL;
const int LRNParameter_NormRegion_NormRegion_ARRAYSIZE = LRNParameter_NormRegion_NormRegion_MAX + 1;

const ::google::protobuf::EnumDescriptor* LRNParameter_NormRegion_descriptor();
inline const ::std::string& LRNParameter_NormRegion_Name(LRNParameter_NormRegion value) {
  return ::google::protobuf::internal::NameOfEnum(
    LRNParameter_NormRegion_descriptor(), value);
}
inline bool LRNParameter_NormRegion_Parse(
    const ::std::string& name, LRNParameter_NormRegion* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LRNParameter_NormRegion>(
    LRNParameter_NormRegion_descriptor(), name, value);
}
enum LRNParameter_Engine {
  LRNParameter_Engine_DEFAULT = 0,
  LRNParameter_Engine_CAFFE = 1,
  LRNParameter_Engine_CUDNN = 2
};
bool LRNParameter_Engine_IsValid(int value);
const LRNParameter_Engine LRNParameter_Engine_Engine_MIN = LRNParameter_Engine_DEFAULT;
const LRNParameter_Engine LRNParameter_Engine_Engine_MAX = LRNParameter_Engine_CUDNN;
const int LRNParameter_Engine_Engine_ARRAYSIZE = LRNParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* LRNParameter_Engine_descriptor();
inline const ::std::string& LRNParameter_Engine_Name(LRNParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    LRNParameter_Engine_descriptor(), value);
}
inline bool LRNParameter_Engine_Parse(
    const ::std::string& name, LRNParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LRNParameter_Engine>(
    LRNParameter_Engine_descriptor(), name, value);
}
enum PoolingParameter_PoolMethod {
  PoolingParameter_PoolMethod_MAX = 0,
  PoolingParameter_PoolMethod_AVE = 1,
  PoolingParameter_PoolMethod_STOCHASTIC = 2
};
bool PoolingParameter_PoolMethod_IsValid(int value);
const PoolingParameter_PoolMethod PoolingParameter_PoolMethod_PoolMethod_MIN = PoolingParameter_PoolMethod_MAX;
const PoolingParameter_PoolMethod PoolingParameter_PoolMethod_PoolMethod_MAX = PoolingParameter_PoolMethod_STOCHASTIC;
const int PoolingParameter_PoolMethod_PoolMethod_ARRAYSIZE = PoolingParameter_PoolMethod_PoolMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* PoolingParameter_PoolMethod_descriptor();
inline const ::std::string& PoolingParameter_PoolMethod_Name(PoolingParameter_PoolMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    PoolingParameter_PoolMethod_descriptor(), value);
}
inline bool PoolingParameter_PoolMethod_Parse(
    const ::std::string& name, PoolingParameter_PoolMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PoolingParameter_PoolMethod>(
    PoolingParameter_PoolMethod_descriptor(), name, value);
}
enum PoolingParameter_Engine {
  PoolingParameter_Engine_DEFAULT = 0,
  PoolingParameter_Engine_CAFFE = 1,
  PoolingParameter_Engine_CUDNN = 2
};
bool PoolingParameter_Engine_IsValid(int value);
const PoolingParameter_Engine PoolingParameter_Engine_Engine_MIN = PoolingParameter_Engine_DEFAULT;
const PoolingParameter_Engine PoolingParameter_Engine_Engine_MAX = PoolingParameter_Engine_CUDNN;
const int PoolingParameter_Engine_Engine_ARRAYSIZE = PoolingParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* PoolingParameter_Engine_descriptor();
inline const ::std::string& PoolingParameter_Engine_Name(PoolingParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    PoolingParameter_Engine_descriptor(), value);
}
inline bool PoolingParameter_Engine_Parse(
    const ::std::string& name, PoolingParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PoolingParameter_Engine>(
    PoolingParameter_Engine_descriptor(), name, value);
}
enum ReductionParameter_ReductionOp {
  ReductionParameter_ReductionOp_SUM = 1,
  ReductionParameter_ReductionOp_ASUM = 2,
  ReductionParameter_ReductionOp_SUMSQ = 3,
  ReductionParameter_ReductionOp_MEAN = 4
};
bool ReductionParameter_ReductionOp_IsValid(int value);
const ReductionParameter_ReductionOp ReductionParameter_ReductionOp_ReductionOp_MIN = ReductionParameter_ReductionOp_SUM;
const ReductionParameter_ReductionOp ReductionParameter_ReductionOp_ReductionOp_MAX = ReductionParameter_ReductionOp_MEAN;
const int ReductionParameter_ReductionOp_ReductionOp_ARRAYSIZE = ReductionParameter_ReductionOp_ReductionOp_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReductionParameter_ReductionOp_descriptor();
inline const ::std::string& ReductionParameter_ReductionOp_Name(ReductionParameter_ReductionOp value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReductionParameter_ReductionOp_descriptor(), value);
}
inline bool ReductionParameter_ReductionOp_Parse(
    const ::std::string& name, ReductionParameter_ReductionOp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReductionParameter_ReductionOp>(
    ReductionParameter_ReductionOp_descriptor(), name, value);
}
enum ReLUParameter_Engine {
  ReLUParameter_Engine_DEFAULT = 0,
  ReLUParameter_Engine_CAFFE = 1,
  ReLUParameter_Engine_CUDNN = 2
};
bool ReLUParameter_Engine_IsValid(int value);
const ReLUParameter_Engine ReLUParameter_Engine_Engine_MIN = ReLUParameter_Engine_DEFAULT;
const ReLUParameter_Engine ReLUParameter_Engine_Engine_MAX = ReLUParameter_Engine_CUDNN;
const int ReLUParameter_Engine_Engine_ARRAYSIZE = ReLUParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReLUParameter_Engine_descriptor();
inline const ::std::string& ReLUParameter_Engine_Name(ReLUParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReLUParameter_Engine_descriptor(), value);
}
inline bool ReLUParameter_Engine_Parse(
    const ::std::string& name, ReLUParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReLUParameter_Engine>(
    ReLUParameter_Engine_descriptor(), name, value);
}
enum SigmoidParameter_Engine {
  SigmoidParameter_Engine_DEFAULT = 0,
  SigmoidParameter_Engine_CAFFE = 1,
  SigmoidParameter_Engine_CUDNN = 2
};
bool SigmoidParameter_Engine_IsValid(int value);
const SigmoidParameter_Engine SigmoidParameter_Engine_Engine_MIN = SigmoidParameter_Engine_DEFAULT;
const SigmoidParameter_Engine SigmoidParameter_Engine_Engine_MAX = SigmoidParameter_Engine_CUDNN;
const int SigmoidParameter_Engine_Engine_ARRAYSIZE = SigmoidParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* SigmoidParameter_Engine_descriptor();
inline const ::std::string& SigmoidParameter_Engine_Name(SigmoidParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    SigmoidParameter_Engine_descriptor(), value);
}
inline bool SigmoidParameter_Engine_Parse(
    const ::std::string& name, SigmoidParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SigmoidParameter_Engine>(
    SigmoidParameter_Engine_descriptor(), name, value);
}
enum SoftmaxParameter_Engine {
  SoftmaxParameter_Engine_DEFAULT = 0,
  SoftmaxParameter_Engine_CAFFE = 1,
  SoftmaxParameter_Engine_CUDNN = 2
};
bool SoftmaxParameter_Engine_IsValid(int value);
const SoftmaxParameter_Engine SoftmaxParameter_Engine_Engine_MIN = SoftmaxParameter_Engine_DEFAULT;
const SoftmaxParameter_Engine SoftmaxParameter_Engine_Engine_MAX = SoftmaxParameter_Engine_CUDNN;
const int SoftmaxParameter_Engine_Engine_ARRAYSIZE = SoftmaxParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* SoftmaxParameter_Engine_descriptor();
inline const ::std::string& SoftmaxParameter_Engine_Name(SoftmaxParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    SoftmaxParameter_Engine_descriptor(), value);
}
inline bool SoftmaxParameter_Engine_Parse(
    const ::std::string& name, SoftmaxParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SoftmaxParameter_Engine>(
    SoftmaxParameter_Engine_descriptor(), name, value);
}
enum TanHParameter_Engine {
  TanHParameter_Engine_DEFAULT = 0,
  TanHParameter_Engine_CAFFE = 1,
  TanHParameter_Engine_CUDNN = 2
};
bool TanHParameter_Engine_IsValid(int value);
const TanHParameter_Engine TanHParameter_Engine_Engine_MIN = TanHParameter_Engine_DEFAULT;
const TanHParameter_Engine TanHParameter_Engine_Engine_MAX = TanHParameter_Engine_CUDNN;
const int TanHParameter_Engine_Engine_ARRAYSIZE = TanHParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* TanHParameter_Engine_descriptor();
inline const ::std::string& TanHParameter_Engine_Name(TanHParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    TanHParameter_Engine_descriptor(), value);
}
inline bool TanHParameter_Engine_Parse(
    const ::std::string& name, TanHParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TanHParameter_Engine>(
    TanHParameter_Engine_descriptor(), name, value);
}
enum SPPParameter_PoolMethod {
  SPPParameter_PoolMethod_MAX = 0,
  SPPParameter_PoolMethod_AVE = 1,
  SPPParameter_PoolMethod_STOCHASTIC = 2
};
bool SPPParameter_PoolMethod_IsValid(int value);
const SPPParameter_PoolMethod SPPParameter_PoolMethod_PoolMethod_MIN = SPPParameter_PoolMethod_MAX;
const SPPParameter_PoolMethod SPPParameter_PoolMethod_PoolMethod_MAX = SPPParameter_PoolMethod_STOCHASTIC;
const int SPPParameter_PoolMethod_PoolMethod_ARRAYSIZE = SPPParameter_PoolMethod_PoolMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* SPPParameter_PoolMethod_descriptor();
inline const ::std::string& SPPParameter_PoolMethod_Name(SPPParameter_PoolMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    SPPParameter_PoolMethod_descriptor(), value);
}
inline bool SPPParameter_PoolMethod_Parse(
    const ::std::string& name, SPPParameter_PoolMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SPPParameter_PoolMethod>(
    SPPParameter_PoolMethod_descriptor(), name, value);
}
enum SPPParameter_Engine {
  SPPParameter_Engine_DEFAULT = 0,
  SPPParameter_Engine_CAFFE = 1,
  SPPParameter_Engine_CUDNN = 2
};
bool SPPParameter_Engine_IsValid(int value);
const SPPParameter_Engine SPPParameter_Engine_Engine_MIN = SPPParameter_Engine_DEFAULT;
const SPPParameter_Engine SPPParameter_Engine_Engine_MAX = SPPParameter_Engine_CUDNN;
const int SPPParameter_Engine_Engine_ARRAYSIZE = SPPParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* SPPParameter_Engine_descriptor();
inline const ::std::string& SPPParameter_Engine_Name(SPPParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    SPPParameter_Engine_descriptor(), value);
}
inline bool SPPParameter_Engine_Parse(
    const ::std::string& name, SPPParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SPPParameter_Engine>(
    SPPParameter_Engine_descriptor(), name, value);
}
enum V1LayerParameter_LayerType {
  V1LayerParameter_LayerType_NONE = 0,
  V1LayerParameter_LayerType_ABSVAL = 35,
  V1LayerParameter_LayerType_ACCURACY = 1,
  V1LayerParameter_LayerType_ARGMAX = 30,
  V1LayerParameter_LayerType_BNLL = 2,
  V1LayerParameter_LayerType_CONCAT = 3,
  V1LayerParameter_LayerType_CONTRASTIVE_LOSS = 37,
  V1LayerParameter_LayerType_CONVOLUTION = 4,
  V1LayerParameter_LayerType_DATA = 5,
  V1LayerParameter_LayerType_DECONVOLUTION = 39,
  V1LayerParameter_LayerType_DROPOUT = 6,
  V1LayerParameter_LayerType_DUMMY_DATA = 32,
  V1LayerParameter_LayerType_EUCLIDEAN_LOSS = 7,
  V1LayerParameter_LayerType_ELTWISE = 25,
  V1LayerParameter_LayerType_EXP = 38,
  V1LayerParameter_LayerType_FLATTEN = 8,
  V1LayerParameter_LayerType_HDF5_DATA = 9,
  V1LayerParameter_LayerType_HDF5_OUTPUT = 10,
  V1LayerParameter_LayerType_HINGE_LOSS = 28,
  V1LayerParameter_LayerType_IM2COL = 11,
  V1LayerParameter_LayerType_IMAGE_DATA = 12,
  V1LayerParameter_LayerType_INFOGAIN_LOSS = 13,
  V1LayerParameter_LayerType_INNER_PRODUCT = 14,
  V1LayerParameter_LayerType_LRN = 15,
  V1LayerParameter_LayerType_MEMORY_DATA = 29,
  V1LayerParameter_LayerType_MULTINOMIAL_LOGISTIC_LOSS = 16,
  V1LayerParameter_LayerType_MVN = 34,
  V1LayerParameter_LayerType_POOLING = 17,
  V1LayerParameter_LayerType_POWER = 26,
  V1LayerParameter_LayerType_RELU = 18,
  V1LayerParameter_LayerType_SIGMOID = 19,
  V1LayerParameter_LayerType_SIGMOID_CROSS_ENTROPY_LOSS = 27,
  V1LayerParameter_LayerType_SILENCE = 36,
  V1LayerParameter_LayerType_SOFTMAX = 20,
  V1LayerParameter_LayerType_SOFTMAX_LOSS = 21,
  V1LayerParameter_LayerType_SPLIT = 22,
  V1LayerParameter_LayerType_SLICE = 33,
  V1LayerParameter_LayerType_TANH = 23,
  V1LayerParameter_LayerType_WINDOW_DATA = 24,
  V1LayerParameter_LayerType_THRESHOLD = 31
};
bool V1LayerParameter_LayerType_IsValid(int value);
const V1LayerParameter_LayerType V1LayerParameter_LayerType_LayerType_MIN = V1LayerParameter_LayerType_NONE;
const V1LayerParameter_LayerType V1LayerParameter_LayerType_LayerType_MAX = V1LayerParameter_LayerType_DECONVOLUTION;
const int V1LayerParameter_LayerType_LayerType_ARRAYSIZE = V1LayerParameter_LayerType_LayerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* V1LayerParameter_LayerType_descriptor();
inline const ::std::string& V1LayerParameter_LayerType_Name(V1LayerParameter_LayerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    V1LayerParameter_LayerType_descriptor(), value);
}
inline bool V1LayerParameter_LayerType_Parse(
    const ::std::string& name, V1LayerParameter_LayerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<V1LayerParameter_LayerType>(
    V1LayerParameter_LayerType_descriptor(), name, value);
}
enum V1LayerParameter_DimCheckMode {
  V1LayerParameter_DimCheckMode_STRICT = 0,
  V1LayerParameter_DimCheckMode_PERMISSIVE = 1
};
bool V1LayerParameter_DimCheckMode_IsValid(int value);
const V1LayerParameter_DimCheckMode V1LayerParameter_DimCheckMode_DimCheckMode_MIN = V1LayerParameter_DimCheckMode_STRICT;
const V1LayerParameter_DimCheckMode V1LayerParameter_DimCheckMode_DimCheckMode_MAX = V1LayerParameter_DimCheckMode_PERMISSIVE;
const int V1LayerParameter_DimCheckMode_DimCheckMode_ARRAYSIZE = V1LayerParameter_DimCheckMode_DimCheckMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* V1LayerParameter_DimCheckMode_descriptor();
inline const ::std::string& V1LayerParameter_DimCheckMode_Name(V1LayerParameter_DimCheckMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    V1LayerParameter_DimCheckMode_descriptor(), value);
}
inline bool V1LayerParameter_DimCheckMode_Parse(
    const ::std::string& name, V1LayerParameter_DimCheckMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<V1LayerParameter_DimCheckMode>(
    V1LayerParameter_DimCheckMode_descriptor(), name, value);
}
enum V0LayerParameter_PoolMethod {
  V0LayerParameter_PoolMethod_MAX = 0,
  V0LayerParameter_PoolMethod_AVE = 1,
  V0LayerParameter_PoolMethod_STOCHASTIC = 2
};
bool V0LayerParameter_PoolMethod_IsValid(int value);
const V0LayerParameter_PoolMethod V0LayerParameter_PoolMethod_PoolMethod_MIN = V0LayerParameter_PoolMethod_MAX;
const V0LayerParameter_PoolMethod V0LayerParameter_PoolMethod_PoolMethod_MAX = V0LayerParameter_PoolMethod_STOCHASTIC;
const int V0LayerParameter_PoolMethod_PoolMethod_ARRAYSIZE = V0LayerParameter_PoolMethod_PoolMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* V0LayerParameter_PoolMethod_descriptor();
inline const ::std::string& V0LayerParameter_PoolMethod_Name(V0LayerParameter_PoolMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    V0LayerParameter_PoolMethod_descriptor(), value);
}
inline bool V0LayerParameter_PoolMethod_Parse(
    const ::std::string& name, V0LayerParameter_PoolMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<V0LayerParameter_PoolMethod>(
    V0LayerParameter_PoolMethod_descriptor(), name, value);
}
enum Phase {
  TRAIN = 0,
  TEST = 1
};
bool Phase_IsValid(int value);
const Phase Phase_MIN = TRAIN;
const Phase Phase_MAX = TEST;
const int Phase_ARRAYSIZE = Phase_MAX + 1;

const ::google::protobuf::EnumDescriptor* Phase_descriptor();
inline const ::std::string& Phase_Name(Phase value) {
  return ::google::protobuf::internal::NameOfEnum(
    Phase_descriptor(), value);
}
inline bool Phase_Parse(
    const ::std::string& name, Phase* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Phase>(
    Phase_descriptor(), name, value);
}
// ===================================================================

class ImgBBoxAnnoDatum : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ImgBBoxAnnoDatum) */ {
 public:
  ImgBBoxAnnoDatum();
  virtual ~ImgBBoxAnnoDatum();

  ImgBBoxAnnoDatum(const ImgBBoxAnnoDatum& from);

  inline ImgBBoxAnnoDatum& operator=(const ImgBBoxAnnoDatum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImgBBoxAnnoDatum& default_instance();

  static const ImgBBoxAnnoDatum* internal_default_instance();

  void Swap(ImgBBoxAnnoDatum* other);

  // implements Message ----------------------------------------------

  inline ImgBBoxAnnoDatum* New() const { return New(NULL); }

  ImgBBoxAnnoDatum* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImgBBoxAnnoDatum& from);
  void MergeFrom(const ImgBBoxAnnoDatum& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ImgBBoxAnnoDatum* other);
  void UnsafeMergeFrom(const ImgBBoxAnnoDatum& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .caffe.Datum img_datum = 1;
  bool has_img_datum() const;
  void clear_img_datum();
  static const int kImgDatumFieldNumber = 1;
  const ::caffe::Datum& img_datum() const;
  ::caffe::Datum* mutable_img_datum();
  ::caffe::Datum* release_img_datum();
  void set_allocated_img_datum(::caffe::Datum* img_datum);

  // repeated int32 label = 2;
  int label_size() const;
  void clear_label();
  static const int kLabelFieldNumber = 2;
  ::google::protobuf::int32 label(int index) const;
  void set_label(int index, ::google::protobuf::int32 value);
  void add_label(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      label() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_label();

  // repeated float x_min = 3;
  int x_min_size() const;
  void clear_x_min();
  static const int kXMinFieldNumber = 3;
  float x_min(int index) const;
  void set_x_min(int index, float value);
  void add_x_min(float value);
  const ::google::protobuf::RepeatedField< float >&
      x_min() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_x_min();

  // repeated float y_min = 4;
  int y_min_size() const;
  void clear_y_min();
  static const int kYMinFieldNumber = 4;
  float y_min(int index) const;
  void set_y_min(int index, float value);
  void add_y_min(float value);
  const ::google::protobuf::RepeatedField< float >&
      y_min() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_y_min();

  // repeated float x_max = 5;
  int x_max_size() const;
  void clear_x_max();
  static const int kXMaxFieldNumber = 5;
  float x_max(int index) const;
  void set_x_max(int index, float value);
  void add_x_max(float value);
  const ::google::protobuf::RepeatedField< float >&
      x_max() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_x_max();

  // repeated float y_max = 6;
  int y_max_size() const;
  void clear_y_max();
  static const int kYMaxFieldNumber = 6;
  float y_max(int index) const;
  void set_y_max(int index, float value);
  void add_y_max(float value);
  const ::google::protobuf::RepeatedField< float >&
      y_max() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_y_max();

  // @@protoc_insertion_point(class_scope:caffe.ImgBBoxAnnoDatum)
 private:
  inline void set_has_img_datum();
  inline void clear_has_img_datum();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > label_;
  ::google::protobuf::RepeatedField< float > x_min_;
  ::google::protobuf::RepeatedField< float > y_min_;
  ::google::protobuf::RepeatedField< float > x_max_;
  ::google::protobuf::RepeatedField< float > y_max_;
  ::caffe::Datum* img_datum_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ImgBBoxAnnoDatum> ImgBBoxAnnoDatum_default_instance_;

// -------------------------------------------------------------------

class ImgBBoxAnnoParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ImgBBoxAnnoParameter) */ {
 public:
  ImgBBoxAnnoParameter();
  virtual ~ImgBBoxAnnoParameter();

  ImgBBoxAnnoParameter(const ImgBBoxAnnoParameter& from);

  inline ImgBBoxAnnoParameter& operator=(const ImgBBoxAnnoParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImgBBoxAnnoParameter& default_instance();

  static const ImgBBoxAnnoParameter* internal_default_instance();

  void Swap(ImgBBoxAnnoParameter* other);

  // implements Message ----------------------------------------------

  inline ImgBBoxAnnoParameter* New() const { return New(NULL); }

  ImgBBoxAnnoParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImgBBoxAnnoParameter& from);
  void MergeFrom(const ImgBBoxAnnoParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ImgBBoxAnnoParameter* other);
  void UnsafeMergeFrom(const ImgBBoxAnnoParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 img_height = 1;
  bool has_img_height() const;
  void clear_img_height();
  static const int kImgHeightFieldNumber = 1;
  ::google::protobuf::int32 img_height() const;
  void set_img_height(::google::protobuf::int32 value);

  // required int32 img_width = 2;
  bool has_img_width() const;
  void clear_img_width();
  static const int kImgWidthFieldNumber = 2;
  ::google::protobuf::int32 img_width() const;
  void set_img_width(::google::protobuf::int32 value);

  // required int32 max_bbox_per_img = 3;
  bool has_max_bbox_per_img() const;
  void clear_max_bbox_per_img();
  static const int kMaxBboxPerImgFieldNumber = 3;
  ::google::protobuf::int32 max_bbox_per_img() const;
  void set_max_bbox_per_img(::google::protobuf::int32 value);

  // optional bool colored = 4 [default = true];
  bool has_colored() const;
  void clear_colored();
  static const int kColoredFieldNumber = 4;
  bool colored() const;
  void set_colored(bool value);

  // @@protoc_insertion_point(class_scope:caffe.ImgBBoxAnnoParameter)
 private:
  inline void set_has_img_height();
  inline void clear_has_img_height();
  inline void set_has_img_width();
  inline void clear_has_img_width();
  inline void set_has_max_bbox_per_img();
  inline void clear_has_max_bbox_per_img();
  inline void set_has_colored();
  inline void clear_has_colored();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 img_height_;
  ::google::protobuf::int32 img_width_;
  ::google::protobuf::int32 max_bbox_per_img_;
  bool colored_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ImgBBoxAnnoParameter> ImgBBoxAnnoParameter_default_instance_;

// -------------------------------------------------------------------

class HeatmapConcatParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.HeatmapConcatParameter) */ {
 public:
  HeatmapConcatParameter();
  virtual ~HeatmapConcatParameter();

  HeatmapConcatParameter(const HeatmapConcatParameter& from);

  inline HeatmapConcatParameter& operator=(const HeatmapConcatParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeatmapConcatParameter& default_instance();

  static const HeatmapConcatParameter* internal_default_instance();

  void Swap(HeatmapConcatParameter* other);

  // implements Message ----------------------------------------------

  inline HeatmapConcatParameter* New() const { return New(NULL); }

  HeatmapConcatParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeatmapConcatParameter& from);
  void MergeFrom(const HeatmapConcatParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HeatmapConcatParameter* other);
  void UnsafeMergeFrom(const HeatmapConcatParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string heatmap_file = 1;
  bool has_heatmap_file() const;
  void clear_heatmap_file();
  static const int kHeatmapFileFieldNumber = 1;
  const ::std::string& heatmap_file() const;
  void set_heatmap_file(const ::std::string& value);
  void set_heatmap_file(const char* value);
  void set_heatmap_file(const char* value, size_t size);
  ::std::string* mutable_heatmap_file();
  ::std::string* release_heatmap_file();
  void set_allocated_heatmap_file(::std::string* heatmap_file);

  // @@protoc_insertion_point(class_scope:caffe.HeatmapConcatParameter)
 private:
  inline void set_has_heatmap_file();
  inline void clear_has_heatmap_file();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr heatmap_file_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<HeatmapConcatParameter> HeatmapConcatParameter_default_instance_;

// -------------------------------------------------------------------

class BBoxAnnoMapParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.BBoxAnnoMapParameter) */ {
 public:
  BBoxAnnoMapParameter();
  virtual ~BBoxAnnoMapParameter();

  BBoxAnnoMapParameter(const BBoxAnnoMapParameter& from);

  inline BBoxAnnoMapParameter& operator=(const BBoxAnnoMapParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BBoxAnnoMapParameter& default_instance();

  static const BBoxAnnoMapParameter* internal_default_instance();

  void Swap(BBoxAnnoMapParameter* other);

  // implements Message ----------------------------------------------

  inline BBoxAnnoMapParameter* New() const { return New(NULL); }

  BBoxAnnoMapParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BBoxAnnoMapParameter& from);
  void MergeFrom(const BBoxAnnoMapParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BBoxAnnoMapParameter* other);
  void UnsafeMergeFrom(const BBoxAnnoMapParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 img_height = 1;
  bool has_img_height() const;
  void clear_img_height();
  static const int kImgHeightFieldNumber = 1;
  ::google::protobuf::int32 img_height() const;
  void set_img_height(::google::protobuf::int32 value);

  // required int32 img_width = 2;
  bool has_img_width() const;
  void clear_img_width();
  static const int kImgWidthFieldNumber = 2;
  ::google::protobuf::int32 img_width() const;
  void set_img_width(::google::protobuf::int32 value);

  // required int32 receptive_field_height = 3;
  bool has_receptive_field_height() const;
  void clear_receptive_field_height();
  static const int kReceptiveFieldHeightFieldNumber = 3;
  ::google::protobuf::int32 receptive_field_height() const;
  void set_receptive_field_height(::google::protobuf::int32 value);

  // required int32 receptive_field_width = 4;
  bool has_receptive_field_width() const;
  void clear_receptive_field_width();
  static const int kReceptiveFieldWidthFieldNumber = 4;
  ::google::protobuf::int32 receptive_field_width() const;
  void set_receptive_field_width(::google::protobuf::int32 value);

  // required int32 vertical_stride = 5;
  bool has_vertical_stride() const;
  void clear_vertical_stride();
  static const int kVerticalStrideFieldNumber = 5;
  ::google::protobuf::int32 vertical_stride() const;
  void set_vertical_stride(::google::protobuf::int32 value);

  // required int32 horizontal_stride = 6;
  bool has_horizontal_stride() const;
  void clear_horizontal_stride();
  static const int kHorizontalStrideFieldNumber = 6;
  ::google::protobuf::int32 horizontal_stride() const;
  void set_horizontal_stride(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.BBoxAnnoMapParameter)
 private:
  inline void set_has_img_height();
  inline void clear_has_img_height();
  inline void set_has_img_width();
  inline void clear_has_img_width();
  inline void set_has_receptive_field_height();
  inline void clear_has_receptive_field_height();
  inline void set_has_receptive_field_width();
  inline void clear_has_receptive_field_width();
  inline void set_has_vertical_stride();
  inline void clear_has_vertical_stride();
  inline void set_has_horizontal_stride();
  inline void clear_has_horizontal_stride();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 img_height_;
  ::google::protobuf::int32 img_width_;
  ::google::protobuf::int32 receptive_field_height_;
  ::google::protobuf::int32 receptive_field_width_;
  ::google::protobuf::int32 vertical_stride_;
  ::google::protobuf::int32 horizontal_stride_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<BBoxAnnoMapParameter> BBoxAnnoMapParameter_default_instance_;

// -------------------------------------------------------------------

class LabelParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.LabelParameter) */ {
 public:
  LabelParameter();
  virtual ~LabelParameter();

  LabelParameter(const LabelParameter& from);

  inline LabelParameter& operator=(const LabelParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LabelParameter& default_instance();

  static const LabelParameter* internal_default_instance();

  void Swap(LabelParameter* other);

  // implements Message ----------------------------------------------

  inline LabelParameter* New() const { return New(NULL); }

  LabelParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LabelParameter& from);
  void MergeFrom(const LabelParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LabelParameter* other);
  void UnsafeMergeFrom(const LabelParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LabelParameter_LabelParamConstant LabelParamConstant;
  static const LabelParamConstant DUMMY_LABEL =
    LabelParameter_LabelParamConstant_DUMMY_LABEL;
  static const LabelParamConstant NONE =
    LabelParameter_LabelParamConstant_NONE;
  static inline bool LabelParamConstant_IsValid(int value) {
    return LabelParameter_LabelParamConstant_IsValid(value);
  }
  static const LabelParamConstant LabelParamConstant_MIN =
    LabelParameter_LabelParamConstant_LabelParamConstant_MIN;
  static const LabelParamConstant LabelParamConstant_MAX =
    LabelParameter_LabelParamConstant_LabelParamConstant_MAX;
  static const int LabelParamConstant_ARRAYSIZE =
    LabelParameter_LabelParamConstant_LabelParamConstant_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LabelParamConstant_descriptor() {
    return LabelParameter_LabelParamConstant_descriptor();
  }
  static inline const ::std::string& LabelParamConstant_Name(LabelParamConstant value) {
    return LabelParameter_LabelParamConstant_Name(value);
  }
  static inline bool LabelParamConstant_Parse(const ::std::string& name,
      LabelParamConstant* value) {
    return LabelParameter_LabelParamConstant_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 num_label = 2;
  bool has_num_label() const;
  void clear_num_label();
  static const int kNumLabelFieldNumber = 2;
  ::google::protobuf::int32 num_label() const;
  void set_num_label(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.LabelParameter)
 private:
  inline void set_has_num_label();
  inline void clear_has_num_label();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 num_label_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<LabelParameter> LabelParameter_default_instance_;

// -------------------------------------------------------------------

class PatchDatum : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.PatchDatum) */ {
 public:
  PatchDatum();
  virtual ~PatchDatum();

  PatchDatum(const PatchDatum& from);

  inline PatchDatum& operator=(const PatchDatum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PatchDatum& default_instance();

  static const PatchDatum* internal_default_instance();

  void Swap(PatchDatum* other);

  // implements Message ----------------------------------------------

  inline PatchDatum* New() const { return New(NULL); }

  PatchDatum* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PatchDatum& from);
  void MergeFrom(const PatchDatum& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PatchDatum* other);
  void UnsafeMergeFrom(const PatchDatum& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .caffe.Datum patch_img = 1;
  bool has_patch_img() const;
  void clear_patch_img();
  static const int kPatchImgFieldNumber = 1;
  const ::caffe::Datum& patch_img() const;
  ::caffe::Datum* mutable_patch_img();
  ::caffe::Datum* release_patch_img();
  void set_allocated_patch_img(::caffe::Datum* patch_img);

  // optional int32 label = 2 [default = -1];
  bool has_label() const;
  void clear_label();
  static const int kLabelFieldNumber = 2;
  ::google::protobuf::int32 label() const;
  void set_label(::google::protobuf::int32 value);

  // optional float bbox_xmin = 3;
  bool has_bbox_xmin() const;
  void clear_bbox_xmin();
  static const int kBboxXminFieldNumber = 3;
  float bbox_xmin() const;
  void set_bbox_xmin(float value);

  // optional float bbox_ymin = 4;
  bool has_bbox_ymin() const;
  void clear_bbox_ymin();
  static const int kBboxYminFieldNumber = 4;
  float bbox_ymin() const;
  void set_bbox_ymin(float value);

  // optional float bbox_xmax = 5;
  bool has_bbox_xmax() const;
  void clear_bbox_xmax();
  static const int kBboxXmaxFieldNumber = 5;
  float bbox_xmax() const;
  void set_bbox_xmax(float value);

  // optional float bbox_ymax = 6;
  bool has_bbox_ymax() const;
  void clear_bbox_ymax();
  static const int kBboxYmaxFieldNumber = 6;
  float bbox_ymax() const;
  void set_bbox_ymax(float value);

  // optional float whole_img_height = 7;
  bool has_whole_img_height() const;
  void clear_whole_img_height();
  static const int kWholeImgHeightFieldNumber = 7;
  float whole_img_height() const;
  void set_whole_img_height(float value);

  // optional float whole_img_width = 8;
  bool has_whole_img_width() const;
  void clear_whole_img_width();
  static const int kWholeImgWidthFieldNumber = 8;
  float whole_img_width() const;
  void set_whole_img_width(float value);

  // optional float patch_offset_xmin = 9;
  bool has_patch_offset_xmin() const;
  void clear_patch_offset_xmin();
  static const int kPatchOffsetXminFieldNumber = 9;
  float patch_offset_xmin() const;
  void set_patch_offset_xmin(float value);

  // optional float patch_offset_ymin = 10;
  bool has_patch_offset_ymin() const;
  void clear_patch_offset_ymin();
  static const int kPatchOffsetYminFieldNumber = 10;
  float patch_offset_ymin() const;
  void set_patch_offset_ymin(float value);

  // @@protoc_insertion_point(class_scope:caffe.PatchDatum)
 private:
  inline void set_has_patch_img();
  inline void clear_has_patch_img();
  inline void set_has_label();
  inline void clear_has_label();
  inline void set_has_bbox_xmin();
  inline void clear_has_bbox_xmin();
  inline void set_has_bbox_ymin();
  inline void clear_has_bbox_ymin();
  inline void set_has_bbox_xmax();
  inline void clear_has_bbox_xmax();
  inline void set_has_bbox_ymax();
  inline void clear_has_bbox_ymax();
  inline void set_has_whole_img_height();
  inline void clear_has_whole_img_height();
  inline void set_has_whole_img_width();
  inline void clear_has_whole_img_width();
  inline void set_has_patch_offset_xmin();
  inline void clear_has_patch_offset_xmin();
  inline void set_has_patch_offset_ymin();
  inline void clear_has_patch_offset_ymin();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::caffe::Datum* patch_img_;
  float bbox_xmin_;
  float bbox_ymin_;
  float bbox_xmax_;
  float bbox_ymax_;
  float whole_img_height_;
  float whole_img_width_;
  float patch_offset_xmin_;
  float patch_offset_ymin_;
  ::google::protobuf::int32 label_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<PatchDatum> PatchDatum_default_instance_;

// -------------------------------------------------------------------

class PatchDataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.PatchDataParameter) */ {
 public:
  PatchDataParameter();
  virtual ~PatchDataParameter();

  PatchDataParameter(const PatchDataParameter& from);

  inline PatchDataParameter& operator=(const PatchDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PatchDataParameter& default_instance();

  static const PatchDataParameter* internal_default_instance();

  void Swap(PatchDataParameter* other);

  // implements Message ----------------------------------------------

  inline PatchDataParameter* New() const { return New(NULL); }

  PatchDataParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PatchDataParameter& from);
  void MergeFrom(const PatchDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PatchDataParameter* other);
  void UnsafeMergeFrom(const PatchDataParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool positive_only = 1 [default = false];
  bool has_positive_only() const;
  void clear_positive_only();
  static const int kPositiveOnlyFieldNumber = 1;
  bool positive_only() const;
  void set_positive_only(bool value);

  // optional bool patch_offset_normalization = 2 [default = true];
  bool has_patch_offset_normalization() const;
  void clear_patch_offset_normalization();
  static const int kPatchOffsetNormalizationFieldNumber = 2;
  bool patch_offset_normalization() const;
  void set_patch_offset_normalization(bool value);

  // optional bool bbox_normalization = 3 [default = true];
  bool has_bbox_normalization() const;
  void clear_bbox_normalization();
  static const int kBboxNormalizationFieldNumber = 3;
  bool bbox_normalization() const;
  void set_bbox_normalization(bool value);

  // @@protoc_insertion_point(class_scope:caffe.PatchDataParameter)
 private:
  inline void set_has_positive_only();
  inline void clear_has_positive_only();
  inline void set_has_patch_offset_normalization();
  inline void clear_has_patch_offset_normalization();
  inline void set_has_bbox_normalization();
  inline void clear_has_bbox_normalization();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool positive_only_;
  bool patch_offset_normalization_;
  bool bbox_normalization_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<PatchDataParameter> PatchDataParameter_default_instance_;

// -------------------------------------------------------------------

class LabelRemapParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.LabelRemapParameter) */ {
 public:
  LabelRemapParameter();
  virtual ~LabelRemapParameter();

  LabelRemapParameter(const LabelRemapParameter& from);

  inline LabelRemapParameter& operator=(const LabelRemapParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LabelRemapParameter& default_instance();

  static const LabelRemapParameter* internal_default_instance();

  void Swap(LabelRemapParameter* other);

  // implements Message ----------------------------------------------

  inline LabelRemapParameter* New() const { return New(NULL); }

  LabelRemapParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LabelRemapParameter& from);
  void MergeFrom(const LabelRemapParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LabelRemapParameter* other);
  void UnsafeMergeFrom(const LabelRemapParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 src = 1;
  int src_size() const;
  void clear_src();
  static const int kSrcFieldNumber = 1;
  ::google::protobuf::int32 src(int index) const;
  void set_src(int index, ::google::protobuf::int32 value);
  void add_src(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      src() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_src();

  // repeated int32 dst = 2;
  int dst_size() const;
  void clear_dst();
  static const int kDstFieldNumber = 2;
  ::google::protobuf::int32 dst(int index) const;
  void set_dst(int index, ::google::protobuf::int32 value);
  void add_dst(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      dst() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_dst();

  // @@protoc_insertion_point(class_scope:caffe.LabelRemapParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > src_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > dst_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<LabelRemapParameter> LabelRemapParameter_default_instance_;

// -------------------------------------------------------------------

class BBoxParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.BBoxParameter) */ {
 public:
  BBoxParameter();
  virtual ~BBoxParameter();

  BBoxParameter(const BBoxParameter& from);

  inline BBoxParameter& operator=(const BBoxParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BBoxParameter& default_instance();

  static const BBoxParameter* internal_default_instance();

  void Swap(BBoxParameter* other);

  // implements Message ----------------------------------------------

  inline BBoxParameter* New() const { return New(NULL); }

  BBoxParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BBoxParameter& from);
  void MergeFrom(const BBoxParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BBoxParameter* other);
  void UnsafeMergeFrom(const BBoxParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BBoxParameter_BBoxType BBoxType;
  static const BBoxType FULL =
    BBoxParameter_BBoxType_FULL;
  static const BBoxType VERTICAL =
    BBoxParameter_BBoxType_VERTICAL;
  static const BBoxType HORIZONTAL =
    BBoxParameter_BBoxType_HORIZONTAL;
  static const BBoxType TEMPLATE =
    BBoxParameter_BBoxType_TEMPLATE;
  static inline bool BBoxType_IsValid(int value) {
    return BBoxParameter_BBoxType_IsValid(value);
  }
  static const BBoxType BBoxType_MIN =
    BBoxParameter_BBoxType_BBoxType_MIN;
  static const BBoxType BBoxType_MAX =
    BBoxParameter_BBoxType_BBoxType_MAX;
  static const int BBoxType_ARRAYSIZE =
    BBoxParameter_BBoxType_BBoxType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  BBoxType_descriptor() {
    return BBoxParameter_BBoxType_descriptor();
  }
  static inline const ::std::string& BBoxType_Name(BBoxType value) {
    return BBoxParameter_BBoxType_Name(value);
  }
  static inline bool BBoxType_Parse(const ::std::string& name,
      BBoxType* value) {
    return BBoxParameter_BBoxType_Parse(name, value);
  }

  typedef BBoxParameter_BBoxAnchor BBoxAnchor;
  static const BBoxAnchor TOP_LEFT =
    BBoxParameter_BBoxAnchor_TOP_LEFT;
  static const BBoxAnchor CENTER =
    BBoxParameter_BBoxAnchor_CENTER;
  static inline bool BBoxAnchor_IsValid(int value) {
    return BBoxParameter_BBoxAnchor_IsValid(value);
  }
  static const BBoxAnchor BBoxAnchor_MIN =
    BBoxParameter_BBoxAnchor_BBoxAnchor_MIN;
  static const BBoxAnchor BBoxAnchor_MAX =
    BBoxParameter_BBoxAnchor_BBoxAnchor_MAX;
  static const int BBoxAnchor_ARRAYSIZE =
    BBoxParameter_BBoxAnchor_BBoxAnchor_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  BBoxAnchor_descriptor() {
    return BBoxParameter_BBoxAnchor_descriptor();
  }
  static inline const ::std::string& BBoxAnchor_Name(BBoxAnchor value) {
    return BBoxParameter_BBoxAnchor_Name(value);
  }
  static inline bool BBoxAnchor_Parse(const ::std::string& name,
      BBoxAnchor* value) {
    return BBoxParameter_BBoxAnchor_Parse(name, value);
  }

  typedef BBoxParameter_BBoxConstant BBoxConstant;
  static const BBoxConstant DUMMY_VALUE =
    BBoxParameter_BBoxConstant_DUMMY_VALUE;
  static inline bool BBoxConstant_IsValid(int value) {
    return BBoxParameter_BBoxConstant_IsValid(value);
  }
  static const BBoxConstant BBoxConstant_MIN =
    BBoxParameter_BBoxConstant_BBoxConstant_MIN;
  static const BBoxConstant BBoxConstant_MAX =
    BBoxParameter_BBoxConstant_BBoxConstant_MAX;
  static const int BBoxConstant_ARRAYSIZE =
    BBoxParameter_BBoxConstant_BBoxConstant_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  BBoxConstant_descriptor() {
    return BBoxParameter_BBoxConstant_descriptor();
  }
  static inline const ::std::string& BBoxConstant_Name(BBoxConstant value) {
    return BBoxParameter_BBoxConstant_Name(value);
  }
  static inline bool BBoxConstant_Parse(const ::std::string& name,
      BBoxConstant* value) {
    return BBoxParameter_BBoxConstant_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.BBoxParameter.BBoxType bbox_type = 1;
  bool has_bbox_type() const;
  void clear_bbox_type();
  static const int kBboxTypeFieldNumber = 1;
  ::caffe::BBoxParameter_BBoxType bbox_type() const;
  void set_bbox_type(::caffe::BBoxParameter_BBoxType value);

  // optional .caffe.BBoxParameter.BBoxAnchor anchor = 2;
  bool has_anchor() const;
  void clear_anchor();
  static const int kAnchorFieldNumber = 2;
  ::caffe::BBoxParameter_BBoxAnchor anchor() const;
  void set_anchor(::caffe::BBoxParameter_BBoxAnchor value);

  // optional bool normalize = 3;
  bool has_normalize() const;
  void clear_normalize();
  static const int kNormalizeFieldNumber = 3;
  bool normalize() const;
  void set_normalize(bool value);

  // @@protoc_insertion_point(class_scope:caffe.BBoxParameter)
 private:
  inline void set_has_bbox_type();
  inline void clear_has_bbox_type();
  inline void set_has_anchor();
  inline void clear_has_anchor();
  inline void set_has_normalize();
  inline void clear_has_normalize();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool normalize_;
  int bbox_type_;
  int anchor_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<BBoxParameter> BBoxParameter_default_instance_;

// -------------------------------------------------------------------

class SlidingWindowInputParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SlidingWindowInputParameter) */ {
 public:
  SlidingWindowInputParameter();
  virtual ~SlidingWindowInputParameter();

  SlidingWindowInputParameter(const SlidingWindowInputParameter& from);

  inline SlidingWindowInputParameter& operator=(const SlidingWindowInputParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SlidingWindowInputParameter& default_instance();

  static const SlidingWindowInputParameter* internal_default_instance();

  void Swap(SlidingWindowInputParameter* other);

  // implements Message ----------------------------------------------

  inline SlidingWindowInputParameter* New() const { return New(NULL); }

  SlidingWindowInputParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SlidingWindowInputParameter& from);
  void MergeFrom(const SlidingWindowInputParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SlidingWindowInputParameter* other);
  void UnsafeMergeFrom(const SlidingWindowInputParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 window_width = 1;
  bool has_window_width() const;
  void clear_window_width();
  static const int kWindowWidthFieldNumber = 1;
  ::google::protobuf::int32 window_width() const;
  void set_window_width(::google::protobuf::int32 value);

  // required int32 window_height = 2;
  bool has_window_height() const;
  void clear_window_height();
  static const int kWindowHeightFieldNumber = 2;
  ::google::protobuf::int32 window_height() const;
  void set_window_height(::google::protobuf::int32 value);

  // required int32 horizontal_stride = 3;
  bool has_horizontal_stride() const;
  void clear_horizontal_stride();
  static const int kHorizontalStrideFieldNumber = 3;
  ::google::protobuf::int32 horizontal_stride() const;
  void set_horizontal_stride(::google::protobuf::int32 value);

  // required int32 vertical_stride = 4;
  bool has_vertical_stride() const;
  void clear_vertical_stride();
  static const int kVerticalStrideFieldNumber = 4;
  ::google::protobuf::int32 vertical_stride() const;
  void set_vertical_stride(::google::protobuf::int32 value);

  // optional bool window_normalization = 5 [default = true];
  bool has_window_normalization() const;
  void clear_window_normalization();
  static const int kWindowNormalizationFieldNumber = 5;
  bool window_normalization() const;
  void set_window_normalization(bool value);

  // @@protoc_insertion_point(class_scope:caffe.SlidingWindowInputParameter)
 private:
  inline void set_has_window_width();
  inline void clear_has_window_width();
  inline void set_has_window_height();
  inline void clear_has_window_height();
  inline void set_has_horizontal_stride();
  inline void clear_has_horizontal_stride();
  inline void set_has_vertical_stride();
  inline void clear_has_vertical_stride();
  inline void set_has_window_normalization();
  inline void clear_has_window_normalization();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 window_width_;
  ::google::protobuf::int32 window_height_;
  ::google::protobuf::int32 horizontal_stride_;
  ::google::protobuf::int32 vertical_stride_;
  bool window_normalization_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SlidingWindowInputParameter> SlidingWindowInputParameter_default_instance_;

// -------------------------------------------------------------------

class BBoxToGridAndSizeParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.BBoxToGridAndSizeParameter) */ {
 public:
  BBoxToGridAndSizeParameter();
  virtual ~BBoxToGridAndSizeParameter();

  BBoxToGridAndSizeParameter(const BBoxToGridAndSizeParameter& from);

  inline BBoxToGridAndSizeParameter& operator=(const BBoxToGridAndSizeParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BBoxToGridAndSizeParameter& default_instance();

  static const BBoxToGridAndSizeParameter* internal_default_instance();

  void Swap(BBoxToGridAndSizeParameter* other);

  // implements Message ----------------------------------------------

  inline BBoxToGridAndSizeParameter* New() const { return New(NULL); }

  BBoxToGridAndSizeParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BBoxToGridAndSizeParameter& from);
  void MergeFrom(const BBoxToGridAndSizeParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BBoxToGridAndSizeParameter* other);
  void UnsafeMergeFrom(const BBoxToGridAndSizeParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float x_grid = 1;
  int x_grid_size() const;
  void clear_x_grid();
  static const int kXGridFieldNumber = 1;
  float x_grid(int index) const;
  void set_x_grid(int index, float value);
  void add_x_grid(float value);
  const ::google::protobuf::RepeatedField< float >&
      x_grid() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_x_grid();

  // repeated float y_grid = 2;
  int y_grid_size() const;
  void clear_y_grid();
  static const int kYGridFieldNumber = 2;
  float y_grid(int index) const;
  void set_y_grid(int index, float value);
  void add_y_grid(float value);
  const ::google::protobuf::RepeatedField< float >&
      y_grid() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_y_grid();

  // repeated float size_grid = 3;
  int size_grid_size() const;
  void clear_size_grid();
  static const int kSizeGridFieldNumber = 3;
  float size_grid(int index) const;
  void set_size_grid(int index, float value);
  void add_size_grid(float value);
  const ::google::protobuf::RepeatedField< float >&
      size_grid() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_size_grid();

  // @@protoc_insertion_point(class_scope:caffe.BBoxToGridAndSizeParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > x_grid_;
  ::google::protobuf::RepeatedField< float > y_grid_;
  ::google::protobuf::RepeatedField< float > size_grid_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<BBoxToGridAndSizeParameter> BBoxToGridAndSizeParameter_default_instance_;

// -------------------------------------------------------------------

class SizeUnitParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SizeUnitParameter) */ {
 public:
  SizeUnitParameter();
  virtual ~SizeUnitParameter();

  SizeUnitParameter(const SizeUnitParameter& from);

  inline SizeUnitParameter& operator=(const SizeUnitParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SizeUnitParameter& default_instance();

  static const SizeUnitParameter* internal_default_instance();

  void Swap(SizeUnitParameter* other);

  // implements Message ----------------------------------------------

  inline SizeUnitParameter* New() const { return New(NULL); }

  SizeUnitParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SizeUnitParameter& from);
  void MergeFrom(const SizeUnitParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SizeUnitParameter* other);
  void UnsafeMergeFrom(const SizeUnitParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float unit = 1;
  bool has_unit() const;
  void clear_unit();
  static const int kUnitFieldNumber = 1;
  float unit() const;
  void set_unit(float value);

  // @@protoc_insertion_point(class_scope:caffe.SizeUnitParameter)
 private:
  inline void set_has_unit();
  inline void clear_has_unit();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float unit_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SizeUnitParameter> SizeUnitParameter_default_instance_;

// -------------------------------------------------------------------

class PaddingParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.PaddingParameter) */ {
 public:
  PaddingParameter();
  virtual ~PaddingParameter();

  PaddingParameter(const PaddingParameter& from);

  inline PaddingParameter& operator=(const PaddingParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PaddingParameter& default_instance();

  static const PaddingParameter* internal_default_instance();

  void Swap(PaddingParameter* other);

  // implements Message ----------------------------------------------

  inline PaddingParameter* New() const { return New(NULL); }

  PaddingParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PaddingParameter& from);
  void MergeFrom(const PaddingParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PaddingParameter* other);
  void UnsafeMergeFrom(const PaddingParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PaddingParameter_PaddingType PaddingType;
  static const PaddingType ZERO =
    PaddingParameter_PaddingType_ZERO;
  static const PaddingType MIRROR =
    PaddingParameter_PaddingType_MIRROR;
  static inline bool PaddingType_IsValid(int value) {
    return PaddingParameter_PaddingType_IsValid(value);
  }
  static const PaddingType PaddingType_MIN =
    PaddingParameter_PaddingType_PaddingType_MIN;
  static const PaddingType PaddingType_MAX =
    PaddingParameter_PaddingType_PaddingType_MAX;
  static const int PaddingType_ARRAYSIZE =
    PaddingParameter_PaddingType_PaddingType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PaddingType_descriptor() {
    return PaddingParameter_PaddingType_descriptor();
  }
  static inline const ::std::string& PaddingType_Name(PaddingType value) {
    return PaddingParameter_PaddingType_Name(value);
  }
  static inline bool PaddingType_Parse(const ::std::string& name,
      PaddingType* value) {
    return PaddingParameter_PaddingType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.PaddingParameter.PaddingType type = 1 [default = ZERO];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::caffe::PaddingParameter_PaddingType type() const;
  void set_type(::caffe::PaddingParameter_PaddingType value);

  // optional uint32 pad_up = 2 [default = 0];
  bool has_pad_up() const;
  void clear_pad_up();
  static const int kPadUpFieldNumber = 2;
  ::google::protobuf::uint32 pad_up() const;
  void set_pad_up(::google::protobuf::uint32 value);

  // optional uint32 pad_down = 3 [default = 0];
  bool has_pad_down() const;
  void clear_pad_down();
  static const int kPadDownFieldNumber = 3;
  ::google::protobuf::uint32 pad_down() const;
  void set_pad_down(::google::protobuf::uint32 value);

  // optional uint32 pad_left = 4 [default = 0];
  bool has_pad_left() const;
  void clear_pad_left();
  static const int kPadLeftFieldNumber = 4;
  ::google::protobuf::uint32 pad_left() const;
  void set_pad_left(::google::protobuf::uint32 value);

  // optional uint32 pad_right = 5 [default = 0];
  bool has_pad_right() const;
  void clear_pad_right();
  static const int kPadRightFieldNumber = 5;
  ::google::protobuf::uint32 pad_right() const;
  void set_pad_right(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.PaddingParameter)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_pad_up();
  inline void clear_has_pad_up();
  inline void set_has_pad_down();
  inline void clear_has_pad_down();
  inline void set_has_pad_left();
  inline void clear_has_pad_left();
  inline void set_has_pad_right();
  inline void clear_has_pad_right();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int type_;
  ::google::protobuf::uint32 pad_up_;
  ::google::protobuf::uint32 pad_down_;
  ::google::protobuf::uint32 pad_left_;
  ::google::protobuf::uint32 pad_right_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<PaddingParameter> PaddingParameter_default_instance_;

// -------------------------------------------------------------------

class Point2i : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.Point2i) */ {
 public:
  Point2i();
  virtual ~Point2i();

  Point2i(const Point2i& from);

  inline Point2i& operator=(const Point2i& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point2i& default_instance();

  static const Point2i* internal_default_instance();

  void Swap(Point2i* other);

  // implements Message ----------------------------------------------

  inline Point2i* New() const { return New(NULL); }

  Point2i* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Point2i& from);
  void MergeFrom(const Point2i& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Point2i* other);
  void UnsafeMergeFrom(const Point2i& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // required int32 y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.Point2i)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Point2i> Point2i_default_instance_;

// -------------------------------------------------------------------

class Point2f : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.Point2f) */ {
 public:
  Point2f();
  virtual ~Point2f();

  Point2f(const Point2f& from);

  inline Point2f& operator=(const Point2f& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point2f& default_instance();

  static const Point2f* internal_default_instance();

  void Swap(Point2f* other);

  // implements Message ----------------------------------------------

  inline Point2f* New() const { return New(NULL); }

  Point2f* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Point2f& from);
  void MergeFrom(const Point2f& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Point2f* other);
  void UnsafeMergeFrom(const Point2f& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // required float y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // @@protoc_insertion_point(class_scope:caffe.Point2f)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float x_;
  float y_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Point2f> Point2f_default_instance_;

// -------------------------------------------------------------------

class Size2i : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.Size2i) */ {
 public:
  Size2i();
  virtual ~Size2i();

  Size2i(const Size2i& from);

  inline Size2i& operator=(const Size2i& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Size2i& default_instance();

  static const Size2i* internal_default_instance();

  void Swap(Size2i* other);

  // implements Message ----------------------------------------------

  inline Size2i* New() const { return New(NULL); }

  Size2i* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Size2i& from);
  void MergeFrom(const Size2i& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Size2i* other);
  void UnsafeMergeFrom(const Size2i& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 width = 1;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // required uint32 height = 2;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.Size2i)
 private:
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Size2i> Size2i_default_instance_;

// -------------------------------------------------------------------

class Size2f : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.Size2f) */ {
 public:
  Size2f();
  virtual ~Size2f();

  Size2f(const Size2f& from);

  inline Size2f& operator=(const Size2f& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Size2f& default_instance();

  static const Size2f* internal_default_instance();

  void Swap(Size2f* other);

  // implements Message ----------------------------------------------

  inline Size2f* New() const { return New(NULL); }

  Size2f* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Size2f& from);
  void MergeFrom(const Size2f& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Size2f* other);
  void UnsafeMergeFrom(const Size2f& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float width = 1;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  float width() const;
  void set_width(float value);

  // required float height = 2;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  float height() const;
  void set_height(float value);

  // @@protoc_insertion_point(class_scope:caffe.Size2f)
 private:
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float width_;
  float height_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Size2f> Size2f_default_instance_;

// -------------------------------------------------------------------

class Rect2f : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.Rect2f) */ {
 public:
  Rect2f();
  virtual ~Rect2f();

  Rect2f(const Rect2f& from);

  inline Rect2f& operator=(const Rect2f& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Rect2f& default_instance();

  static const Rect2f* internal_default_instance();

  void Swap(Rect2f* other);

  // implements Message ----------------------------------------------

  inline Rect2f* New() const { return New(NULL); }

  Rect2f* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Rect2f& from);
  void MergeFrom(const Rect2f& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Rect2f* other);
  void UnsafeMergeFrom(const Rect2f& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .caffe.Point2f top_left = 1;
  bool has_top_left() const;
  void clear_top_left();
  static const int kTopLeftFieldNumber = 1;
  const ::caffe::Point2f& top_left() const;
  ::caffe::Point2f* mutable_top_left();
  ::caffe::Point2f* release_top_left();
  void set_allocated_top_left(::caffe::Point2f* top_left);

  // required .caffe.Size2f size = 2;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 2;
  const ::caffe::Size2f& size() const;
  ::caffe::Size2f* mutable_size();
  ::caffe::Size2f* release_size();
  void set_allocated_size(::caffe::Size2f* size);

  // @@protoc_insertion_point(class_scope:caffe.Rect2f)
 private:
  inline void set_has_top_left();
  inline void clear_has_top_left();
  inline void set_has_size();
  inline void clear_has_size();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::caffe::Point2f* top_left_;
  ::caffe::Size2f* size_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Rect2f> Rect2f_default_instance_;

// -------------------------------------------------------------------

class Rect2i : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.Rect2i) */ {
 public:
  Rect2i();
  virtual ~Rect2i();

  Rect2i(const Rect2i& from);

  inline Rect2i& operator=(const Rect2i& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Rect2i& default_instance();

  static const Rect2i* internal_default_instance();

  void Swap(Rect2i* other);

  // implements Message ----------------------------------------------

  inline Rect2i* New() const { return New(NULL); }

  Rect2i* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Rect2i& from);
  void MergeFrom(const Rect2i& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Rect2i* other);
  void UnsafeMergeFrom(const Rect2i& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .caffe.Point2i top_left = 1;
  bool has_top_left() const;
  void clear_top_left();
  static const int kTopLeftFieldNumber = 1;
  const ::caffe::Point2i& top_left() const;
  ::caffe::Point2i* mutable_top_left();
  ::caffe::Point2i* release_top_left();
  void set_allocated_top_left(::caffe::Point2i* top_left);

  // required .caffe.Size2i size = 2;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 2;
  const ::caffe::Size2i& size() const;
  ::caffe::Size2i* mutable_size();
  ::caffe::Size2i* release_size();
  void set_allocated_size(::caffe::Size2i* size);

  // @@protoc_insertion_point(class_scope:caffe.Rect2i)
 private:
  inline void set_has_top_left();
  inline void clear_has_top_left();
  inline void set_has_size();
  inline void clear_has_size();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::caffe::Point2i* top_left_;
  ::caffe::Size2i* size_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Rect2i> Rect2i_default_instance_;

// -------------------------------------------------------------------

class ActivationRegionParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ActivationRegionParameter) */ {
 public:
  ActivationRegionParameter();
  virtual ~ActivationRegionParameter();

  ActivationRegionParameter(const ActivationRegionParameter& from);

  inline ActivationRegionParameter& operator=(const ActivationRegionParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActivationRegionParameter& default_instance();

  static const ActivationRegionParameter* internal_default_instance();

  void Swap(ActivationRegionParameter* other);

  // implements Message ----------------------------------------------

  inline ActivationRegionParameter* New() const { return New(NULL); }

  ActivationRegionParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActivationRegionParameter& from);
  void MergeFrom(const ActivationRegionParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActivationRegionParameter* other);
  void UnsafeMergeFrom(const ActivationRegionParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ActivationRegionParameter_ActivationMethod ActivationMethod;
  static const ActivationMethod WHOLE =
    ActivationRegionParameter_ActivationMethod_WHOLE;
  static const ActivationMethod ANY =
    ActivationRegionParameter_ActivationMethod_ANY;
  static const ActivationMethod CENTER =
    ActivationRegionParameter_ActivationMethod_CENTER;
  static inline bool ActivationMethod_IsValid(int value) {
    return ActivationRegionParameter_ActivationMethod_IsValid(value);
  }
  static const ActivationMethod ActivationMethod_MIN =
    ActivationRegionParameter_ActivationMethod_ActivationMethod_MIN;
  static const ActivationMethod ActivationMethod_MAX =
    ActivationRegionParameter_ActivationMethod_ActivationMethod_MAX;
  static const int ActivationMethod_ARRAYSIZE =
    ActivationRegionParameter_ActivationMethod_ActivationMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ActivationMethod_descriptor() {
    return ActivationRegionParameter_ActivationMethod_descriptor();
  }
  static inline const ::std::string& ActivationMethod_Name(ActivationMethod value) {
    return ActivationRegionParameter_ActivationMethod_Name(value);
  }
  static inline bool ActivationMethod_Parse(const ::std::string& name,
      ActivationMethod* value) {
    return ActivationRegionParameter_ActivationMethod_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.ActivationRegionParameter.ActivationMethod method = 1 [default = WHOLE];
  bool has_method() const;
  void clear_method();
  static const int kMethodFieldNumber = 1;
  ::caffe::ActivationRegionParameter_ActivationMethod method() const;
  void set_method(::caffe::ActivationRegionParameter_ActivationMethod value);

  // optional .caffe.Rect2i region = 2;
  bool has_region() const;
  void clear_region();
  static const int kRegionFieldNumber = 2;
  const ::caffe::Rect2i& region() const;
  ::caffe::Rect2i* mutable_region();
  ::caffe::Rect2i* release_region();
  void set_allocated_region(::caffe::Rect2i* region);

  // @@protoc_insertion_point(class_scope:caffe.ActivationRegionParameter)
 private:
  inline void set_has_method();
  inline void clear_has_method();
  inline void set_has_region();
  inline void clear_has_region();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::caffe::Rect2i* region_;
  int method_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ActivationRegionParameter> ActivationRegionParameter_default_instance_;

// -------------------------------------------------------------------

class GTMapDataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.GTMapDataParameter) */ {
 public:
  GTMapDataParameter();
  virtual ~GTMapDataParameter();

  GTMapDataParameter(const GTMapDataParameter& from);

  inline GTMapDataParameter& operator=(const GTMapDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GTMapDataParameter& default_instance();

  static const GTMapDataParameter* internal_default_instance();

  void Swap(GTMapDataParameter* other);

  // implements Message ----------------------------------------------

  inline GTMapDataParameter* New() const { return New(NULL); }

  GTMapDataParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GTMapDataParameter& from);
  void MergeFrom(const GTMapDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GTMapDataParameter* other);
  void UnsafeMergeFrom(const GTMapDataParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .caffe.Size2i receptive_field = 1;
  bool has_receptive_field() const;
  void clear_receptive_field();
  static const int kReceptiveFieldFieldNumber = 1;
  const ::caffe::Size2i& receptive_field() const;
  ::caffe::Size2i* mutable_receptive_field();
  ::caffe::Size2i* release_receptive_field();
  void set_allocated_receptive_field(::caffe::Size2i* receptive_field);

  // required uint32 horizontal_stride = 2;
  bool has_horizontal_stride() const;
  void clear_horizontal_stride();
  static const int kHorizontalStrideFieldNumber = 2;
  ::google::protobuf::uint32 horizontal_stride() const;
  void set_horizontal_stride(::google::protobuf::uint32 value);

  // required uint32 vertical_stride = 3;
  bool has_vertical_stride() const;
  void clear_vertical_stride();
  static const int kVerticalStrideFieldNumber = 3;
  ::google::protobuf::uint32 vertical_stride() const;
  void set_vertical_stride(::google::protobuf::uint32 value);

  // optional .caffe.ActivationRegionParameter activation_region_param = 4;
  bool has_activation_region_param() const;
  void clear_activation_region_param();
  static const int kActivationRegionParamFieldNumber = 4;
  const ::caffe::ActivationRegionParameter& activation_region_param() const;
  ::caffe::ActivationRegionParameter* mutable_activation_region_param();
  ::caffe::ActivationRegionParameter* release_activation_region_param();
  void set_allocated_activation_region_param(::caffe::ActivationRegionParameter* activation_region_param);

  // required bool patch_offset_normalization = 5;
  bool has_patch_offset_normalization() const;
  void clear_patch_offset_normalization();
  static const int kPatchOffsetNormalizationFieldNumber = 5;
  bool patch_offset_normalization() const;
  void set_patch_offset_normalization(bool value);

  // required bool bbox_normalization = 6;
  bool has_bbox_normalization() const;
  void clear_bbox_normalization();
  static const int kBboxNormalizationFieldNumber = 6;
  bool bbox_normalization() const;
  void set_bbox_normalization(bool value);

  // @@protoc_insertion_point(class_scope:caffe.GTMapDataParameter)
 private:
  inline void set_has_receptive_field();
  inline void clear_has_receptive_field();
  inline void set_has_horizontal_stride();
  inline void clear_has_horizontal_stride();
  inline void set_has_vertical_stride();
  inline void clear_has_vertical_stride();
  inline void set_has_activation_region_param();
  inline void clear_has_activation_region_param();
  inline void set_has_patch_offset_normalization();
  inline void clear_has_patch_offset_normalization();
  inline void set_has_bbox_normalization();
  inline void clear_has_bbox_normalization();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::caffe::Size2i* receptive_field_;
  ::caffe::ActivationRegionParameter* activation_region_param_;
  ::google::protobuf::uint32 horizontal_stride_;
  ::google::protobuf::uint32 vertical_stride_;
  bool patch_offset_normalization_;
  bool bbox_normalization_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<GTMapDataParameter> GTMapDataParameter_default_instance_;

// -------------------------------------------------------------------

class LabelDiffIgnoreParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.LabelDiffIgnoreParameter) */ {
 public:
  LabelDiffIgnoreParameter();
  virtual ~LabelDiffIgnoreParameter();

  LabelDiffIgnoreParameter(const LabelDiffIgnoreParameter& from);

  inline LabelDiffIgnoreParameter& operator=(const LabelDiffIgnoreParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LabelDiffIgnoreParameter& default_instance();

  static const LabelDiffIgnoreParameter* internal_default_instance();

  void Swap(LabelDiffIgnoreParameter* other);

  // implements Message ----------------------------------------------

  inline LabelDiffIgnoreParameter* New() const { return New(NULL); }

  LabelDiffIgnoreParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LabelDiffIgnoreParameter& from);
  void MergeFrom(const LabelDiffIgnoreParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LabelDiffIgnoreParameter* other);
  void UnsafeMergeFrom(const LabelDiffIgnoreParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 ignore_label = 1;
  int ignore_label_size() const;
  void clear_ignore_label();
  static const int kIgnoreLabelFieldNumber = 1;
  ::google::protobuf::uint32 ignore_label(int index) const;
  void set_ignore_label(int index, ::google::protobuf::uint32 value);
  void add_ignore_label(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      ignore_label() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_ignore_label();

  // repeated float ignore_rate = 2;
  int ignore_rate_size() const;
  void clear_ignore_rate();
  static const int kIgnoreRateFieldNumber = 2;
  float ignore_rate(int index) const;
  void set_ignore_rate(int index, float value);
  void add_ignore_rate(float value);
  const ::google::protobuf::RepeatedField< float >&
      ignore_rate() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_ignore_rate();

  // optional bool elem_wise = 3 [default = true];
  bool has_elem_wise() const;
  void clear_elem_wise();
  static const int kElemWiseFieldNumber = 3;
  bool elem_wise() const;
  void set_elem_wise(bool value);

  // @@protoc_insertion_point(class_scope:caffe.LabelDiffIgnoreParameter)
 private:
  inline void set_has_elem_wise();
  inline void clear_has_elem_wise();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > ignore_label_;
  ::google::protobuf::RepeatedField< float > ignore_rate_;
  bool elem_wise_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<LabelDiffIgnoreParameter> LabelDiffIgnoreParameter_default_instance_;

// -------------------------------------------------------------------

class OffsetParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.OffsetParameter) */ {
 public:
  OffsetParameter();
  virtual ~OffsetParameter();

  OffsetParameter(const OffsetParameter& from);

  inline OffsetParameter& operator=(const OffsetParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OffsetParameter& default_instance();

  static const OffsetParameter* internal_default_instance();

  void Swap(OffsetParameter* other);

  // implements Message ----------------------------------------------

  inline OffsetParameter* New() const { return New(NULL); }

  OffsetParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OffsetParameter& from);
  void MergeFrom(const OffsetParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OffsetParameter* other);
  void UnsafeMergeFrom(const OffsetParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef OffsetParameter_Anchor Anchor;
  static const Anchor TOP_LEFT =
    OffsetParameter_Anchor_TOP_LEFT;
  static const Anchor CENTER =
    OffsetParameter_Anchor_CENTER;
  static inline bool Anchor_IsValid(int value) {
    return OffsetParameter_Anchor_IsValid(value);
  }
  static const Anchor Anchor_MIN =
    OffsetParameter_Anchor_Anchor_MIN;
  static const Anchor Anchor_MAX =
    OffsetParameter_Anchor_Anchor_MAX;
  static const int Anchor_ARRAYSIZE =
    OffsetParameter_Anchor_Anchor_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Anchor_descriptor() {
    return OffsetParameter_Anchor_descriptor();
  }
  static inline const ::std::string& Anchor_Name(Anchor value) {
    return OffsetParameter_Anchor_Name(value);
  }
  static inline bool Anchor_Parse(const ::std::string& name,
      Anchor* value) {
    return OffsetParameter_Anchor_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.OffsetParameter.Anchor origin = 1 [default = TOP_LEFT];
  bool has_origin() const;
  void clear_origin();
  static const int kOriginFieldNumber = 1;
  ::caffe::OffsetParameter_Anchor origin() const;
  void set_origin(::caffe::OffsetParameter_Anchor value);

  // optional .caffe.OffsetParameter.Anchor anchor = 2 [default = TOP_LEFT];
  bool has_anchor() const;
  void clear_anchor();
  static const int kAnchorFieldNumber = 2;
  ::caffe::OffsetParameter_Anchor anchor() const;
  void set_anchor(::caffe::OffsetParameter_Anchor value);

  // optional bool normalize = 3 [default = true];
  bool has_normalize() const;
  void clear_normalize();
  static const int kNormalizeFieldNumber = 3;
  bool normalize() const;
  void set_normalize(bool value);

  // @@protoc_insertion_point(class_scope:caffe.OffsetParameter)
 private:
  inline void set_has_origin();
  inline void clear_has_origin();
  inline void set_has_anchor();
  inline void clear_has_anchor();
  inline void set_has_normalize();
  inline void clear_has_normalize();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool normalize_;
  int origin_;
  int anchor_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<OffsetParameter> OffsetParameter_default_instance_;

// -------------------------------------------------------------------

class GTSubmapDataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.GTSubmapDataParameter) */ {
 public:
  GTSubmapDataParameter();
  virtual ~GTSubmapDataParameter();

  GTSubmapDataParameter(const GTSubmapDataParameter& from);

  inline GTSubmapDataParameter& operator=(const GTSubmapDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GTSubmapDataParameter& default_instance();

  static const GTSubmapDataParameter* internal_default_instance();

  void Swap(GTSubmapDataParameter* other);

  // implements Message ----------------------------------------------

  inline GTSubmapDataParameter* New() const { return New(NULL); }

  GTSubmapDataParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GTSubmapDataParameter& from);
  void MergeFrom(const GTSubmapDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GTSubmapDataParameter* other);
  void UnsafeMergeFrom(const GTSubmapDataParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 submap_batch_size = 1;
  bool has_submap_batch_size() const;
  void clear_submap_batch_size();
  static const int kSubmapBatchSizeFieldNumber = 1;
  ::google::protobuf::uint32 submap_batch_size() const;
  void set_submap_batch_size(::google::protobuf::uint32 value);

  // required .caffe.Size2i submap_size = 2;
  bool has_submap_size() const;
  void clear_submap_size();
  static const int kSubmapSizeFieldNumber = 2;
  const ::caffe::Size2i& submap_size() const;
  ::caffe::Size2i* mutable_submap_size();
  ::caffe::Size2i* release_submap_size();
  void set_allocated_submap_size(::caffe::Size2i* submap_size);

  // required .caffe.Size2i receptive_field = 3;
  bool has_receptive_field() const;
  void clear_receptive_field();
  static const int kReceptiveFieldFieldNumber = 3;
  const ::caffe::Size2i& receptive_field() const;
  ::caffe::Size2i* mutable_receptive_field();
  ::caffe::Size2i* release_receptive_field();
  void set_allocated_receptive_field(::caffe::Size2i* receptive_field);

  // required uint32 horizontal_stride = 4;
  bool has_horizontal_stride() const;
  void clear_horizontal_stride();
  static const int kHorizontalStrideFieldNumber = 4;
  ::google::protobuf::uint32 horizontal_stride() const;
  void set_horizontal_stride(::google::protobuf::uint32 value);

  // required uint32 vertical_stride = 5;
  bool has_vertical_stride() const;
  void clear_vertical_stride();
  static const int kVerticalStrideFieldNumber = 5;
  ::google::protobuf::uint32 vertical_stride() const;
  void set_vertical_stride(::google::protobuf::uint32 value);

  // optional .caffe.ActivationRegionParameter activation_region_param = 6;
  bool has_activation_region_param() const;
  void clear_activation_region_param();
  static const int kActivationRegionParamFieldNumber = 6;
  const ::caffe::ActivationRegionParameter& activation_region_param() const;
  ::caffe::ActivationRegionParameter* mutable_activation_region_param();
  ::caffe::ActivationRegionParameter* release_activation_region_param();
  void set_allocated_activation_region_param(::caffe::ActivationRegionParameter* activation_region_param);

  // optional uint32 num_jitter = 7 [default = 0];
  bool has_num_jitter() const;
  void clear_num_jitter();
  static const int kNumJitterFieldNumber = 7;
  ::google::protobuf::uint32 num_jitter() const;
  void set_num_jitter(::google::protobuf::uint32 value);

  // optional bool bbox_normalization = 8 [default = true];
  bool has_bbox_normalization() const;
  void clear_bbox_normalization();
  static const int kBboxNormalizationFieldNumber = 8;
  bool bbox_normalization() const;
  void set_bbox_normalization(bool value);

  // required .caffe.OffsetParameter offset_param = 9;
  bool has_offset_param() const;
  void clear_offset_param();
  static const int kOffsetParamFieldNumber = 9;
  const ::caffe::OffsetParameter& offset_param() const;
  ::caffe::OffsetParameter* mutable_offset_param();
  ::caffe::OffsetParameter* release_offset_param();
  void set_allocated_offset_param(::caffe::OffsetParameter* offset_param);

  // @@protoc_insertion_point(class_scope:caffe.GTSubmapDataParameter)
 private:
  inline void set_has_submap_batch_size();
  inline void clear_has_submap_batch_size();
  inline void set_has_submap_size();
  inline void clear_has_submap_size();
  inline void set_has_receptive_field();
  inline void clear_has_receptive_field();
  inline void set_has_horizontal_stride();
  inline void clear_has_horizontal_stride();
  inline void set_has_vertical_stride();
  inline void clear_has_vertical_stride();
  inline void set_has_activation_region_param();
  inline void clear_has_activation_region_param();
  inline void set_has_num_jitter();
  inline void clear_has_num_jitter();
  inline void set_has_bbox_normalization();
  inline void clear_has_bbox_normalization();
  inline void set_has_offset_param();
  inline void clear_has_offset_param();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::caffe::Size2i* submap_size_;
  ::caffe::Size2i* receptive_field_;
  ::caffe::ActivationRegionParameter* activation_region_param_;
  ::caffe::OffsetParameter* offset_param_;
  ::google::protobuf::uint32 submap_batch_size_;
  ::google::protobuf::uint32 horizontal_stride_;
  ::google::protobuf::uint32 vertical_stride_;
  ::google::protobuf::uint32 num_jitter_;
  bool bbox_normalization_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<GTSubmapDataParameter> GTSubmapDataParameter_default_instance_;

// -------------------------------------------------------------------

class TopSubmapDataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.TopSubmapDataParameter) */ {
 public:
  TopSubmapDataParameter();
  virtual ~TopSubmapDataParameter();

  TopSubmapDataParameter(const TopSubmapDataParameter& from);

  inline TopSubmapDataParameter& operator=(const TopSubmapDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TopSubmapDataParameter& default_instance();

  static const TopSubmapDataParameter* internal_default_instance();

  void Swap(TopSubmapDataParameter* other);

  // implements Message ----------------------------------------------

  inline TopSubmapDataParameter* New() const { return New(NULL); }

  TopSubmapDataParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TopSubmapDataParameter& from);
  void MergeFrom(const TopSubmapDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TopSubmapDataParameter* other);
  void UnsafeMergeFrom(const TopSubmapDataParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .caffe.Size2i img_size = 1;
  bool has_img_size() const;
  void clear_img_size();
  static const int kImgSizeFieldNumber = 1;
  const ::caffe::Size2i& img_size() const;
  ::caffe::Size2i* mutable_img_size();
  ::caffe::Size2i* release_img_size();
  void set_allocated_img_size(::caffe::Size2i* img_size);

  // required uint32 submap_batch_size = 2;
  bool has_submap_batch_size() const;
  void clear_submap_batch_size();
  static const int kSubmapBatchSizeFieldNumber = 2;
  ::google::protobuf::uint32 submap_batch_size() const;
  void set_submap_batch_size(::google::protobuf::uint32 value);

  // required .caffe.Size2i win_size = 3;
  bool has_win_size() const;
  void clear_win_size();
  static const int kWinSizeFieldNumber = 3;
  const ::caffe::Size2i& win_size() const;
  ::caffe::Size2i* mutable_win_size();
  ::caffe::Size2i* release_win_size();
  void set_allocated_win_size(::caffe::Size2i* win_size);

  // optional uint32 win_horizontal_stride = 4 [default = 1];
  bool has_win_horizontal_stride() const;
  void clear_win_horizontal_stride();
  static const int kWinHorizontalStrideFieldNumber = 4;
  ::google::protobuf::uint32 win_horizontal_stride() const;
  void set_win_horizontal_stride(::google::protobuf::uint32 value);

  // optional uint32 win_vertical_stride = 5 [default = 0];
  bool has_win_vertical_stride() const;
  void clear_win_vertical_stride();
  static const int kWinVerticalStrideFieldNumber = 5;
  ::google::protobuf::uint32 win_vertical_stride() const;
  void set_win_vertical_stride(::google::protobuf::uint32 value);

  // optional uint32 num_win_rows = 6;
  bool has_num_win_rows() const;
  void clear_num_win_rows();
  static const int kNumWinRowsFieldNumber = 6;
  ::google::protobuf::uint32 num_win_rows() const;
  void set_num_win_rows(::google::protobuf::uint32 value);

  // optional uint32 num_win_cols = 7;
  bool has_num_win_cols() const;
  void clear_num_win_cols();
  static const int kNumWinColsFieldNumber = 7;
  ::google::protobuf::uint32 num_win_cols() const;
  void set_num_win_cols(::google::protobuf::uint32 value);

  // optional .caffe.Size2i offset_unit = 8;
  bool has_offset_unit() const;
  void clear_offset_unit();
  static const int kOffsetUnitFieldNumber = 8;
  const ::caffe::Size2i& offset_unit() const;
  ::caffe::Size2i* mutable_offset_unit();
  ::caffe::Size2i* release_offset_unit();
  void set_allocated_offset_unit(::caffe::Size2i* offset_unit);

  // optional uint32 offset_horizontal_stride = 9;
  bool has_offset_horizontal_stride() const;
  void clear_offset_horizontal_stride();
  static const int kOffsetHorizontalStrideFieldNumber = 9;
  ::google::protobuf::uint32 offset_horizontal_stride() const;
  void set_offset_horizontal_stride(::google::protobuf::uint32 value);

  // optional uint32 offset_vertical_stride = 10;
  bool has_offset_vertical_stride() const;
  void clear_offset_vertical_stride();
  static const int kOffsetVerticalStrideFieldNumber = 10;
  ::google::protobuf::uint32 offset_vertical_stride() const;
  void set_offset_vertical_stride(::google::protobuf::uint32 value);

  // optional .caffe.Size2i gt_unit = 11;
  bool has_gt_unit() const;
  void clear_gt_unit();
  static const int kGtUnitFieldNumber = 11;
  const ::caffe::Size2i& gt_unit() const;
  ::caffe::Size2i* mutable_gt_unit();
  ::caffe::Size2i* release_gt_unit();
  void set_allocated_gt_unit(::caffe::Size2i* gt_unit);

  // optional uint32 gt_horizontal_stride = 12;
  bool has_gt_horizontal_stride() const;
  void clear_gt_horizontal_stride();
  static const int kGtHorizontalStrideFieldNumber = 12;
  ::google::protobuf::uint32 gt_horizontal_stride() const;
  void set_gt_horizontal_stride(::google::protobuf::uint32 value);

  // optional uint32 gt_vertical_stride = 13;
  bool has_gt_vertical_stride() const;
  void clear_gt_vertical_stride();
  static const int kGtVerticalStrideFieldNumber = 13;
  ::google::protobuf::uint32 gt_vertical_stride() const;
  void set_gt_vertical_stride(::google::protobuf::uint32 value);

  // optional .caffe.BBoxParameter bbox_param = 14;
  bool has_bbox_param() const;
  void clear_bbox_param();
  static const int kBboxParamFieldNumber = 14;
  const ::caffe::BBoxParameter& bbox_param() const;
  ::caffe::BBoxParameter* mutable_bbox_param();
  ::caffe::BBoxParameter* release_bbox_param();
  void set_allocated_bbox_param(::caffe::BBoxParameter* bbox_param);

  // optional bool offset_normalize = 15 [default = true];
  bool has_offset_normalize() const;
  void clear_offset_normalize();
  static const int kOffsetNormalizeFieldNumber = 15;
  bool offset_normalize() const;
  void set_offset_normalize(bool value);

  // @@protoc_insertion_point(class_scope:caffe.TopSubmapDataParameter)
 private:
  inline void set_has_img_size();
  inline void clear_has_img_size();
  inline void set_has_submap_batch_size();
  inline void clear_has_submap_batch_size();
  inline void set_has_win_size();
  inline void clear_has_win_size();
  inline void set_has_win_horizontal_stride();
  inline void clear_has_win_horizontal_stride();
  inline void set_has_win_vertical_stride();
  inline void clear_has_win_vertical_stride();
  inline void set_has_num_win_rows();
  inline void clear_has_num_win_rows();
  inline void set_has_num_win_cols();
  inline void clear_has_num_win_cols();
  inline void set_has_offset_unit();
  inline void clear_has_offset_unit();
  inline void set_has_offset_horizontal_stride();
  inline void clear_has_offset_horizontal_stride();
  inline void set_has_offset_vertical_stride();
  inline void clear_has_offset_vertical_stride();
  inline void set_has_gt_unit();
  inline void clear_has_gt_unit();
  inline void set_has_gt_horizontal_stride();
  inline void clear_has_gt_horizontal_stride();
  inline void set_has_gt_vertical_stride();
  inline void clear_has_gt_vertical_stride();
  inline void set_has_bbox_param();
  inline void clear_has_bbox_param();
  inline void set_has_offset_normalize();
  inline void clear_has_offset_normalize();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::caffe::Size2i* img_size_;
  ::caffe::Size2i* win_size_;
  ::caffe::Size2i* offset_unit_;
  ::caffe::Size2i* gt_unit_;
  ::caffe::BBoxParameter* bbox_param_;
  ::google::protobuf::uint32 submap_batch_size_;
  ::google::protobuf::uint32 win_vertical_stride_;
  ::google::protobuf::uint32 num_win_rows_;
  ::google::protobuf::uint32 num_win_cols_;
  ::google::protobuf::uint32 offset_horizontal_stride_;
  ::google::protobuf::uint32 offset_vertical_stride_;
  ::google::protobuf::uint32 gt_horizontal_stride_;
  ::google::protobuf::uint32 gt_vertical_stride_;
  ::google::protobuf::uint32 win_horizontal_stride_;
  bool offset_normalize_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TopSubmapDataParameter> TopSubmapDataParameter_default_instance_;

// -------------------------------------------------------------------

class YOLOLikeLossParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.YOLOLikeLossParameter) */ {
 public:
  YOLOLikeLossParameter();
  virtual ~YOLOLikeLossParameter();

  YOLOLikeLossParameter(const YOLOLikeLossParameter& from);

  inline YOLOLikeLossParameter& operator=(const YOLOLikeLossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const YOLOLikeLossParameter& default_instance();

  static const YOLOLikeLossParameter* internal_default_instance();

  void Swap(YOLOLikeLossParameter* other);

  // implements Message ----------------------------------------------

  inline YOLOLikeLossParameter* New() const { return New(NULL); }

  YOLOLikeLossParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const YOLOLikeLossParameter& from);
  void MergeFrom(const YOLOLikeLossParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YOLOLikeLossParameter* other);
  void UnsafeMergeFrom(const YOLOLikeLossParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num_bbox_per_cell = 1 [default = 2];
  bool has_num_bbox_per_cell() const;
  void clear_num_bbox_per_cell();
  static const int kNumBboxPerCellFieldNumber = 1;
  ::google::protobuf::uint32 num_bbox_per_cell() const;
  void set_num_bbox_per_cell(::google::protobuf::uint32 value);

  // optional uint32 num_class = 2 [default = 20];
  bool has_num_class() const;
  void clear_num_class();
  static const int kNumClassFieldNumber = 2;
  ::google::protobuf::uint32 num_class() const;
  void set_num_class(::google::protobuf::uint32 value);

  // optional float noobj_scale = 3 [default = 1];
  bool has_noobj_scale() const;
  void clear_noobj_scale();
  static const int kNoobjScaleFieldNumber = 3;
  float noobj_scale() const;
  void set_noobj_scale(float value);

  // optional float obj_scale = 4 [default = 1];
  bool has_obj_scale() const;
  void clear_obj_scale();
  static const int kObjScaleFieldNumber = 4;
  float obj_scale() const;
  void set_obj_scale(float value);

  // optional float class_scale = 5 [default = 1];
  bool has_class_scale() const;
  void clear_class_scale();
  static const int kClassScaleFieldNumber = 5;
  float class_scale() const;
  void set_class_scale(float value);

  // optional float coord_scale = 6 [default = 1];
  bool has_coord_scale() const;
  void clear_coord_scale();
  static const int kCoordScaleFieldNumber = 6;
  float coord_scale() const;
  void set_coord_scale(float value);

  // optional .caffe.BBoxParameter bbox_param = 7;
  bool has_bbox_param() const;
  void clear_bbox_param();
  static const int kBboxParamFieldNumber = 7;
  const ::caffe::BBoxParameter& bbox_param() const;
  ::caffe::BBoxParameter* mutable_bbox_param();
  ::caffe::BBoxParameter* release_bbox_param();
  void set_allocated_bbox_param(::caffe::BBoxParameter* bbox_param);

  // repeated float class_weight = 8;
  int class_weight_size() const;
  void clear_class_weight();
  static const int kClassWeightFieldNumber = 8;
  float class_weight(int index) const;
  void set_class_weight(int index, float value);
  void add_class_weight(float value);
  const ::google::protobuf::RepeatedField< float >&
      class_weight() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_class_weight();

  // @@protoc_insertion_point(class_scope:caffe.YOLOLikeLossParameter)
 private:
  inline void set_has_num_bbox_per_cell();
  inline void clear_has_num_bbox_per_cell();
  inline void set_has_num_class();
  inline void clear_has_num_class();
  inline void set_has_noobj_scale();
  inline void clear_has_noobj_scale();
  inline void set_has_obj_scale();
  inline void clear_has_obj_scale();
  inline void set_has_class_scale();
  inline void clear_has_class_scale();
  inline void set_has_coord_scale();
  inline void clear_has_coord_scale();
  inline void set_has_bbox_param();
  inline void clear_has_bbox_param();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > class_weight_;
  ::caffe::BBoxParameter* bbox_param_;
  ::google::protobuf::uint32 num_bbox_per_cell_;
  ::google::protobuf::uint32 num_class_;
  float noobj_scale_;
  float obj_scale_;
  float class_scale_;
  float coord_scale_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<YOLOLikeLossParameter> YOLOLikeLossParameter_default_instance_;

// -------------------------------------------------------------------

class WeightedSoftmaxLossParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.WeightedSoftmaxLossParameter) */ {
 public:
  WeightedSoftmaxLossParameter();
  virtual ~WeightedSoftmaxLossParameter();

  WeightedSoftmaxLossParameter(const WeightedSoftmaxLossParameter& from);

  inline WeightedSoftmaxLossParameter& operator=(const WeightedSoftmaxLossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WeightedSoftmaxLossParameter& default_instance();

  static const WeightedSoftmaxLossParameter* internal_default_instance();

  void Swap(WeightedSoftmaxLossParameter* other);

  // implements Message ----------------------------------------------

  inline WeightedSoftmaxLossParameter* New() const { return New(NULL); }

  WeightedSoftmaxLossParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WeightedSoftmaxLossParameter& from);
  void MergeFrom(const WeightedSoftmaxLossParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WeightedSoftmaxLossParameter* other);
  void UnsafeMergeFrom(const WeightedSoftmaxLossParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float class_weight = 1;
  int class_weight_size() const;
  void clear_class_weight();
  static const int kClassWeightFieldNumber = 1;
  float class_weight(int index) const;
  void set_class_weight(int index, float value);
  void add_class_weight(float value);
  const ::google::protobuf::RepeatedField< float >&
      class_weight() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_class_weight();

  // @@protoc_insertion_point(class_scope:caffe.WeightedSoftmaxLossParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > class_weight_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<WeightedSoftmaxLossParameter> WeightedSoftmaxLossParameter_default_instance_;

// -------------------------------------------------------------------

class GridProposalLossParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.GridProposalLossParameter) */ {
 public:
  GridProposalLossParameter();
  virtual ~GridProposalLossParameter();

  GridProposalLossParameter(const GridProposalLossParameter& from);

  inline GridProposalLossParameter& operator=(const GridProposalLossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GridProposalLossParameter& default_instance();

  static const GridProposalLossParameter* internal_default_instance();

  void Swap(GridProposalLossParameter* other);

  // implements Message ----------------------------------------------

  inline GridProposalLossParameter* New() const { return New(NULL); }

  GridProposalLossParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GridProposalLossParameter& from);
  void MergeFrom(const GridProposalLossParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GridProposalLossParameter* other);
  void UnsafeMergeFrom(const GridProposalLossParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float noobj_weight = 1 [default = 1];
  bool has_noobj_weight() const;
  void clear_noobj_weight();
  static const int kNoobjWeightFieldNumber = 1;
  float noobj_weight() const;
  void set_noobj_weight(float value);

  // repeated float obj_weight = 2;
  int obj_weight_size() const;
  void clear_obj_weight();
  static const int kObjWeightFieldNumber = 2;
  float obj_weight(int index) const;
  void set_obj_weight(int index, float value);
  void add_obj_weight(float value);
  const ::google::protobuf::RepeatedField< float >&
      obj_weight() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_obj_weight();

  // optional uint32 num_class = 3 [default = 1];
  bool has_num_class() const;
  void clear_num_class();
  static const int kNumClassFieldNumber = 3;
  ::google::protobuf::uint32 num_class() const;
  void set_num_class(::google::protobuf::uint32 value);

  // optional bool general_obj_proposal = 4 [default = false];
  bool has_general_obj_proposal() const;
  void clear_general_obj_proposal();
  static const int kGeneralObjProposalFieldNumber = 4;
  bool general_obj_proposal() const;
  void set_general_obj_proposal(bool value);

  // @@protoc_insertion_point(class_scope:caffe.GridProposalLossParameter)
 private:
  inline void set_has_noobj_weight();
  inline void clear_has_noobj_weight();
  inline void set_has_num_class();
  inline void clear_has_num_class();
  inline void set_has_general_obj_proposal();
  inline void clear_has_general_obj_proposal();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > obj_weight_;
  bool general_obj_proposal_;
  float noobj_weight_;
  ::google::protobuf::uint32 num_class_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<GridProposalLossParameter> GridProposalLossParameter_default_instance_;

// -------------------------------------------------------------------

class BGSynthesisDataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.BGSynthesisDataParameter) */ {
 public:
  BGSynthesisDataParameter();
  virtual ~BGSynthesisDataParameter();

  BGSynthesisDataParameter(const BGSynthesisDataParameter& from);

  inline BGSynthesisDataParameter& operator=(const BGSynthesisDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BGSynthesisDataParameter& default_instance();

  static const BGSynthesisDataParameter* internal_default_instance();

  void Swap(BGSynthesisDataParameter* other);

  // implements Message ----------------------------------------------

  inline BGSynthesisDataParameter* New() const { return New(NULL); }

  BGSynthesisDataParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BGSynthesisDataParameter& from);
  void MergeFrom(const BGSynthesisDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BGSynthesisDataParameter* other);
  void UnsafeMergeFrom(const BGSynthesisDataParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 width = 1;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // required uint32 height = 2;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // required .caffe.LayerParameter obj_data_param = 3;
  bool has_obj_data_param() const;
  void clear_obj_data_param();
  static const int kObjDataParamFieldNumber = 3;
  const ::caffe::LayerParameter& obj_data_param() const;
  ::caffe::LayerParameter* mutable_obj_data_param();
  ::caffe::LayerParameter* release_obj_data_param();
  void set_allocated_obj_data_param(::caffe::LayerParameter* obj_data_param);

  // required .caffe.LayerParameter bg_data_param = 4;
  bool has_bg_data_param() const;
  void clear_bg_data_param();
  static const int kBgDataParamFieldNumber = 4;
  const ::caffe::LayerParameter& bg_data_param() const;
  ::caffe::LayerParameter* mutable_bg_data_param();
  ::caffe::LayerParameter* release_bg_data_param();
  void set_allocated_bg_data_param(::caffe::LayerParameter* bg_data_param);

  // required uint32 max_obj = 5;
  bool has_max_obj() const;
  void clear_max_obj();
  static const int kMaxObjFieldNumber = 5;
  ::google::protobuf::uint32 max_obj() const;
  void set_max_obj(::google::protobuf::uint32 value);

  // optional uint32 min_obj = 6;
  bool has_min_obj() const;
  void clear_min_obj();
  static const int kMinObjFieldNumber = 6;
  ::google::protobuf::uint32 min_obj() const;
  void set_min_obj(::google::protobuf::uint32 value);

  // optional .caffe.ActivationRegionParameter active_region_param = 7;
  bool has_active_region_param() const;
  void clear_active_region_param();
  static const int kActiveRegionParamFieldNumber = 7;
  const ::caffe::ActivationRegionParameter& active_region_param() const;
  ::caffe::ActivationRegionParameter* mutable_active_region_param();
  ::caffe::ActivationRegionParameter* release_active_region_param();
  void set_allocated_active_region_param(::caffe::ActivationRegionParameter* active_region_param);

  // optional uint32 batch_size = 8 [default = 1];
  bool has_batch_size() const;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 8;
  ::google::protobuf::uint32 batch_size() const;
  void set_batch_size(::google::protobuf::uint32 value);

  // optional uint32 num_neg = 9 [default = 0];
  bool has_num_neg() const;
  void clear_num_neg();
  static const int kNumNegFieldNumber = 9;
  ::google::protobuf::uint32 num_neg() const;
  void set_num_neg(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.BGSynthesisDataParameter)
 private:
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_obj_data_param();
  inline void clear_has_obj_data_param();
  inline void set_has_bg_data_param();
  inline void clear_has_bg_data_param();
  inline void set_has_max_obj();
  inline void clear_has_max_obj();
  inline void set_has_min_obj();
  inline void clear_has_min_obj();
  inline void set_has_active_region_param();
  inline void clear_has_active_region_param();
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_num_neg();
  inline void clear_has_num_neg();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::caffe::LayerParameter* obj_data_param_;
  ::caffe::LayerParameter* bg_data_param_;
  ::caffe::ActivationRegionParameter* active_region_param_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 max_obj_;
  ::google::protobuf::uint32 min_obj_;
  ::google::protobuf::uint32 num_neg_;
  ::google::protobuf::uint32 batch_size_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<BGSynthesisDataParameter> BGSynthesisDataParameter_default_instance_;

// -------------------------------------------------------------------

class SizeFilterParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SizeFilterParameter) */ {
 public:
  SizeFilterParameter();
  virtual ~SizeFilterParameter();

  SizeFilterParameter(const SizeFilterParameter& from);

  inline SizeFilterParameter& operator=(const SizeFilterParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SizeFilterParameter& default_instance();

  static const SizeFilterParameter* internal_default_instance();

  void Swap(SizeFilterParameter* other);

  // implements Message ----------------------------------------------

  inline SizeFilterParameter* New() const { return New(NULL); }

  SizeFilterParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SizeFilterParameter& from);
  void MergeFrom(const SizeFilterParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SizeFilterParameter* other);
  void UnsafeMergeFrom(const SizeFilterParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 axis = 1 [default = 2];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 1;
  ::google::protobuf::uint32 axis() const;
  void set_axis(::google::protobuf::uint32 value);

  // optional double min = 2;
  bool has_min() const;
  void clear_min();
  static const int kMinFieldNumber = 2;
  double min() const;
  void set_min(double value);

  // optional double max = 3;
  bool has_max() const;
  void clear_max();
  static const int kMaxFieldNumber = 3;
  double max() const;
  void set_max(double value);

  // @@protoc_insertion_point(class_scope:caffe.SizeFilterParameter)
 private:
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_min();
  inline void clear_has_min();
  inline void set_has_max();
  inline void clear_has_max();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double min_;
  double max_;
  ::google::protobuf::uint32 axis_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SizeFilterParameter> SizeFilterParameter_default_instance_;

// -------------------------------------------------------------------

class RandomResizeParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.RandomResizeParameter) */ {
 public:
  RandomResizeParameter();
  virtual ~RandomResizeParameter();

  RandomResizeParameter(const RandomResizeParameter& from);

  inline RandomResizeParameter& operator=(const RandomResizeParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RandomResizeParameter& default_instance();

  static const RandomResizeParameter* internal_default_instance();

  void Swap(RandomResizeParameter* other);

  // implements Message ----------------------------------------------

  inline RandomResizeParameter* New() const { return New(NULL); }

  RandomResizeParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RandomResizeParameter& from);
  void MergeFrom(const RandomResizeParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RandomResizeParameter* other);
  void UnsafeMergeFrom(const RandomResizeParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float p = 1 [default = 1];
  bool has_p() const;
  void clear_p();
  static const int kPFieldNumber = 1;
  float p() const;
  void set_p(float value);

  // optional float w_min = 2 [default = 1];
  bool has_w_min() const;
  void clear_w_min();
  static const int kWMinFieldNumber = 2;
  float w_min() const;
  void set_w_min(float value);

  // optional float w_max = 3 [default = 1];
  bool has_w_max() const;
  void clear_w_max();
  static const int kWMaxFieldNumber = 3;
  float w_max() const;
  void set_w_max(float value);

  // optional float h_min = 4 [default = 1];
  bool has_h_min() const;
  void clear_h_min();
  static const int kHMinFieldNumber = 4;
  float h_min() const;
  void set_h_min(float value);

  // optional float h_max = 5 [default = 1];
  bool has_h_max() const;
  void clear_h_max();
  static const int kHMaxFieldNumber = 5;
  float h_max() const;
  void set_h_max(float value);

  // @@protoc_insertion_point(class_scope:caffe.RandomResizeParameter)
 private:
  inline void set_has_p();
  inline void clear_has_p();
  inline void set_has_w_min();
  inline void clear_has_w_min();
  inline void set_has_w_max();
  inline void clear_has_w_max();
  inline void set_has_h_min();
  inline void clear_has_h_min();
  inline void set_has_h_max();
  inline void clear_has_h_max();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float h_max_;
  float p_;
  float w_min_;
  float w_max_;
  float h_min_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<RandomResizeParameter> RandomResizeParameter_default_instance_;

// -------------------------------------------------------------------

class GaussianNoiseParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.GaussianNoiseParameter) */ {
 public:
  GaussianNoiseParameter();
  virtual ~GaussianNoiseParameter();

  GaussianNoiseParameter(const GaussianNoiseParameter& from);

  inline GaussianNoiseParameter& operator=(const GaussianNoiseParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GaussianNoiseParameter& default_instance();

  static const GaussianNoiseParameter* internal_default_instance();

  void Swap(GaussianNoiseParameter* other);

  // implements Message ----------------------------------------------

  inline GaussianNoiseParameter* New() const { return New(NULL); }

  GaussianNoiseParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GaussianNoiseParameter& from);
  void MergeFrom(const GaussianNoiseParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GaussianNoiseParameter* other);
  void UnsafeMergeFrom(const GaussianNoiseParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float p = 1 [default = 1];
  bool has_p() const;
  void clear_p();
  static const int kPFieldNumber = 1;
  float p() const;
  void set_p(float value);

  // optional float mean = 2 [default = 0];
  bool has_mean() const;
  void clear_mean();
  static const int kMeanFieldNumber = 2;
  float mean() const;
  void set_mean(float value);

  // optional float stddev = 3 [default = 1];
  bool has_stddev() const;
  void clear_stddev();
  static const int kStddevFieldNumber = 3;
  float stddev() const;
  void set_stddev(float value);

  // @@protoc_insertion_point(class_scope:caffe.GaussianNoiseParameter)
 private:
  inline void set_has_p();
  inline void clear_has_p();
  inline void set_has_mean();
  inline void clear_has_mean();
  inline void set_has_stddev();
  inline void clear_has_stddev();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float mean_;
  float p_;
  float stddev_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<GaussianNoiseParameter> GaussianNoiseParameter_default_instance_;

// -------------------------------------------------------------------

class MirrorParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.MirrorParameter) */ {
 public:
  MirrorParameter();
  virtual ~MirrorParameter();

  MirrorParameter(const MirrorParameter& from);

  inline MirrorParameter& operator=(const MirrorParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MirrorParameter& default_instance();

  static const MirrorParameter* internal_default_instance();

  void Swap(MirrorParameter* other);

  // implements Message ----------------------------------------------

  inline MirrorParameter* New() const { return New(NULL); }

  MirrorParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MirrorParameter& from);
  void MergeFrom(const MirrorParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MirrorParameter* other);
  void UnsafeMergeFrom(const MirrorParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float p = 1 [default = 0.5];
  bool has_p() const;
  void clear_p();
  static const int kPFieldNumber = 1;
  float p() const;
  void set_p(float value);

  // @@protoc_insertion_point(class_scope:caffe.MirrorParameter)
 private:
  inline void set_has_p();
  inline void clear_has_p();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float p_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MirrorParameter> MirrorParameter_default_instance_;

// -------------------------------------------------------------------

class BlurParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.BlurParameter) */ {
 public:
  BlurParameter();
  virtual ~BlurParameter();

  BlurParameter(const BlurParameter& from);

  inline BlurParameter& operator=(const BlurParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlurParameter& default_instance();

  static const BlurParameter* internal_default_instance();

  void Swap(BlurParameter* other);

  // implements Message ----------------------------------------------

  inline BlurParameter* New() const { return New(NULL); }

  BlurParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlurParameter& from);
  void MergeFrom(const BlurParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlurParameter* other);
  void UnsafeMergeFrom(const BlurParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float p = 1 [default = 0.5];
  bool has_p() const;
  void clear_p();
  static const int kPFieldNumber = 1;
  float p() const;
  void set_p(float value);

  // optional uint32 kernel_size = 2 [default = 3];
  bool has_kernel_size() const;
  void clear_kernel_size();
  static const int kKernelSizeFieldNumber = 2;
  ::google::protobuf::uint32 kernel_size() const;
  void set_kernel_size(::google::protobuf::uint32 value);

  // optional float sigma = 3 [default = 1.4];
  bool has_sigma() const;
  void clear_sigma();
  static const int kSigmaFieldNumber = 3;
  float sigma() const;
  void set_sigma(float value);

  // @@protoc_insertion_point(class_scope:caffe.BlurParameter)
 private:
  inline void set_has_p();
  inline void clear_has_p();
  inline void set_has_kernel_size();
  inline void clear_has_kernel_size();
  inline void set_has_sigma();
  inline void clear_has_sigma();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float sigma_;
  float p_;
  ::google::protobuf::uint32 kernel_size_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<BlurParameter> BlurParameter_default_instance_;

// -------------------------------------------------------------------

class AugmentationParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.AugmentationParameter) */ {
 public:
  AugmentationParameter();
  virtual ~AugmentationParameter();

  AugmentationParameter(const AugmentationParameter& from);

  inline AugmentationParameter& operator=(const AugmentationParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AugmentationParameter& default_instance();

  static const AugmentationParameter* internal_default_instance();

  void Swap(AugmentationParameter* other);

  // implements Message ----------------------------------------------

  inline AugmentationParameter* New() const { return New(NULL); }

  AugmentationParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AugmentationParameter& from);
  void MergeFrom(const AugmentationParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AugmentationParameter* other);
  void UnsafeMergeFrom(const AugmentationParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.PaddingParameter pad_param = 1;
  bool has_pad_param() const;
  void clear_pad_param();
  static const int kPadParamFieldNumber = 1;
  const ::caffe::PaddingParameter& pad_param() const;
  ::caffe::PaddingParameter* mutable_pad_param();
  ::caffe::PaddingParameter* release_pad_param();
  void set_allocated_pad_param(::caffe::PaddingParameter* pad_param);

  // optional .caffe.RandomResizeParameter rand_resize_param = 2;
  bool has_rand_resize_param() const;
  void clear_rand_resize_param();
  static const int kRandResizeParamFieldNumber = 2;
  const ::caffe::RandomResizeParameter& rand_resize_param() const;
  ::caffe::RandomResizeParameter* mutable_rand_resize_param();
  ::caffe::RandomResizeParameter* release_rand_resize_param();
  void set_allocated_rand_resize_param(::caffe::RandomResizeParameter* rand_resize_param);

  // repeated .caffe.GaussianNoiseParameter gauss_noise_param = 3;
  int gauss_noise_param_size() const;
  void clear_gauss_noise_param();
  static const int kGaussNoiseParamFieldNumber = 3;
  const ::caffe::GaussianNoiseParameter& gauss_noise_param(int index) const;
  ::caffe::GaussianNoiseParameter* mutable_gauss_noise_param(int index);
  ::caffe::GaussianNoiseParameter* add_gauss_noise_param();
  ::google::protobuf::RepeatedPtrField< ::caffe::GaussianNoiseParameter >*
      mutable_gauss_noise_param();
  const ::google::protobuf::RepeatedPtrField< ::caffe::GaussianNoiseParameter >&
      gauss_noise_param() const;

  // optional .caffe.MirrorParameter mirror_param = 4;
  bool has_mirror_param() const;
  void clear_mirror_param();
  static const int kMirrorParamFieldNumber = 4;
  const ::caffe::MirrorParameter& mirror_param() const;
  ::caffe::MirrorParameter* mutable_mirror_param();
  ::caffe::MirrorParameter* release_mirror_param();
  void set_allocated_mirror_param(::caffe::MirrorParameter* mirror_param);

  // optional .caffe.BlurParameter blur_param = 5;
  bool has_blur_param() const;
  void clear_blur_param();
  static const int kBlurParamFieldNumber = 5;
  const ::caffe::BlurParameter& blur_param() const;
  ::caffe::BlurParameter* mutable_blur_param();
  ::caffe::BlurParameter* release_blur_param();
  void set_allocated_blur_param(::caffe::BlurParameter* blur_param);

  // @@protoc_insertion_point(class_scope:caffe.AugmentationParameter)
 private:
  inline void set_has_pad_param();
  inline void clear_has_pad_param();
  inline void set_has_rand_resize_param();
  inline void clear_has_rand_resize_param();
  inline void set_has_mirror_param();
  inline void clear_has_mirror_param();
  inline void set_has_blur_param();
  inline void clear_has_blur_param();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe::GaussianNoiseParameter > gauss_noise_param_;
  ::caffe::PaddingParameter* pad_param_;
  ::caffe::RandomResizeParameter* rand_resize_param_;
  ::caffe::MirrorParameter* mirror_param_;
  ::caffe::BlurParameter* blur_param_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AugmentationParameter> AugmentationParameter_default_instance_;

// -------------------------------------------------------------------

class HeatmapParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.HeatmapParameter) */ {
 public:
  HeatmapParameter();
  virtual ~HeatmapParameter();

  HeatmapParameter(const HeatmapParameter& from);

  inline HeatmapParameter& operator=(const HeatmapParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeatmapParameter& default_instance();

  static const HeatmapParameter* internal_default_instance();

  void Swap(HeatmapParameter* other);

  // implements Message ----------------------------------------------

  inline HeatmapParameter* New() const { return New(NULL); }

  HeatmapParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeatmapParameter& from);
  void MergeFrom(const HeatmapParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HeatmapParameter* other);
  void UnsafeMergeFrom(const HeatmapParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num_label = 1 [default = 1];
  bool has_num_label() const;
  void clear_num_label();
  static const int kNumLabelFieldNumber = 1;
  ::google::protobuf::uint32 num_label() const;
  void set_num_label(::google::protobuf::uint32 value);

  // optional bool bbox_normalized = 2 [default = true];
  bool has_bbox_normalized() const;
  void clear_bbox_normalized();
  static const int kBboxNormalizedFieldNumber = 2;
  bool bbox_normalized() const;
  void set_bbox_normalized(bool value);

  // optional float width = 3 [default = 1];
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  float width() const;
  void set_width(float value);

  // optional float height = 4 [default = 1];
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 4;
  float height() const;
  void set_height(float value);

  // optional uint32 rows = 5;
  bool has_rows() const;
  void clear_rows();
  static const int kRowsFieldNumber = 5;
  ::google::protobuf::uint32 rows() const;
  void set_rows(::google::protobuf::uint32 value);

  // optional uint32 cols = 6;
  bool has_cols() const;
  void clear_cols();
  static const int kColsFieldNumber = 6;
  ::google::protobuf::uint32 cols() const;
  void set_cols(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.HeatmapParameter)
 private:
  inline void set_has_num_label();
  inline void clear_has_num_label();
  inline void set_has_bbox_normalized();
  inline void clear_has_bbox_normalized();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_rows();
  inline void clear_has_rows();
  inline void set_has_cols();
  inline void clear_has_cols();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 rows_;
  ::google::protobuf::uint32 cols_;
  ::google::protobuf::uint32 num_label_;
  bool bbox_normalized_;
  float width_;
  float height_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<HeatmapParameter> HeatmapParameter_default_instance_;

// -------------------------------------------------------------------

class MinibatchDataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.MinibatchDataParameter) */ {
 public:
  MinibatchDataParameter();
  virtual ~MinibatchDataParameter();

  MinibatchDataParameter(const MinibatchDataParameter& from);

  inline MinibatchDataParameter& operator=(const MinibatchDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MinibatchDataParameter& default_instance();

  static const MinibatchDataParameter* internal_default_instance();

  void Swap(MinibatchDataParameter* other);

  // implements Message ----------------------------------------------

  inline MinibatchDataParameter* New() const { return New(NULL); }

  MinibatchDataParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MinibatchDataParameter& from);
  void MergeFrom(const MinibatchDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MinibatchDataParameter* other);
  void UnsafeMergeFrom(const MinibatchDataParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num_batch = 1 [default = 128];
  bool has_num_batch() const;
  void clear_num_batch();
  static const int kNumBatchFieldNumber = 1;
  ::google::protobuf::uint32 num_batch() const;
  void set_num_batch(::google::protobuf::uint32 value);

  // optional uint32 width = 2 [default = 0];
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // optional uint32 height = 3 [default = 0];
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // optional uint32 num_gt = 4 [default = 10];
  bool has_num_gt() const;
  void clear_num_gt();
  static const int kNumGtFieldNumber = 4;
  ::google::protobuf::uint32 num_gt() const;
  void set_num_gt(::google::protobuf::uint32 value);

  // optional uint32 max_num_patch = 5 [default = 1];
  bool has_max_num_patch() const;
  void clear_max_num_patch();
  static const int kMaxNumPatchFieldNumber = 5;
  ::google::protobuf::uint32 max_num_patch() const;
  void set_max_num_patch(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.MinibatchDataParameter)
 private:
  inline void set_has_num_batch();
  inline void clear_has_num_batch();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_num_gt();
  inline void clear_has_num_gt();
  inline void set_has_max_num_patch();
  inline void clear_has_max_num_patch();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 max_num_patch_;
  ::google::protobuf::uint32 num_batch_;
  ::google::protobuf::uint32 num_gt_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MinibatchDataParameter> MinibatchDataParameter_default_instance_;

// -------------------------------------------------------------------

class RowColProposalTransformParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.RowColProposalTransformParameter) */ {
 public:
  RowColProposalTransformParameter();
  virtual ~RowColProposalTransformParameter();

  RowColProposalTransformParameter(const RowColProposalTransformParameter& from);

  inline RowColProposalTransformParameter& operator=(const RowColProposalTransformParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RowColProposalTransformParameter& default_instance();

  static const RowColProposalTransformParameter* internal_default_instance();

  void Swap(RowColProposalTransformParameter* other);

  // implements Message ----------------------------------------------

  inline RowColProposalTransformParameter* New() const { return New(NULL); }

  RowColProposalTransformParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RowColProposalTransformParameter& from);
  void MergeFrom(const RowColProposalTransformParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RowColProposalTransformParameter* other);
  void UnsafeMergeFrom(const RowColProposalTransformParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 row = 1 [default = 7];
  bool has_row() const;
  void clear_row();
  static const int kRowFieldNumber = 1;
  ::google::protobuf::uint32 row() const;
  void set_row(::google::protobuf::uint32 value);

  // optional uint32 col = 2 [default = 7];
  bool has_col() const;
  void clear_col();
  static const int kColFieldNumber = 2;
  ::google::protobuf::uint32 col() const;
  void set_col(::google::protobuf::uint32 value);

  // required uint32 in_width = 3;
  bool has_in_width() const;
  void clear_in_width();
  static const int kInWidthFieldNumber = 3;
  ::google::protobuf::uint32 in_width() const;
  void set_in_width(::google::protobuf::uint32 value);

  // required uint32 in_height = 4;
  bool has_in_height() const;
  void clear_in_height();
  static const int kInHeightFieldNumber = 4;
  ::google::protobuf::uint32 in_height() const;
  void set_in_height(::google::protobuf::uint32 value);

  // optional uint32 out_width = 5 [default = 1];
  bool has_out_width() const;
  void clear_out_width();
  static const int kOutWidthFieldNumber = 5;
  ::google::protobuf::uint32 out_width() const;
  void set_out_width(::google::protobuf::uint32 value);

  // optional uint32 out_height = 6 [default = 1];
  bool has_out_height() const;
  void clear_out_height();
  static const int kOutHeightFieldNumber = 6;
  ::google::protobuf::uint32 out_height() const;
  void set_out_height(::google::protobuf::uint32 value);

  // optional bool objectness = 7;
  bool has_objectness() const;
  void clear_objectness();
  static const int kObjectnessFieldNumber = 7;
  bool objectness() const;
  void set_objectness(bool value);

  // optional uint32 num_label = 8;
  bool has_num_label() const;
  void clear_num_label();
  static const int kNumLabelFieldNumber = 8;
  ::google::protobuf::uint32 num_label() const;
  void set_num_label(::google::protobuf::uint32 value);

  // repeated uint32 ignore_label = 9;
  int ignore_label_size() const;
  void clear_ignore_label();
  static const int kIgnoreLabelFieldNumber = 9;
  ::google::protobuf::uint32 ignore_label(int index) const;
  void set_ignore_label(int index, ::google::protobuf::uint32 value);
  void add_ignore_label(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      ignore_label() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_ignore_label();

  // @@protoc_insertion_point(class_scope:caffe.RowColProposalTransformParameter)
 private:
  inline void set_has_row();
  inline void clear_has_row();
  inline void set_has_col();
  inline void clear_has_col();
  inline void set_has_in_width();
  inline void clear_has_in_width();
  inline void set_has_in_height();
  inline void clear_has_in_height();
  inline void set_has_out_width();
  inline void clear_has_out_width();
  inline void set_has_out_height();
  inline void clear_has_out_height();
  inline void set_has_objectness();
  inline void clear_has_objectness();
  inline void set_has_num_label();
  inline void clear_has_num_label();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > ignore_label_;
  ::google::protobuf::uint32 in_width_;
  ::google::protobuf::uint32 in_height_;
  bool objectness_;
  ::google::protobuf::uint32 num_label_;
  ::google::protobuf::uint32 row_;
  ::google::protobuf::uint32 col_;
  ::google::protobuf::uint32 out_width_;
  ::google::protobuf::uint32 out_height_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<RowColProposalTransformParameter> RowColProposalTransformParameter_default_instance_;

// -------------------------------------------------------------------

class CheckParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.CheckParameter) */ {
 public:
  CheckParameter();
  virtual ~CheckParameter();

  CheckParameter(const CheckParameter& from);

  inline CheckParameter& operator=(const CheckParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckParameter& default_instance();

  static const CheckParameter* internal_default_instance();

  void Swap(CheckParameter* other);

  // implements Message ----------------------------------------------

  inline CheckParameter* New() const { return New(NULL); }

  CheckParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CheckParameter& from);
  void MergeFrom(const CheckParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CheckParameter* other);
  void UnsafeMergeFrom(const CheckParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dst_path = 1;
  bool has_dst_path() const;
  void clear_dst_path();
  static const int kDstPathFieldNumber = 1;
  const ::std::string& dst_path() const;
  void set_dst_path(const ::std::string& value);
  void set_dst_path(const char* value);
  void set_dst_path(const char* value, size_t size);
  ::std::string* mutable_dst_path();
  ::std::string* release_dst_path();
  void set_allocated_dst_path(::std::string* dst_path);

  // optional bool bbox_norm = 2 [default = true];
  bool has_bbox_norm() const;
  void clear_bbox_norm();
  static const int kBboxNormFieldNumber = 2;
  bool bbox_norm() const;
  void set_bbox_norm(bool value);

  // optional float w_divider = 3;
  bool has_w_divider() const;
  void clear_w_divider();
  static const int kWDividerFieldNumber = 3;
  float w_divider() const;
  void set_w_divider(float value);

  // optional float h_divider = 4;
  bool has_h_divider() const;
  void clear_h_divider();
  static const int kHDividerFieldNumber = 4;
  float h_divider() const;
  void set_h_divider(float value);

  // @@protoc_insertion_point(class_scope:caffe.CheckParameter)
 private:
  inline void set_has_dst_path();
  inline void clear_has_dst_path();
  inline void set_has_bbox_norm();
  inline void clear_has_bbox_norm();
  inline void set_has_w_divider();
  inline void clear_has_w_divider();
  inline void set_has_h_divider();
  inline void clear_has_h_divider();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr dst_path_;
  float w_divider_;
  float h_divider_;
  bool bbox_norm_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<CheckParameter> CheckParameter_default_instance_;

// -------------------------------------------------------------------

class MeanSubParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.MeanSubParameter) */ {
 public:
  MeanSubParameter();
  virtual ~MeanSubParameter();

  MeanSubParameter(const MeanSubParameter& from);

  inline MeanSubParameter& operator=(const MeanSubParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MeanSubParameter& default_instance();

  static const MeanSubParameter* internal_default_instance();

  void Swap(MeanSubParameter* other);

  // implements Message ----------------------------------------------

  inline MeanSubParameter* New() const { return New(NULL); }

  MeanSubParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MeanSubParameter& from);
  void MergeFrom(const MeanSubParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MeanSubParameter* other);
  void UnsafeMergeFrom(const MeanSubParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string mean_file = 1;
  bool has_mean_file() const;
  void clear_mean_file();
  static const int kMeanFileFieldNumber = 1;
  const ::std::string& mean_file() const;
  void set_mean_file(const ::std::string& value);
  void set_mean_file(const char* value);
  void set_mean_file(const char* value, size_t size);
  ::std::string* mutable_mean_file();
  ::std::string* release_mean_file();
  void set_allocated_mean_file(::std::string* mean_file);

  // @@protoc_insertion_point(class_scope:caffe.MeanSubParameter)
 private:
  inline void set_has_mean_file();
  inline void clear_has_mean_file();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr mean_file_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MeanSubParameter> MeanSubParameter_default_instance_;

// -------------------------------------------------------------------

class AnnoToSegParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.AnnoToSegParameter) */ {
 public:
  AnnoToSegParameter();
  virtual ~AnnoToSegParameter();

  AnnoToSegParameter(const AnnoToSegParameter& from);

  inline AnnoToSegParameter& operator=(const AnnoToSegParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnnoToSegParameter& default_instance();

  static const AnnoToSegParameter* internal_default_instance();

  void Swap(AnnoToSegParameter* other);

  // implements Message ----------------------------------------------

  inline AnnoToSegParameter* New() const { return New(NULL); }

  AnnoToSegParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnnoToSegParameter& from);
  void MergeFrom(const AnnoToSegParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AnnoToSegParameter* other);
  void UnsafeMergeFrom(const AnnoToSegParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool objectness = 1 [default = false];
  bool has_objectness() const;
  void clear_objectness();
  static const int kObjectnessFieldNumber = 1;
  bool objectness() const;
  void set_objectness(bool value);

  // optional uint32 num_label = 2;
  bool has_num_label() const;
  void clear_num_label();
  static const int kNumLabelFieldNumber = 2;
  ::google::protobuf::uint32 num_label() const;
  void set_num_label(::google::protobuf::uint32 value);

  // optional bool bbox_normalized = 3 [default = false];
  bool has_bbox_normalized() const;
  void clear_bbox_normalized();
  static const int kBboxNormalizedFieldNumber = 3;
  bool bbox_normalized() const;
  void set_bbox_normalized(bool value);

  // optional uint32 in_width = 4 [default = 1];
  bool has_in_width() const;
  void clear_in_width();
  static const int kInWidthFieldNumber = 4;
  ::google::protobuf::uint32 in_width() const;
  void set_in_width(::google::protobuf::uint32 value);

  // optional uint32 in_height = 5 [default = 1];
  bool has_in_height() const;
  void clear_in_height();
  static const int kInHeightFieldNumber = 5;
  ::google::protobuf::uint32 in_height() const;
  void set_in_height(::google::protobuf::uint32 value);

  // optional uint32 out_width = 6;
  bool has_out_width() const;
  void clear_out_width();
  static const int kOutWidthFieldNumber = 6;
  ::google::protobuf::uint32 out_width() const;
  void set_out_width(::google::protobuf::uint32 value);

  // optional uint32 out_height = 7;
  bool has_out_height() const;
  void clear_out_height();
  static const int kOutHeightFieldNumber = 7;
  ::google::protobuf::uint32 out_height() const;
  void set_out_height(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.AnnoToSegParameter)
 private:
  inline void set_has_objectness();
  inline void clear_has_objectness();
  inline void set_has_num_label();
  inline void clear_has_num_label();
  inline void set_has_bbox_normalized();
  inline void clear_has_bbox_normalized();
  inline void set_has_in_width();
  inline void clear_has_in_width();
  inline void set_has_in_height();
  inline void clear_has_in_height();
  inline void set_has_out_width();
  inline void clear_has_out_width();
  inline void set_has_out_height();
  inline void clear_has_out_height();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 num_label_;
  bool objectness_;
  bool bbox_normalized_;
  ::google::protobuf::uint32 out_width_;
  ::google::protobuf::uint32 out_height_;
  ::google::protobuf::uint32 in_width_;
  ::google::protobuf::uint32 in_height_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AnnoToSegParameter> AnnoToSegParameter_default_instance_;

// -------------------------------------------------------------------

class TrainROIParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.TrainROIParameter) */ {
 public:
  TrainROIParameter();
  virtual ~TrainROIParameter();

  TrainROIParameter(const TrainROIParameter& from);

  inline TrainROIParameter& operator=(const TrainROIParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrainROIParameter& default_instance();

  static const TrainROIParameter* internal_default_instance();

  void Swap(TrainROIParameter* other);

  // implements Message ----------------------------------------------

  inline TrainROIParameter* New() const { return New(NULL); }

  TrainROIParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrainROIParameter& from);
  void MergeFrom(const TrainROIParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrainROIParameter* other);
  void UnsafeMergeFrom(const TrainROIParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 img_width = 1;
  bool has_img_width() const;
  void clear_img_width();
  static const int kImgWidthFieldNumber = 1;
  ::google::protobuf::uint32 img_width() const;
  void set_img_width(::google::protobuf::uint32 value);

  // required uint32 img_height = 2;
  bool has_img_height() const;
  void clear_img_height();
  static const int kImgHeightFieldNumber = 2;
  ::google::protobuf::uint32 img_height() const;
  void set_img_height(::google::protobuf::uint32 value);

  // required uint32 roi_width = 3;
  bool has_roi_width() const;
  void clear_roi_width();
  static const int kRoiWidthFieldNumber = 3;
  ::google::protobuf::uint32 roi_width() const;
  void set_roi_width(::google::protobuf::uint32 value);

  // required uint32 roi_height = 4;
  bool has_roi_height() const;
  void clear_roi_height();
  static const int kRoiHeightFieldNumber = 4;
  ::google::protobuf::uint32 roi_height() const;
  void set_roi_height(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.TrainROIParameter)
 private:
  inline void set_has_img_width();
  inline void clear_has_img_width();
  inline void set_has_img_height();
  inline void clear_has_img_height();
  inline void set_has_roi_width();
  inline void clear_has_roi_width();
  inline void set_has_roi_height();
  inline void clear_has_roi_height();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 img_width_;
  ::google::protobuf::uint32 img_height_;
  ::google::protobuf::uint32 roi_width_;
  ::google::protobuf::uint32 roi_height_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TrainROIParameter> TrainROIParameter_default_instance_;

// -------------------------------------------------------------------

class YOLOV2LossParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.YOLOV2LossParameter) */ {
 public:
  YOLOV2LossParameter();
  virtual ~YOLOV2LossParameter();

  YOLOV2LossParameter(const YOLOV2LossParameter& from);

  inline YOLOV2LossParameter& operator=(const YOLOV2LossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const YOLOV2LossParameter& default_instance();

  static const YOLOV2LossParameter* internal_default_instance();

  void Swap(YOLOV2LossParameter* other);

  // implements Message ----------------------------------------------

  inline YOLOV2LossParameter* New() const { return New(NULL); }

  YOLOV2LossParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const YOLOV2LossParameter& from);
  void MergeFrom(const YOLOV2LossParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YOLOV2LossParameter* other);
  void UnsafeMergeFrom(const YOLOV2LossParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.Rect2f anchor = 1;
  int anchor_size() const;
  void clear_anchor();
  static const int kAnchorFieldNumber = 1;
  const ::caffe::Rect2f& anchor(int index) const;
  ::caffe::Rect2f* mutable_anchor(int index);
  ::caffe::Rect2f* add_anchor();
  ::google::protobuf::RepeatedPtrField< ::caffe::Rect2f >*
      mutable_anchor();
  const ::google::protobuf::RepeatedPtrField< ::caffe::Rect2f >&
      anchor() const;

  // required uint32 num_class = 2;
  bool has_num_class() const;
  void clear_num_class();
  static const int kNumClassFieldNumber = 2;
  ::google::protobuf::uint32 num_class() const;
  void set_num_class(::google::protobuf::uint32 value);

  // required .caffe.Size2i img_size = 3;
  bool has_img_size() const;
  void clear_img_size();
  static const int kImgSizeFieldNumber = 3;
  const ::caffe::Size2i& img_size() const;
  ::caffe::Size2i* mutable_img_size();
  ::caffe::Size2i* release_img_size();
  void set_allocated_img_size(::caffe::Size2i* img_size);

  // required .caffe.Size2i yolo_map_size = 4;
  bool has_yolo_map_size() const;
  void clear_yolo_map_size();
  static const int kYoloMapSizeFieldNumber = 4;
  const ::caffe::Size2i& yolo_map_size() const;
  ::caffe::Size2i* mutable_yolo_map_size();
  ::caffe::Size2i* release_yolo_map_size();
  void set_allocated_yolo_map_size(::caffe::Size2i* yolo_map_size);

  // optional float overlap_threshold = 5 [default = 0.3];
  bool has_overlap_threshold() const;
  void clear_overlap_threshold();
  static const int kOverlapThresholdFieldNumber = 5;
  float overlap_threshold() const;
  void set_overlap_threshold(float value);

  // optional float noobj_scale = 6 [default = 1];
  bool has_noobj_scale() const;
  void clear_noobj_scale();
  static const int kNoobjScaleFieldNumber = 6;
  float noobj_scale() const;
  void set_noobj_scale(float value);

  // optional float obj_scale = 7 [default = 3];
  bool has_obj_scale() const;
  void clear_obj_scale();
  static const int kObjScaleFieldNumber = 7;
  float obj_scale() const;
  void set_obj_scale(float value);

  // optional float cls_scale = 8 [default = 2];
  bool has_cls_scale() const;
  void clear_cls_scale();
  static const int kClsScaleFieldNumber = 8;
  float cls_scale() const;
  void set_cls_scale(float value);

  // optional float coord_scale = 9 [default = 2];
  bool has_coord_scale() const;
  void clear_coord_scale();
  static const int kCoordScaleFieldNumber = 9;
  float coord_scale() const;
  void set_coord_scale(float value);

  // @@protoc_insertion_point(class_scope:caffe.YOLOV2LossParameter)
 private:
  inline void set_has_num_class();
  inline void clear_has_num_class();
  inline void set_has_img_size();
  inline void clear_has_img_size();
  inline void set_has_yolo_map_size();
  inline void clear_has_yolo_map_size();
  inline void set_has_overlap_threshold();
  inline void clear_has_overlap_threshold();
  inline void set_has_noobj_scale();
  inline void clear_has_noobj_scale();
  inline void set_has_obj_scale();
  inline void clear_has_obj_scale();
  inline void set_has_cls_scale();
  inline void clear_has_cls_scale();
  inline void set_has_coord_scale();
  inline void clear_has_coord_scale();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe::Rect2f > anchor_;
  ::caffe::Size2i* img_size_;
  ::caffe::Size2i* yolo_map_size_;
  ::google::protobuf::uint32 num_class_;
  float coord_scale_;
  float overlap_threshold_;
  float noobj_scale_;
  float obj_scale_;
  float cls_scale_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<YOLOV2LossParameter> YOLOV2LossParameter_default_instance_;

// -------------------------------------------------------------------

class YOLOV2ResultParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.YOLOV2ResultParameter) */ {
 public:
  YOLOV2ResultParameter();
  virtual ~YOLOV2ResultParameter();

  YOLOV2ResultParameter(const YOLOV2ResultParameter& from);

  inline YOLOV2ResultParameter& operator=(const YOLOV2ResultParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const YOLOV2ResultParameter& default_instance();

  static const YOLOV2ResultParameter* internal_default_instance();

  void Swap(YOLOV2ResultParameter* other);

  // implements Message ----------------------------------------------

  inline YOLOV2ResultParameter* New() const { return New(NULL); }

  YOLOV2ResultParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const YOLOV2ResultParameter& from);
  void MergeFrom(const YOLOV2ResultParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YOLOV2ResultParameter* other);
  void UnsafeMergeFrom(const YOLOV2ResultParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .caffe.Size2i cell_size = 1;
  bool has_cell_size() const;
  void clear_cell_size();
  static const int kCellSizeFieldNumber = 1;
  const ::caffe::Size2i& cell_size() const;
  ::caffe::Size2i* mutable_cell_size();
  ::caffe::Size2i* release_cell_size();
  void set_allocated_cell_size(::caffe::Size2i* cell_size);

  // required uint32 num_class = 2;
  bool has_num_class() const;
  void clear_num_class();
  static const int kNumClassFieldNumber = 2;
  ::google::protobuf::uint32 num_class() const;
  void set_num_class(::google::protobuf::uint32 value);

  // repeated .caffe.Rect2f anchor = 3;
  int anchor_size() const;
  void clear_anchor();
  static const int kAnchorFieldNumber = 3;
  const ::caffe::Rect2f& anchor(int index) const;
  ::caffe::Rect2f* mutable_anchor(int index);
  ::caffe::Rect2f* add_anchor();
  ::google::protobuf::RepeatedPtrField< ::caffe::Rect2f >*
      mutable_anchor();
  const ::google::protobuf::RepeatedPtrField< ::caffe::Rect2f >&
      anchor() const;

  // required uint32 num_detection = 4;
  bool has_num_detection() const;
  void clear_num_detection();
  static const int kNumDetectionFieldNumber = 4;
  ::google::protobuf::uint32 num_detection() const;
  void set_num_detection(::google::protobuf::uint32 value);

  // optional bool do_nms = 5 [default = true];
  bool has_do_nms() const;
  void clear_do_nms();
  static const int kDoNmsFieldNumber = 5;
  bool do_nms() const;
  void set_do_nms(bool value);

  // optional float nms_overlap_threshold = 6 [default = 0.5];
  bool has_nms_overlap_threshold() const;
  void clear_nms_overlap_threshold();
  static const int kNmsOverlapThresholdFieldNumber = 6;
  float nms_overlap_threshold() const;
  void set_nms_overlap_threshold(float value);

  // optional float conf_threshold = 7 [default = 0.5];
  bool has_conf_threshold() const;
  void clear_conf_threshold();
  static const int kConfThresholdFieldNumber = 7;
  float conf_threshold() const;
  void set_conf_threshold(float value);

  // @@protoc_insertion_point(class_scope:caffe.YOLOV2ResultParameter)
 private:
  inline void set_has_cell_size();
  inline void clear_has_cell_size();
  inline void set_has_num_class();
  inline void clear_has_num_class();
  inline void set_has_num_detection();
  inline void clear_has_num_detection();
  inline void set_has_do_nms();
  inline void clear_has_do_nms();
  inline void set_has_nms_overlap_threshold();
  inline void clear_has_nms_overlap_threshold();
  inline void set_has_conf_threshold();
  inline void clear_has_conf_threshold();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe::Rect2f > anchor_;
  ::caffe::Size2i* cell_size_;
  ::google::protobuf::uint32 num_class_;
  ::google::protobuf::uint32 num_detection_;
  float conf_threshold_;
  bool do_nms_;
  float nms_overlap_threshold_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<YOLOV2ResultParameter> YOLOV2ResultParameter_default_instance_;

// -------------------------------------------------------------------

class DetectionCheckParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.DetectionCheckParameter) */ {
 public:
  DetectionCheckParameter();
  virtual ~DetectionCheckParameter();

  DetectionCheckParameter(const DetectionCheckParameter& from);

  inline DetectionCheckParameter& operator=(const DetectionCheckParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DetectionCheckParameter& default_instance();

  static const DetectionCheckParameter* internal_default_instance();

  void Swap(DetectionCheckParameter* other);

  // implements Message ----------------------------------------------

  inline DetectionCheckParameter* New() const { return New(NULL); }

  DetectionCheckParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DetectionCheckParameter& from);
  void MergeFrom(const DetectionCheckParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DetectionCheckParameter* other);
  void UnsafeMergeFrom(const DetectionCheckParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool eval_performance = 1 [default = true];
  bool has_eval_performance() const;
  void clear_eval_performance();
  static const int kEvalPerformanceFieldNumber = 1;
  bool eval_performance() const;
  void set_eval_performance(bool value);

  // optional bool draw = 2 [default = true];
  bool has_draw() const;
  void clear_draw();
  static const int kDrawFieldNumber = 2;
  bool draw() const;
  void set_draw(bool value);

  // optional float detection_conf_threshold = 3 [default = 0];
  bool has_detection_conf_threshold() const;
  void clear_detection_conf_threshold();
  static const int kDetectionConfThresholdFieldNumber = 3;
  float detection_conf_threshold() const;
  void set_detection_conf_threshold(float value);

  // optional float iou_threshold = 4 [default = 0.5];
  bool has_iou_threshold() const;
  void clear_iou_threshold();
  static const int kIouThresholdFieldNumber = 4;
  float iou_threshold() const;
  void set_iou_threshold(float value);

  // optional string log_path = 5 [default = "./detection_log/"];
  bool has_log_path() const;
  void clear_log_path();
  static const int kLogPathFieldNumber = 5;
  const ::std::string& log_path() const;
  void set_log_path(const ::std::string& value);
  void set_log_path(const char* value);
  void set_log_path(const char* value, size_t size);
  ::std::string* mutable_log_path();
  ::std::string* release_log_path();
  void set_allocated_log_path(::std::string* log_path);

  // optional bool detection_only = 6 [default = false];
  bool has_detection_only() const;
  void clear_detection_only();
  static const int kDetectionOnlyFieldNumber = 6;
  bool detection_only() const;
  void set_detection_only(bool value);

  // optional bool do_nms = 7 [default = true];
  bool has_do_nms() const;
  void clear_do_nms();
  static const int kDoNmsFieldNumber = 7;
  bool do_nms() const;
  void set_do_nms(bool value);

  // optional float nms_overlap_threshold = 8 [default = 0.5];
  bool has_nms_overlap_threshold() const;
  void clear_nms_overlap_threshold();
  static const int kNmsOverlapThresholdFieldNumber = 8;
  float nms_overlap_threshold() const;
  void set_nms_overlap_threshold(float value);

  // @@protoc_insertion_point(class_scope:caffe.DetectionCheckParameter)
 private:
  inline void set_has_eval_performance();
  inline void clear_has_eval_performance();
  inline void set_has_draw();
  inline void clear_has_draw();
  inline void set_has_detection_conf_threshold();
  inline void clear_has_detection_conf_threshold();
  inline void set_has_iou_threshold();
  inline void clear_has_iou_threshold();
  inline void set_has_log_path();
  inline void clear_has_log_path();
  inline void set_has_detection_only();
  inline void clear_has_detection_only();
  inline void set_has_do_nms();
  inline void clear_has_do_nms();
  inline void set_has_nms_overlap_threshold();
  inline void clear_has_nms_overlap_threshold();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  static ::std::string* _default_log_path_;
  ::google::protobuf::internal::ArenaStringPtr log_path_;
  float detection_conf_threshold_;
  bool detection_only_;
  float nms_overlap_threshold_;
  bool eval_performance_;
  bool draw_;
  bool do_nms_;
  float iou_threshold_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<DetectionCheckParameter> DetectionCheckParameter_default_instance_;

// -------------------------------------------------------------------

class SubwinOffsetParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SubwinOffsetParameter) */ {
 public:
  SubwinOffsetParameter();
  virtual ~SubwinOffsetParameter();

  SubwinOffsetParameter(const SubwinOffsetParameter& from);

  inline SubwinOffsetParameter& operator=(const SubwinOffsetParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubwinOffsetParameter& default_instance();

  static const SubwinOffsetParameter* internal_default_instance();

  void Swap(SubwinOffsetParameter* other);

  // implements Message ----------------------------------------------

  inline SubwinOffsetParameter* New() const { return New(NULL); }

  SubwinOffsetParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubwinOffsetParameter& from);
  void MergeFrom(const SubwinOffsetParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SubwinOffsetParameter* other);
  void UnsafeMergeFrom(const SubwinOffsetParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .caffe.Size2i win_size = 1;
  bool has_win_size() const;
  void clear_win_size();
  static const int kWinSizeFieldNumber = 1;
  const ::caffe::Size2i& win_size() const;
  ::caffe::Size2i* mutable_win_size();
  ::caffe::Size2i* release_win_size();
  void set_allocated_win_size(::caffe::Size2i* win_size);

  // repeated .caffe.Point2i win_offset = 2;
  int win_offset_size() const;
  void clear_win_offset();
  static const int kWinOffsetFieldNumber = 2;
  const ::caffe::Point2i& win_offset(int index) const;
  ::caffe::Point2i* mutable_win_offset(int index);
  ::caffe::Point2i* add_win_offset();
  ::google::protobuf::RepeatedPtrField< ::caffe::Point2i >*
      mutable_win_offset();
  const ::google::protobuf::RepeatedPtrField< ::caffe::Point2i >&
      win_offset() const;

  // optional bool global_detection = 3 [default = true];
  bool has_global_detection() const;
  void clear_global_detection();
  static const int kGlobalDetectionFieldNumber = 3;
  bool global_detection() const;
  void set_global_detection(bool value);

  // @@protoc_insertion_point(class_scope:caffe.SubwinOffsetParameter)
 private:
  inline void set_has_win_size();
  inline void clear_has_win_size();
  inline void set_has_global_detection();
  inline void clear_has_global_detection();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe::Point2i > win_offset_;
  ::caffe::Size2i* win_size_;
  bool global_detection_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SubwinOffsetParameter> SubwinOffsetParameter_default_instance_;

// -------------------------------------------------------------------

class SizeRejectionParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SizeRejectionParameter) */ {
 public:
  SizeRejectionParameter();
  virtual ~SizeRejectionParameter();

  SizeRejectionParameter(const SizeRejectionParameter& from);

  inline SizeRejectionParameter& operator=(const SizeRejectionParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SizeRejectionParameter& default_instance();

  static const SizeRejectionParameter* internal_default_instance();

  void Swap(SizeRejectionParameter* other);

  // implements Message ----------------------------------------------

  inline SizeRejectionParameter* New() const { return New(NULL); }

  SizeRejectionParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SizeRejectionParameter& from);
  void MergeFrom(const SizeRejectionParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SizeRejectionParameter* other);
  void UnsafeMergeFrom(const SizeRejectionParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float w_min = 1;
  bool has_w_min() const;
  void clear_w_min();
  static const int kWMinFieldNumber = 1;
  float w_min() const;
  void set_w_min(float value);

  // optional float w_max = 2;
  bool has_w_max() const;
  void clear_w_max();
  static const int kWMaxFieldNumber = 2;
  float w_max() const;
  void set_w_max(float value);

  // optional float h_min = 3;
  bool has_h_min() const;
  void clear_h_min();
  static const int kHMinFieldNumber = 3;
  float h_min() const;
  void set_h_min(float value);

  // optional float h_max = 4;
  bool has_h_max() const;
  void clear_h_max();
  static const int kHMaxFieldNumber = 4;
  float h_max() const;
  void set_h_max(float value);

  // @@protoc_insertion_point(class_scope:caffe.SizeRejectionParameter)
 private:
  inline void set_has_w_min();
  inline void clear_has_w_min();
  inline void set_has_w_max();
  inline void clear_has_w_max();
  inline void set_has_h_min();
  inline void clear_has_h_min();
  inline void set_has_h_max();
  inline void clear_has_h_max();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float w_min_;
  float w_max_;
  float h_min_;
  float h_max_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SizeRejectionParameter> SizeRejectionParameter_default_instance_;

// -------------------------------------------------------------------

class ConfCheckParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ConfCheckParameter) */ {
 public:
  ConfCheckParameter();
  virtual ~ConfCheckParameter();

  ConfCheckParameter(const ConfCheckParameter& from);

  inline ConfCheckParameter& operator=(const ConfCheckParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfCheckParameter& default_instance();

  static const ConfCheckParameter* internal_default_instance();

  void Swap(ConfCheckParameter* other);

  // implements Message ----------------------------------------------

  inline ConfCheckParameter* New() const { return New(NULL); }

  ConfCheckParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConfCheckParameter& from);
  void MergeFrom(const ConfCheckParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConfCheckParameter* other);
  void UnsafeMergeFrom(const ConfCheckParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string out_path = 1 [default = "."];
  bool has_out_path() const;
  void clear_out_path();
  static const int kOutPathFieldNumber = 1;
  const ::std::string& out_path() const;
  void set_out_path(const ::std::string& value);
  void set_out_path(const char* value);
  void set_out_path(const char* value, size_t size);
  ::std::string* mutable_out_path();
  ::std::string* release_out_path();
  void set_allocated_out_path(::std::string* out_path);

  // optional bool draw = 2 [default = false];
  bool has_draw() const;
  void clear_draw();
  static const int kDrawFieldNumber = 2;
  bool draw() const;
  void set_draw(bool value);

  // @@protoc_insertion_point(class_scope:caffe.ConfCheckParameter)
 private:
  inline void set_has_out_path();
  inline void clear_has_out_path();
  inline void set_has_draw();
  inline void clear_has_draw();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  static ::std::string* _default_out_path_;
  ::google::protobuf::internal::ArenaStringPtr out_path_;
  bool draw_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ConfCheckParameter> ConfCheckParameter_default_instance_;

// -------------------------------------------------------------------

class ReorgParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ReorgParameter) */ {
 public:
  ReorgParameter();
  virtual ~ReorgParameter();

  ReorgParameter(const ReorgParameter& from);

  inline ReorgParameter& operator=(const ReorgParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReorgParameter& default_instance();

  static const ReorgParameter* internal_default_instance();

  void Swap(ReorgParameter* other);

  // implements Message ----------------------------------------------

  inline ReorgParameter* New() const { return New(NULL); }

  ReorgParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReorgParameter& from);
  void MergeFrom(const ReorgParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReorgParameter* other);
  void UnsafeMergeFrom(const ReorgParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 stride = 1;
  bool has_stride() const;
  void clear_stride();
  static const int kStrideFieldNumber = 1;
  ::google::protobuf::uint32 stride() const;
  void set_stride(::google::protobuf::uint32 value);

  // optional bool reverse = 2 [default = false];
  bool has_reverse() const;
  void clear_reverse();
  static const int kReverseFieldNumber = 2;
  bool reverse() const;
  void set_reverse(bool value);

  // @@protoc_insertion_point(class_scope:caffe.ReorgParameter)
 private:
  inline void set_has_stride();
  inline void clear_has_stride();
  inline void set_has_reverse();
  inline void clear_has_reverse();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 stride_;
  bool reverse_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ReorgParameter> ReorgParameter_default_instance_;

// -------------------------------------------------------------------

class BatchRejectionParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.BatchRejectionParameter) */ {
 public:
  BatchRejectionParameter();
  virtual ~BatchRejectionParameter();

  BatchRejectionParameter(const BatchRejectionParameter& from);

  inline BatchRejectionParameter& operator=(const BatchRejectionParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchRejectionParameter& default_instance();

  static const BatchRejectionParameter* internal_default_instance();

  void Swap(BatchRejectionParameter* other);

  // implements Message ----------------------------------------------

  inline BatchRejectionParameter* New() const { return New(NULL); }

  BatchRejectionParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BatchRejectionParameter& from);
  void MergeFrom(const BatchRejectionParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BatchRejectionParameter* other);
  void UnsafeMergeFrom(const BatchRejectionParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool rejection_by_threshold = 1 [default = false];
  bool has_rejection_by_threshold() const;
  void clear_rejection_by_threshold();
  static const int kRejectionByThresholdFieldNumber = 1;
  bool rejection_by_threshold() const;
  void set_rejection_by_threshold(bool value);

  // optional float threshold = 2;
  bool has_threshold() const;
  void clear_threshold();
  static const int kThresholdFieldNumber = 2;
  float threshold() const;
  void set_threshold(float value);

  // @@protoc_insertion_point(class_scope:caffe.BatchRejectionParameter)
 private:
  inline void set_has_rejection_by_threshold();
  inline void clear_has_rejection_by_threshold();
  inline void set_has_threshold();
  inline void clear_has_threshold();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool rejection_by_threshold_;
  float threshold_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<BatchRejectionParameter> BatchRejectionParameter_default_instance_;

// -------------------------------------------------------------------

class BlobShape : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.BlobShape) */ {
 public:
  BlobShape();
  virtual ~BlobShape();

  BlobShape(const BlobShape& from);

  inline BlobShape& operator=(const BlobShape& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobShape& default_instance();

  static const BlobShape* internal_default_instance();

  void Swap(BlobShape* other);

  // implements Message ----------------------------------------------

  inline BlobShape* New() const { return New(NULL); }

  BlobShape* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobShape& from);
  void MergeFrom(const BlobShape& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlobShape* other);
  void UnsafeMergeFrom(const BlobShape& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 dim = 1 [packed = true];
  int dim_size() const;
  void clear_dim();
  static const int kDimFieldNumber = 1;
  ::google::protobuf::int64 dim(int index) const;
  void set_dim(int index, ::google::protobuf::int64 value);
  void add_dim(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      dim() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_dim();

  // @@protoc_insertion_point(class_scope:caffe.BlobShape)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > dim_;
  mutable int _dim_cached_byte_size_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<BlobShape> BlobShape_default_instance_;

// -------------------------------------------------------------------

class BlobProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.BlobProto) */ {
 public:
  BlobProto();
  virtual ~BlobProto();

  BlobProto(const BlobProto& from);

  inline BlobProto& operator=(const BlobProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobProto& default_instance();

  static const BlobProto* internal_default_instance();

  void Swap(BlobProto* other);

  // implements Message ----------------------------------------------

  inline BlobProto* New() const { return New(NULL); }

  BlobProto* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobProto& from);
  void MergeFrom(const BlobProto& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlobProto* other);
  void UnsafeMergeFrom(const BlobProto& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.BlobShape shape = 7;
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 7;
  const ::caffe::BlobShape& shape() const;
  ::caffe::BlobShape* mutable_shape();
  ::caffe::BlobShape* release_shape();
  void set_allocated_shape(::caffe::BlobShape* shape);

  // repeated float data = 5 [packed = true];
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 5;
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::google::protobuf::RepeatedField< float >&
      data() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_data();

  // repeated float diff = 6 [packed = true];
  int diff_size() const;
  void clear_diff();
  static const int kDiffFieldNumber = 6;
  float diff(int index) const;
  void set_diff(int index, float value);
  void add_diff(float value);
  const ::google::protobuf::RepeatedField< float >&
      diff() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_diff();

  // repeated double double_data = 8 [packed = true];
  int double_data_size() const;
  void clear_double_data();
  static const int kDoubleDataFieldNumber = 8;
  double double_data(int index) const;
  void set_double_data(int index, double value);
  void add_double_data(double value);
  const ::google::protobuf::RepeatedField< double >&
      double_data() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_double_data();

  // repeated double double_diff = 9 [packed = true];
  int double_diff_size() const;
  void clear_double_diff();
  static const int kDoubleDiffFieldNumber = 9;
  double double_diff(int index) const;
  void set_double_diff(int index, double value);
  void add_double_diff(double value);
  const ::google::protobuf::RepeatedField< double >&
      double_diff() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_double_diff();

  // optional int32 num = 1 [default = 0];
  bool has_num() const;
  void clear_num();
  static const int kNumFieldNumber = 1;
  ::google::protobuf::int32 num() const;
  void set_num(::google::protobuf::int32 value);

  // optional int32 channels = 2 [default = 0];
  bool has_channels() const;
  void clear_channels();
  static const int kChannelsFieldNumber = 2;
  ::google::protobuf::int32 channels() const;
  void set_channels(::google::protobuf::int32 value);

  // optional int32 height = 3 [default = 0];
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // optional int32 width = 4 [default = 0];
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 4;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.BlobProto)
 private:
  inline void set_has_shape();
  inline void clear_has_shape();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_channels();
  inline void clear_has_channels();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_width();
  inline void clear_has_width();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > data_;
  mutable int _data_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > diff_;
  mutable int _diff_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > double_data_;
  mutable int _double_data_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > double_diff_;
  mutable int _double_diff_cached_byte_size_;
  ::caffe::BlobShape* shape_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 channels_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 width_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<BlobProto> BlobProto_default_instance_;

// -------------------------------------------------------------------

class BlobProtoVector : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.BlobProtoVector) */ {
 public:
  BlobProtoVector();
  virtual ~BlobProtoVector();

  BlobProtoVector(const BlobProtoVector& from);

  inline BlobProtoVector& operator=(const BlobProtoVector& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobProtoVector& default_instance();

  static const BlobProtoVector* internal_default_instance();

  void Swap(BlobProtoVector* other);

  // implements Message ----------------------------------------------

  inline BlobProtoVector* New() const { return New(NULL); }

  BlobProtoVector* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobProtoVector& from);
  void MergeFrom(const BlobProtoVector& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlobProtoVector* other);
  void UnsafeMergeFrom(const BlobProtoVector& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.BlobProto blobs = 1;
  int blobs_size() const;
  void clear_blobs();
  static const int kBlobsFieldNumber = 1;
  const ::caffe::BlobProto& blobs(int index) const;
  ::caffe::BlobProto* mutable_blobs(int index);
  ::caffe::BlobProto* add_blobs();
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
      mutable_blobs();
  const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
      blobs() const;

  // @@protoc_insertion_point(class_scope:caffe.BlobProtoVector)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto > blobs_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<BlobProtoVector> BlobProtoVector_default_instance_;

// -------------------------------------------------------------------

class Datum : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.Datum) */ {
 public:
  Datum();
  virtual ~Datum();

  Datum(const Datum& from);

  inline Datum& operator=(const Datum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Datum& default_instance();

  static const Datum* internal_default_instance();

  void Swap(Datum* other);

  // implements Message ----------------------------------------------

  inline Datum* New() const { return New(NULL); }

  Datum* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Datum& from);
  void MergeFrom(const Datum& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Datum* other);
  void UnsafeMergeFrom(const Datum& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 channels = 1;
  bool has_channels() const;
  void clear_channels();
  static const int kChannelsFieldNumber = 1;
  ::google::protobuf::int32 channels() const;
  void set_channels(::google::protobuf::int32 value);

  // optional int32 height = 2;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // optional int32 width = 3;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // optional bytes data = 4;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional int32 label = 5;
  bool has_label() const;
  void clear_label();
  static const int kLabelFieldNumber = 5;
  ::google::protobuf::int32 label() const;
  void set_label(::google::protobuf::int32 value);

  // repeated float float_data = 6;
  int float_data_size() const;
  void clear_float_data();
  static const int kFloatDataFieldNumber = 6;
  float float_data(int index) const;
  void set_float_data(int index, float value);
  void add_float_data(float value);
  const ::google::protobuf::RepeatedField< float >&
      float_data() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_float_data();

  // optional bool encoded = 7 [default = false];
  bool has_encoded() const;
  void clear_encoded();
  static const int kEncodedFieldNumber = 7;
  bool encoded() const;
  void set_encoded(bool value);

  // @@protoc_insertion_point(class_scope:caffe.Datum)
 private:
  inline void set_has_channels();
  inline void clear_has_channels();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_label();
  inline void clear_has_label();
  inline void set_has_encoded();
  inline void clear_has_encoded();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > float_data_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 channels_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 label_;
  bool encoded_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Datum> Datum_default_instance_;

// -------------------------------------------------------------------

class FillerParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.FillerParameter) */ {
 public:
  FillerParameter();
  virtual ~FillerParameter();

  FillerParameter(const FillerParameter& from);

  inline FillerParameter& operator=(const FillerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FillerParameter& default_instance();

  static const FillerParameter* internal_default_instance();

  void Swap(FillerParameter* other);

  // implements Message ----------------------------------------------

  inline FillerParameter* New() const { return New(NULL); }

  FillerParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FillerParameter& from);
  void MergeFrom(const FillerParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FillerParameter* other);
  void UnsafeMergeFrom(const FillerParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FillerParameter_VarianceNorm VarianceNorm;
  static const VarianceNorm FAN_IN =
    FillerParameter_VarianceNorm_FAN_IN;
  static const VarianceNorm FAN_OUT =
    FillerParameter_VarianceNorm_FAN_OUT;
  static const VarianceNorm AVERAGE =
    FillerParameter_VarianceNorm_AVERAGE;
  static inline bool VarianceNorm_IsValid(int value) {
    return FillerParameter_VarianceNorm_IsValid(value);
  }
  static const VarianceNorm VarianceNorm_MIN =
    FillerParameter_VarianceNorm_VarianceNorm_MIN;
  static const VarianceNorm VarianceNorm_MAX =
    FillerParameter_VarianceNorm_VarianceNorm_MAX;
  static const int VarianceNorm_ARRAYSIZE =
    FillerParameter_VarianceNorm_VarianceNorm_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VarianceNorm_descriptor() {
    return FillerParameter_VarianceNorm_descriptor();
  }
  static inline const ::std::string& VarianceNorm_Name(VarianceNorm value) {
    return FillerParameter_VarianceNorm_Name(value);
  }
  static inline bool VarianceNorm_Parse(const ::std::string& name,
      VarianceNorm* value) {
    return FillerParameter_VarianceNorm_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string type = 1 [default = "constant"];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional float value = 2 [default = 0];
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  float value() const;
  void set_value(float value);

  // optional float min = 3 [default = 0];
  bool has_min() const;
  void clear_min();
  static const int kMinFieldNumber = 3;
  float min() const;
  void set_min(float value);

  // optional float max = 4 [default = 1];
  bool has_max() const;
  void clear_max();
  static const int kMaxFieldNumber = 4;
  float max() const;
  void set_max(float value);

  // optional float mean = 5 [default = 0];
  bool has_mean() const;
  void clear_mean();
  static const int kMeanFieldNumber = 5;
  float mean() const;
  void set_mean(float value);

  // optional float std = 6 [default = 1];
  bool has_std() const;
  void clear_std();
  static const int kStdFieldNumber = 6;
  float std() const;
  void set_std(float value);

  // optional int32 sparse = 7 [default = -1];
  bool has_sparse() const;
  void clear_sparse();
  static const int kSparseFieldNumber = 7;
  ::google::protobuf::int32 sparse() const;
  void set_sparse(::google::protobuf::int32 value);

  // optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
  bool has_variance_norm() const;
  void clear_variance_norm();
  static const int kVarianceNormFieldNumber = 8;
  ::caffe::FillerParameter_VarianceNorm variance_norm() const;
  void set_variance_norm(::caffe::FillerParameter_VarianceNorm value);

  // @@protoc_insertion_point(class_scope:caffe.FillerParameter)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_min();
  inline void clear_has_min();
  inline void set_has_max();
  inline void clear_has_max();
  inline void set_has_mean();
  inline void clear_has_mean();
  inline void set_has_std();
  inline void clear_has_std();
  inline void set_has_sparse();
  inline void clear_has_sparse();
  inline void set_has_variance_norm();
  inline void clear_has_variance_norm();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  static ::std::string* _default_type_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  float value_;
  float min_;
  float mean_;
  int variance_norm_;
  ::google::protobuf::int32 sparse_;
  float max_;
  float std_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<FillerParameter> FillerParameter_default_instance_;

// -------------------------------------------------------------------

class NetParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.NetParameter) */ {
 public:
  NetParameter();
  virtual ~NetParameter();

  NetParameter(const NetParameter& from);

  inline NetParameter& operator=(const NetParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetParameter& default_instance();

  static const NetParameter* internal_default_instance();

  void Swap(NetParameter* other);

  // implements Message ----------------------------------------------

  inline NetParameter* New() const { return New(NULL); }

  NetParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetParameter& from);
  void MergeFrom(const NetParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NetParameter* other);
  void UnsafeMergeFrom(const NetParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated string input = 3;
  int input_size() const;
  void clear_input();
  static const int kInputFieldNumber = 3;
  const ::std::string& input(int index) const;
  ::std::string* mutable_input(int index);
  void set_input(int index, const ::std::string& value);
  void set_input(int index, const char* value);
  void set_input(int index, const char* value, size_t size);
  ::std::string* add_input();
  void add_input(const ::std::string& value);
  void add_input(const char* value);
  void add_input(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& input() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_input();

  // repeated .caffe.BlobShape input_shape = 8;
  int input_shape_size() const;
  void clear_input_shape();
  static const int kInputShapeFieldNumber = 8;
  const ::caffe::BlobShape& input_shape(int index) const;
  ::caffe::BlobShape* mutable_input_shape(int index);
  ::caffe::BlobShape* add_input_shape();
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
      mutable_input_shape();
  const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
      input_shape() const;

  // repeated int32 input_dim = 4;
  int input_dim_size() const;
  void clear_input_dim();
  static const int kInputDimFieldNumber = 4;
  ::google::protobuf::int32 input_dim(int index) const;
  void set_input_dim(int index, ::google::protobuf::int32 value);
  void add_input_dim(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      input_dim() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_input_dim();

  // optional bool force_backward = 5 [default = false];
  bool has_force_backward() const;
  void clear_force_backward();
  static const int kForceBackwardFieldNumber = 5;
  bool force_backward() const;
  void set_force_backward(bool value);

  // optional .caffe.NetState state = 6;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 6;
  const ::caffe::NetState& state() const;
  ::caffe::NetState* mutable_state();
  ::caffe::NetState* release_state();
  void set_allocated_state(::caffe::NetState* state);

  // optional bool debug_info = 7 [default = false];
  bool has_debug_info() const;
  void clear_debug_info();
  static const int kDebugInfoFieldNumber = 7;
  bool debug_info() const;
  void set_debug_info(bool value);

  // repeated .caffe.LayerParameter layer = 100;
  int layer_size() const;
  void clear_layer();
  static const int kLayerFieldNumber = 100;
  const ::caffe::LayerParameter& layer(int index) const;
  ::caffe::LayerParameter* mutable_layer(int index);
  ::caffe::LayerParameter* add_layer();
  ::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter >*
      mutable_layer();
  const ::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter >&
      layer() const;

  // repeated .caffe.V1LayerParameter layers = 2;
  int layers_size() const;
  void clear_layers();
  static const int kLayersFieldNumber = 2;
  const ::caffe::V1LayerParameter& layers(int index) const;
  ::caffe::V1LayerParameter* mutable_layers(int index);
  ::caffe::V1LayerParameter* add_layers();
  ::google::protobuf::RepeatedPtrField< ::caffe::V1LayerParameter >*
      mutable_layers();
  const ::google::protobuf::RepeatedPtrField< ::caffe::V1LayerParameter >&
      layers() const;

  // @@protoc_insertion_point(class_scope:caffe.NetParameter)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_force_backward();
  inline void clear_has_force_backward();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_debug_info();
  inline void clear_has_debug_info();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> input_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape > input_shape_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > input_dim_;
  ::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter > layer_;
  ::google::protobuf::RepeatedPtrField< ::caffe::V1LayerParameter > layers_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::caffe::NetState* state_;
  bool force_backward_;
  bool debug_info_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<NetParameter> NetParameter_default_instance_;

// -------------------------------------------------------------------

class SolverParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SolverParameter) */ {
 public:
  SolverParameter();
  virtual ~SolverParameter();

  SolverParameter(const SolverParameter& from);

  inline SolverParameter& operator=(const SolverParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SolverParameter& default_instance();

  static const SolverParameter* internal_default_instance();

  void Swap(SolverParameter* other);

  // implements Message ----------------------------------------------

  inline SolverParameter* New() const { return New(NULL); }

  SolverParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SolverParameter& from);
  void MergeFrom(const SolverParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SolverParameter* other);
  void UnsafeMergeFrom(const SolverParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SolverParameter_SnapshotFormat SnapshotFormat;
  static const SnapshotFormat HDF5 =
    SolverParameter_SnapshotFormat_HDF5;
  static const SnapshotFormat BINARYPROTO =
    SolverParameter_SnapshotFormat_BINARYPROTO;
  static inline bool SnapshotFormat_IsValid(int value) {
    return SolverParameter_SnapshotFormat_IsValid(value);
  }
  static const SnapshotFormat SnapshotFormat_MIN =
    SolverParameter_SnapshotFormat_SnapshotFormat_MIN;
  static const SnapshotFormat SnapshotFormat_MAX =
    SolverParameter_SnapshotFormat_SnapshotFormat_MAX;
  static const int SnapshotFormat_ARRAYSIZE =
    SolverParameter_SnapshotFormat_SnapshotFormat_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SnapshotFormat_descriptor() {
    return SolverParameter_SnapshotFormat_descriptor();
  }
  static inline const ::std::string& SnapshotFormat_Name(SnapshotFormat value) {
    return SolverParameter_SnapshotFormat_Name(value);
  }
  static inline bool SnapshotFormat_Parse(const ::std::string& name,
      SnapshotFormat* value) {
    return SolverParameter_SnapshotFormat_Parse(name, value);
  }

  typedef SolverParameter_SolverMode SolverMode;
  static const SolverMode CPU =
    SolverParameter_SolverMode_CPU;
  static const SolverMode GPU =
    SolverParameter_SolverMode_GPU;
  static inline bool SolverMode_IsValid(int value) {
    return SolverParameter_SolverMode_IsValid(value);
  }
  static const SolverMode SolverMode_MIN =
    SolverParameter_SolverMode_SolverMode_MIN;
  static const SolverMode SolverMode_MAX =
    SolverParameter_SolverMode_SolverMode_MAX;
  static const int SolverMode_ARRAYSIZE =
    SolverParameter_SolverMode_SolverMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SolverMode_descriptor() {
    return SolverParameter_SolverMode_descriptor();
  }
  static inline const ::std::string& SolverMode_Name(SolverMode value) {
    return SolverParameter_SolverMode_Name(value);
  }
  static inline bool SolverMode_Parse(const ::std::string& name,
      SolverMode* value) {
    return SolverParameter_SolverMode_Parse(name, value);
  }

  typedef SolverParameter_SolverType SolverType;
  static const SolverType SGD =
    SolverParameter_SolverType_SGD;
  static const SolverType NESTEROV =
    SolverParameter_SolverType_NESTEROV;
  static const SolverType ADAGRAD =
    SolverParameter_SolverType_ADAGRAD;
  static const SolverType RMSPROP =
    SolverParameter_SolverType_RMSPROP;
  static const SolverType ADADELTA =
    SolverParameter_SolverType_ADADELTA;
  static const SolverType ADAM =
    SolverParameter_SolverType_ADAM;
  static inline bool SolverType_IsValid(int value) {
    return SolverParameter_SolverType_IsValid(value);
  }
  static const SolverType SolverType_MIN =
    SolverParameter_SolverType_SolverType_MIN;
  static const SolverType SolverType_MAX =
    SolverParameter_SolverType_SolverType_MAX;
  static const int SolverType_ARRAYSIZE =
    SolverParameter_SolverType_SolverType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SolverType_descriptor() {
    return SolverParameter_SolverType_descriptor();
  }
  static inline const ::std::string& SolverType_Name(SolverType value) {
    return SolverParameter_SolverType_Name(value);
  }
  static inline bool SolverType_Parse(const ::std::string& name,
      SolverType* value) {
    return SolverParameter_SolverType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string net = 24;
  bool has_net() const;
  void clear_net();
  static const int kNetFieldNumber = 24;
  const ::std::string& net() const;
  void set_net(const ::std::string& value);
  void set_net(const char* value);
  void set_net(const char* value, size_t size);
  ::std::string* mutable_net();
  ::std::string* release_net();
  void set_allocated_net(::std::string* net);

  // optional .caffe.NetParameter net_param = 25;
  bool has_net_param() const;
  void clear_net_param();
  static const int kNetParamFieldNumber = 25;
  const ::caffe::NetParameter& net_param() const;
  ::caffe::NetParameter* mutable_net_param();
  ::caffe::NetParameter* release_net_param();
  void set_allocated_net_param(::caffe::NetParameter* net_param);

  // optional string train_net = 1;
  bool has_train_net() const;
  void clear_train_net();
  static const int kTrainNetFieldNumber = 1;
  const ::std::string& train_net() const;
  void set_train_net(const ::std::string& value);
  void set_train_net(const char* value);
  void set_train_net(const char* value, size_t size);
  ::std::string* mutable_train_net();
  ::std::string* release_train_net();
  void set_allocated_train_net(::std::string* train_net);

  // repeated string test_net = 2;
  int test_net_size() const;
  void clear_test_net();
  static const int kTestNetFieldNumber = 2;
  const ::std::string& test_net(int index) const;
  ::std::string* mutable_test_net(int index);
  void set_test_net(int index, const ::std::string& value);
  void set_test_net(int index, const char* value);
  void set_test_net(int index, const char* value, size_t size);
  ::std::string* add_test_net();
  void add_test_net(const ::std::string& value);
  void add_test_net(const char* value);
  void add_test_net(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& test_net() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_test_net();

  // optional .caffe.NetParameter train_net_param = 21;
  bool has_train_net_param() const;
  void clear_train_net_param();
  static const int kTrainNetParamFieldNumber = 21;
  const ::caffe::NetParameter& train_net_param() const;
  ::caffe::NetParameter* mutable_train_net_param();
  ::caffe::NetParameter* release_train_net_param();
  void set_allocated_train_net_param(::caffe::NetParameter* train_net_param);

  // repeated .caffe.NetParameter test_net_param = 22;
  int test_net_param_size() const;
  void clear_test_net_param();
  static const int kTestNetParamFieldNumber = 22;
  const ::caffe::NetParameter& test_net_param(int index) const;
  ::caffe::NetParameter* mutable_test_net_param(int index);
  ::caffe::NetParameter* add_test_net_param();
  ::google::protobuf::RepeatedPtrField< ::caffe::NetParameter >*
      mutable_test_net_param();
  const ::google::protobuf::RepeatedPtrField< ::caffe::NetParameter >&
      test_net_param() const;

  // optional .caffe.NetState train_state = 26;
  bool has_train_state() const;
  void clear_train_state();
  static const int kTrainStateFieldNumber = 26;
  const ::caffe::NetState& train_state() const;
  ::caffe::NetState* mutable_train_state();
  ::caffe::NetState* release_train_state();
  void set_allocated_train_state(::caffe::NetState* train_state);

  // repeated .caffe.NetState test_state = 27;
  int test_state_size() const;
  void clear_test_state();
  static const int kTestStateFieldNumber = 27;
  const ::caffe::NetState& test_state(int index) const;
  ::caffe::NetState* mutable_test_state(int index);
  ::caffe::NetState* add_test_state();
  ::google::protobuf::RepeatedPtrField< ::caffe::NetState >*
      mutable_test_state();
  const ::google::protobuf::RepeatedPtrField< ::caffe::NetState >&
      test_state() const;

  // repeated int32 test_iter = 3;
  int test_iter_size() const;
  void clear_test_iter();
  static const int kTestIterFieldNumber = 3;
  ::google::protobuf::int32 test_iter(int index) const;
  void set_test_iter(int index, ::google::protobuf::int32 value);
  void add_test_iter(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      test_iter() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_test_iter();

  // optional int32 test_interval = 4 [default = 0];
  bool has_test_interval() const;
  void clear_test_interval();
  static const int kTestIntervalFieldNumber = 4;
  ::google::protobuf::int32 test_interval() const;
  void set_test_interval(::google::protobuf::int32 value);

  // optional bool test_compute_loss = 19 [default = false];
  bool has_test_compute_loss() const;
  void clear_test_compute_loss();
  static const int kTestComputeLossFieldNumber = 19;
  bool test_compute_loss() const;
  void set_test_compute_loss(bool value);

  // optional bool test_initialization = 32 [default = true];
  bool has_test_initialization() const;
  void clear_test_initialization();
  static const int kTestInitializationFieldNumber = 32;
  bool test_initialization() const;
  void set_test_initialization(bool value);

  // optional float base_lr = 5;
  bool has_base_lr() const;
  void clear_base_lr();
  static const int kBaseLrFieldNumber = 5;
  float base_lr() const;
  void set_base_lr(float value);

  // optional int32 display = 6;
  bool has_display() const;
  void clear_display();
  static const int kDisplayFieldNumber = 6;
  ::google::protobuf::int32 display() const;
  void set_display(::google::protobuf::int32 value);

  // optional int32 average_loss = 33 [default = 1];
  bool has_average_loss() const;
  void clear_average_loss();
  static const int kAverageLossFieldNumber = 33;
  ::google::protobuf::int32 average_loss() const;
  void set_average_loss(::google::protobuf::int32 value);

  // optional int32 max_iter = 7;
  bool has_max_iter() const;
  void clear_max_iter();
  static const int kMaxIterFieldNumber = 7;
  ::google::protobuf::int32 max_iter() const;
  void set_max_iter(::google::protobuf::int32 value);

  // optional int32 iter_size = 36 [default = 1];
  bool has_iter_size() const;
  void clear_iter_size();
  static const int kIterSizeFieldNumber = 36;
  ::google::protobuf::int32 iter_size() const;
  void set_iter_size(::google::protobuf::int32 value);

  // optional string lr_policy = 8;
  bool has_lr_policy() const;
  void clear_lr_policy();
  static const int kLrPolicyFieldNumber = 8;
  const ::std::string& lr_policy() const;
  void set_lr_policy(const ::std::string& value);
  void set_lr_policy(const char* value);
  void set_lr_policy(const char* value, size_t size);
  ::std::string* mutable_lr_policy();
  ::std::string* release_lr_policy();
  void set_allocated_lr_policy(::std::string* lr_policy);

  // optional float gamma = 9;
  bool has_gamma() const;
  void clear_gamma();
  static const int kGammaFieldNumber = 9;
  float gamma() const;
  void set_gamma(float value);

  // optional float power = 10;
  bool has_power() const;
  void clear_power();
  static const int kPowerFieldNumber = 10;
  float power() const;
  void set_power(float value);

  // optional float momentum = 11;
  bool has_momentum() const;
  void clear_momentum();
  static const int kMomentumFieldNumber = 11;
  float momentum() const;
  void set_momentum(float value);

  // optional float weight_decay = 12;
  bool has_weight_decay() const;
  void clear_weight_decay();
  static const int kWeightDecayFieldNumber = 12;
  float weight_decay() const;
  void set_weight_decay(float value);

  // optional string regularization_type = 29 [default = "L2"];
  bool has_regularization_type() const;
  void clear_regularization_type();
  static const int kRegularizationTypeFieldNumber = 29;
  const ::std::string& regularization_type() const;
  void set_regularization_type(const ::std::string& value);
  void set_regularization_type(const char* value);
  void set_regularization_type(const char* value, size_t size);
  ::std::string* mutable_regularization_type();
  ::std::string* release_regularization_type();
  void set_allocated_regularization_type(::std::string* regularization_type);

  // optional int32 stepsize = 13;
  bool has_stepsize() const;
  void clear_stepsize();
  static const int kStepsizeFieldNumber = 13;
  ::google::protobuf::int32 stepsize() const;
  void set_stepsize(::google::protobuf::int32 value);

  // repeated int32 stepvalue = 34;
  int stepvalue_size() const;
  void clear_stepvalue();
  static const int kStepvalueFieldNumber = 34;
  ::google::protobuf::int32 stepvalue(int index) const;
  void set_stepvalue(int index, ::google::protobuf::int32 value);
  void add_stepvalue(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      stepvalue() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_stepvalue();

  // optional float clip_gradients = 35 [default = -1];
  bool has_clip_gradients() const;
  void clear_clip_gradients();
  static const int kClipGradientsFieldNumber = 35;
  float clip_gradients() const;
  void set_clip_gradients(float value);

  // optional int32 snapshot = 14 [default = 0];
  bool has_snapshot() const;
  void clear_snapshot();
  static const int kSnapshotFieldNumber = 14;
  ::google::protobuf::int32 snapshot() const;
  void set_snapshot(::google::protobuf::int32 value);

  // optional string snapshot_prefix = 15;
  bool has_snapshot_prefix() const;
  void clear_snapshot_prefix();
  static const int kSnapshotPrefixFieldNumber = 15;
  const ::std::string& snapshot_prefix() const;
  void set_snapshot_prefix(const ::std::string& value);
  void set_snapshot_prefix(const char* value);
  void set_snapshot_prefix(const char* value, size_t size);
  ::std::string* mutable_snapshot_prefix();
  ::std::string* release_snapshot_prefix();
  void set_allocated_snapshot_prefix(::std::string* snapshot_prefix);

  // optional bool snapshot_diff = 16 [default = false];
  bool has_snapshot_diff() const;
  void clear_snapshot_diff();
  static const int kSnapshotDiffFieldNumber = 16;
  bool snapshot_diff() const;
  void set_snapshot_diff(bool value);

  // optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
  bool has_snapshot_format() const;
  void clear_snapshot_format();
  static const int kSnapshotFormatFieldNumber = 37;
  ::caffe::SolverParameter_SnapshotFormat snapshot_format() const;
  void set_snapshot_format(::caffe::SolverParameter_SnapshotFormat value);

  // optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
  bool has_solver_mode() const;
  void clear_solver_mode();
  static const int kSolverModeFieldNumber = 17;
  ::caffe::SolverParameter_SolverMode solver_mode() const;
  void set_solver_mode(::caffe::SolverParameter_SolverMode value);

  // optional int32 device_id = 18 [default = 0];
  bool has_device_id() const;
  void clear_device_id();
  static const int kDeviceIdFieldNumber = 18;
  ::google::protobuf::int32 device_id() const;
  void set_device_id(::google::protobuf::int32 value);

  // optional int64 random_seed = 20 [default = -1];
  bool has_random_seed() const;
  void clear_random_seed();
  static const int kRandomSeedFieldNumber = 20;
  ::google::protobuf::int64 random_seed() const;
  void set_random_seed(::google::protobuf::int64 value);

  // optional string type = 40 [default = "SGD"];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 40;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional float delta = 31 [default = 1e-008];
  bool has_delta() const;
  void clear_delta();
  static const int kDeltaFieldNumber = 31;
  float delta() const;
  void set_delta(float value);

  // optional float momentum2 = 39 [default = 0.999];
  bool has_momentum2() const;
  void clear_momentum2();
  static const int kMomentum2FieldNumber = 39;
  float momentum2() const;
  void set_momentum2(float value);

  // optional float rms_decay = 38 [default = 0.99];
  bool has_rms_decay() const;
  void clear_rms_decay();
  static const int kRmsDecayFieldNumber = 38;
  float rms_decay() const;
  void set_rms_decay(float value);

  // optional bool debug_info = 23 [default = false];
  bool has_debug_info() const;
  void clear_debug_info();
  static const int kDebugInfoFieldNumber = 23;
  bool debug_info() const;
  void set_debug_info(bool value);

  // optional bool snapshot_after_train = 28 [default = true];
  bool has_snapshot_after_train() const;
  void clear_snapshot_after_train();
  static const int kSnapshotAfterTrainFieldNumber = 28;
  bool snapshot_after_train() const;
  void set_snapshot_after_train(bool value);

  // optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
  bool has_solver_type() const;
  void clear_solver_type();
  static const int kSolverTypeFieldNumber = 30;
  ::caffe::SolverParameter_SolverType solver_type() const;
  void set_solver_type(::caffe::SolverParameter_SolverType value);

  // optional bool layer_wise_reduce = 41 [default = true];
  bool has_layer_wise_reduce() const;
  void clear_layer_wise_reduce();
  static const int kLayerWiseReduceFieldNumber = 41;
  bool layer_wise_reduce() const;
  void set_layer_wise_reduce(bool value);

  // @@protoc_insertion_point(class_scope:caffe.SolverParameter)
 private:
  inline void set_has_net();
  inline void clear_has_net();
  inline void set_has_net_param();
  inline void clear_has_net_param();
  inline void set_has_train_net();
  inline void clear_has_train_net();
  inline void set_has_train_net_param();
  inline void clear_has_train_net_param();
  inline void set_has_train_state();
  inline void clear_has_train_state();
  inline void set_has_test_interval();
  inline void clear_has_test_interval();
  inline void set_has_test_compute_loss();
  inline void clear_has_test_compute_loss();
  inline void set_has_test_initialization();
  inline void clear_has_test_initialization();
  inline void set_has_base_lr();
  inline void clear_has_base_lr();
  inline void set_has_display();
  inline void clear_has_display();
  inline void set_has_average_loss();
  inline void clear_has_average_loss();
  inline void set_has_max_iter();
  inline void clear_has_max_iter();
  inline void set_has_iter_size();
  inline void clear_has_iter_size();
  inline void set_has_lr_policy();
  inline void clear_has_lr_policy();
  inline void set_has_gamma();
  inline void clear_has_gamma();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_momentum();
  inline void clear_has_momentum();
  inline void set_has_weight_decay();
  inline void clear_has_weight_decay();
  inline void set_has_regularization_type();
  inline void clear_has_regularization_type();
  inline void set_has_stepsize();
  inline void clear_has_stepsize();
  inline void set_has_clip_gradients();
  inline void clear_has_clip_gradients();
  inline void set_has_snapshot();
  inline void clear_has_snapshot();
  inline void set_has_snapshot_prefix();
  inline void clear_has_snapshot_prefix();
  inline void set_has_snapshot_diff();
  inline void clear_has_snapshot_diff();
  inline void set_has_snapshot_format();
  inline void clear_has_snapshot_format();
  inline void set_has_solver_mode();
  inline void clear_has_solver_mode();
  inline void set_has_device_id();
  inline void clear_has_device_id();
  inline void set_has_random_seed();
  inline void clear_has_random_seed();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_delta();
  inline void clear_has_delta();
  inline void set_has_momentum2();
  inline void clear_has_momentum2();
  inline void set_has_rms_decay();
  inline void clear_has_rms_decay();
  inline void set_has_debug_info();
  inline void clear_has_debug_info();
  inline void set_has_snapshot_after_train();
  inline void clear_has_snapshot_after_train();
  inline void set_has_solver_type();
  inline void clear_has_solver_type();
  inline void set_has_layer_wise_reduce();
  inline void clear_has_layer_wise_reduce();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::google::protobuf::RepeatedPtrField< ::std::string> test_net_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NetParameter > test_net_param_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NetState > test_state_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > test_iter_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > stepvalue_;
  ::google::protobuf::internal::ArenaStringPtr net_;
  ::google::protobuf::internal::ArenaStringPtr train_net_;
  ::google::protobuf::internal::ArenaStringPtr lr_policy_;
  static ::std::string* _default_regularization_type_;
  ::google::protobuf::internal::ArenaStringPtr regularization_type_;
  ::google::protobuf::internal::ArenaStringPtr snapshot_prefix_;
  static ::std::string* _default_type_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::caffe::NetParameter* net_param_;
  ::caffe::NetParameter* train_net_param_;
  ::caffe::NetState* train_state_;
  ::google::protobuf::int32 test_interval_;
  float base_lr_;
  ::google::protobuf::int32 display_;
  ::google::protobuf::int32 max_iter_;
  float gamma_;
  float power_;
  float momentum_;
  float weight_decay_;
  ::google::protobuf::int32 stepsize_;
  bool test_compute_loss_;
  bool snapshot_diff_;
  bool debug_info_;
  ::google::protobuf::int32 snapshot_;
  ::google::protobuf::int32 device_id_;
  int solver_type_;
  float rms_decay_;
  ::google::protobuf::int32 average_loss_;
  ::google::protobuf::int32 iter_size_;
  float clip_gradients_;
  int snapshot_format_;
  bool test_initialization_;
  bool snapshot_after_train_;
  bool layer_wise_reduce_;
  int solver_mode_;
  ::google::protobuf::int64 random_seed_;
  float delta_;
  float momentum2_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SolverParameter> SolverParameter_default_instance_;

// -------------------------------------------------------------------

class SolverState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SolverState) */ {
 public:
  SolverState();
  virtual ~SolverState();

  SolverState(const SolverState& from);

  inline SolverState& operator=(const SolverState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SolverState& default_instance();

  static const SolverState* internal_default_instance();

  void Swap(SolverState* other);

  // implements Message ----------------------------------------------

  inline SolverState* New() const { return New(NULL); }

  SolverState* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SolverState& from);
  void MergeFrom(const SolverState& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SolverState* other);
  void UnsafeMergeFrom(const SolverState& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 iter = 1;
  bool has_iter() const;
  void clear_iter();
  static const int kIterFieldNumber = 1;
  ::google::protobuf::int32 iter() const;
  void set_iter(::google::protobuf::int32 value);

  // optional string learned_net = 2;
  bool has_learned_net() const;
  void clear_learned_net();
  static const int kLearnedNetFieldNumber = 2;
  const ::std::string& learned_net() const;
  void set_learned_net(const ::std::string& value);
  void set_learned_net(const char* value);
  void set_learned_net(const char* value, size_t size);
  ::std::string* mutable_learned_net();
  ::std::string* release_learned_net();
  void set_allocated_learned_net(::std::string* learned_net);

  // repeated .caffe.BlobProto history = 3;
  int history_size() const;
  void clear_history();
  static const int kHistoryFieldNumber = 3;
  const ::caffe::BlobProto& history(int index) const;
  ::caffe::BlobProto* mutable_history(int index);
  ::caffe::BlobProto* add_history();
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
      mutable_history();
  const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
      history() const;

  // optional int32 current_step = 4 [default = 0];
  bool has_current_step() const;
  void clear_current_step();
  static const int kCurrentStepFieldNumber = 4;
  ::google::protobuf::int32 current_step() const;
  void set_current_step(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.SolverState)
 private:
  inline void set_has_iter();
  inline void clear_has_iter();
  inline void set_has_learned_net();
  inline void clear_has_learned_net();
  inline void set_has_current_step();
  inline void clear_has_current_step();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto > history_;
  ::google::protobuf::internal::ArenaStringPtr learned_net_;
  ::google::protobuf::int32 iter_;
  ::google::protobuf::int32 current_step_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SolverState> SolverState_default_instance_;

// -------------------------------------------------------------------

class NetState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.NetState) */ {
 public:
  NetState();
  virtual ~NetState();

  NetState(const NetState& from);

  inline NetState& operator=(const NetState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetState& default_instance();

  static const NetState* internal_default_instance();

  void Swap(NetState* other);

  // implements Message ----------------------------------------------

  inline NetState* New() const { return New(NULL); }

  NetState* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetState& from);
  void MergeFrom(const NetState& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NetState* other);
  void UnsafeMergeFrom(const NetState& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.Phase phase = 1 [default = TEST];
  bool has_phase() const;
  void clear_phase();
  static const int kPhaseFieldNumber = 1;
  ::caffe::Phase phase() const;
  void set_phase(::caffe::Phase value);

  // optional int32 level = 2 [default = 0];
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 2;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // repeated string stage = 3;
  int stage_size() const;
  void clear_stage();
  static const int kStageFieldNumber = 3;
  const ::std::string& stage(int index) const;
  ::std::string* mutable_stage(int index);
  void set_stage(int index, const ::std::string& value);
  void set_stage(int index, const char* value);
  void set_stage(int index, const char* value, size_t size);
  ::std::string* add_stage();
  void add_stage(const ::std::string& value);
  void add_stage(const char* value);
  void add_stage(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& stage() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_stage();

  // @@protoc_insertion_point(class_scope:caffe.NetState)
 private:
  inline void set_has_phase();
  inline void clear_has_phase();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> stage_;
  ::google::protobuf::int32 level_;
  int phase_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<NetState> NetState_default_instance_;

// -------------------------------------------------------------------

class NetStateRule : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.NetStateRule) */ {
 public:
  NetStateRule();
  virtual ~NetStateRule();

  NetStateRule(const NetStateRule& from);

  inline NetStateRule& operator=(const NetStateRule& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetStateRule& default_instance();

  static const NetStateRule* internal_default_instance();

  void Swap(NetStateRule* other);

  // implements Message ----------------------------------------------

  inline NetStateRule* New() const { return New(NULL); }

  NetStateRule* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetStateRule& from);
  void MergeFrom(const NetStateRule& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NetStateRule* other);
  void UnsafeMergeFrom(const NetStateRule& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.Phase phase = 1;
  bool has_phase() const;
  void clear_phase();
  static const int kPhaseFieldNumber = 1;
  ::caffe::Phase phase() const;
  void set_phase(::caffe::Phase value);

  // optional int32 min_level = 2;
  bool has_min_level() const;
  void clear_min_level();
  static const int kMinLevelFieldNumber = 2;
  ::google::protobuf::int32 min_level() const;
  void set_min_level(::google::protobuf::int32 value);

  // optional int32 max_level = 3;
  bool has_max_level() const;
  void clear_max_level();
  static const int kMaxLevelFieldNumber = 3;
  ::google::protobuf::int32 max_level() const;
  void set_max_level(::google::protobuf::int32 value);

  // repeated string stage = 4;
  int stage_size() const;
  void clear_stage();
  static const int kStageFieldNumber = 4;
  const ::std::string& stage(int index) const;
  ::std::string* mutable_stage(int index);
  void set_stage(int index, const ::std::string& value);
  void set_stage(int index, const char* value);
  void set_stage(int index, const char* value, size_t size);
  ::std::string* add_stage();
  void add_stage(const ::std::string& value);
  void add_stage(const char* value);
  void add_stage(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& stage() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_stage();

  // repeated string not_stage = 5;
  int not_stage_size() const;
  void clear_not_stage();
  static const int kNotStageFieldNumber = 5;
  const ::std::string& not_stage(int index) const;
  ::std::string* mutable_not_stage(int index);
  void set_not_stage(int index, const ::std::string& value);
  void set_not_stage(int index, const char* value);
  void set_not_stage(int index, const char* value, size_t size);
  ::std::string* add_not_stage();
  void add_not_stage(const ::std::string& value);
  void add_not_stage(const char* value);
  void add_not_stage(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& not_stage() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_not_stage();

  // @@protoc_insertion_point(class_scope:caffe.NetStateRule)
 private:
  inline void set_has_phase();
  inline void clear_has_phase();
  inline void set_has_min_level();
  inline void clear_has_min_level();
  inline void set_has_max_level();
  inline void clear_has_max_level();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> stage_;
  ::google::protobuf::RepeatedPtrField< ::std::string> not_stage_;
  int phase_;
  ::google::protobuf::int32 min_level_;
  ::google::protobuf::int32 max_level_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<NetStateRule> NetStateRule_default_instance_;

// -------------------------------------------------------------------

class ParamSpec : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ParamSpec) */ {
 public:
  ParamSpec();
  virtual ~ParamSpec();

  ParamSpec(const ParamSpec& from);

  inline ParamSpec& operator=(const ParamSpec& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParamSpec& default_instance();

  static const ParamSpec* internal_default_instance();

  void Swap(ParamSpec* other);

  // implements Message ----------------------------------------------

  inline ParamSpec* New() const { return New(NULL); }

  ParamSpec* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParamSpec& from);
  void MergeFrom(const ParamSpec& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ParamSpec* other);
  void UnsafeMergeFrom(const ParamSpec& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ParamSpec_DimCheckMode DimCheckMode;
  static const DimCheckMode STRICT =
    ParamSpec_DimCheckMode_STRICT;
  static const DimCheckMode PERMISSIVE =
    ParamSpec_DimCheckMode_PERMISSIVE;
  static inline bool DimCheckMode_IsValid(int value) {
    return ParamSpec_DimCheckMode_IsValid(value);
  }
  static const DimCheckMode DimCheckMode_MIN =
    ParamSpec_DimCheckMode_DimCheckMode_MIN;
  static const DimCheckMode DimCheckMode_MAX =
    ParamSpec_DimCheckMode_DimCheckMode_MAX;
  static const int DimCheckMode_ARRAYSIZE =
    ParamSpec_DimCheckMode_DimCheckMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DimCheckMode_descriptor() {
    return ParamSpec_DimCheckMode_descriptor();
  }
  static inline const ::std::string& DimCheckMode_Name(DimCheckMode value) {
    return ParamSpec_DimCheckMode_Name(value);
  }
  static inline bool DimCheckMode_Parse(const ::std::string& name,
      DimCheckMode* value) {
    return ParamSpec_DimCheckMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
  bool has_share_mode() const;
  void clear_share_mode();
  static const int kShareModeFieldNumber = 2;
  ::caffe::ParamSpec_DimCheckMode share_mode() const;
  void set_share_mode(::caffe::ParamSpec_DimCheckMode value);

  // optional float lr_mult = 3 [default = 1];
  bool has_lr_mult() const;
  void clear_lr_mult();
  static const int kLrMultFieldNumber = 3;
  float lr_mult() const;
  void set_lr_mult(float value);

  // optional float decay_mult = 4 [default = 1];
  bool has_decay_mult() const;
  void clear_decay_mult();
  static const int kDecayMultFieldNumber = 4;
  float decay_mult() const;
  void set_decay_mult(float value);

  // @@protoc_insertion_point(class_scope:caffe.ParamSpec)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_share_mode();
  inline void clear_has_share_mode();
  inline void set_has_lr_mult();
  inline void clear_has_lr_mult();
  inline void set_has_decay_mult();
  inline void clear_has_decay_mult();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int share_mode_;
  float lr_mult_;
  float decay_mult_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ParamSpec> ParamSpec_default_instance_;

// -------------------------------------------------------------------

class LayerParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.LayerParameter) */ {
 public:
  LayerParameter();
  virtual ~LayerParameter();

  LayerParameter(const LayerParameter& from);

  inline LayerParameter& operator=(const LayerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LayerParameter& default_instance();

  static const LayerParameter* internal_default_instance();

  void Swap(LayerParameter* other);

  // implements Message ----------------------------------------------

  inline LayerParameter* New() const { return New(NULL); }

  LayerParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LayerParameter& from);
  void MergeFrom(const LayerParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LayerParameter* other);
  void UnsafeMergeFrom(const LayerParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // repeated string bottom = 3;
  int bottom_size() const;
  void clear_bottom();
  static const int kBottomFieldNumber = 3;
  const ::std::string& bottom(int index) const;
  ::std::string* mutable_bottom(int index);
  void set_bottom(int index, const ::std::string& value);
  void set_bottom(int index, const char* value);
  void set_bottom(int index, const char* value, size_t size);
  ::std::string* add_bottom();
  void add_bottom(const ::std::string& value);
  void add_bottom(const char* value);
  void add_bottom(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& bottom() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bottom();

  // repeated string top = 4;
  int top_size() const;
  void clear_top();
  static const int kTopFieldNumber = 4;
  const ::std::string& top(int index) const;
  ::std::string* mutable_top(int index);
  void set_top(int index, const ::std::string& value);
  void set_top(int index, const char* value);
  void set_top(int index, const char* value, size_t size);
  ::std::string* add_top();
  void add_top(const ::std::string& value);
  void add_top(const char* value);
  void add_top(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& top() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_top();

  // optional .caffe.Phase phase = 10;
  bool has_phase() const;
  void clear_phase();
  static const int kPhaseFieldNumber = 10;
  ::caffe::Phase phase() const;
  void set_phase(::caffe::Phase value);

  // repeated float loss_weight = 5;
  int loss_weight_size() const;
  void clear_loss_weight();
  static const int kLossWeightFieldNumber = 5;
  float loss_weight(int index) const;
  void set_loss_weight(int index, float value);
  void add_loss_weight(float value);
  const ::google::protobuf::RepeatedField< float >&
      loss_weight() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_loss_weight();

  // repeated .caffe.ParamSpec param = 6;
  int param_size() const;
  void clear_param();
  static const int kParamFieldNumber = 6;
  const ::caffe::ParamSpec& param(int index) const;
  ::caffe::ParamSpec* mutable_param(int index);
  ::caffe::ParamSpec* add_param();
  ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec >*
      mutable_param();
  const ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec >&
      param() const;

  // repeated .caffe.BlobProto blobs = 7;
  int blobs_size() const;
  void clear_blobs();
  static const int kBlobsFieldNumber = 7;
  const ::caffe::BlobProto& blobs(int index) const;
  ::caffe::BlobProto* mutable_blobs(int index);
  ::caffe::BlobProto* add_blobs();
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
      mutable_blobs();
  const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
      blobs() const;

  // repeated bool propagate_down = 11;
  int propagate_down_size() const;
  void clear_propagate_down();
  static const int kPropagateDownFieldNumber = 11;
  bool propagate_down(int index) const;
  void set_propagate_down(int index, bool value);
  void add_propagate_down(bool value);
  const ::google::protobuf::RepeatedField< bool >&
      propagate_down() const;
  ::google::protobuf::RepeatedField< bool >*
      mutable_propagate_down();

  // repeated .caffe.NetStateRule include = 8;
  int include_size() const;
  void clear_include();
  static const int kIncludeFieldNumber = 8;
  const ::caffe::NetStateRule& include(int index) const;
  ::caffe::NetStateRule* mutable_include(int index);
  ::caffe::NetStateRule* add_include();
  ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
      mutable_include();
  const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
      include() const;

  // repeated .caffe.NetStateRule exclude = 9;
  int exclude_size() const;
  void clear_exclude();
  static const int kExcludeFieldNumber = 9;
  const ::caffe::NetStateRule& exclude(int index) const;
  ::caffe::NetStateRule* mutable_exclude(int index);
  ::caffe::NetStateRule* add_exclude();
  ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
      mutable_exclude();
  const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
      exclude() const;

  // optional .caffe.TransformationParameter transform_param = 100;
  bool has_transform_param() const;
  void clear_transform_param();
  static const int kTransformParamFieldNumber = 100;
  const ::caffe::TransformationParameter& transform_param() const;
  ::caffe::TransformationParameter* mutable_transform_param();
  ::caffe::TransformationParameter* release_transform_param();
  void set_allocated_transform_param(::caffe::TransformationParameter* transform_param);

  // optional .caffe.LossParameter loss_param = 101;
  bool has_loss_param() const;
  void clear_loss_param();
  static const int kLossParamFieldNumber = 101;
  const ::caffe::LossParameter& loss_param() const;
  ::caffe::LossParameter* mutable_loss_param();
  ::caffe::LossParameter* release_loss_param();
  void set_allocated_loss_param(::caffe::LossParameter* loss_param);

  // optional .caffe.AccuracyParameter accuracy_param = 102;
  bool has_accuracy_param() const;
  void clear_accuracy_param();
  static const int kAccuracyParamFieldNumber = 102;
  const ::caffe::AccuracyParameter& accuracy_param() const;
  ::caffe::AccuracyParameter* mutable_accuracy_param();
  ::caffe::AccuracyParameter* release_accuracy_param();
  void set_allocated_accuracy_param(::caffe::AccuracyParameter* accuracy_param);

  // optional .caffe.ArgMaxParameter argmax_param = 103;
  bool has_argmax_param() const;
  void clear_argmax_param();
  static const int kArgmaxParamFieldNumber = 103;
  const ::caffe::ArgMaxParameter& argmax_param() const;
  ::caffe::ArgMaxParameter* mutable_argmax_param();
  ::caffe::ArgMaxParameter* release_argmax_param();
  void set_allocated_argmax_param(::caffe::ArgMaxParameter* argmax_param);

  // optional .caffe.BatchNormParameter batch_norm_param = 139;
  bool has_batch_norm_param() const;
  void clear_batch_norm_param();
  static const int kBatchNormParamFieldNumber = 139;
  const ::caffe::BatchNormParameter& batch_norm_param() const;
  ::caffe::BatchNormParameter* mutable_batch_norm_param();
  ::caffe::BatchNormParameter* release_batch_norm_param();
  void set_allocated_batch_norm_param(::caffe::BatchNormParameter* batch_norm_param);

  // optional .caffe.BiasParameter bias_param = 141;
  bool has_bias_param() const;
  void clear_bias_param();
  static const int kBiasParamFieldNumber = 141;
  const ::caffe::BiasParameter& bias_param() const;
  ::caffe::BiasParameter* mutable_bias_param();
  ::caffe::BiasParameter* release_bias_param();
  void set_allocated_bias_param(::caffe::BiasParameter* bias_param);

  // optional .caffe.ConcatParameter concat_param = 104;
  bool has_concat_param() const;
  void clear_concat_param();
  static const int kConcatParamFieldNumber = 104;
  const ::caffe::ConcatParameter& concat_param() const;
  ::caffe::ConcatParameter* mutable_concat_param();
  ::caffe::ConcatParameter* release_concat_param();
  void set_allocated_concat_param(::caffe::ConcatParameter* concat_param);

  // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;
  bool has_contrastive_loss_param() const;
  void clear_contrastive_loss_param();
  static const int kContrastiveLossParamFieldNumber = 105;
  const ::caffe::ContrastiveLossParameter& contrastive_loss_param() const;
  ::caffe::ContrastiveLossParameter* mutable_contrastive_loss_param();
  ::caffe::ContrastiveLossParameter* release_contrastive_loss_param();
  void set_allocated_contrastive_loss_param(::caffe::ContrastiveLossParameter* contrastive_loss_param);

  // optional .caffe.ConvolutionParameter convolution_param = 106;
  bool has_convolution_param() const;
  void clear_convolution_param();
  static const int kConvolutionParamFieldNumber = 106;
  const ::caffe::ConvolutionParameter& convolution_param() const;
  ::caffe::ConvolutionParameter* mutable_convolution_param();
  ::caffe::ConvolutionParameter* release_convolution_param();
  void set_allocated_convolution_param(::caffe::ConvolutionParameter* convolution_param);

  // optional .caffe.CropParameter crop_param = 144;
  bool has_crop_param() const;
  void clear_crop_param();
  static const int kCropParamFieldNumber = 144;
  const ::caffe::CropParameter& crop_param() const;
  ::caffe::CropParameter* mutable_crop_param();
  ::caffe::CropParameter* release_crop_param();
  void set_allocated_crop_param(::caffe::CropParameter* crop_param);

  // optional .caffe.DataParameter data_param = 107;
  bool has_data_param() const;
  void clear_data_param();
  static const int kDataParamFieldNumber = 107;
  const ::caffe::DataParameter& data_param() const;
  ::caffe::DataParameter* mutable_data_param();
  ::caffe::DataParameter* release_data_param();
  void set_allocated_data_param(::caffe::DataParameter* data_param);

  // optional .caffe.DropoutParameter dropout_param = 108;
  bool has_dropout_param() const;
  void clear_dropout_param();
  static const int kDropoutParamFieldNumber = 108;
  const ::caffe::DropoutParameter& dropout_param() const;
  ::caffe::DropoutParameter* mutable_dropout_param();
  ::caffe::DropoutParameter* release_dropout_param();
  void set_allocated_dropout_param(::caffe::DropoutParameter* dropout_param);

  // optional .caffe.DummyDataParameter dummy_data_param = 109;
  bool has_dummy_data_param() const;
  void clear_dummy_data_param();
  static const int kDummyDataParamFieldNumber = 109;
  const ::caffe::DummyDataParameter& dummy_data_param() const;
  ::caffe::DummyDataParameter* mutable_dummy_data_param();
  ::caffe::DummyDataParameter* release_dummy_data_param();
  void set_allocated_dummy_data_param(::caffe::DummyDataParameter* dummy_data_param);

  // optional .caffe.EltwiseParameter eltwise_param = 110;
  bool has_eltwise_param() const;
  void clear_eltwise_param();
  static const int kEltwiseParamFieldNumber = 110;
  const ::caffe::EltwiseParameter& eltwise_param() const;
  ::caffe::EltwiseParameter* mutable_eltwise_param();
  ::caffe::EltwiseParameter* release_eltwise_param();
  void set_allocated_eltwise_param(::caffe::EltwiseParameter* eltwise_param);

  // optional .caffe.ELUParameter elu_param = 140;
  bool has_elu_param() const;
  void clear_elu_param();
  static const int kEluParamFieldNumber = 140;
  const ::caffe::ELUParameter& elu_param() const;
  ::caffe::ELUParameter* mutable_elu_param();
  ::caffe::ELUParameter* release_elu_param();
  void set_allocated_elu_param(::caffe::ELUParameter* elu_param);

  // optional .caffe.EmbedParameter embed_param = 137;
  bool has_embed_param() const;
  void clear_embed_param();
  static const int kEmbedParamFieldNumber = 137;
  const ::caffe::EmbedParameter& embed_param() const;
  ::caffe::EmbedParameter* mutable_embed_param();
  ::caffe::EmbedParameter* release_embed_param();
  void set_allocated_embed_param(::caffe::EmbedParameter* embed_param);

  // optional .caffe.ExpParameter exp_param = 111;
  bool has_exp_param() const;
  void clear_exp_param();
  static const int kExpParamFieldNumber = 111;
  const ::caffe::ExpParameter& exp_param() const;
  ::caffe::ExpParameter* mutable_exp_param();
  ::caffe::ExpParameter* release_exp_param();
  void set_allocated_exp_param(::caffe::ExpParameter* exp_param);

  // optional .caffe.FlattenParameter flatten_param = 135;
  bool has_flatten_param() const;
  void clear_flatten_param();
  static const int kFlattenParamFieldNumber = 135;
  const ::caffe::FlattenParameter& flatten_param() const;
  ::caffe::FlattenParameter* mutable_flatten_param();
  ::caffe::FlattenParameter* release_flatten_param();
  void set_allocated_flatten_param(::caffe::FlattenParameter* flatten_param);

  // optional .caffe.HDF5DataParameter hdf5_data_param = 112;
  bool has_hdf5_data_param() const;
  void clear_hdf5_data_param();
  static const int kHdf5DataParamFieldNumber = 112;
  const ::caffe::HDF5DataParameter& hdf5_data_param() const;
  ::caffe::HDF5DataParameter* mutable_hdf5_data_param();
  ::caffe::HDF5DataParameter* release_hdf5_data_param();
  void set_allocated_hdf5_data_param(::caffe::HDF5DataParameter* hdf5_data_param);

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 113;
  bool has_hdf5_output_param() const;
  void clear_hdf5_output_param();
  static const int kHdf5OutputParamFieldNumber = 113;
  const ::caffe::HDF5OutputParameter& hdf5_output_param() const;
  ::caffe::HDF5OutputParameter* mutable_hdf5_output_param();
  ::caffe::HDF5OutputParameter* release_hdf5_output_param();
  void set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param);

  // optional .caffe.HingeLossParameter hinge_loss_param = 114;
  bool has_hinge_loss_param() const;
  void clear_hinge_loss_param();
  static const int kHingeLossParamFieldNumber = 114;
  const ::caffe::HingeLossParameter& hinge_loss_param() const;
  ::caffe::HingeLossParameter* mutable_hinge_loss_param();
  ::caffe::HingeLossParameter* release_hinge_loss_param();
  void set_allocated_hinge_loss_param(::caffe::HingeLossParameter* hinge_loss_param);

  // optional .caffe.ImageDataParameter image_data_param = 115;
  bool has_image_data_param() const;
  void clear_image_data_param();
  static const int kImageDataParamFieldNumber = 115;
  const ::caffe::ImageDataParameter& image_data_param() const;
  ::caffe::ImageDataParameter* mutable_image_data_param();
  ::caffe::ImageDataParameter* release_image_data_param();
  void set_allocated_image_data_param(::caffe::ImageDataParameter* image_data_param);

  // optional .caffe.InfogainLossParameter infogain_loss_param = 116;
  bool has_infogain_loss_param() const;
  void clear_infogain_loss_param();
  static const int kInfogainLossParamFieldNumber = 116;
  const ::caffe::InfogainLossParameter& infogain_loss_param() const;
  ::caffe::InfogainLossParameter* mutable_infogain_loss_param();
  ::caffe::InfogainLossParameter* release_infogain_loss_param();
  void set_allocated_infogain_loss_param(::caffe::InfogainLossParameter* infogain_loss_param);

  // optional .caffe.InnerProductParameter inner_product_param = 117;
  bool has_inner_product_param() const;
  void clear_inner_product_param();
  static const int kInnerProductParamFieldNumber = 117;
  const ::caffe::InnerProductParameter& inner_product_param() const;
  ::caffe::InnerProductParameter* mutable_inner_product_param();
  ::caffe::InnerProductParameter* release_inner_product_param();
  void set_allocated_inner_product_param(::caffe::InnerProductParameter* inner_product_param);

  // optional .caffe.InputParameter input_param = 143;
  bool has_input_param() const;
  void clear_input_param();
  static const int kInputParamFieldNumber = 143;
  const ::caffe::InputParameter& input_param() const;
  ::caffe::InputParameter* mutable_input_param();
  ::caffe::InputParameter* release_input_param();
  void set_allocated_input_param(::caffe::InputParameter* input_param);

  // optional .caffe.LogParameter log_param = 134;
  bool has_log_param() const;
  void clear_log_param();
  static const int kLogParamFieldNumber = 134;
  const ::caffe::LogParameter& log_param() const;
  ::caffe::LogParameter* mutable_log_param();
  ::caffe::LogParameter* release_log_param();
  void set_allocated_log_param(::caffe::LogParameter* log_param);

  // optional .caffe.LRNParameter lrn_param = 118;
  bool has_lrn_param() const;
  void clear_lrn_param();
  static const int kLrnParamFieldNumber = 118;
  const ::caffe::LRNParameter& lrn_param() const;
  ::caffe::LRNParameter* mutable_lrn_param();
  ::caffe::LRNParameter* release_lrn_param();
  void set_allocated_lrn_param(::caffe::LRNParameter* lrn_param);

  // optional .caffe.MemoryDataParameter memory_data_param = 119;
  bool has_memory_data_param() const;
  void clear_memory_data_param();
  static const int kMemoryDataParamFieldNumber = 119;
  const ::caffe::MemoryDataParameter& memory_data_param() const;
  ::caffe::MemoryDataParameter* mutable_memory_data_param();
  ::caffe::MemoryDataParameter* release_memory_data_param();
  void set_allocated_memory_data_param(::caffe::MemoryDataParameter* memory_data_param);

  // optional .caffe.MVNParameter mvn_param = 120;
  bool has_mvn_param() const;
  void clear_mvn_param();
  static const int kMvnParamFieldNumber = 120;
  const ::caffe::MVNParameter& mvn_param() const;
  ::caffe::MVNParameter* mutable_mvn_param();
  ::caffe::MVNParameter* release_mvn_param();
  void set_allocated_mvn_param(::caffe::MVNParameter* mvn_param);

  // optional .caffe.ParameterParameter parameter_param = 145;
  bool has_parameter_param() const;
  void clear_parameter_param();
  static const int kParameterParamFieldNumber = 145;
  const ::caffe::ParameterParameter& parameter_param() const;
  ::caffe::ParameterParameter* mutable_parameter_param();
  ::caffe::ParameterParameter* release_parameter_param();
  void set_allocated_parameter_param(::caffe::ParameterParameter* parameter_param);

  // optional .caffe.PoolingParameter pooling_param = 121;
  bool has_pooling_param() const;
  void clear_pooling_param();
  static const int kPoolingParamFieldNumber = 121;
  const ::caffe::PoolingParameter& pooling_param() const;
  ::caffe::PoolingParameter* mutable_pooling_param();
  ::caffe::PoolingParameter* release_pooling_param();
  void set_allocated_pooling_param(::caffe::PoolingParameter* pooling_param);

  // optional .caffe.PowerParameter power_param = 122;
  bool has_power_param() const;
  void clear_power_param();
  static const int kPowerParamFieldNumber = 122;
  const ::caffe::PowerParameter& power_param() const;
  ::caffe::PowerParameter* mutable_power_param();
  ::caffe::PowerParameter* release_power_param();
  void set_allocated_power_param(::caffe::PowerParameter* power_param);

  // optional .caffe.PReLUParameter prelu_param = 131;
  bool has_prelu_param() const;
  void clear_prelu_param();
  static const int kPreluParamFieldNumber = 131;
  const ::caffe::PReLUParameter& prelu_param() const;
  ::caffe::PReLUParameter* mutable_prelu_param();
  ::caffe::PReLUParameter* release_prelu_param();
  void set_allocated_prelu_param(::caffe::PReLUParameter* prelu_param);

  // optional .caffe.PythonParameter python_param = 130;
  bool has_python_param() const;
  void clear_python_param();
  static const int kPythonParamFieldNumber = 130;
  const ::caffe::PythonParameter& python_param() const;
  ::caffe::PythonParameter* mutable_python_param();
  ::caffe::PythonParameter* release_python_param();
  void set_allocated_python_param(::caffe::PythonParameter* python_param);

  // optional .caffe.RecurrentParameter recurrent_param = 146;
  bool has_recurrent_param() const;
  void clear_recurrent_param();
  static const int kRecurrentParamFieldNumber = 146;
  const ::caffe::RecurrentParameter& recurrent_param() const;
  ::caffe::RecurrentParameter* mutable_recurrent_param();
  ::caffe::RecurrentParameter* release_recurrent_param();
  void set_allocated_recurrent_param(::caffe::RecurrentParameter* recurrent_param);

  // optional .caffe.ReductionParameter reduction_param = 136;
  bool has_reduction_param() const;
  void clear_reduction_param();
  static const int kReductionParamFieldNumber = 136;
  const ::caffe::ReductionParameter& reduction_param() const;
  ::caffe::ReductionParameter* mutable_reduction_param();
  ::caffe::ReductionParameter* release_reduction_param();
  void set_allocated_reduction_param(::caffe::ReductionParameter* reduction_param);

  // optional .caffe.ReLUParameter relu_param = 123;
  bool has_relu_param() const;
  void clear_relu_param();
  static const int kReluParamFieldNumber = 123;
  const ::caffe::ReLUParameter& relu_param() const;
  ::caffe::ReLUParameter* mutable_relu_param();
  ::caffe::ReLUParameter* release_relu_param();
  void set_allocated_relu_param(::caffe::ReLUParameter* relu_param);

  // optional .caffe.ReshapeParameter reshape_param = 133;
  bool has_reshape_param() const;
  void clear_reshape_param();
  static const int kReshapeParamFieldNumber = 133;
  const ::caffe::ReshapeParameter& reshape_param() const;
  ::caffe::ReshapeParameter* mutable_reshape_param();
  ::caffe::ReshapeParameter* release_reshape_param();
  void set_allocated_reshape_param(::caffe::ReshapeParameter* reshape_param);

  // optional .caffe.ScaleParameter scale_param = 142;
  bool has_scale_param() const;
  void clear_scale_param();
  static const int kScaleParamFieldNumber = 142;
  const ::caffe::ScaleParameter& scale_param() const;
  ::caffe::ScaleParameter* mutable_scale_param();
  ::caffe::ScaleParameter* release_scale_param();
  void set_allocated_scale_param(::caffe::ScaleParameter* scale_param);

  // optional .caffe.SigmoidParameter sigmoid_param = 124;
  bool has_sigmoid_param() const;
  void clear_sigmoid_param();
  static const int kSigmoidParamFieldNumber = 124;
  const ::caffe::SigmoidParameter& sigmoid_param() const;
  ::caffe::SigmoidParameter* mutable_sigmoid_param();
  ::caffe::SigmoidParameter* release_sigmoid_param();
  void set_allocated_sigmoid_param(::caffe::SigmoidParameter* sigmoid_param);

  // optional .caffe.SoftmaxParameter softmax_param = 125;
  bool has_softmax_param() const;
  void clear_softmax_param();
  static const int kSoftmaxParamFieldNumber = 125;
  const ::caffe::SoftmaxParameter& softmax_param() const;
  ::caffe::SoftmaxParameter* mutable_softmax_param();
  ::caffe::SoftmaxParameter* release_softmax_param();
  void set_allocated_softmax_param(::caffe::SoftmaxParameter* softmax_param);

  // optional .caffe.SPPParameter spp_param = 132;
  bool has_spp_param() const;
  void clear_spp_param();
  static const int kSppParamFieldNumber = 132;
  const ::caffe::SPPParameter& spp_param() const;
  ::caffe::SPPParameter* mutable_spp_param();
  ::caffe::SPPParameter* release_spp_param();
  void set_allocated_spp_param(::caffe::SPPParameter* spp_param);

  // optional .caffe.SliceParameter slice_param = 126;
  bool has_slice_param() const;
  void clear_slice_param();
  static const int kSliceParamFieldNumber = 126;
  const ::caffe::SliceParameter& slice_param() const;
  ::caffe::SliceParameter* mutable_slice_param();
  ::caffe::SliceParameter* release_slice_param();
  void set_allocated_slice_param(::caffe::SliceParameter* slice_param);

  // optional .caffe.TanHParameter tanh_param = 127;
  bool has_tanh_param() const;
  void clear_tanh_param();
  static const int kTanhParamFieldNumber = 127;
  const ::caffe::TanHParameter& tanh_param() const;
  ::caffe::TanHParameter* mutable_tanh_param();
  ::caffe::TanHParameter* release_tanh_param();
  void set_allocated_tanh_param(::caffe::TanHParameter* tanh_param);

  // optional .caffe.ThresholdParameter threshold_param = 128;
  bool has_threshold_param() const;
  void clear_threshold_param();
  static const int kThresholdParamFieldNumber = 128;
  const ::caffe::ThresholdParameter& threshold_param() const;
  ::caffe::ThresholdParameter* mutable_threshold_param();
  ::caffe::ThresholdParameter* release_threshold_param();
  void set_allocated_threshold_param(::caffe::ThresholdParameter* threshold_param);

  // optional .caffe.TileParameter tile_param = 138;
  bool has_tile_param() const;
  void clear_tile_param();
  static const int kTileParamFieldNumber = 138;
  const ::caffe::TileParameter& tile_param() const;
  ::caffe::TileParameter* mutable_tile_param();
  ::caffe::TileParameter* release_tile_param();
  void set_allocated_tile_param(::caffe::TileParameter* tile_param);

  // optional .caffe.WindowDataParameter window_data_param = 129;
  bool has_window_data_param() const;
  void clear_window_data_param();
  static const int kWindowDataParamFieldNumber = 129;
  const ::caffe::WindowDataParameter& window_data_param() const;
  ::caffe::WindowDataParameter* mutable_window_data_param();
  ::caffe::WindowDataParameter* release_window_data_param();
  void set_allocated_window_data_param(::caffe::WindowDataParameter* window_data_param);

  // optional .caffe.ImgBBoxAnnoParameter img_bbox_anno_param = 1001;
  bool has_img_bbox_anno_param() const;
  void clear_img_bbox_anno_param();
  static const int kImgBboxAnnoParamFieldNumber = 1001;
  const ::caffe::ImgBBoxAnnoParameter& img_bbox_anno_param() const;
  ::caffe::ImgBBoxAnnoParameter* mutable_img_bbox_anno_param();
  ::caffe::ImgBBoxAnnoParameter* release_img_bbox_anno_param();
  void set_allocated_img_bbox_anno_param(::caffe::ImgBBoxAnnoParameter* img_bbox_anno_param);

  // optional .caffe.HeatmapConcatParameter heatmap_concat_param = 1002;
  bool has_heatmap_concat_param() const;
  void clear_heatmap_concat_param();
  static const int kHeatmapConcatParamFieldNumber = 1002;
  const ::caffe::HeatmapConcatParameter& heatmap_concat_param() const;
  ::caffe::HeatmapConcatParameter* mutable_heatmap_concat_param();
  ::caffe::HeatmapConcatParameter* release_heatmap_concat_param();
  void set_allocated_heatmap_concat_param(::caffe::HeatmapConcatParameter* heatmap_concat_param);

  // optional .caffe.BBoxAnnoMapParameter bbox_anno_map_param = 1003;
  bool has_bbox_anno_map_param() const;
  void clear_bbox_anno_map_param();
  static const int kBboxAnnoMapParamFieldNumber = 1003;
  const ::caffe::BBoxAnnoMapParameter& bbox_anno_map_param() const;
  ::caffe::BBoxAnnoMapParameter* mutable_bbox_anno_map_param();
  ::caffe::BBoxAnnoMapParameter* release_bbox_anno_map_param();
  void set_allocated_bbox_anno_map_param(::caffe::BBoxAnnoMapParameter* bbox_anno_map_param);

  // optional .caffe.LabelParameter label_param = 1004;
  bool has_label_param() const;
  void clear_label_param();
  static const int kLabelParamFieldNumber = 1004;
  const ::caffe::LabelParameter& label_param() const;
  ::caffe::LabelParameter* mutable_label_param();
  ::caffe::LabelParameter* release_label_param();
  void set_allocated_label_param(::caffe::LabelParameter* label_param);

  // optional .caffe.PatchDataParameter patch_data_param = 1005;
  bool has_patch_data_param() const;
  void clear_patch_data_param();
  static const int kPatchDataParamFieldNumber = 1005;
  const ::caffe::PatchDataParameter& patch_data_param() const;
  ::caffe::PatchDataParameter* mutable_patch_data_param();
  ::caffe::PatchDataParameter* release_patch_data_param();
  void set_allocated_patch_data_param(::caffe::PatchDataParameter* patch_data_param);

  // optional .caffe.LabelRemapParameter label_remap_param = 1006;
  bool has_label_remap_param() const;
  void clear_label_remap_param();
  static const int kLabelRemapParamFieldNumber = 1006;
  const ::caffe::LabelRemapParameter& label_remap_param() const;
  ::caffe::LabelRemapParameter* mutable_label_remap_param();
  ::caffe::LabelRemapParameter* release_label_remap_param();
  void set_allocated_label_remap_param(::caffe::LabelRemapParameter* label_remap_param);

  // optional .caffe.BBoxParameter bbox_param = 1007;
  bool has_bbox_param() const;
  void clear_bbox_param();
  static const int kBboxParamFieldNumber = 1007;
  const ::caffe::BBoxParameter& bbox_param() const;
  ::caffe::BBoxParameter* mutable_bbox_param();
  ::caffe::BBoxParameter* release_bbox_param();
  void set_allocated_bbox_param(::caffe::BBoxParameter* bbox_param);

  // optional .caffe.SlidingWindowInputParameter sliding_window_param = 1008;
  bool has_sliding_window_param() const;
  void clear_sliding_window_param();
  static const int kSlidingWindowParamFieldNumber = 1008;
  const ::caffe::SlidingWindowInputParameter& sliding_window_param() const;
  ::caffe::SlidingWindowInputParameter* mutable_sliding_window_param();
  ::caffe::SlidingWindowInputParameter* release_sliding_window_param();
  void set_allocated_sliding_window_param(::caffe::SlidingWindowInputParameter* sliding_window_param);

  // optional .caffe.BBoxToGridAndSizeParameter bbox_to_grid_and_size_param = 1009;
  bool has_bbox_to_grid_and_size_param() const;
  void clear_bbox_to_grid_and_size_param();
  static const int kBboxToGridAndSizeParamFieldNumber = 1009;
  const ::caffe::BBoxToGridAndSizeParameter& bbox_to_grid_and_size_param() const;
  ::caffe::BBoxToGridAndSizeParameter* mutable_bbox_to_grid_and_size_param();
  ::caffe::BBoxToGridAndSizeParameter* release_bbox_to_grid_and_size_param();
  void set_allocated_bbox_to_grid_and_size_param(::caffe::BBoxToGridAndSizeParameter* bbox_to_grid_and_size_param);

  // optional .caffe.SizeUnitParameter size_unit_param = 1010;
  bool has_size_unit_param() const;
  void clear_size_unit_param();
  static const int kSizeUnitParamFieldNumber = 1010;
  const ::caffe::SizeUnitParameter& size_unit_param() const;
  ::caffe::SizeUnitParameter* mutable_size_unit_param();
  ::caffe::SizeUnitParameter* release_size_unit_param();
  void set_allocated_size_unit_param(::caffe::SizeUnitParameter* size_unit_param);

  // optional .caffe.PaddingParameter padding_param = 1011;
  bool has_padding_param() const;
  void clear_padding_param();
  static const int kPaddingParamFieldNumber = 1011;
  const ::caffe::PaddingParameter& padding_param() const;
  ::caffe::PaddingParameter* mutable_padding_param();
  ::caffe::PaddingParameter* release_padding_param();
  void set_allocated_padding_param(::caffe::PaddingParameter* padding_param);

  // optional .caffe.GTMapDataParameter gt_map_data_param = 1012;
  bool has_gt_map_data_param() const;
  void clear_gt_map_data_param();
  static const int kGtMapDataParamFieldNumber = 1012;
  const ::caffe::GTMapDataParameter& gt_map_data_param() const;
  ::caffe::GTMapDataParameter* mutable_gt_map_data_param();
  ::caffe::GTMapDataParameter* release_gt_map_data_param();
  void set_allocated_gt_map_data_param(::caffe::GTMapDataParameter* gt_map_data_param);

  // optional .caffe.LabelDiffIgnoreParameter label_diff_ignore_param = 1013;
  bool has_label_diff_ignore_param() const;
  void clear_label_diff_ignore_param();
  static const int kLabelDiffIgnoreParamFieldNumber = 1013;
  const ::caffe::LabelDiffIgnoreParameter& label_diff_ignore_param() const;
  ::caffe::LabelDiffIgnoreParameter* mutable_label_diff_ignore_param();
  ::caffe::LabelDiffIgnoreParameter* release_label_diff_ignore_param();
  void set_allocated_label_diff_ignore_param(::caffe::LabelDiffIgnoreParameter* label_diff_ignore_param);

  // optional .caffe.GTSubmapDataParameter gt_submap_data_param = 1014;
  bool has_gt_submap_data_param() const;
  void clear_gt_submap_data_param();
  static const int kGtSubmapDataParamFieldNumber = 1014;
  const ::caffe::GTSubmapDataParameter& gt_submap_data_param() const;
  ::caffe::GTSubmapDataParameter* mutable_gt_submap_data_param();
  ::caffe::GTSubmapDataParameter* release_gt_submap_data_param();
  void set_allocated_gt_submap_data_param(::caffe::GTSubmapDataParameter* gt_submap_data_param);

  // optional .caffe.TopSubmapDataParameter top_submap_data_param = 1015;
  bool has_top_submap_data_param() const;
  void clear_top_submap_data_param();
  static const int kTopSubmapDataParamFieldNumber = 1015;
  const ::caffe::TopSubmapDataParameter& top_submap_data_param() const;
  ::caffe::TopSubmapDataParameter* mutable_top_submap_data_param();
  ::caffe::TopSubmapDataParameter* release_top_submap_data_param();
  void set_allocated_top_submap_data_param(::caffe::TopSubmapDataParameter* top_submap_data_param);

  // optional .caffe.YOLOLikeLossParameter yololike_loss_param = 1016;
  bool has_yololike_loss_param() const;
  void clear_yololike_loss_param();
  static const int kYololikeLossParamFieldNumber = 1016;
  const ::caffe::YOLOLikeLossParameter& yololike_loss_param() const;
  ::caffe::YOLOLikeLossParameter* mutable_yololike_loss_param();
  ::caffe::YOLOLikeLossParameter* release_yololike_loss_param();
  void set_allocated_yololike_loss_param(::caffe::YOLOLikeLossParameter* yololike_loss_param);

  // optional .caffe.WeightedSoftmaxLossParameter weighted_softmax_loss_param = 1017;
  bool has_weighted_softmax_loss_param() const;
  void clear_weighted_softmax_loss_param();
  static const int kWeightedSoftmaxLossParamFieldNumber = 1017;
  const ::caffe::WeightedSoftmaxLossParameter& weighted_softmax_loss_param() const;
  ::caffe::WeightedSoftmaxLossParameter* mutable_weighted_softmax_loss_param();
  ::caffe::WeightedSoftmaxLossParameter* release_weighted_softmax_loss_param();
  void set_allocated_weighted_softmax_loss_param(::caffe::WeightedSoftmaxLossParameter* weighted_softmax_loss_param);

  // optional .caffe.GridProposalLossParameter grid_proposal_loss_param = 1018;
  bool has_grid_proposal_loss_param() const;
  void clear_grid_proposal_loss_param();
  static const int kGridProposalLossParamFieldNumber = 1018;
  const ::caffe::GridProposalLossParameter& grid_proposal_loss_param() const;
  ::caffe::GridProposalLossParameter* mutable_grid_proposal_loss_param();
  ::caffe::GridProposalLossParameter* release_grid_proposal_loss_param();
  void set_allocated_grid_proposal_loss_param(::caffe::GridProposalLossParameter* grid_proposal_loss_param);

  // optional .caffe.BGSynthesisDataParameter bg_synthesis_data_param = 1019;
  bool has_bg_synthesis_data_param() const;
  void clear_bg_synthesis_data_param();
  static const int kBgSynthesisDataParamFieldNumber = 1019;
  const ::caffe::BGSynthesisDataParameter& bg_synthesis_data_param() const;
  ::caffe::BGSynthesisDataParameter* mutable_bg_synthesis_data_param();
  ::caffe::BGSynthesisDataParameter* release_bg_synthesis_data_param();
  void set_allocated_bg_synthesis_data_param(::caffe::BGSynthesisDataParameter* bg_synthesis_data_param);

  // optional .caffe.SizeFilterParameter size_filter_param = 1020;
  bool has_size_filter_param() const;
  void clear_size_filter_param();
  static const int kSizeFilterParamFieldNumber = 1020;
  const ::caffe::SizeFilterParameter& size_filter_param() const;
  ::caffe::SizeFilterParameter* mutable_size_filter_param();
  ::caffe::SizeFilterParameter* release_size_filter_param();
  void set_allocated_size_filter_param(::caffe::SizeFilterParameter* size_filter_param);

  // optional .caffe.AugmentationParameter augmentation_param = 1021;
  bool has_augmentation_param() const;
  void clear_augmentation_param();
  static const int kAugmentationParamFieldNumber = 1021;
  const ::caffe::AugmentationParameter& augmentation_param() const;
  ::caffe::AugmentationParameter* mutable_augmentation_param();
  ::caffe::AugmentationParameter* release_augmentation_param();
  void set_allocated_augmentation_param(::caffe::AugmentationParameter* augmentation_param);

  // optional .caffe.HeatmapParameter heatmap_param = 1022;
  bool has_heatmap_param() const;
  void clear_heatmap_param();
  static const int kHeatmapParamFieldNumber = 1022;
  const ::caffe::HeatmapParameter& heatmap_param() const;
  ::caffe::HeatmapParameter* mutable_heatmap_param();
  ::caffe::HeatmapParameter* release_heatmap_param();
  void set_allocated_heatmap_param(::caffe::HeatmapParameter* heatmap_param);

  // optional .caffe.CheckParameter check_param = 1023;
  bool has_check_param() const;
  void clear_check_param();
  static const int kCheckParamFieldNumber = 1023;
  const ::caffe::CheckParameter& check_param() const;
  ::caffe::CheckParameter* mutable_check_param();
  ::caffe::CheckParameter* release_check_param();
  void set_allocated_check_param(::caffe::CheckParameter* check_param);

  // optional .caffe.MeanSubParameter mean_sub_param = 1024;
  bool has_mean_sub_param() const;
  void clear_mean_sub_param();
  static const int kMeanSubParamFieldNumber = 1024;
  const ::caffe::MeanSubParameter& mean_sub_param() const;
  ::caffe::MeanSubParameter* mutable_mean_sub_param();
  ::caffe::MeanSubParameter* release_mean_sub_param();
  void set_allocated_mean_sub_param(::caffe::MeanSubParameter* mean_sub_param);

  // optional .caffe.MinibatchDataParameter minibatch_data_param = 1025;
  bool has_minibatch_data_param() const;
  void clear_minibatch_data_param();
  static const int kMinibatchDataParamFieldNumber = 1025;
  const ::caffe::MinibatchDataParameter& minibatch_data_param() const;
  ::caffe::MinibatchDataParameter* mutable_minibatch_data_param();
  ::caffe::MinibatchDataParameter* release_minibatch_data_param();
  void set_allocated_minibatch_data_param(::caffe::MinibatchDataParameter* minibatch_data_param);

  // optional .caffe.RowColProposalTransformParameter rcp_transform_param = 1026;
  bool has_rcp_transform_param() const;
  void clear_rcp_transform_param();
  static const int kRcpTransformParamFieldNumber = 1026;
  const ::caffe::RowColProposalTransformParameter& rcp_transform_param() const;
  ::caffe::RowColProposalTransformParameter* mutable_rcp_transform_param();
  ::caffe::RowColProposalTransformParameter* release_rcp_transform_param();
  void set_allocated_rcp_transform_param(::caffe::RowColProposalTransformParameter* rcp_transform_param);

  // optional .caffe.AnnoToSegParameter anno_to_seg_param = 1027;
  bool has_anno_to_seg_param() const;
  void clear_anno_to_seg_param();
  static const int kAnnoToSegParamFieldNumber = 1027;
  const ::caffe::AnnoToSegParameter& anno_to_seg_param() const;
  ::caffe::AnnoToSegParameter* mutable_anno_to_seg_param();
  ::caffe::AnnoToSegParameter* release_anno_to_seg_param();
  void set_allocated_anno_to_seg_param(::caffe::AnnoToSegParameter* anno_to_seg_param);

  // optional .caffe.TrainROIParameter train_roi_param = 1028;
  bool has_train_roi_param() const;
  void clear_train_roi_param();
  static const int kTrainRoiParamFieldNumber = 1028;
  const ::caffe::TrainROIParameter& train_roi_param() const;
  ::caffe::TrainROIParameter* mutable_train_roi_param();
  ::caffe::TrainROIParameter* release_train_roi_param();
  void set_allocated_train_roi_param(::caffe::TrainROIParameter* train_roi_param);

  // optional .caffe.YOLOV2LossParameter yolo_v2_loss_param = 1029;
  bool has_yolo_v2_loss_param() const;
  void clear_yolo_v2_loss_param();
  static const int kYoloV2LossParamFieldNumber = 1029;
  const ::caffe::YOLOV2LossParameter& yolo_v2_loss_param() const;
  ::caffe::YOLOV2LossParameter* mutable_yolo_v2_loss_param();
  ::caffe::YOLOV2LossParameter* release_yolo_v2_loss_param();
  void set_allocated_yolo_v2_loss_param(::caffe::YOLOV2LossParameter* yolo_v2_loss_param);

  // optional .caffe.YOLOV2ResultParameter yolo_v2_result_param = 1030;
  bool has_yolo_v2_result_param() const;
  void clear_yolo_v2_result_param();
  static const int kYoloV2ResultParamFieldNumber = 1030;
  const ::caffe::YOLOV2ResultParameter& yolo_v2_result_param() const;
  ::caffe::YOLOV2ResultParameter* mutable_yolo_v2_result_param();
  ::caffe::YOLOV2ResultParameter* release_yolo_v2_result_param();
  void set_allocated_yolo_v2_result_param(::caffe::YOLOV2ResultParameter* yolo_v2_result_param);

  // optional .caffe.DetectionCheckParameter detection_check_param = 1031;
  bool has_detection_check_param() const;
  void clear_detection_check_param();
  static const int kDetectionCheckParamFieldNumber = 1031;
  const ::caffe::DetectionCheckParameter& detection_check_param() const;
  ::caffe::DetectionCheckParameter* mutable_detection_check_param();
  ::caffe::DetectionCheckParameter* release_detection_check_param();
  void set_allocated_detection_check_param(::caffe::DetectionCheckParameter* detection_check_param);

  // optional .caffe.SubwinOffsetParameter subwin_offset_param = 1032;
  bool has_subwin_offset_param() const;
  void clear_subwin_offset_param();
  static const int kSubwinOffsetParamFieldNumber = 1032;
  const ::caffe::SubwinOffsetParameter& subwin_offset_param() const;
  ::caffe::SubwinOffsetParameter* mutable_subwin_offset_param();
  ::caffe::SubwinOffsetParameter* release_subwin_offset_param();
  void set_allocated_subwin_offset_param(::caffe::SubwinOffsetParameter* subwin_offset_param);

  // optional .caffe.SizeRejectionParameter size_rejection_param = 1033;
  bool has_size_rejection_param() const;
  void clear_size_rejection_param();
  static const int kSizeRejectionParamFieldNumber = 1033;
  const ::caffe::SizeRejectionParameter& size_rejection_param() const;
  ::caffe::SizeRejectionParameter* mutable_size_rejection_param();
  ::caffe::SizeRejectionParameter* release_size_rejection_param();
  void set_allocated_size_rejection_param(::caffe::SizeRejectionParameter* size_rejection_param);

  // optional .caffe.ConfCheckParameter conf_check_param = 1034;
  bool has_conf_check_param() const;
  void clear_conf_check_param();
  static const int kConfCheckParamFieldNumber = 1034;
  const ::caffe::ConfCheckParameter& conf_check_param() const;
  ::caffe::ConfCheckParameter* mutable_conf_check_param();
  ::caffe::ConfCheckParameter* release_conf_check_param();
  void set_allocated_conf_check_param(::caffe::ConfCheckParameter* conf_check_param);

  // optional .caffe.ReorgParameter reorg_param = 1035;
  bool has_reorg_param() const;
  void clear_reorg_param();
  static const int kReorgParamFieldNumber = 1035;
  const ::caffe::ReorgParameter& reorg_param() const;
  ::caffe::ReorgParameter* mutable_reorg_param();
  ::caffe::ReorgParameter* release_reorg_param();
  void set_allocated_reorg_param(::caffe::ReorgParameter* reorg_param);

  // optional .caffe.BatchRejectionParameter batch_rejection_param = 1036;
  bool has_batch_rejection_param() const;
  void clear_batch_rejection_param();
  static const int kBatchRejectionParamFieldNumber = 1036;
  const ::caffe::BatchRejectionParameter& batch_rejection_param() const;
  ::caffe::BatchRejectionParameter* mutable_batch_rejection_param();
  ::caffe::BatchRejectionParameter* release_batch_rejection_param();
  void set_allocated_batch_rejection_param(::caffe::BatchRejectionParameter* batch_rejection_param);

  // @@protoc_insertion_point(class_scope:caffe.LayerParameter)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_phase();
  inline void clear_has_phase();
  inline void set_has_transform_param();
  inline void clear_has_transform_param();
  inline void set_has_loss_param();
  inline void clear_has_loss_param();
  inline void set_has_accuracy_param();
  inline void clear_has_accuracy_param();
  inline void set_has_argmax_param();
  inline void clear_has_argmax_param();
  inline void set_has_batch_norm_param();
  inline void clear_has_batch_norm_param();
  inline void set_has_bias_param();
  inline void clear_has_bias_param();
  inline void set_has_concat_param();
  inline void clear_has_concat_param();
  inline void set_has_contrastive_loss_param();
  inline void clear_has_contrastive_loss_param();
  inline void set_has_convolution_param();
  inline void clear_has_convolution_param();
  inline void set_has_crop_param();
  inline void clear_has_crop_param();
  inline void set_has_data_param();
  inline void clear_has_data_param();
  inline void set_has_dropout_param();
  inline void clear_has_dropout_param();
  inline void set_has_dummy_data_param();
  inline void clear_has_dummy_data_param();
  inline void set_has_eltwise_param();
  inline void clear_has_eltwise_param();
  inline void set_has_elu_param();
  inline void clear_has_elu_param();
  inline void set_has_embed_param();
  inline void clear_has_embed_param();
  inline void set_has_exp_param();
  inline void clear_has_exp_param();
  inline void set_has_flatten_param();
  inline void clear_has_flatten_param();
  inline void set_has_hdf5_data_param();
  inline void clear_has_hdf5_data_param();
  inline void set_has_hdf5_output_param();
  inline void clear_has_hdf5_output_param();
  inline void set_has_hinge_loss_param();
  inline void clear_has_hinge_loss_param();
  inline void set_has_image_data_param();
  inline void clear_has_image_data_param();
  inline void set_has_infogain_loss_param();
  inline void clear_has_infogain_loss_param();
  inline void set_has_inner_product_param();
  inline void clear_has_inner_product_param();
  inline void set_has_input_param();
  inline void clear_has_input_param();
  inline void set_has_log_param();
  inline void clear_has_log_param();
  inline void set_has_lrn_param();
  inline void clear_has_lrn_param();
  inline void set_has_memory_data_param();
  inline void clear_has_memory_data_param();
  inline void set_has_mvn_param();
  inline void clear_has_mvn_param();
  inline void set_has_parameter_param();
  inline void clear_has_parameter_param();
  inline void set_has_pooling_param();
  inline void clear_has_pooling_param();
  inline void set_has_power_param();
  inline void clear_has_power_param();
  inline void set_has_prelu_param();
  inline void clear_has_prelu_param();
  inline void set_has_python_param();
  inline void clear_has_python_param();
  inline void set_has_recurrent_param();
  inline void clear_has_recurrent_param();
  inline void set_has_reduction_param();
  inline void clear_has_reduction_param();
  inline void set_has_relu_param();
  inline void clear_has_relu_param();
  inline void set_has_reshape_param();
  inline void clear_has_reshape_param();
  inline void set_has_scale_param();
  inline void clear_has_scale_param();
  inline void set_has_sigmoid_param();
  inline void clear_has_sigmoid_param();
  inline void set_has_softmax_param();
  inline void clear_has_softmax_param();
  inline void set_has_spp_param();
  inline void clear_has_spp_param();
  inline void set_has_slice_param();
  inline void clear_has_slice_param();
  inline void set_has_tanh_param();
  inline void clear_has_tanh_param();
  inline void set_has_threshold_param();
  inline void clear_has_threshold_param();
  inline void set_has_tile_param();
  inline void clear_has_tile_param();
  inline void set_has_window_data_param();
  inline void clear_has_window_data_param();
  inline void set_has_img_bbox_anno_param();
  inline void clear_has_img_bbox_anno_param();
  inline void set_has_heatmap_concat_param();
  inline void clear_has_heatmap_concat_param();
  inline void set_has_bbox_anno_map_param();
  inline void clear_has_bbox_anno_map_param();
  inline void set_has_label_param();
  inline void clear_has_label_param();
  inline void set_has_patch_data_param();
  inline void clear_has_patch_data_param();
  inline void set_has_label_remap_param();
  inline void clear_has_label_remap_param();
  inline void set_has_bbox_param();
  inline void clear_has_bbox_param();
  inline void set_has_sliding_window_param();
  inline void clear_has_sliding_window_param();
  inline void set_has_bbox_to_grid_and_size_param();
  inline void clear_has_bbox_to_grid_and_size_param();
  inline void set_has_size_unit_param();
  inline void clear_has_size_unit_param();
  inline void set_has_padding_param();
  inline void clear_has_padding_param();
  inline void set_has_gt_map_data_param();
  inline void clear_has_gt_map_data_param();
  inline void set_has_label_diff_ignore_param();
  inline void clear_has_label_diff_ignore_param();
  inline void set_has_gt_submap_data_param();
  inline void clear_has_gt_submap_data_param();
  inline void set_has_top_submap_data_param();
  inline void clear_has_top_submap_data_param();
  inline void set_has_yololike_loss_param();
  inline void clear_has_yololike_loss_param();
  inline void set_has_weighted_softmax_loss_param();
  inline void clear_has_weighted_softmax_loss_param();
  inline void set_has_grid_proposal_loss_param();
  inline void clear_has_grid_proposal_loss_param();
  inline void set_has_bg_synthesis_data_param();
  inline void clear_has_bg_synthesis_data_param();
  inline void set_has_size_filter_param();
  inline void clear_has_size_filter_param();
  inline void set_has_augmentation_param();
  inline void clear_has_augmentation_param();
  inline void set_has_heatmap_param();
  inline void clear_has_heatmap_param();
  inline void set_has_check_param();
  inline void clear_has_check_param();
  inline void set_has_mean_sub_param();
  inline void clear_has_mean_sub_param();
  inline void set_has_minibatch_data_param();
  inline void clear_has_minibatch_data_param();
  inline void set_has_rcp_transform_param();
  inline void clear_has_rcp_transform_param();
  inline void set_has_anno_to_seg_param();
  inline void clear_has_anno_to_seg_param();
  inline void set_has_train_roi_param();
  inline void clear_has_train_roi_param();
  inline void set_has_yolo_v2_loss_param();
  inline void clear_has_yolo_v2_loss_param();
  inline void set_has_yolo_v2_result_param();
  inline void clear_has_yolo_v2_result_param();
  inline void set_has_detection_check_param();
  inline void clear_has_detection_check_param();
  inline void set_has_subwin_offset_param();
  inline void clear_has_subwin_offset_param();
  inline void set_has_size_rejection_param();
  inline void clear_has_size_rejection_param();
  inline void set_has_conf_check_param();
  inline void clear_has_conf_check_param();
  inline void set_has_reorg_param();
  inline void clear_has_reorg_param();
  inline void set_has_batch_rejection_param();
  inline void clear_has_batch_rejection_param();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<3> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> bottom_;
  ::google::protobuf::RepeatedPtrField< ::std::string> top_;
  ::google::protobuf::RepeatedField< float > loss_weight_;
  ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec > param_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto > blobs_;
  ::google::protobuf::RepeatedField< bool > propagate_down_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule > include_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule > exclude_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::caffe::TransformationParameter* transform_param_;
  ::caffe::LossParameter* loss_param_;
  ::caffe::AccuracyParameter* accuracy_param_;
  ::caffe::ArgMaxParameter* argmax_param_;
  ::caffe::BatchNormParameter* batch_norm_param_;
  ::caffe::BiasParameter* bias_param_;
  ::caffe::ConcatParameter* concat_param_;
  ::caffe::ContrastiveLossParameter* contrastive_loss_param_;
  ::caffe::ConvolutionParameter* convolution_param_;
  ::caffe::CropParameter* crop_param_;
  ::caffe::DataParameter* data_param_;
  ::caffe::DropoutParameter* dropout_param_;
  ::caffe::DummyDataParameter* dummy_data_param_;
  ::caffe::EltwiseParameter* eltwise_param_;
  ::caffe::ELUParameter* elu_param_;
  ::caffe::EmbedParameter* embed_param_;
  ::caffe::ExpParameter* exp_param_;
  ::caffe::FlattenParameter* flatten_param_;
  ::caffe::HDF5DataParameter* hdf5_data_param_;
  ::caffe::HDF5OutputParameter* hdf5_output_param_;
  ::caffe::HingeLossParameter* hinge_loss_param_;
  ::caffe::ImageDataParameter* image_data_param_;
  ::caffe::InfogainLossParameter* infogain_loss_param_;
  ::caffe::InnerProductParameter* inner_product_param_;
  ::caffe::InputParameter* input_param_;
  ::caffe::LogParameter* log_param_;
  ::caffe::LRNParameter* lrn_param_;
  ::caffe::MemoryDataParameter* memory_data_param_;
  ::caffe::MVNParameter* mvn_param_;
  ::caffe::ParameterParameter* parameter_param_;
  ::caffe::PoolingParameter* pooling_param_;
  ::caffe::PowerParameter* power_param_;
  ::caffe::PReLUParameter* prelu_param_;
  ::caffe::PythonParameter* python_param_;
  ::caffe::RecurrentParameter* recurrent_param_;
  ::caffe::ReductionParameter* reduction_param_;
  ::caffe::ReLUParameter* relu_param_;
  ::caffe::ReshapeParameter* reshape_param_;
  ::caffe::ScaleParameter* scale_param_;
  ::caffe::SigmoidParameter* sigmoid_param_;
  ::caffe::SoftmaxParameter* softmax_param_;
  ::caffe::SPPParameter* spp_param_;
  ::caffe::SliceParameter* slice_param_;
  ::caffe::TanHParameter* tanh_param_;
  ::caffe::ThresholdParameter* threshold_param_;
  ::caffe::TileParameter* tile_param_;
  ::caffe::WindowDataParameter* window_data_param_;
  ::caffe::ImgBBoxAnnoParameter* img_bbox_anno_param_;
  ::caffe::HeatmapConcatParameter* heatmap_concat_param_;
  ::caffe::BBoxAnnoMapParameter* bbox_anno_map_param_;
  ::caffe::LabelParameter* label_param_;
  ::caffe::PatchDataParameter* patch_data_param_;
  ::caffe::LabelRemapParameter* label_remap_param_;
  ::caffe::BBoxParameter* bbox_param_;
  ::caffe::SlidingWindowInputParameter* sliding_window_param_;
  ::caffe::BBoxToGridAndSizeParameter* bbox_to_grid_and_size_param_;
  ::caffe::SizeUnitParameter* size_unit_param_;
  ::caffe::PaddingParameter* padding_param_;
  ::caffe::GTMapDataParameter* gt_map_data_param_;
  ::caffe::LabelDiffIgnoreParameter* label_diff_ignore_param_;
  ::caffe::GTSubmapDataParameter* gt_submap_data_param_;
  ::caffe::TopSubmapDataParameter* top_submap_data_param_;
  ::caffe::YOLOLikeLossParameter* yololike_loss_param_;
  ::caffe::WeightedSoftmaxLossParameter* weighted_softmax_loss_param_;
  ::caffe::GridProposalLossParameter* grid_proposal_loss_param_;
  ::caffe::BGSynthesisDataParameter* bg_synthesis_data_param_;
  ::caffe::SizeFilterParameter* size_filter_param_;
  ::caffe::AugmentationParameter* augmentation_param_;
  ::caffe::HeatmapParameter* heatmap_param_;
  ::caffe::CheckParameter* check_param_;
  ::caffe::MeanSubParameter* mean_sub_param_;
  ::caffe::MinibatchDataParameter* minibatch_data_param_;
  ::caffe::RowColProposalTransformParameter* rcp_transform_param_;
  ::caffe::AnnoToSegParameter* anno_to_seg_param_;
  ::caffe::TrainROIParameter* train_roi_param_;
  ::caffe::YOLOV2LossParameter* yolo_v2_loss_param_;
  ::caffe::YOLOV2ResultParameter* yolo_v2_result_param_;
  ::caffe::DetectionCheckParameter* detection_check_param_;
  ::caffe::SubwinOffsetParameter* subwin_offset_param_;
  ::caffe::SizeRejectionParameter* size_rejection_param_;
  ::caffe::ConfCheckParameter* conf_check_param_;
  ::caffe::ReorgParameter* reorg_param_;
  ::caffe::BatchRejectionParameter* batch_rejection_param_;
  int phase_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<LayerParameter> LayerParameter_default_instance_;

// -------------------------------------------------------------------

class TransformationParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.TransformationParameter) */ {
 public:
  TransformationParameter();
  virtual ~TransformationParameter();

  TransformationParameter(const TransformationParameter& from);

  inline TransformationParameter& operator=(const TransformationParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransformationParameter& default_instance();

  static const TransformationParameter* internal_default_instance();

  void Swap(TransformationParameter* other);

  // implements Message ----------------------------------------------

  inline TransformationParameter* New() const { return New(NULL); }

  TransformationParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransformationParameter& from);
  void MergeFrom(const TransformationParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransformationParameter* other);
  void UnsafeMergeFrom(const TransformationParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float scale = 1 [default = 1];
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 1;
  float scale() const;
  void set_scale(float value);

  // optional bool mirror = 2 [default = false];
  bool has_mirror() const;
  void clear_mirror();
  static const int kMirrorFieldNumber = 2;
  bool mirror() const;
  void set_mirror(bool value);

  // optional uint32 crop_size = 3 [default = 0];
  bool has_crop_size() const;
  void clear_crop_size();
  static const int kCropSizeFieldNumber = 3;
  ::google::protobuf::uint32 crop_size() const;
  void set_crop_size(::google::protobuf::uint32 value);

  // optional string mean_file = 4;
  bool has_mean_file() const;
  void clear_mean_file();
  static const int kMeanFileFieldNumber = 4;
  const ::std::string& mean_file() const;
  void set_mean_file(const ::std::string& value);
  void set_mean_file(const char* value);
  void set_mean_file(const char* value, size_t size);
  ::std::string* mutable_mean_file();
  ::std::string* release_mean_file();
  void set_allocated_mean_file(::std::string* mean_file);

  // repeated float mean_value = 5;
  int mean_value_size() const;
  void clear_mean_value();
  static const int kMeanValueFieldNumber = 5;
  float mean_value(int index) const;
  void set_mean_value(int index, float value);
  void add_mean_value(float value);
  const ::google::protobuf::RepeatedField< float >&
      mean_value() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_mean_value();

  // optional bool force_color = 6 [default = false];
  bool has_force_color() const;
  void clear_force_color();
  static const int kForceColorFieldNumber = 6;
  bool force_color() const;
  void set_force_color(bool value);

  // optional bool force_gray = 7 [default = false];
  bool has_force_gray() const;
  void clear_force_gray();
  static const int kForceGrayFieldNumber = 7;
  bool force_gray() const;
  void set_force_gray(bool value);

  // @@protoc_insertion_point(class_scope:caffe.TransformationParameter)
 private:
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_mirror();
  inline void clear_has_mirror();
  inline void set_has_crop_size();
  inline void clear_has_crop_size();
  inline void set_has_mean_file();
  inline void clear_has_mean_file();
  inline void set_has_force_color();
  inline void clear_has_force_color();
  inline void set_has_force_gray();
  inline void clear_has_force_gray();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > mean_value_;
  ::google::protobuf::internal::ArenaStringPtr mean_file_;
  ::google::protobuf::uint32 crop_size_;
  bool mirror_;
  bool force_color_;
  bool force_gray_;
  float scale_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TransformationParameter> TransformationParameter_default_instance_;

// -------------------------------------------------------------------

class LossParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.LossParameter) */ {
 public:
  LossParameter();
  virtual ~LossParameter();

  LossParameter(const LossParameter& from);

  inline LossParameter& operator=(const LossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LossParameter& default_instance();

  static const LossParameter* internal_default_instance();

  void Swap(LossParameter* other);

  // implements Message ----------------------------------------------

  inline LossParameter* New() const { return New(NULL); }

  LossParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LossParameter& from);
  void MergeFrom(const LossParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LossParameter* other);
  void UnsafeMergeFrom(const LossParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LossParameter_NormalizationMode NormalizationMode;
  static const NormalizationMode FULL =
    LossParameter_NormalizationMode_FULL;
  static const NormalizationMode VALID =
    LossParameter_NormalizationMode_VALID;
  static const NormalizationMode BATCH_SIZE =
    LossParameter_NormalizationMode_BATCH_SIZE;
  static const NormalizationMode NONE =
    LossParameter_NormalizationMode_NONE;
  static inline bool NormalizationMode_IsValid(int value) {
    return LossParameter_NormalizationMode_IsValid(value);
  }
  static const NormalizationMode NormalizationMode_MIN =
    LossParameter_NormalizationMode_NormalizationMode_MIN;
  static const NormalizationMode NormalizationMode_MAX =
    LossParameter_NormalizationMode_NormalizationMode_MAX;
  static const int NormalizationMode_ARRAYSIZE =
    LossParameter_NormalizationMode_NormalizationMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NormalizationMode_descriptor() {
    return LossParameter_NormalizationMode_descriptor();
  }
  static inline const ::std::string& NormalizationMode_Name(NormalizationMode value) {
    return LossParameter_NormalizationMode_Name(value);
  }
  static inline bool NormalizationMode_Parse(const ::std::string& name,
      NormalizationMode* value) {
    return LossParameter_NormalizationMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 ignore_label = 1;
  bool has_ignore_label() const;
  void clear_ignore_label();
  static const int kIgnoreLabelFieldNumber = 1;
  ::google::protobuf::int32 ignore_label() const;
  void set_ignore_label(::google::protobuf::int32 value);

  // optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
  bool has_normalization() const;
  void clear_normalization();
  static const int kNormalizationFieldNumber = 3;
  ::caffe::LossParameter_NormalizationMode normalization() const;
  void set_normalization(::caffe::LossParameter_NormalizationMode value);

  // optional bool normalize = 2;
  bool has_normalize() const;
  void clear_normalize();
  static const int kNormalizeFieldNumber = 2;
  bool normalize() const;
  void set_normalize(bool value);

  // @@protoc_insertion_point(class_scope:caffe.LossParameter)
 private:
  inline void set_has_ignore_label();
  inline void clear_has_ignore_label();
  inline void set_has_normalization();
  inline void clear_has_normalization();
  inline void set_has_normalize();
  inline void clear_has_normalize();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 ignore_label_;
  bool normalize_;
  int normalization_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<LossParameter> LossParameter_default_instance_;

// -------------------------------------------------------------------

class AccuracyParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.AccuracyParameter) */ {
 public:
  AccuracyParameter();
  virtual ~AccuracyParameter();

  AccuracyParameter(const AccuracyParameter& from);

  inline AccuracyParameter& operator=(const AccuracyParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccuracyParameter& default_instance();

  static const AccuracyParameter* internal_default_instance();

  void Swap(AccuracyParameter* other);

  // implements Message ----------------------------------------------

  inline AccuracyParameter* New() const { return New(NULL); }

  AccuracyParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccuracyParameter& from);
  void MergeFrom(const AccuracyParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AccuracyParameter* other);
  void UnsafeMergeFrom(const AccuracyParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 top_k = 1 [default = 1];
  bool has_top_k() const;
  void clear_top_k();
  static const int kTopKFieldNumber = 1;
  ::google::protobuf::uint32 top_k() const;
  void set_top_k(::google::protobuf::uint32 value);

  // optional int32 axis = 2 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 2;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // optional int32 ignore_label = 3;
  bool has_ignore_label() const;
  void clear_ignore_label();
  static const int kIgnoreLabelFieldNumber = 3;
  ::google::protobuf::int32 ignore_label() const;
  void set_ignore_label(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.AccuracyParameter)
 private:
  inline void set_has_top_k();
  inline void clear_has_top_k();
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_ignore_label();
  inline void clear_has_ignore_label();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 ignore_label_;
  ::google::protobuf::uint32 top_k_;
  ::google::protobuf::int32 axis_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AccuracyParameter> AccuracyParameter_default_instance_;

// -------------------------------------------------------------------

class ArgMaxParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ArgMaxParameter) */ {
 public:
  ArgMaxParameter();
  virtual ~ArgMaxParameter();

  ArgMaxParameter(const ArgMaxParameter& from);

  inline ArgMaxParameter& operator=(const ArgMaxParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArgMaxParameter& default_instance();

  static const ArgMaxParameter* internal_default_instance();

  void Swap(ArgMaxParameter* other);

  // implements Message ----------------------------------------------

  inline ArgMaxParameter* New() const { return New(NULL); }

  ArgMaxParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArgMaxParameter& from);
  void MergeFrom(const ArgMaxParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ArgMaxParameter* other);
  void UnsafeMergeFrom(const ArgMaxParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool out_max_val = 1 [default = false];
  bool has_out_max_val() const;
  void clear_out_max_val();
  static const int kOutMaxValFieldNumber = 1;
  bool out_max_val() const;
  void set_out_max_val(bool value);

  // optional uint32 top_k = 2 [default = 1];
  bool has_top_k() const;
  void clear_top_k();
  static const int kTopKFieldNumber = 2;
  ::google::protobuf::uint32 top_k() const;
  void set_top_k(::google::protobuf::uint32 value);

  // optional int32 axis = 3;
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 3;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.ArgMaxParameter)
 private:
  inline void set_has_out_max_val();
  inline void clear_has_out_max_val();
  inline void set_has_top_k();
  inline void clear_has_top_k();
  inline void set_has_axis();
  inline void clear_has_axis();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool out_max_val_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::uint32 top_k_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ArgMaxParameter> ArgMaxParameter_default_instance_;

// -------------------------------------------------------------------

class ConcatParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ConcatParameter) */ {
 public:
  ConcatParameter();
  virtual ~ConcatParameter();

  ConcatParameter(const ConcatParameter& from);

  inline ConcatParameter& operator=(const ConcatParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConcatParameter& default_instance();

  static const ConcatParameter* internal_default_instance();

  void Swap(ConcatParameter* other);

  // implements Message ----------------------------------------------

  inline ConcatParameter* New() const { return New(NULL); }

  ConcatParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConcatParameter& from);
  void MergeFrom(const ConcatParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConcatParameter* other);
  void UnsafeMergeFrom(const ConcatParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 axis = 2 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 2;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // optional uint32 concat_dim = 1 [default = 1];
  bool has_concat_dim() const;
  void clear_concat_dim();
  static const int kConcatDimFieldNumber = 1;
  ::google::protobuf::uint32 concat_dim() const;
  void set_concat_dim(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.ConcatParameter)
 private:
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_concat_dim();
  inline void clear_has_concat_dim();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::uint32 concat_dim_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ConcatParameter> ConcatParameter_default_instance_;

// -------------------------------------------------------------------

class BatchNormParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.BatchNormParameter) */ {
 public:
  BatchNormParameter();
  virtual ~BatchNormParameter();

  BatchNormParameter(const BatchNormParameter& from);

  inline BatchNormParameter& operator=(const BatchNormParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchNormParameter& default_instance();

  static const BatchNormParameter* internal_default_instance();

  void Swap(BatchNormParameter* other);

  // implements Message ----------------------------------------------

  inline BatchNormParameter* New() const { return New(NULL); }

  BatchNormParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BatchNormParameter& from);
  void MergeFrom(const BatchNormParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BatchNormParameter* other);
  void UnsafeMergeFrom(const BatchNormParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool use_global_stats = 1;
  bool has_use_global_stats() const;
  void clear_use_global_stats();
  static const int kUseGlobalStatsFieldNumber = 1;
  bool use_global_stats() const;
  void set_use_global_stats(bool value);

  // optional float moving_average_fraction = 2 [default = 0.999];
  bool has_moving_average_fraction() const;
  void clear_moving_average_fraction();
  static const int kMovingAverageFractionFieldNumber = 2;
  float moving_average_fraction() const;
  void set_moving_average_fraction(float value);

  // optional float eps = 3 [default = 1e-005];
  bool has_eps() const;
  void clear_eps();
  static const int kEpsFieldNumber = 3;
  float eps() const;
  void set_eps(float value);

  // @@protoc_insertion_point(class_scope:caffe.BatchNormParameter)
 private:
  inline void set_has_use_global_stats();
  inline void clear_has_use_global_stats();
  inline void set_has_moving_average_fraction();
  inline void clear_has_moving_average_fraction();
  inline void set_has_eps();
  inline void clear_has_eps();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool use_global_stats_;
  float moving_average_fraction_;
  float eps_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<BatchNormParameter> BatchNormParameter_default_instance_;

// -------------------------------------------------------------------

class BiasParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.BiasParameter) */ {
 public:
  BiasParameter();
  virtual ~BiasParameter();

  BiasParameter(const BiasParameter& from);

  inline BiasParameter& operator=(const BiasParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BiasParameter& default_instance();

  static const BiasParameter* internal_default_instance();

  void Swap(BiasParameter* other);

  // implements Message ----------------------------------------------

  inline BiasParameter* New() const { return New(NULL); }

  BiasParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BiasParameter& from);
  void MergeFrom(const BiasParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BiasParameter* other);
  void UnsafeMergeFrom(const BiasParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 axis = 1 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 1;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // optional int32 num_axes = 2 [default = 1];
  bool has_num_axes() const;
  void clear_num_axes();
  static const int kNumAxesFieldNumber = 2;
  ::google::protobuf::int32 num_axes() const;
  void set_num_axes(::google::protobuf::int32 value);

  // optional .caffe.FillerParameter filler = 3;
  bool has_filler() const;
  void clear_filler();
  static const int kFillerFieldNumber = 3;
  const ::caffe::FillerParameter& filler() const;
  ::caffe::FillerParameter* mutable_filler();
  ::caffe::FillerParameter* release_filler();
  void set_allocated_filler(::caffe::FillerParameter* filler);

  // @@protoc_insertion_point(class_scope:caffe.BiasParameter)
 private:
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_num_axes();
  inline void clear_has_num_axes();
  inline void set_has_filler();
  inline void clear_has_filler();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::caffe::FillerParameter* filler_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::int32 num_axes_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<BiasParameter> BiasParameter_default_instance_;

// -------------------------------------------------------------------

class ContrastiveLossParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ContrastiveLossParameter) */ {
 public:
  ContrastiveLossParameter();
  virtual ~ContrastiveLossParameter();

  ContrastiveLossParameter(const ContrastiveLossParameter& from);

  inline ContrastiveLossParameter& operator=(const ContrastiveLossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContrastiveLossParameter& default_instance();

  static const ContrastiveLossParameter* internal_default_instance();

  void Swap(ContrastiveLossParameter* other);

  // implements Message ----------------------------------------------

  inline ContrastiveLossParameter* New() const { return New(NULL); }

  ContrastiveLossParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContrastiveLossParameter& from);
  void MergeFrom(const ContrastiveLossParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContrastiveLossParameter* other);
  void UnsafeMergeFrom(const ContrastiveLossParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float margin = 1 [default = 1];
  bool has_margin() const;
  void clear_margin();
  static const int kMarginFieldNumber = 1;
  float margin() const;
  void set_margin(float value);

  // optional bool legacy_version = 2 [default = false];
  bool has_legacy_version() const;
  void clear_legacy_version();
  static const int kLegacyVersionFieldNumber = 2;
  bool legacy_version() const;
  void set_legacy_version(bool value);

  // @@protoc_insertion_point(class_scope:caffe.ContrastiveLossParameter)
 private:
  inline void set_has_margin();
  inline void clear_has_margin();
  inline void set_has_legacy_version();
  inline void clear_has_legacy_version();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool legacy_version_;
  float margin_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ContrastiveLossParameter> ContrastiveLossParameter_default_instance_;

// -------------------------------------------------------------------

class ConvolutionParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ConvolutionParameter) */ {
 public:
  ConvolutionParameter();
  virtual ~ConvolutionParameter();

  ConvolutionParameter(const ConvolutionParameter& from);

  inline ConvolutionParameter& operator=(const ConvolutionParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConvolutionParameter& default_instance();

  static const ConvolutionParameter* internal_default_instance();

  void Swap(ConvolutionParameter* other);

  // implements Message ----------------------------------------------

  inline ConvolutionParameter* New() const { return New(NULL); }

  ConvolutionParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConvolutionParameter& from);
  void MergeFrom(const ConvolutionParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConvolutionParameter* other);
  void UnsafeMergeFrom(const ConvolutionParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ConvolutionParameter_Engine Engine;
  static const Engine DEFAULT =
    ConvolutionParameter_Engine_DEFAULT;
  static const Engine CAFFE =
    ConvolutionParameter_Engine_CAFFE;
  static const Engine CUDNN =
    ConvolutionParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return ConvolutionParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    ConvolutionParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    ConvolutionParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    ConvolutionParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return ConvolutionParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return ConvolutionParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return ConvolutionParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 num_output = 1;
  bool has_num_output() const;
  void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  ::google::protobuf::uint32 num_output() const;
  void set_num_output(::google::protobuf::uint32 value);

  // optional bool bias_term = 2 [default = true];
  bool has_bias_term() const;
  void clear_bias_term();
  static const int kBiasTermFieldNumber = 2;
  bool bias_term() const;
  void set_bias_term(bool value);

  // repeated uint32 pad = 3;
  int pad_size() const;
  void clear_pad();
  static const int kPadFieldNumber = 3;
  ::google::protobuf::uint32 pad(int index) const;
  void set_pad(int index, ::google::protobuf::uint32 value);
  void add_pad(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      pad() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_pad();

  // repeated uint32 kernel_size = 4;
  int kernel_size_size() const;
  void clear_kernel_size();
  static const int kKernelSizeFieldNumber = 4;
  ::google::protobuf::uint32 kernel_size(int index) const;
  void set_kernel_size(int index, ::google::protobuf::uint32 value);
  void add_kernel_size(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      kernel_size() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_kernel_size();

  // repeated uint32 stride = 6;
  int stride_size() const;
  void clear_stride();
  static const int kStrideFieldNumber = 6;
  ::google::protobuf::uint32 stride(int index) const;
  void set_stride(int index, ::google::protobuf::uint32 value);
  void add_stride(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      stride() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_stride();

  // repeated uint32 dilation = 18;
  int dilation_size() const;
  void clear_dilation();
  static const int kDilationFieldNumber = 18;
  ::google::protobuf::uint32 dilation(int index) const;
  void set_dilation(int index, ::google::protobuf::uint32 value);
  void add_dilation(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      dilation() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_dilation();

  // optional uint32 pad_h = 9 [default = 0];
  bool has_pad_h() const;
  void clear_pad_h();
  static const int kPadHFieldNumber = 9;
  ::google::protobuf::uint32 pad_h() const;
  void set_pad_h(::google::protobuf::uint32 value);

  // optional uint32 pad_w = 10 [default = 0];
  bool has_pad_w() const;
  void clear_pad_w();
  static const int kPadWFieldNumber = 10;
  ::google::protobuf::uint32 pad_w() const;
  void set_pad_w(::google::protobuf::uint32 value);

  // optional uint32 kernel_h = 11;
  bool has_kernel_h() const;
  void clear_kernel_h();
  static const int kKernelHFieldNumber = 11;
  ::google::protobuf::uint32 kernel_h() const;
  void set_kernel_h(::google::protobuf::uint32 value);

  // optional uint32 kernel_w = 12;
  bool has_kernel_w() const;
  void clear_kernel_w();
  static const int kKernelWFieldNumber = 12;
  ::google::protobuf::uint32 kernel_w() const;
  void set_kernel_w(::google::protobuf::uint32 value);

  // optional uint32 stride_h = 13;
  bool has_stride_h() const;
  void clear_stride_h();
  static const int kStrideHFieldNumber = 13;
  ::google::protobuf::uint32 stride_h() const;
  void set_stride_h(::google::protobuf::uint32 value);

  // optional uint32 stride_w = 14;
  bool has_stride_w() const;
  void clear_stride_w();
  static const int kStrideWFieldNumber = 14;
  ::google::protobuf::uint32 stride_w() const;
  void set_stride_w(::google::protobuf::uint32 value);

  // optional uint32 group = 5 [default = 1];
  bool has_group() const;
  void clear_group();
  static const int kGroupFieldNumber = 5;
  ::google::protobuf::uint32 group() const;
  void set_group(::google::protobuf::uint32 value);

  // optional .caffe.FillerParameter weight_filler = 7;
  bool has_weight_filler() const;
  void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 7;
  const ::caffe::FillerParameter& weight_filler() const;
  ::caffe::FillerParameter* mutable_weight_filler();
  ::caffe::FillerParameter* release_weight_filler();
  void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);

  // optional .caffe.FillerParameter bias_filler = 8;
  bool has_bias_filler() const;
  void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 8;
  const ::caffe::FillerParameter& bias_filler() const;
  ::caffe::FillerParameter* mutable_bias_filler();
  ::caffe::FillerParameter* release_bias_filler();
  void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 15;
  ::caffe::ConvolutionParameter_Engine engine() const;
  void set_engine(::caffe::ConvolutionParameter_Engine value);

  // optional int32 axis = 16 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 16;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // optional bool force_nd_im2col = 17 [default = false];
  bool has_force_nd_im2col() const;
  void clear_force_nd_im2col();
  static const int kForceNdIm2ColFieldNumber = 17;
  bool force_nd_im2col() const;
  void set_force_nd_im2col(bool value);

  // @@protoc_insertion_point(class_scope:caffe.ConvolutionParameter)
 private:
  inline void set_has_num_output();
  inline void clear_has_num_output();
  inline void set_has_bias_term();
  inline void clear_has_bias_term();
  inline void set_has_pad_h();
  inline void clear_has_pad_h();
  inline void set_has_pad_w();
  inline void clear_has_pad_w();
  inline void set_has_kernel_h();
  inline void clear_has_kernel_h();
  inline void set_has_kernel_w();
  inline void clear_has_kernel_w();
  inline void set_has_stride_h();
  inline void clear_has_stride_h();
  inline void set_has_stride_w();
  inline void clear_has_stride_w();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_weight_filler();
  inline void clear_has_weight_filler();
  inline void set_has_bias_filler();
  inline void clear_has_bias_filler();
  inline void set_has_engine();
  inline void clear_has_engine();
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_force_nd_im2col();
  inline void clear_has_force_nd_im2col();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > pad_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > kernel_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > stride_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > dilation_;
  ::caffe::FillerParameter* weight_filler_;
  ::caffe::FillerParameter* bias_filler_;
  ::google::protobuf::uint32 num_output_;
  ::google::protobuf::uint32 pad_h_;
  ::google::protobuf::uint32 pad_w_;
  ::google::protobuf::uint32 kernel_h_;
  ::google::protobuf::uint32 kernel_w_;
  ::google::protobuf::uint32 stride_h_;
  ::google::protobuf::uint32 stride_w_;
  int engine_;
  bool force_nd_im2col_;
  ::google::protobuf::int32 axis_;
  bool bias_term_;
  ::google::protobuf::uint32 group_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ConvolutionParameter> ConvolutionParameter_default_instance_;

// -------------------------------------------------------------------

class CropParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.CropParameter) */ {
 public:
  CropParameter();
  virtual ~CropParameter();

  CropParameter(const CropParameter& from);

  inline CropParameter& operator=(const CropParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CropParameter& default_instance();

  static const CropParameter* internal_default_instance();

  void Swap(CropParameter* other);

  // implements Message ----------------------------------------------

  inline CropParameter* New() const { return New(NULL); }

  CropParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CropParameter& from);
  void MergeFrom(const CropParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CropParameter* other);
  void UnsafeMergeFrom(const CropParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 axis = 1 [default = 2];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 1;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // repeated uint32 offset = 2;
  int offset_size() const;
  void clear_offset();
  static const int kOffsetFieldNumber = 2;
  ::google::protobuf::uint32 offset(int index) const;
  void set_offset(int index, ::google::protobuf::uint32 value);
  void add_offset(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      offset() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_offset();

  // @@protoc_insertion_point(class_scope:caffe.CropParameter)
 private:
  inline void set_has_axis();
  inline void clear_has_axis();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > offset_;
  ::google::protobuf::int32 axis_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<CropParameter> CropParameter_default_instance_;

// -------------------------------------------------------------------

class DataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.DataParameter) */ {
 public:
  DataParameter();
  virtual ~DataParameter();

  DataParameter(const DataParameter& from);

  inline DataParameter& operator=(const DataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataParameter& default_instance();

  static const DataParameter* internal_default_instance();

  void Swap(DataParameter* other);

  // implements Message ----------------------------------------------

  inline DataParameter* New() const { return New(NULL); }

  DataParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataParameter& from);
  void MergeFrom(const DataParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DataParameter* other);
  void UnsafeMergeFrom(const DataParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DataParameter_DB DB;
  static const DB LEVELDB =
    DataParameter_DB_LEVELDB;
  static const DB LMDB =
    DataParameter_DB_LMDB;
  static inline bool DB_IsValid(int value) {
    return DataParameter_DB_IsValid(value);
  }
  static const DB DB_MIN =
    DataParameter_DB_DB_MIN;
  static const DB DB_MAX =
    DataParameter_DB_DB_MAX;
  static const int DB_ARRAYSIZE =
    DataParameter_DB_DB_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DB_descriptor() {
    return DataParameter_DB_descriptor();
  }
  static inline const ::std::string& DB_Name(DB value) {
    return DataParameter_DB_Name(value);
  }
  static inline bool DB_Parse(const ::std::string& name,
      DB* value) {
    return DataParameter_DB_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string source = 1;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // optional uint32 batch_size = 4;
  bool has_batch_size() const;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 4;
  ::google::protobuf::uint32 batch_size() const;
  void set_batch_size(::google::protobuf::uint32 value);

  // optional uint32 rand_skip = 7 [default = 0];
  bool has_rand_skip() const;
  void clear_rand_skip();
  static const int kRandSkipFieldNumber = 7;
  ::google::protobuf::uint32 rand_skip() const;
  void set_rand_skip(::google::protobuf::uint32 value);

  // optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];
  bool has_backend() const;
  void clear_backend();
  static const int kBackendFieldNumber = 8;
  ::caffe::DataParameter_DB backend() const;
  void set_backend(::caffe::DataParameter_DB value);

  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 2;
  float scale() const;
  void set_scale(float value);

  // optional string mean_file = 3;
  bool has_mean_file() const;
  void clear_mean_file();
  static const int kMeanFileFieldNumber = 3;
  const ::std::string& mean_file() const;
  void set_mean_file(const ::std::string& value);
  void set_mean_file(const char* value);
  void set_mean_file(const char* value, size_t size);
  ::std::string* mutable_mean_file();
  ::std::string* release_mean_file();
  void set_allocated_mean_file(::std::string* mean_file);

  // optional uint32 crop_size = 5 [default = 0];
  bool has_crop_size() const;
  void clear_crop_size();
  static const int kCropSizeFieldNumber = 5;
  ::google::protobuf::uint32 crop_size() const;
  void set_crop_size(::google::protobuf::uint32 value);

  // optional bool mirror = 6 [default = false];
  bool has_mirror() const;
  void clear_mirror();
  static const int kMirrorFieldNumber = 6;
  bool mirror() const;
  void set_mirror(bool value);

  // optional bool force_encoded_color = 9 [default = false];
  bool has_force_encoded_color() const;
  void clear_force_encoded_color();
  static const int kForceEncodedColorFieldNumber = 9;
  bool force_encoded_color() const;
  void set_force_encoded_color(bool value);

  // optional uint32 prefetch = 10 [default = 4];
  bool has_prefetch() const;
  void clear_prefetch();
  static const int kPrefetchFieldNumber = 10;
  ::google::protobuf::uint32 prefetch() const;
  void set_prefetch(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.DataParameter)
 private:
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_rand_skip();
  inline void clear_has_rand_skip();
  inline void set_has_backend();
  inline void clear_has_backend();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_mean_file();
  inline void clear_has_mean_file();
  inline void set_has_crop_size();
  inline void clear_has_crop_size();
  inline void set_has_mirror();
  inline void clear_has_mirror();
  inline void set_has_force_encoded_color();
  inline void clear_has_force_encoded_color();
  inline void set_has_prefetch();
  inline void clear_has_prefetch();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::internal::ArenaStringPtr mean_file_;
  ::google::protobuf::uint32 batch_size_;
  ::google::protobuf::uint32 rand_skip_;
  int backend_;
  ::google::protobuf::uint32 crop_size_;
  bool mirror_;
  bool force_encoded_color_;
  float scale_;
  ::google::protobuf::uint32 prefetch_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<DataParameter> DataParameter_default_instance_;

// -------------------------------------------------------------------

class DropoutParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.DropoutParameter) */ {
 public:
  DropoutParameter();
  virtual ~DropoutParameter();

  DropoutParameter(const DropoutParameter& from);

  inline DropoutParameter& operator=(const DropoutParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DropoutParameter& default_instance();

  static const DropoutParameter* internal_default_instance();

  void Swap(DropoutParameter* other);

  // implements Message ----------------------------------------------

  inline DropoutParameter* New() const { return New(NULL); }

  DropoutParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DropoutParameter& from);
  void MergeFrom(const DropoutParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DropoutParameter* other);
  void UnsafeMergeFrom(const DropoutParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float dropout_ratio = 1 [default = 0.5];
  bool has_dropout_ratio() const;
  void clear_dropout_ratio();
  static const int kDropoutRatioFieldNumber = 1;
  float dropout_ratio() const;
  void set_dropout_ratio(float value);

  // @@protoc_insertion_point(class_scope:caffe.DropoutParameter)
 private:
  inline void set_has_dropout_ratio();
  inline void clear_has_dropout_ratio();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float dropout_ratio_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<DropoutParameter> DropoutParameter_default_instance_;

// -------------------------------------------------------------------

class DummyDataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.DummyDataParameter) */ {
 public:
  DummyDataParameter();
  virtual ~DummyDataParameter();

  DummyDataParameter(const DummyDataParameter& from);

  inline DummyDataParameter& operator=(const DummyDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DummyDataParameter& default_instance();

  static const DummyDataParameter* internal_default_instance();

  void Swap(DummyDataParameter* other);

  // implements Message ----------------------------------------------

  inline DummyDataParameter* New() const { return New(NULL); }

  DummyDataParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DummyDataParameter& from);
  void MergeFrom(const DummyDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DummyDataParameter* other);
  void UnsafeMergeFrom(const DummyDataParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.FillerParameter data_filler = 1;
  int data_filler_size() const;
  void clear_data_filler();
  static const int kDataFillerFieldNumber = 1;
  const ::caffe::FillerParameter& data_filler(int index) const;
  ::caffe::FillerParameter* mutable_data_filler(int index);
  ::caffe::FillerParameter* add_data_filler();
  ::google::protobuf::RepeatedPtrField< ::caffe::FillerParameter >*
      mutable_data_filler();
  const ::google::protobuf::RepeatedPtrField< ::caffe::FillerParameter >&
      data_filler() const;

  // repeated .caffe.BlobShape shape = 6;
  int shape_size() const;
  void clear_shape();
  static const int kShapeFieldNumber = 6;
  const ::caffe::BlobShape& shape(int index) const;
  ::caffe::BlobShape* mutable_shape(int index);
  ::caffe::BlobShape* add_shape();
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
      mutable_shape();
  const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
      shape() const;

  // repeated uint32 num = 2;
  int num_size() const;
  void clear_num();
  static const int kNumFieldNumber = 2;
  ::google::protobuf::uint32 num(int index) const;
  void set_num(int index, ::google::protobuf::uint32 value);
  void add_num(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      num() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_num();

  // repeated uint32 channels = 3;
  int channels_size() const;
  void clear_channels();
  static const int kChannelsFieldNumber = 3;
  ::google::protobuf::uint32 channels(int index) const;
  void set_channels(int index, ::google::protobuf::uint32 value);
  void add_channels(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      channels() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_channels();

  // repeated uint32 height = 4;
  int height_size() const;
  void clear_height();
  static const int kHeightFieldNumber = 4;
  ::google::protobuf::uint32 height(int index) const;
  void set_height(int index, ::google::protobuf::uint32 value);
  void add_height(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      height() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_height();

  // repeated uint32 width = 5;
  int width_size() const;
  void clear_width();
  static const int kWidthFieldNumber = 5;
  ::google::protobuf::uint32 width(int index) const;
  void set_width(int index, ::google::protobuf::uint32 value);
  void add_width(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      width() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_width();

  // @@protoc_insertion_point(class_scope:caffe.DummyDataParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe::FillerParameter > data_filler_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape > shape_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > num_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > channels_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > height_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > width_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<DummyDataParameter> DummyDataParameter_default_instance_;

// -------------------------------------------------------------------

class EltwiseParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.EltwiseParameter) */ {
 public:
  EltwiseParameter();
  virtual ~EltwiseParameter();

  EltwiseParameter(const EltwiseParameter& from);

  inline EltwiseParameter& operator=(const EltwiseParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EltwiseParameter& default_instance();

  static const EltwiseParameter* internal_default_instance();

  void Swap(EltwiseParameter* other);

  // implements Message ----------------------------------------------

  inline EltwiseParameter* New() const { return New(NULL); }

  EltwiseParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EltwiseParameter& from);
  void MergeFrom(const EltwiseParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EltwiseParameter* other);
  void UnsafeMergeFrom(const EltwiseParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef EltwiseParameter_EltwiseOp EltwiseOp;
  static const EltwiseOp PROD =
    EltwiseParameter_EltwiseOp_PROD;
  static const EltwiseOp SUM =
    EltwiseParameter_EltwiseOp_SUM;
  static const EltwiseOp MAX =
    EltwiseParameter_EltwiseOp_MAX;
  static inline bool EltwiseOp_IsValid(int value) {
    return EltwiseParameter_EltwiseOp_IsValid(value);
  }
  static const EltwiseOp EltwiseOp_MIN =
    EltwiseParameter_EltwiseOp_EltwiseOp_MIN;
  static const EltwiseOp EltwiseOp_MAX =
    EltwiseParameter_EltwiseOp_EltwiseOp_MAX;
  static const int EltwiseOp_ARRAYSIZE =
    EltwiseParameter_EltwiseOp_EltwiseOp_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EltwiseOp_descriptor() {
    return EltwiseParameter_EltwiseOp_descriptor();
  }
  static inline const ::std::string& EltwiseOp_Name(EltwiseOp value) {
    return EltwiseParameter_EltwiseOp_Name(value);
  }
  static inline bool EltwiseOp_Parse(const ::std::string& name,
      EltwiseOp* value) {
    return EltwiseParameter_EltwiseOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
  bool has_operation() const;
  void clear_operation();
  static const int kOperationFieldNumber = 1;
  ::caffe::EltwiseParameter_EltwiseOp operation() const;
  void set_operation(::caffe::EltwiseParameter_EltwiseOp value);

  // repeated float coeff = 2;
  int coeff_size() const;
  void clear_coeff();
  static const int kCoeffFieldNumber = 2;
  float coeff(int index) const;
  void set_coeff(int index, float value);
  void add_coeff(float value);
  const ::google::protobuf::RepeatedField< float >&
      coeff() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_coeff();

  // optional bool stable_prod_grad = 3 [default = true];
  bool has_stable_prod_grad() const;
  void clear_stable_prod_grad();
  static const int kStableProdGradFieldNumber = 3;
  bool stable_prod_grad() const;
  void set_stable_prod_grad(bool value);

  // @@protoc_insertion_point(class_scope:caffe.EltwiseParameter)
 private:
  inline void set_has_operation();
  inline void clear_has_operation();
  inline void set_has_stable_prod_grad();
  inline void clear_has_stable_prod_grad();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > coeff_;
  int operation_;
  bool stable_prod_grad_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<EltwiseParameter> EltwiseParameter_default_instance_;

// -------------------------------------------------------------------

class ELUParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ELUParameter) */ {
 public:
  ELUParameter();
  virtual ~ELUParameter();

  ELUParameter(const ELUParameter& from);

  inline ELUParameter& operator=(const ELUParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ELUParameter& default_instance();

  static const ELUParameter* internal_default_instance();

  void Swap(ELUParameter* other);

  // implements Message ----------------------------------------------

  inline ELUParameter* New() const { return New(NULL); }

  ELUParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ELUParameter& from);
  void MergeFrom(const ELUParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ELUParameter* other);
  void UnsafeMergeFrom(const ELUParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float alpha = 1 [default = 1];
  bool has_alpha() const;
  void clear_alpha();
  static const int kAlphaFieldNumber = 1;
  float alpha() const;
  void set_alpha(float value);

  // @@protoc_insertion_point(class_scope:caffe.ELUParameter)
 private:
  inline void set_has_alpha();
  inline void clear_has_alpha();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float alpha_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ELUParameter> ELUParameter_default_instance_;

// -------------------------------------------------------------------

class EmbedParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.EmbedParameter) */ {
 public:
  EmbedParameter();
  virtual ~EmbedParameter();

  EmbedParameter(const EmbedParameter& from);

  inline EmbedParameter& operator=(const EmbedParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmbedParameter& default_instance();

  static const EmbedParameter* internal_default_instance();

  void Swap(EmbedParameter* other);

  // implements Message ----------------------------------------------

  inline EmbedParameter* New() const { return New(NULL); }

  EmbedParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmbedParameter& from);
  void MergeFrom(const EmbedParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EmbedParameter* other);
  void UnsafeMergeFrom(const EmbedParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num_output = 1;
  bool has_num_output() const;
  void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  ::google::protobuf::uint32 num_output() const;
  void set_num_output(::google::protobuf::uint32 value);

  // optional uint32 input_dim = 2;
  bool has_input_dim() const;
  void clear_input_dim();
  static const int kInputDimFieldNumber = 2;
  ::google::protobuf::uint32 input_dim() const;
  void set_input_dim(::google::protobuf::uint32 value);

  // optional bool bias_term = 3 [default = true];
  bool has_bias_term() const;
  void clear_bias_term();
  static const int kBiasTermFieldNumber = 3;
  bool bias_term() const;
  void set_bias_term(bool value);

  // optional .caffe.FillerParameter weight_filler = 4;
  bool has_weight_filler() const;
  void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 4;
  const ::caffe::FillerParameter& weight_filler() const;
  ::caffe::FillerParameter* mutable_weight_filler();
  ::caffe::FillerParameter* release_weight_filler();
  void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);

  // optional .caffe.FillerParameter bias_filler = 5;
  bool has_bias_filler() const;
  void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 5;
  const ::caffe::FillerParameter& bias_filler() const;
  ::caffe::FillerParameter* mutable_bias_filler();
  ::caffe::FillerParameter* release_bias_filler();
  void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // @@protoc_insertion_point(class_scope:caffe.EmbedParameter)
 private:
  inline void set_has_num_output();
  inline void clear_has_num_output();
  inline void set_has_input_dim();
  inline void clear_has_input_dim();
  inline void set_has_bias_term();
  inline void clear_has_bias_term();
  inline void set_has_weight_filler();
  inline void clear_has_weight_filler();
  inline void set_has_bias_filler();
  inline void clear_has_bias_filler();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::caffe::FillerParameter* weight_filler_;
  ::caffe::FillerParameter* bias_filler_;
  ::google::protobuf::uint32 num_output_;
  ::google::protobuf::uint32 input_dim_;
  bool bias_term_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<EmbedParameter> EmbedParameter_default_instance_;

// -------------------------------------------------------------------

class ExpParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ExpParameter) */ {
 public:
  ExpParameter();
  virtual ~ExpParameter();

  ExpParameter(const ExpParameter& from);

  inline ExpParameter& operator=(const ExpParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExpParameter& default_instance();

  static const ExpParameter* internal_default_instance();

  void Swap(ExpParameter* other);

  // implements Message ----------------------------------------------

  inline ExpParameter* New() const { return New(NULL); }

  ExpParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExpParameter& from);
  void MergeFrom(const ExpParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExpParameter* other);
  void UnsafeMergeFrom(const ExpParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float base = 1 [default = -1];
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  float base() const;
  void set_base(float value);

  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 2;
  float scale() const;
  void set_scale(float value);

  // optional float shift = 3 [default = 0];
  bool has_shift() const;
  void clear_shift();
  static const int kShiftFieldNumber = 3;
  float shift() const;
  void set_shift(float value);

  // @@protoc_insertion_point(class_scope:caffe.ExpParameter)
 private:
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_shift();
  inline void clear_has_shift();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float shift_;
  float base_;
  float scale_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ExpParameter> ExpParameter_default_instance_;

// -------------------------------------------------------------------

class FlattenParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.FlattenParameter) */ {
 public:
  FlattenParameter();
  virtual ~FlattenParameter();

  FlattenParameter(const FlattenParameter& from);

  inline FlattenParameter& operator=(const FlattenParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FlattenParameter& default_instance();

  static const FlattenParameter* internal_default_instance();

  void Swap(FlattenParameter* other);

  // implements Message ----------------------------------------------

  inline FlattenParameter* New() const { return New(NULL); }

  FlattenParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FlattenParameter& from);
  void MergeFrom(const FlattenParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FlattenParameter* other);
  void UnsafeMergeFrom(const FlattenParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 axis = 1 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 1;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // optional int32 end_axis = 2 [default = -1];
  bool has_end_axis() const;
  void clear_end_axis();
  static const int kEndAxisFieldNumber = 2;
  ::google::protobuf::int32 end_axis() const;
  void set_end_axis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.FlattenParameter)
 private:
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_end_axis();
  inline void clear_has_end_axis();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::int32 end_axis_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<FlattenParameter> FlattenParameter_default_instance_;

// -------------------------------------------------------------------

class HDF5DataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.HDF5DataParameter) */ {
 public:
  HDF5DataParameter();
  virtual ~HDF5DataParameter();

  HDF5DataParameter(const HDF5DataParameter& from);

  inline HDF5DataParameter& operator=(const HDF5DataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HDF5DataParameter& default_instance();

  static const HDF5DataParameter* internal_default_instance();

  void Swap(HDF5DataParameter* other);

  // implements Message ----------------------------------------------

  inline HDF5DataParameter* New() const { return New(NULL); }

  HDF5DataParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HDF5DataParameter& from);
  void MergeFrom(const HDF5DataParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HDF5DataParameter* other);
  void UnsafeMergeFrom(const HDF5DataParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // optional uint32 batch_size = 2;
  bool has_batch_size() const;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 2;
  ::google::protobuf::uint32 batch_size() const;
  void set_batch_size(::google::protobuf::uint32 value);

  // optional bool shuffle = 3 [default = false];
  bool has_shuffle() const;
  void clear_shuffle();
  static const int kShuffleFieldNumber = 3;
  bool shuffle() const;
  void set_shuffle(bool value);

  // @@protoc_insertion_point(class_scope:caffe.HDF5DataParameter)
 private:
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_shuffle();
  inline void clear_has_shuffle();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::uint32 batch_size_;
  bool shuffle_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<HDF5DataParameter> HDF5DataParameter_default_instance_;

// -------------------------------------------------------------------

class HDF5OutputParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.HDF5OutputParameter) */ {
 public:
  HDF5OutputParameter();
  virtual ~HDF5OutputParameter();

  HDF5OutputParameter(const HDF5OutputParameter& from);

  inline HDF5OutputParameter& operator=(const HDF5OutputParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HDF5OutputParameter& default_instance();

  static const HDF5OutputParameter* internal_default_instance();

  void Swap(HDF5OutputParameter* other);

  // implements Message ----------------------------------------------

  inline HDF5OutputParameter* New() const { return New(NULL); }

  HDF5OutputParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HDF5OutputParameter& from);
  void MergeFrom(const HDF5OutputParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HDF5OutputParameter* other);
  void UnsafeMergeFrom(const HDF5OutputParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string file_name = 1;
  bool has_file_name() const;
  void clear_file_name();
  static const int kFileNameFieldNumber = 1;
  const ::std::string& file_name() const;
  void set_file_name(const ::std::string& value);
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  ::std::string* mutable_file_name();
  ::std::string* release_file_name();
  void set_allocated_file_name(::std::string* file_name);

  // @@protoc_insertion_point(class_scope:caffe.HDF5OutputParameter)
 private:
  inline void set_has_file_name();
  inline void clear_has_file_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr file_name_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<HDF5OutputParameter> HDF5OutputParameter_default_instance_;

// -------------------------------------------------------------------

class HingeLossParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.HingeLossParameter) */ {
 public:
  HingeLossParameter();
  virtual ~HingeLossParameter();

  HingeLossParameter(const HingeLossParameter& from);

  inline HingeLossParameter& operator=(const HingeLossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HingeLossParameter& default_instance();

  static const HingeLossParameter* internal_default_instance();

  void Swap(HingeLossParameter* other);

  // implements Message ----------------------------------------------

  inline HingeLossParameter* New() const { return New(NULL); }

  HingeLossParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HingeLossParameter& from);
  void MergeFrom(const HingeLossParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HingeLossParameter* other);
  void UnsafeMergeFrom(const HingeLossParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef HingeLossParameter_Norm Norm;
  static const Norm L1 =
    HingeLossParameter_Norm_L1;
  static const Norm L2 =
    HingeLossParameter_Norm_L2;
  static inline bool Norm_IsValid(int value) {
    return HingeLossParameter_Norm_IsValid(value);
  }
  static const Norm Norm_MIN =
    HingeLossParameter_Norm_Norm_MIN;
  static const Norm Norm_MAX =
    HingeLossParameter_Norm_Norm_MAX;
  static const int Norm_ARRAYSIZE =
    HingeLossParameter_Norm_Norm_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Norm_descriptor() {
    return HingeLossParameter_Norm_descriptor();
  }
  static inline const ::std::string& Norm_Name(Norm value) {
    return HingeLossParameter_Norm_Name(value);
  }
  static inline bool Norm_Parse(const ::std::string& name,
      Norm* value) {
    return HingeLossParameter_Norm_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];
  bool has_norm() const;
  void clear_norm();
  static const int kNormFieldNumber = 1;
  ::caffe::HingeLossParameter_Norm norm() const;
  void set_norm(::caffe::HingeLossParameter_Norm value);

  // @@protoc_insertion_point(class_scope:caffe.HingeLossParameter)
 private:
  inline void set_has_norm();
  inline void clear_has_norm();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int norm_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<HingeLossParameter> HingeLossParameter_default_instance_;

// -------------------------------------------------------------------

class ImageDataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ImageDataParameter) */ {
 public:
  ImageDataParameter();
  virtual ~ImageDataParameter();

  ImageDataParameter(const ImageDataParameter& from);

  inline ImageDataParameter& operator=(const ImageDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageDataParameter& default_instance();

  static const ImageDataParameter* internal_default_instance();

  void Swap(ImageDataParameter* other);

  // implements Message ----------------------------------------------

  inline ImageDataParameter* New() const { return New(NULL); }

  ImageDataParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImageDataParameter& from);
  void MergeFrom(const ImageDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ImageDataParameter* other);
  void UnsafeMergeFrom(const ImageDataParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // optional uint32 batch_size = 4 [default = 1];
  bool has_batch_size() const;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 4;
  ::google::protobuf::uint32 batch_size() const;
  void set_batch_size(::google::protobuf::uint32 value);

  // optional uint32 rand_skip = 7 [default = 0];
  bool has_rand_skip() const;
  void clear_rand_skip();
  static const int kRandSkipFieldNumber = 7;
  ::google::protobuf::uint32 rand_skip() const;
  void set_rand_skip(::google::protobuf::uint32 value);

  // optional bool shuffle = 8 [default = false];
  bool has_shuffle() const;
  void clear_shuffle();
  static const int kShuffleFieldNumber = 8;
  bool shuffle() const;
  void set_shuffle(bool value);

  // optional uint32 new_height = 9 [default = 0];
  bool has_new_height() const;
  void clear_new_height();
  static const int kNewHeightFieldNumber = 9;
  ::google::protobuf::uint32 new_height() const;
  void set_new_height(::google::protobuf::uint32 value);

  // optional uint32 new_width = 10 [default = 0];
  bool has_new_width() const;
  void clear_new_width();
  static const int kNewWidthFieldNumber = 10;
  ::google::protobuf::uint32 new_width() const;
  void set_new_width(::google::protobuf::uint32 value);

  // optional bool is_color = 11 [default = true];
  bool has_is_color() const;
  void clear_is_color();
  static const int kIsColorFieldNumber = 11;
  bool is_color() const;
  void set_is_color(bool value);

  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 2;
  float scale() const;
  void set_scale(float value);

  // optional string mean_file = 3;
  bool has_mean_file() const;
  void clear_mean_file();
  static const int kMeanFileFieldNumber = 3;
  const ::std::string& mean_file() const;
  void set_mean_file(const ::std::string& value);
  void set_mean_file(const char* value);
  void set_mean_file(const char* value, size_t size);
  ::std::string* mutable_mean_file();
  ::std::string* release_mean_file();
  void set_allocated_mean_file(::std::string* mean_file);

  // optional uint32 crop_size = 5 [default = 0];
  bool has_crop_size() const;
  void clear_crop_size();
  static const int kCropSizeFieldNumber = 5;
  ::google::protobuf::uint32 crop_size() const;
  void set_crop_size(::google::protobuf::uint32 value);

  // optional bool mirror = 6 [default = false];
  bool has_mirror() const;
  void clear_mirror();
  static const int kMirrorFieldNumber = 6;
  bool mirror() const;
  void set_mirror(bool value);

  // optional string root_folder = 12 [default = ""];
  bool has_root_folder() const;
  void clear_root_folder();
  static const int kRootFolderFieldNumber = 12;
  const ::std::string& root_folder() const;
  void set_root_folder(const ::std::string& value);
  void set_root_folder(const char* value);
  void set_root_folder(const char* value, size_t size);
  ::std::string* mutable_root_folder();
  ::std::string* release_root_folder();
  void set_allocated_root_folder(::std::string* root_folder);

  // @@protoc_insertion_point(class_scope:caffe.ImageDataParameter)
 private:
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_rand_skip();
  inline void clear_has_rand_skip();
  inline void set_has_shuffle();
  inline void clear_has_shuffle();
  inline void set_has_new_height();
  inline void clear_has_new_height();
  inline void set_has_new_width();
  inline void clear_has_new_width();
  inline void set_has_is_color();
  inline void clear_has_is_color();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_mean_file();
  inline void clear_has_mean_file();
  inline void set_has_crop_size();
  inline void clear_has_crop_size();
  inline void set_has_mirror();
  inline void clear_has_mirror();
  inline void set_has_root_folder();
  inline void clear_has_root_folder();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::internal::ArenaStringPtr mean_file_;
  ::google::protobuf::internal::ArenaStringPtr root_folder_;
  ::google::protobuf::uint32 rand_skip_;
  ::google::protobuf::uint32 new_height_;
  ::google::protobuf::uint32 new_width_;
  bool shuffle_;
  bool mirror_;
  ::google::protobuf::uint32 crop_size_;
  float scale_;
  ::google::protobuf::uint32 batch_size_;
  bool is_color_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ImageDataParameter> ImageDataParameter_default_instance_;

// -------------------------------------------------------------------

class InfogainLossParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.InfogainLossParameter) */ {
 public:
  InfogainLossParameter();
  virtual ~InfogainLossParameter();

  InfogainLossParameter(const InfogainLossParameter& from);

  inline InfogainLossParameter& operator=(const InfogainLossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InfogainLossParameter& default_instance();

  static const InfogainLossParameter* internal_default_instance();

  void Swap(InfogainLossParameter* other);

  // implements Message ----------------------------------------------

  inline InfogainLossParameter* New() const { return New(NULL); }

  InfogainLossParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InfogainLossParameter& from);
  void MergeFrom(const InfogainLossParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InfogainLossParameter* other);
  void UnsafeMergeFrom(const InfogainLossParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // optional int32 axis = 2 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 2;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.InfogainLossParameter)
 private:
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_axis();
  inline void clear_has_axis();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::int32 axis_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<InfogainLossParameter> InfogainLossParameter_default_instance_;

// -------------------------------------------------------------------

class InnerProductParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.InnerProductParameter) */ {
 public:
  InnerProductParameter();
  virtual ~InnerProductParameter();

  InnerProductParameter(const InnerProductParameter& from);

  inline InnerProductParameter& operator=(const InnerProductParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InnerProductParameter& default_instance();

  static const InnerProductParameter* internal_default_instance();

  void Swap(InnerProductParameter* other);

  // implements Message ----------------------------------------------

  inline InnerProductParameter* New() const { return New(NULL); }

  InnerProductParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InnerProductParameter& from);
  void MergeFrom(const InnerProductParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InnerProductParameter* other);
  void UnsafeMergeFrom(const InnerProductParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num_output = 1;
  bool has_num_output() const;
  void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  ::google::protobuf::uint32 num_output() const;
  void set_num_output(::google::protobuf::uint32 value);

  // optional bool bias_term = 2 [default = true];
  bool has_bias_term() const;
  void clear_bias_term();
  static const int kBiasTermFieldNumber = 2;
  bool bias_term() const;
  void set_bias_term(bool value);

  // optional .caffe.FillerParameter weight_filler = 3;
  bool has_weight_filler() const;
  void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 3;
  const ::caffe::FillerParameter& weight_filler() const;
  ::caffe::FillerParameter* mutable_weight_filler();
  ::caffe::FillerParameter* release_weight_filler();
  void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);

  // optional .caffe.FillerParameter bias_filler = 4;
  bool has_bias_filler() const;
  void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 4;
  const ::caffe::FillerParameter& bias_filler() const;
  ::caffe::FillerParameter* mutable_bias_filler();
  ::caffe::FillerParameter* release_bias_filler();
  void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // optional int32 axis = 5 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 5;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // optional bool transpose = 6 [default = false];
  bool has_transpose() const;
  void clear_transpose();
  static const int kTransposeFieldNumber = 6;
  bool transpose() const;
  void set_transpose(bool value);

  // @@protoc_insertion_point(class_scope:caffe.InnerProductParameter)
 private:
  inline void set_has_num_output();
  inline void clear_has_num_output();
  inline void set_has_bias_term();
  inline void clear_has_bias_term();
  inline void set_has_weight_filler();
  inline void clear_has_weight_filler();
  inline void set_has_bias_filler();
  inline void clear_has_bias_filler();
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_transpose();
  inline void clear_has_transpose();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::caffe::FillerParameter* weight_filler_;
  ::caffe::FillerParameter* bias_filler_;
  ::google::protobuf::uint32 num_output_;
  bool transpose_;
  bool bias_term_;
  ::google::protobuf::int32 axis_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<InnerProductParameter> InnerProductParameter_default_instance_;

// -------------------------------------------------------------------

class InputParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.InputParameter) */ {
 public:
  InputParameter();
  virtual ~InputParameter();

  InputParameter(const InputParameter& from);

  inline InputParameter& operator=(const InputParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InputParameter& default_instance();

  static const InputParameter* internal_default_instance();

  void Swap(InputParameter* other);

  // implements Message ----------------------------------------------

  inline InputParameter* New() const { return New(NULL); }

  InputParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InputParameter& from);
  void MergeFrom(const InputParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InputParameter* other);
  void UnsafeMergeFrom(const InputParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.BlobShape shape = 1;
  int shape_size() const;
  void clear_shape();
  static const int kShapeFieldNumber = 1;
  const ::caffe::BlobShape& shape(int index) const;
  ::caffe::BlobShape* mutable_shape(int index);
  ::caffe::BlobShape* add_shape();
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
      mutable_shape();
  const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
      shape() const;

  // @@protoc_insertion_point(class_scope:caffe.InputParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape > shape_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<InputParameter> InputParameter_default_instance_;

// -------------------------------------------------------------------

class LogParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.LogParameter) */ {
 public:
  LogParameter();
  virtual ~LogParameter();

  LogParameter(const LogParameter& from);

  inline LogParameter& operator=(const LogParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogParameter& default_instance();

  static const LogParameter* internal_default_instance();

  void Swap(LogParameter* other);

  // implements Message ----------------------------------------------

  inline LogParameter* New() const { return New(NULL); }

  LogParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogParameter& from);
  void MergeFrom(const LogParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogParameter* other);
  void UnsafeMergeFrom(const LogParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float base = 1 [default = -1];
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  float base() const;
  void set_base(float value);

  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 2;
  float scale() const;
  void set_scale(float value);

  // optional float shift = 3 [default = 0];
  bool has_shift() const;
  void clear_shift();
  static const int kShiftFieldNumber = 3;
  float shift() const;
  void set_shift(float value);

  // @@protoc_insertion_point(class_scope:caffe.LogParameter)
 private:
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_shift();
  inline void clear_has_shift();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float shift_;
  float base_;
  float scale_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<LogParameter> LogParameter_default_instance_;

// -------------------------------------------------------------------

class LRNParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.LRNParameter) */ {
 public:
  LRNParameter();
  virtual ~LRNParameter();

  LRNParameter(const LRNParameter& from);

  inline LRNParameter& operator=(const LRNParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LRNParameter& default_instance();

  static const LRNParameter* internal_default_instance();

  void Swap(LRNParameter* other);

  // implements Message ----------------------------------------------

  inline LRNParameter* New() const { return New(NULL); }

  LRNParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LRNParameter& from);
  void MergeFrom(const LRNParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LRNParameter* other);
  void UnsafeMergeFrom(const LRNParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LRNParameter_NormRegion NormRegion;
  static const NormRegion ACROSS_CHANNELS =
    LRNParameter_NormRegion_ACROSS_CHANNELS;
  static const NormRegion WITHIN_CHANNEL =
    LRNParameter_NormRegion_WITHIN_CHANNEL;
  static inline bool NormRegion_IsValid(int value) {
    return LRNParameter_NormRegion_IsValid(value);
  }
  static const NormRegion NormRegion_MIN =
    LRNParameter_NormRegion_NormRegion_MIN;
  static const NormRegion NormRegion_MAX =
    LRNParameter_NormRegion_NormRegion_MAX;
  static const int NormRegion_ARRAYSIZE =
    LRNParameter_NormRegion_NormRegion_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NormRegion_descriptor() {
    return LRNParameter_NormRegion_descriptor();
  }
  static inline const ::std::string& NormRegion_Name(NormRegion value) {
    return LRNParameter_NormRegion_Name(value);
  }
  static inline bool NormRegion_Parse(const ::std::string& name,
      NormRegion* value) {
    return LRNParameter_NormRegion_Parse(name, value);
  }

  typedef LRNParameter_Engine Engine;
  static const Engine DEFAULT =
    LRNParameter_Engine_DEFAULT;
  static const Engine CAFFE =
    LRNParameter_Engine_CAFFE;
  static const Engine CUDNN =
    LRNParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return LRNParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    LRNParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    LRNParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    LRNParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return LRNParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return LRNParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return LRNParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 local_size = 1 [default = 5];
  bool has_local_size() const;
  void clear_local_size();
  static const int kLocalSizeFieldNumber = 1;
  ::google::protobuf::uint32 local_size() const;
  void set_local_size(::google::protobuf::uint32 value);

  // optional float alpha = 2 [default = 1];
  bool has_alpha() const;
  void clear_alpha();
  static const int kAlphaFieldNumber = 2;
  float alpha() const;
  void set_alpha(float value);

  // optional float beta = 3 [default = 0.75];
  bool has_beta() const;
  void clear_beta();
  static const int kBetaFieldNumber = 3;
  float beta() const;
  void set_beta(float value);

  // optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
  bool has_norm_region() const;
  void clear_norm_region();
  static const int kNormRegionFieldNumber = 4;
  ::caffe::LRNParameter_NormRegion norm_region() const;
  void set_norm_region(::caffe::LRNParameter_NormRegion value);

  // optional float k = 5 [default = 1];
  bool has_k() const;
  void clear_k();
  static const int kKFieldNumber = 5;
  float k() const;
  void set_k(float value);

  // optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 6;
  ::caffe::LRNParameter_Engine engine() const;
  void set_engine(::caffe::LRNParameter_Engine value);

  // @@protoc_insertion_point(class_scope:caffe.LRNParameter)
 private:
  inline void set_has_local_size();
  inline void clear_has_local_size();
  inline void set_has_alpha();
  inline void clear_has_alpha();
  inline void set_has_beta();
  inline void clear_has_beta();
  inline void set_has_norm_region();
  inline void clear_has_norm_region();
  inline void set_has_k();
  inline void clear_has_k();
  inline void set_has_engine();
  inline void clear_has_engine();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int norm_region_;
  int engine_;
  ::google::protobuf::uint32 local_size_;
  float alpha_;
  float beta_;
  float k_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<LRNParameter> LRNParameter_default_instance_;

// -------------------------------------------------------------------

class MemoryDataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.MemoryDataParameter) */ {
 public:
  MemoryDataParameter();
  virtual ~MemoryDataParameter();

  MemoryDataParameter(const MemoryDataParameter& from);

  inline MemoryDataParameter& operator=(const MemoryDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MemoryDataParameter& default_instance();

  static const MemoryDataParameter* internal_default_instance();

  void Swap(MemoryDataParameter* other);

  // implements Message ----------------------------------------------

  inline MemoryDataParameter* New() const { return New(NULL); }

  MemoryDataParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MemoryDataParameter& from);
  void MergeFrom(const MemoryDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MemoryDataParameter* other);
  void UnsafeMergeFrom(const MemoryDataParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 batch_size = 1;
  bool has_batch_size() const;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 1;
  ::google::protobuf::uint32 batch_size() const;
  void set_batch_size(::google::protobuf::uint32 value);

  // optional uint32 channels = 2;
  bool has_channels() const;
  void clear_channels();
  static const int kChannelsFieldNumber = 2;
  ::google::protobuf::uint32 channels() const;
  void set_channels(::google::protobuf::uint32 value);

  // optional uint32 height = 3;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // optional uint32 width = 4;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 4;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.MemoryDataParameter)
 private:
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_channels();
  inline void clear_has_channels();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_width();
  inline void clear_has_width();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 batch_size_;
  ::google::protobuf::uint32 channels_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 width_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MemoryDataParameter> MemoryDataParameter_default_instance_;

// -------------------------------------------------------------------

class MVNParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.MVNParameter) */ {
 public:
  MVNParameter();
  virtual ~MVNParameter();

  MVNParameter(const MVNParameter& from);

  inline MVNParameter& operator=(const MVNParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MVNParameter& default_instance();

  static const MVNParameter* internal_default_instance();

  void Swap(MVNParameter* other);

  // implements Message ----------------------------------------------

  inline MVNParameter* New() const { return New(NULL); }

  MVNParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MVNParameter& from);
  void MergeFrom(const MVNParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MVNParameter* other);
  void UnsafeMergeFrom(const MVNParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool normalize_variance = 1 [default = true];
  bool has_normalize_variance() const;
  void clear_normalize_variance();
  static const int kNormalizeVarianceFieldNumber = 1;
  bool normalize_variance() const;
  void set_normalize_variance(bool value);

  // optional bool across_channels = 2 [default = false];
  bool has_across_channels() const;
  void clear_across_channels();
  static const int kAcrossChannelsFieldNumber = 2;
  bool across_channels() const;
  void set_across_channels(bool value);

  // optional float eps = 3 [default = 1e-009];
  bool has_eps() const;
  void clear_eps();
  static const int kEpsFieldNumber = 3;
  float eps() const;
  void set_eps(float value);

  // @@protoc_insertion_point(class_scope:caffe.MVNParameter)
 private:
  inline void set_has_normalize_variance();
  inline void clear_has_normalize_variance();
  inline void set_has_across_channels();
  inline void clear_has_across_channels();
  inline void set_has_eps();
  inline void clear_has_eps();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool across_channels_;
  bool normalize_variance_;
  float eps_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MVNParameter> MVNParameter_default_instance_;

// -------------------------------------------------------------------

class ParameterParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ParameterParameter) */ {
 public:
  ParameterParameter();
  virtual ~ParameterParameter();

  ParameterParameter(const ParameterParameter& from);

  inline ParameterParameter& operator=(const ParameterParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParameterParameter& default_instance();

  static const ParameterParameter* internal_default_instance();

  void Swap(ParameterParameter* other);

  // implements Message ----------------------------------------------

  inline ParameterParameter* New() const { return New(NULL); }

  ParameterParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParameterParameter& from);
  void MergeFrom(const ParameterParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ParameterParameter* other);
  void UnsafeMergeFrom(const ParameterParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.BlobShape shape = 1;
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 1;
  const ::caffe::BlobShape& shape() const;
  ::caffe::BlobShape* mutable_shape();
  ::caffe::BlobShape* release_shape();
  void set_allocated_shape(::caffe::BlobShape* shape);

  // @@protoc_insertion_point(class_scope:caffe.ParameterParameter)
 private:
  inline void set_has_shape();
  inline void clear_has_shape();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::caffe::BlobShape* shape_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ParameterParameter> ParameterParameter_default_instance_;

// -------------------------------------------------------------------

class PoolingParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.PoolingParameter) */ {
 public:
  PoolingParameter();
  virtual ~PoolingParameter();

  PoolingParameter(const PoolingParameter& from);

  inline PoolingParameter& operator=(const PoolingParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PoolingParameter& default_instance();

  static const PoolingParameter* internal_default_instance();

  void Swap(PoolingParameter* other);

  // implements Message ----------------------------------------------

  inline PoolingParameter* New() const { return New(NULL); }

  PoolingParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PoolingParameter& from);
  void MergeFrom(const PoolingParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PoolingParameter* other);
  void UnsafeMergeFrom(const PoolingParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PoolingParameter_PoolMethod PoolMethod;
  static const PoolMethod MAX =
    PoolingParameter_PoolMethod_MAX;
  static const PoolMethod AVE =
    PoolingParameter_PoolMethod_AVE;
  static const PoolMethod STOCHASTIC =
    PoolingParameter_PoolMethod_STOCHASTIC;
  static inline bool PoolMethod_IsValid(int value) {
    return PoolingParameter_PoolMethod_IsValid(value);
  }
  static const PoolMethod PoolMethod_MIN =
    PoolingParameter_PoolMethod_PoolMethod_MIN;
  static const PoolMethod PoolMethod_MAX =
    PoolingParameter_PoolMethod_PoolMethod_MAX;
  static const int PoolMethod_ARRAYSIZE =
    PoolingParameter_PoolMethod_PoolMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PoolMethod_descriptor() {
    return PoolingParameter_PoolMethod_descriptor();
  }
  static inline const ::std::string& PoolMethod_Name(PoolMethod value) {
    return PoolingParameter_PoolMethod_Name(value);
  }
  static inline bool PoolMethod_Parse(const ::std::string& name,
      PoolMethod* value) {
    return PoolingParameter_PoolMethod_Parse(name, value);
  }

  typedef PoolingParameter_Engine Engine;
  static const Engine DEFAULT =
    PoolingParameter_Engine_DEFAULT;
  static const Engine CAFFE =
    PoolingParameter_Engine_CAFFE;
  static const Engine CUDNN =
    PoolingParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return PoolingParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    PoolingParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    PoolingParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    PoolingParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return PoolingParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return PoolingParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return PoolingParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
  bool has_pool() const;
  void clear_pool();
  static const int kPoolFieldNumber = 1;
  ::caffe::PoolingParameter_PoolMethod pool() const;
  void set_pool(::caffe::PoolingParameter_PoolMethod value);

  // optional uint32 pad = 4 [default = 0];
  bool has_pad() const;
  void clear_pad();
  static const int kPadFieldNumber = 4;
  ::google::protobuf::uint32 pad() const;
  void set_pad(::google::protobuf::uint32 value);

  // optional uint32 pad_h = 9 [default = 0];
  bool has_pad_h() const;
  void clear_pad_h();
  static const int kPadHFieldNumber = 9;
  ::google::protobuf::uint32 pad_h() const;
  void set_pad_h(::google::protobuf::uint32 value);

  // optional uint32 pad_w = 10 [default = 0];
  bool has_pad_w() const;
  void clear_pad_w();
  static const int kPadWFieldNumber = 10;
  ::google::protobuf::uint32 pad_w() const;
  void set_pad_w(::google::protobuf::uint32 value);

  // optional uint32 kernel_size = 2;
  bool has_kernel_size() const;
  void clear_kernel_size();
  static const int kKernelSizeFieldNumber = 2;
  ::google::protobuf::uint32 kernel_size() const;
  void set_kernel_size(::google::protobuf::uint32 value);

  // optional uint32 kernel_h = 5;
  bool has_kernel_h() const;
  void clear_kernel_h();
  static const int kKernelHFieldNumber = 5;
  ::google::protobuf::uint32 kernel_h() const;
  void set_kernel_h(::google::protobuf::uint32 value);

  // optional uint32 kernel_w = 6;
  bool has_kernel_w() const;
  void clear_kernel_w();
  static const int kKernelWFieldNumber = 6;
  ::google::protobuf::uint32 kernel_w() const;
  void set_kernel_w(::google::protobuf::uint32 value);

  // optional uint32 stride = 3 [default = 1];
  bool has_stride() const;
  void clear_stride();
  static const int kStrideFieldNumber = 3;
  ::google::protobuf::uint32 stride() const;
  void set_stride(::google::protobuf::uint32 value);

  // optional uint32 stride_h = 7;
  bool has_stride_h() const;
  void clear_stride_h();
  static const int kStrideHFieldNumber = 7;
  ::google::protobuf::uint32 stride_h() const;
  void set_stride_h(::google::protobuf::uint32 value);

  // optional uint32 stride_w = 8;
  bool has_stride_w() const;
  void clear_stride_w();
  static const int kStrideWFieldNumber = 8;
  ::google::protobuf::uint32 stride_w() const;
  void set_stride_w(::google::protobuf::uint32 value);

  // optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 11;
  ::caffe::PoolingParameter_Engine engine() const;
  void set_engine(::caffe::PoolingParameter_Engine value);

  // optional bool global_pooling = 12 [default = false];
  bool has_global_pooling() const;
  void clear_global_pooling();
  static const int kGlobalPoolingFieldNumber = 12;
  bool global_pooling() const;
  void set_global_pooling(bool value);

  // @@protoc_insertion_point(class_scope:caffe.PoolingParameter)
 private:
  inline void set_has_pool();
  inline void clear_has_pool();
  inline void set_has_pad();
  inline void clear_has_pad();
  inline void set_has_pad_h();
  inline void clear_has_pad_h();
  inline void set_has_pad_w();
  inline void clear_has_pad_w();
  inline void set_has_kernel_size();
  inline void clear_has_kernel_size();
  inline void set_has_kernel_h();
  inline void clear_has_kernel_h();
  inline void set_has_kernel_w();
  inline void clear_has_kernel_w();
  inline void set_has_stride();
  inline void clear_has_stride();
  inline void set_has_stride_h();
  inline void clear_has_stride_h();
  inline void set_has_stride_w();
  inline void clear_has_stride_w();
  inline void set_has_engine();
  inline void clear_has_engine();
  inline void set_has_global_pooling();
  inline void clear_has_global_pooling();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int pool_;
  ::google::protobuf::uint32 pad_;
  ::google::protobuf::uint32 pad_h_;
  ::google::protobuf::uint32 pad_w_;
  ::google::protobuf::uint32 kernel_size_;
  ::google::protobuf::uint32 kernel_h_;
  ::google::protobuf::uint32 kernel_w_;
  ::google::protobuf::uint32 stride_h_;
  ::google::protobuf::uint32 stride_w_;
  int engine_;
  bool global_pooling_;
  ::google::protobuf::uint32 stride_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<PoolingParameter> PoolingParameter_default_instance_;

// -------------------------------------------------------------------

class PowerParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.PowerParameter) */ {
 public:
  PowerParameter();
  virtual ~PowerParameter();

  PowerParameter(const PowerParameter& from);

  inline PowerParameter& operator=(const PowerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PowerParameter& default_instance();

  static const PowerParameter* internal_default_instance();

  void Swap(PowerParameter* other);

  // implements Message ----------------------------------------------

  inline PowerParameter* New() const { return New(NULL); }

  PowerParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PowerParameter& from);
  void MergeFrom(const PowerParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PowerParameter* other);
  void UnsafeMergeFrom(const PowerParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float power = 1 [default = 1];
  bool has_power() const;
  void clear_power();
  static const int kPowerFieldNumber = 1;
  float power() const;
  void set_power(float value);

  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 2;
  float scale() const;
  void set_scale(float value);

  // optional float shift = 3 [default = 0];
  bool has_shift() const;
  void clear_shift();
  static const int kShiftFieldNumber = 3;
  float shift() const;
  void set_shift(float value);

  // @@protoc_insertion_point(class_scope:caffe.PowerParameter)
 private:
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_shift();
  inline void clear_has_shift();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float shift_;
  float power_;
  float scale_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<PowerParameter> PowerParameter_default_instance_;

// -------------------------------------------------------------------

class PythonParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.PythonParameter) */ {
 public:
  PythonParameter();
  virtual ~PythonParameter();

  PythonParameter(const PythonParameter& from);

  inline PythonParameter& operator=(const PythonParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PythonParameter& default_instance();

  static const PythonParameter* internal_default_instance();

  void Swap(PythonParameter* other);

  // implements Message ----------------------------------------------

  inline PythonParameter* New() const { return New(NULL); }

  PythonParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PythonParameter& from);
  void MergeFrom(const PythonParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PythonParameter* other);
  void UnsafeMergeFrom(const PythonParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string module = 1;
  bool has_module() const;
  void clear_module();
  static const int kModuleFieldNumber = 1;
  const ::std::string& module() const;
  void set_module(const ::std::string& value);
  void set_module(const char* value);
  void set_module(const char* value, size_t size);
  ::std::string* mutable_module();
  ::std::string* release_module();
  void set_allocated_module(::std::string* module);

  // optional string layer = 2;
  bool has_layer() const;
  void clear_layer();
  static const int kLayerFieldNumber = 2;
  const ::std::string& layer() const;
  void set_layer(const ::std::string& value);
  void set_layer(const char* value);
  void set_layer(const char* value, size_t size);
  ::std::string* mutable_layer();
  ::std::string* release_layer();
  void set_allocated_layer(::std::string* layer);

  // optional string param_str = 3 [default = ""];
  bool has_param_str() const;
  void clear_param_str();
  static const int kParamStrFieldNumber = 3;
  const ::std::string& param_str() const;
  void set_param_str(const ::std::string& value);
  void set_param_str(const char* value);
  void set_param_str(const char* value, size_t size);
  ::std::string* mutable_param_str();
  ::std::string* release_param_str();
  void set_allocated_param_str(::std::string* param_str);

  // optional bool share_in_parallel = 4 [default = false];
  bool has_share_in_parallel() const;
  void clear_share_in_parallel();
  static const int kShareInParallelFieldNumber = 4;
  bool share_in_parallel() const;
  void set_share_in_parallel(bool value);

  // @@protoc_insertion_point(class_scope:caffe.PythonParameter)
 private:
  inline void set_has_module();
  inline void clear_has_module();
  inline void set_has_layer();
  inline void clear_has_layer();
  inline void set_has_param_str();
  inline void clear_has_param_str();
  inline void set_has_share_in_parallel();
  inline void clear_has_share_in_parallel();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr module_;
  ::google::protobuf::internal::ArenaStringPtr layer_;
  ::google::protobuf::internal::ArenaStringPtr param_str_;
  bool share_in_parallel_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<PythonParameter> PythonParameter_default_instance_;

// -------------------------------------------------------------------

class RecurrentParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.RecurrentParameter) */ {
 public:
  RecurrentParameter();
  virtual ~RecurrentParameter();

  RecurrentParameter(const RecurrentParameter& from);

  inline RecurrentParameter& operator=(const RecurrentParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecurrentParameter& default_instance();

  static const RecurrentParameter* internal_default_instance();

  void Swap(RecurrentParameter* other);

  // implements Message ----------------------------------------------

  inline RecurrentParameter* New() const { return New(NULL); }

  RecurrentParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecurrentParameter& from);
  void MergeFrom(const RecurrentParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RecurrentParameter* other);
  void UnsafeMergeFrom(const RecurrentParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num_output = 1 [default = 0];
  bool has_num_output() const;
  void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  ::google::protobuf::uint32 num_output() const;
  void set_num_output(::google::protobuf::uint32 value);

  // optional .caffe.FillerParameter weight_filler = 2;
  bool has_weight_filler() const;
  void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 2;
  const ::caffe::FillerParameter& weight_filler() const;
  ::caffe::FillerParameter* mutable_weight_filler();
  ::caffe::FillerParameter* release_weight_filler();
  void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);

  // optional .caffe.FillerParameter bias_filler = 3;
  bool has_bias_filler() const;
  void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 3;
  const ::caffe::FillerParameter& bias_filler() const;
  ::caffe::FillerParameter* mutable_bias_filler();
  ::caffe::FillerParameter* release_bias_filler();
  void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // optional bool debug_info = 4 [default = false];
  bool has_debug_info() const;
  void clear_debug_info();
  static const int kDebugInfoFieldNumber = 4;
  bool debug_info() const;
  void set_debug_info(bool value);

  // optional bool expose_hidden = 5 [default = false];
  bool has_expose_hidden() const;
  void clear_expose_hidden();
  static const int kExposeHiddenFieldNumber = 5;
  bool expose_hidden() const;
  void set_expose_hidden(bool value);

  // @@protoc_insertion_point(class_scope:caffe.RecurrentParameter)
 private:
  inline void set_has_num_output();
  inline void clear_has_num_output();
  inline void set_has_weight_filler();
  inline void clear_has_weight_filler();
  inline void set_has_bias_filler();
  inline void clear_has_bias_filler();
  inline void set_has_debug_info();
  inline void clear_has_debug_info();
  inline void set_has_expose_hidden();
  inline void clear_has_expose_hidden();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::caffe::FillerParameter* weight_filler_;
  ::caffe::FillerParameter* bias_filler_;
  ::google::protobuf::uint32 num_output_;
  bool debug_info_;
  bool expose_hidden_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<RecurrentParameter> RecurrentParameter_default_instance_;

// -------------------------------------------------------------------

class ReductionParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ReductionParameter) */ {
 public:
  ReductionParameter();
  virtual ~ReductionParameter();

  ReductionParameter(const ReductionParameter& from);

  inline ReductionParameter& operator=(const ReductionParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReductionParameter& default_instance();

  static const ReductionParameter* internal_default_instance();

  void Swap(ReductionParameter* other);

  // implements Message ----------------------------------------------

  inline ReductionParameter* New() const { return New(NULL); }

  ReductionParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReductionParameter& from);
  void MergeFrom(const ReductionParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReductionParameter* other);
  void UnsafeMergeFrom(const ReductionParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReductionParameter_ReductionOp ReductionOp;
  static const ReductionOp SUM =
    ReductionParameter_ReductionOp_SUM;
  static const ReductionOp ASUM =
    ReductionParameter_ReductionOp_ASUM;
  static const ReductionOp SUMSQ =
    ReductionParameter_ReductionOp_SUMSQ;
  static const ReductionOp MEAN =
    ReductionParameter_ReductionOp_MEAN;
  static inline bool ReductionOp_IsValid(int value) {
    return ReductionParameter_ReductionOp_IsValid(value);
  }
  static const ReductionOp ReductionOp_MIN =
    ReductionParameter_ReductionOp_ReductionOp_MIN;
  static const ReductionOp ReductionOp_MAX =
    ReductionParameter_ReductionOp_ReductionOp_MAX;
  static const int ReductionOp_ARRAYSIZE =
    ReductionParameter_ReductionOp_ReductionOp_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ReductionOp_descriptor() {
    return ReductionParameter_ReductionOp_descriptor();
  }
  static inline const ::std::string& ReductionOp_Name(ReductionOp value) {
    return ReductionParameter_ReductionOp_Name(value);
  }
  static inline bool ReductionOp_Parse(const ::std::string& name,
      ReductionOp* value) {
    return ReductionParameter_ReductionOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
  bool has_operation() const;
  void clear_operation();
  static const int kOperationFieldNumber = 1;
  ::caffe::ReductionParameter_ReductionOp operation() const;
  void set_operation(::caffe::ReductionParameter_ReductionOp value);

  // optional int32 axis = 2 [default = 0];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 2;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // optional float coeff = 3 [default = 1];
  bool has_coeff() const;
  void clear_coeff();
  static const int kCoeffFieldNumber = 3;
  float coeff() const;
  void set_coeff(float value);

  // @@protoc_insertion_point(class_scope:caffe.ReductionParameter)
 private:
  inline void set_has_operation();
  inline void clear_has_operation();
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_coeff();
  inline void clear_has_coeff();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 axis_;
  int operation_;
  float coeff_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ReductionParameter> ReductionParameter_default_instance_;

// -------------------------------------------------------------------

class ReLUParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ReLUParameter) */ {
 public:
  ReLUParameter();
  virtual ~ReLUParameter();

  ReLUParameter(const ReLUParameter& from);

  inline ReLUParameter& operator=(const ReLUParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReLUParameter& default_instance();

  static const ReLUParameter* internal_default_instance();

  void Swap(ReLUParameter* other);

  // implements Message ----------------------------------------------

  inline ReLUParameter* New() const { return New(NULL); }

  ReLUParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReLUParameter& from);
  void MergeFrom(const ReLUParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReLUParameter* other);
  void UnsafeMergeFrom(const ReLUParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReLUParameter_Engine Engine;
  static const Engine DEFAULT =
    ReLUParameter_Engine_DEFAULT;
  static const Engine CAFFE =
    ReLUParameter_Engine_CAFFE;
  static const Engine CUDNN =
    ReLUParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return ReLUParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    ReLUParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    ReLUParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    ReLUParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return ReLUParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return ReLUParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return ReLUParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional float negative_slope = 1 [default = 0];
  bool has_negative_slope() const;
  void clear_negative_slope();
  static const int kNegativeSlopeFieldNumber = 1;
  float negative_slope() const;
  void set_negative_slope(float value);

  // optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 2;
  ::caffe::ReLUParameter_Engine engine() const;
  void set_engine(::caffe::ReLUParameter_Engine value);

  // @@protoc_insertion_point(class_scope:caffe.ReLUParameter)
 private:
  inline void set_has_negative_slope();
  inline void clear_has_negative_slope();
  inline void set_has_engine();
  inline void clear_has_engine();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float negative_slope_;
  int engine_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ReLUParameter> ReLUParameter_default_instance_;

// -------------------------------------------------------------------

class ReshapeParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ReshapeParameter) */ {
 public:
  ReshapeParameter();
  virtual ~ReshapeParameter();

  ReshapeParameter(const ReshapeParameter& from);

  inline ReshapeParameter& operator=(const ReshapeParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReshapeParameter& default_instance();

  static const ReshapeParameter* internal_default_instance();

  void Swap(ReshapeParameter* other);

  // implements Message ----------------------------------------------

  inline ReshapeParameter* New() const { return New(NULL); }

  ReshapeParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReshapeParameter& from);
  void MergeFrom(const ReshapeParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReshapeParameter* other);
  void UnsafeMergeFrom(const ReshapeParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.BlobShape shape = 1;
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 1;
  const ::caffe::BlobShape& shape() const;
  ::caffe::BlobShape* mutable_shape();
  ::caffe::BlobShape* release_shape();
  void set_allocated_shape(::caffe::BlobShape* shape);

  // optional int32 axis = 2 [default = 0];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 2;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // optional int32 num_axes = 3 [default = -1];
  bool has_num_axes() const;
  void clear_num_axes();
  static const int kNumAxesFieldNumber = 3;
  ::google::protobuf::int32 num_axes() const;
  void set_num_axes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.ReshapeParameter)
 private:
  inline void set_has_shape();
  inline void clear_has_shape();
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_num_axes();
  inline void clear_has_num_axes();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::caffe::BlobShape* shape_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::int32 num_axes_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ReshapeParameter> ReshapeParameter_default_instance_;

// -------------------------------------------------------------------

class ScaleParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ScaleParameter) */ {
 public:
  ScaleParameter();
  virtual ~ScaleParameter();

  ScaleParameter(const ScaleParameter& from);

  inline ScaleParameter& operator=(const ScaleParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScaleParameter& default_instance();

  static const ScaleParameter* internal_default_instance();

  void Swap(ScaleParameter* other);

  // implements Message ----------------------------------------------

  inline ScaleParameter* New() const { return New(NULL); }

  ScaleParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScaleParameter& from);
  void MergeFrom(const ScaleParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ScaleParameter* other);
  void UnsafeMergeFrom(const ScaleParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 axis = 1 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 1;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // optional int32 num_axes = 2 [default = 1];
  bool has_num_axes() const;
  void clear_num_axes();
  static const int kNumAxesFieldNumber = 2;
  ::google::protobuf::int32 num_axes() const;
  void set_num_axes(::google::protobuf::int32 value);

  // optional .caffe.FillerParameter filler = 3;
  bool has_filler() const;
  void clear_filler();
  static const int kFillerFieldNumber = 3;
  const ::caffe::FillerParameter& filler() const;
  ::caffe::FillerParameter* mutable_filler();
  ::caffe::FillerParameter* release_filler();
  void set_allocated_filler(::caffe::FillerParameter* filler);

  // optional bool bias_term = 4 [default = false];
  bool has_bias_term() const;
  void clear_bias_term();
  static const int kBiasTermFieldNumber = 4;
  bool bias_term() const;
  void set_bias_term(bool value);

  // optional .caffe.FillerParameter bias_filler = 5;
  bool has_bias_filler() const;
  void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 5;
  const ::caffe::FillerParameter& bias_filler() const;
  ::caffe::FillerParameter* mutable_bias_filler();
  ::caffe::FillerParameter* release_bias_filler();
  void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // @@protoc_insertion_point(class_scope:caffe.ScaleParameter)
 private:
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_num_axes();
  inline void clear_has_num_axes();
  inline void set_has_filler();
  inline void clear_has_filler();
  inline void set_has_bias_term();
  inline void clear_has_bias_term();
  inline void set_has_bias_filler();
  inline void clear_has_bias_filler();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::caffe::FillerParameter* filler_;
  ::caffe::FillerParameter* bias_filler_;
  bool bias_term_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::int32 num_axes_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ScaleParameter> ScaleParameter_default_instance_;

// -------------------------------------------------------------------

class SigmoidParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SigmoidParameter) */ {
 public:
  SigmoidParameter();
  virtual ~SigmoidParameter();

  SigmoidParameter(const SigmoidParameter& from);

  inline SigmoidParameter& operator=(const SigmoidParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SigmoidParameter& default_instance();

  static const SigmoidParameter* internal_default_instance();

  void Swap(SigmoidParameter* other);

  // implements Message ----------------------------------------------

  inline SigmoidParameter* New() const { return New(NULL); }

  SigmoidParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SigmoidParameter& from);
  void MergeFrom(const SigmoidParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SigmoidParameter* other);
  void UnsafeMergeFrom(const SigmoidParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SigmoidParameter_Engine Engine;
  static const Engine DEFAULT =
    SigmoidParameter_Engine_DEFAULT;
  static const Engine CAFFE =
    SigmoidParameter_Engine_CAFFE;
  static const Engine CUDNN =
    SigmoidParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return SigmoidParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    SigmoidParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    SigmoidParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    SigmoidParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return SigmoidParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return SigmoidParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return SigmoidParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 1;
  ::caffe::SigmoidParameter_Engine engine() const;
  void set_engine(::caffe::SigmoidParameter_Engine value);

  // @@protoc_insertion_point(class_scope:caffe.SigmoidParameter)
 private:
  inline void set_has_engine();
  inline void clear_has_engine();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int engine_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SigmoidParameter> SigmoidParameter_default_instance_;

// -------------------------------------------------------------------

class SliceParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SliceParameter) */ {
 public:
  SliceParameter();
  virtual ~SliceParameter();

  SliceParameter(const SliceParameter& from);

  inline SliceParameter& operator=(const SliceParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SliceParameter& default_instance();

  static const SliceParameter* internal_default_instance();

  void Swap(SliceParameter* other);

  // implements Message ----------------------------------------------

  inline SliceParameter* New() const { return New(NULL); }

  SliceParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SliceParameter& from);
  void MergeFrom(const SliceParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SliceParameter* other);
  void UnsafeMergeFrom(const SliceParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 axis = 3 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 3;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // repeated uint32 slice_point = 2;
  int slice_point_size() const;
  void clear_slice_point();
  static const int kSlicePointFieldNumber = 2;
  ::google::protobuf::uint32 slice_point(int index) const;
  void set_slice_point(int index, ::google::protobuf::uint32 value);
  void add_slice_point(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      slice_point() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_slice_point();

  // optional uint32 slice_dim = 1 [default = 1];
  bool has_slice_dim() const;
  void clear_slice_dim();
  static const int kSliceDimFieldNumber = 1;
  ::google::protobuf::uint32 slice_dim() const;
  void set_slice_dim(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.SliceParameter)
 private:
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_slice_dim();
  inline void clear_has_slice_dim();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > slice_point_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::uint32 slice_dim_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SliceParameter> SliceParameter_default_instance_;

// -------------------------------------------------------------------

class SoftmaxParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SoftmaxParameter) */ {
 public:
  SoftmaxParameter();
  virtual ~SoftmaxParameter();

  SoftmaxParameter(const SoftmaxParameter& from);

  inline SoftmaxParameter& operator=(const SoftmaxParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SoftmaxParameter& default_instance();

  static const SoftmaxParameter* internal_default_instance();

  void Swap(SoftmaxParameter* other);

  // implements Message ----------------------------------------------

  inline SoftmaxParameter* New() const { return New(NULL); }

  SoftmaxParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SoftmaxParameter& from);
  void MergeFrom(const SoftmaxParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SoftmaxParameter* other);
  void UnsafeMergeFrom(const SoftmaxParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SoftmaxParameter_Engine Engine;
  static const Engine DEFAULT =
    SoftmaxParameter_Engine_DEFAULT;
  static const Engine CAFFE =
    SoftmaxParameter_Engine_CAFFE;
  static const Engine CUDNN =
    SoftmaxParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return SoftmaxParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    SoftmaxParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    SoftmaxParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    SoftmaxParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return SoftmaxParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return SoftmaxParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return SoftmaxParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 1;
  ::caffe::SoftmaxParameter_Engine engine() const;
  void set_engine(::caffe::SoftmaxParameter_Engine value);

  // optional int32 axis = 2 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 2;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.SoftmaxParameter)
 private:
  inline void set_has_engine();
  inline void clear_has_engine();
  inline void set_has_axis();
  inline void clear_has_axis();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int engine_;
  ::google::protobuf::int32 axis_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SoftmaxParameter> SoftmaxParameter_default_instance_;

// -------------------------------------------------------------------

class TanHParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.TanHParameter) */ {
 public:
  TanHParameter();
  virtual ~TanHParameter();

  TanHParameter(const TanHParameter& from);

  inline TanHParameter& operator=(const TanHParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TanHParameter& default_instance();

  static const TanHParameter* internal_default_instance();

  void Swap(TanHParameter* other);

  // implements Message ----------------------------------------------

  inline TanHParameter* New() const { return New(NULL); }

  TanHParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TanHParameter& from);
  void MergeFrom(const TanHParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TanHParameter* other);
  void UnsafeMergeFrom(const TanHParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TanHParameter_Engine Engine;
  static const Engine DEFAULT =
    TanHParameter_Engine_DEFAULT;
  static const Engine CAFFE =
    TanHParameter_Engine_CAFFE;
  static const Engine CUDNN =
    TanHParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return TanHParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    TanHParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    TanHParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    TanHParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return TanHParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return TanHParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return TanHParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 1;
  ::caffe::TanHParameter_Engine engine() const;
  void set_engine(::caffe::TanHParameter_Engine value);

  // @@protoc_insertion_point(class_scope:caffe.TanHParameter)
 private:
  inline void set_has_engine();
  inline void clear_has_engine();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int engine_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TanHParameter> TanHParameter_default_instance_;

// -------------------------------------------------------------------

class TileParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.TileParameter) */ {
 public:
  TileParameter();
  virtual ~TileParameter();

  TileParameter(const TileParameter& from);

  inline TileParameter& operator=(const TileParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TileParameter& default_instance();

  static const TileParameter* internal_default_instance();

  void Swap(TileParameter* other);

  // implements Message ----------------------------------------------

  inline TileParameter* New() const { return New(NULL); }

  TileParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TileParameter& from);
  void MergeFrom(const TileParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TileParameter* other);
  void UnsafeMergeFrom(const TileParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 axis = 1 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 1;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // optional int32 tiles = 2;
  bool has_tiles() const;
  void clear_tiles();
  static const int kTilesFieldNumber = 2;
  ::google::protobuf::int32 tiles() const;
  void set_tiles(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.TileParameter)
 private:
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_tiles();
  inline void clear_has_tiles();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 tiles_;
  ::google::protobuf::int32 axis_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TileParameter> TileParameter_default_instance_;

// -------------------------------------------------------------------

class ThresholdParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ThresholdParameter) */ {
 public:
  ThresholdParameter();
  virtual ~ThresholdParameter();

  ThresholdParameter(const ThresholdParameter& from);

  inline ThresholdParameter& operator=(const ThresholdParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ThresholdParameter& default_instance();

  static const ThresholdParameter* internal_default_instance();

  void Swap(ThresholdParameter* other);

  // implements Message ----------------------------------------------

  inline ThresholdParameter* New() const { return New(NULL); }

  ThresholdParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ThresholdParameter& from);
  void MergeFrom(const ThresholdParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ThresholdParameter* other);
  void UnsafeMergeFrom(const ThresholdParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float threshold = 1 [default = 0];
  bool has_threshold() const;
  void clear_threshold();
  static const int kThresholdFieldNumber = 1;
  float threshold() const;
  void set_threshold(float value);

  // @@protoc_insertion_point(class_scope:caffe.ThresholdParameter)
 private:
  inline void set_has_threshold();
  inline void clear_has_threshold();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float threshold_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ThresholdParameter> ThresholdParameter_default_instance_;

// -------------------------------------------------------------------

class WindowDataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.WindowDataParameter) */ {
 public:
  WindowDataParameter();
  virtual ~WindowDataParameter();

  WindowDataParameter(const WindowDataParameter& from);

  inline WindowDataParameter& operator=(const WindowDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WindowDataParameter& default_instance();

  static const WindowDataParameter* internal_default_instance();

  void Swap(WindowDataParameter* other);

  // implements Message ----------------------------------------------

  inline WindowDataParameter* New() const { return New(NULL); }

  WindowDataParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WindowDataParameter& from);
  void MergeFrom(const WindowDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WindowDataParameter* other);
  void UnsafeMergeFrom(const WindowDataParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 2;
  float scale() const;
  void set_scale(float value);

  // optional string mean_file = 3;
  bool has_mean_file() const;
  void clear_mean_file();
  static const int kMeanFileFieldNumber = 3;
  const ::std::string& mean_file() const;
  void set_mean_file(const ::std::string& value);
  void set_mean_file(const char* value);
  void set_mean_file(const char* value, size_t size);
  ::std::string* mutable_mean_file();
  ::std::string* release_mean_file();
  void set_allocated_mean_file(::std::string* mean_file);

  // optional uint32 batch_size = 4;
  bool has_batch_size() const;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 4;
  ::google::protobuf::uint32 batch_size() const;
  void set_batch_size(::google::protobuf::uint32 value);

  // optional uint32 crop_size = 5 [default = 0];
  bool has_crop_size() const;
  void clear_crop_size();
  static const int kCropSizeFieldNumber = 5;
  ::google::protobuf::uint32 crop_size() const;
  void set_crop_size(::google::protobuf::uint32 value);

  // optional bool mirror = 6 [default = false];
  bool has_mirror() const;
  void clear_mirror();
  static const int kMirrorFieldNumber = 6;
  bool mirror() const;
  void set_mirror(bool value);

  // optional float fg_threshold = 7 [default = 0.5];
  bool has_fg_threshold() const;
  void clear_fg_threshold();
  static const int kFgThresholdFieldNumber = 7;
  float fg_threshold() const;
  void set_fg_threshold(float value);

  // optional float bg_threshold = 8 [default = 0.5];
  bool has_bg_threshold() const;
  void clear_bg_threshold();
  static const int kBgThresholdFieldNumber = 8;
  float bg_threshold() const;
  void set_bg_threshold(float value);

  // optional float fg_fraction = 9 [default = 0.25];
  bool has_fg_fraction() const;
  void clear_fg_fraction();
  static const int kFgFractionFieldNumber = 9;
  float fg_fraction() const;
  void set_fg_fraction(float value);

  // optional uint32 context_pad = 10 [default = 0];
  bool has_context_pad() const;
  void clear_context_pad();
  static const int kContextPadFieldNumber = 10;
  ::google::protobuf::uint32 context_pad() const;
  void set_context_pad(::google::protobuf::uint32 value);

  // optional string crop_mode = 11 [default = "warp"];
  bool has_crop_mode() const;
  void clear_crop_mode();
  static const int kCropModeFieldNumber = 11;
  const ::std::string& crop_mode() const;
  void set_crop_mode(const ::std::string& value);
  void set_crop_mode(const char* value);
  void set_crop_mode(const char* value, size_t size);
  ::std::string* mutable_crop_mode();
  ::std::string* release_crop_mode();
  void set_allocated_crop_mode(::std::string* crop_mode);

  // optional bool cache_images = 12 [default = false];
  bool has_cache_images() const;
  void clear_cache_images();
  static const int kCacheImagesFieldNumber = 12;
  bool cache_images() const;
  void set_cache_images(bool value);

  // optional string root_folder = 13 [default = ""];
  bool has_root_folder() const;
  void clear_root_folder();
  static const int kRootFolderFieldNumber = 13;
  const ::std::string& root_folder() const;
  void set_root_folder(const ::std::string& value);
  void set_root_folder(const char* value);
  void set_root_folder(const char* value, size_t size);
  ::std::string* mutable_root_folder();
  ::std::string* release_root_folder();
  void set_allocated_root_folder(::std::string* root_folder);

  // @@protoc_insertion_point(class_scope:caffe.WindowDataParameter)
 private:
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_mean_file();
  inline void clear_has_mean_file();
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_crop_size();
  inline void clear_has_crop_size();
  inline void set_has_mirror();
  inline void clear_has_mirror();
  inline void set_has_fg_threshold();
  inline void clear_has_fg_threshold();
  inline void set_has_bg_threshold();
  inline void clear_has_bg_threshold();
  inline void set_has_fg_fraction();
  inline void clear_has_fg_fraction();
  inline void set_has_context_pad();
  inline void clear_has_context_pad();
  inline void set_has_crop_mode();
  inline void clear_has_crop_mode();
  inline void set_has_cache_images();
  inline void clear_has_cache_images();
  inline void set_has_root_folder();
  inline void clear_has_root_folder();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::internal::ArenaStringPtr mean_file_;
  static ::std::string* _default_crop_mode_;
  ::google::protobuf::internal::ArenaStringPtr crop_mode_;
  ::google::protobuf::internal::ArenaStringPtr root_folder_;
  ::google::protobuf::uint32 batch_size_;
  ::google::protobuf::uint32 crop_size_;
  bool mirror_;
  bool cache_images_;
  ::google::protobuf::uint32 context_pad_;
  float scale_;
  float fg_threshold_;
  float bg_threshold_;
  float fg_fraction_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<WindowDataParameter> WindowDataParameter_default_instance_;

// -------------------------------------------------------------------

class SPPParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SPPParameter) */ {
 public:
  SPPParameter();
  virtual ~SPPParameter();

  SPPParameter(const SPPParameter& from);

  inline SPPParameter& operator=(const SPPParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SPPParameter& default_instance();

  static const SPPParameter* internal_default_instance();

  void Swap(SPPParameter* other);

  // implements Message ----------------------------------------------

  inline SPPParameter* New() const { return New(NULL); }

  SPPParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SPPParameter& from);
  void MergeFrom(const SPPParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SPPParameter* other);
  void UnsafeMergeFrom(const SPPParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SPPParameter_PoolMethod PoolMethod;
  static const PoolMethod MAX =
    SPPParameter_PoolMethod_MAX;
  static const PoolMethod AVE =
    SPPParameter_PoolMethod_AVE;
  static const PoolMethod STOCHASTIC =
    SPPParameter_PoolMethod_STOCHASTIC;
  static inline bool PoolMethod_IsValid(int value) {
    return SPPParameter_PoolMethod_IsValid(value);
  }
  static const PoolMethod PoolMethod_MIN =
    SPPParameter_PoolMethod_PoolMethod_MIN;
  static const PoolMethod PoolMethod_MAX =
    SPPParameter_PoolMethod_PoolMethod_MAX;
  static const int PoolMethod_ARRAYSIZE =
    SPPParameter_PoolMethod_PoolMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PoolMethod_descriptor() {
    return SPPParameter_PoolMethod_descriptor();
  }
  static inline const ::std::string& PoolMethod_Name(PoolMethod value) {
    return SPPParameter_PoolMethod_Name(value);
  }
  static inline bool PoolMethod_Parse(const ::std::string& name,
      PoolMethod* value) {
    return SPPParameter_PoolMethod_Parse(name, value);
  }

  typedef SPPParameter_Engine Engine;
  static const Engine DEFAULT =
    SPPParameter_Engine_DEFAULT;
  static const Engine CAFFE =
    SPPParameter_Engine_CAFFE;
  static const Engine CUDNN =
    SPPParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return SPPParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    SPPParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    SPPParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    SPPParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return SPPParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return SPPParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return SPPParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 pyramid_height = 1;
  bool has_pyramid_height() const;
  void clear_pyramid_height();
  static const int kPyramidHeightFieldNumber = 1;
  ::google::protobuf::uint32 pyramid_height() const;
  void set_pyramid_height(::google::protobuf::uint32 value);

  // optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
  bool has_pool() const;
  void clear_pool();
  static const int kPoolFieldNumber = 2;
  ::caffe::SPPParameter_PoolMethod pool() const;
  void set_pool(::caffe::SPPParameter_PoolMethod value);

  // optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 6;
  ::caffe::SPPParameter_Engine engine() const;
  void set_engine(::caffe::SPPParameter_Engine value);

  // @@protoc_insertion_point(class_scope:caffe.SPPParameter)
 private:
  inline void set_has_pyramid_height();
  inline void clear_has_pyramid_height();
  inline void set_has_pool();
  inline void clear_has_pool();
  inline void set_has_engine();
  inline void clear_has_engine();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 pyramid_height_;
  int pool_;
  int engine_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SPPParameter> SPPParameter_default_instance_;

// -------------------------------------------------------------------

class V1LayerParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.V1LayerParameter) */ {
 public:
  V1LayerParameter();
  virtual ~V1LayerParameter();

  V1LayerParameter(const V1LayerParameter& from);

  inline V1LayerParameter& operator=(const V1LayerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const V1LayerParameter& default_instance();

  static const V1LayerParameter* internal_default_instance();

  void Swap(V1LayerParameter* other);

  // implements Message ----------------------------------------------

  inline V1LayerParameter* New() const { return New(NULL); }

  V1LayerParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const V1LayerParameter& from);
  void MergeFrom(const V1LayerParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(V1LayerParameter* other);
  void UnsafeMergeFrom(const V1LayerParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef V1LayerParameter_LayerType LayerType;
  static const LayerType NONE =
    V1LayerParameter_LayerType_NONE;
  static const LayerType ABSVAL =
    V1LayerParameter_LayerType_ABSVAL;
  static const LayerType ACCURACY =
    V1LayerParameter_LayerType_ACCURACY;
  static const LayerType ARGMAX =
    V1LayerParameter_LayerType_ARGMAX;
  static const LayerType BNLL =
    V1LayerParameter_LayerType_BNLL;
  static const LayerType CONCAT =
    V1LayerParameter_LayerType_CONCAT;
  static const LayerType CONTRASTIVE_LOSS =
    V1LayerParameter_LayerType_CONTRASTIVE_LOSS;
  static const LayerType CONVOLUTION =
    V1LayerParameter_LayerType_CONVOLUTION;
  static const LayerType DATA =
    V1LayerParameter_LayerType_DATA;
  static const LayerType DECONVOLUTION =
    V1LayerParameter_LayerType_DECONVOLUTION;
  static const LayerType DROPOUT =
    V1LayerParameter_LayerType_DROPOUT;
  static const LayerType DUMMY_DATA =
    V1LayerParameter_LayerType_DUMMY_DATA;
  static const LayerType EUCLIDEAN_LOSS =
    V1LayerParameter_LayerType_EUCLIDEAN_LOSS;
  static const LayerType ELTWISE =
    V1LayerParameter_LayerType_ELTWISE;
  static const LayerType EXP =
    V1LayerParameter_LayerType_EXP;
  static const LayerType FLATTEN =
    V1LayerParameter_LayerType_FLATTEN;
  static const LayerType HDF5_DATA =
    V1LayerParameter_LayerType_HDF5_DATA;
  static const LayerType HDF5_OUTPUT =
    V1LayerParameter_LayerType_HDF5_OUTPUT;
  static const LayerType HINGE_LOSS =
    V1LayerParameter_LayerType_HINGE_LOSS;
  static const LayerType IM2COL =
    V1LayerParameter_LayerType_IM2COL;
  static const LayerType IMAGE_DATA =
    V1LayerParameter_LayerType_IMAGE_DATA;
  static const LayerType INFOGAIN_LOSS =
    V1LayerParameter_LayerType_INFOGAIN_LOSS;
  static const LayerType INNER_PRODUCT =
    V1LayerParameter_LayerType_INNER_PRODUCT;
  static const LayerType LRN =
    V1LayerParameter_LayerType_LRN;
  static const LayerType MEMORY_DATA =
    V1LayerParameter_LayerType_MEMORY_DATA;
  static const LayerType MULTINOMIAL_LOGISTIC_LOSS =
    V1LayerParameter_LayerType_MULTINOMIAL_LOGISTIC_LOSS;
  static const LayerType MVN =
    V1LayerParameter_LayerType_MVN;
  static const LayerType POOLING =
    V1LayerParameter_LayerType_POOLING;
  static const LayerType POWER =
    V1LayerParameter_LayerType_POWER;
  static const LayerType RELU =
    V1LayerParameter_LayerType_RELU;
  static const LayerType SIGMOID =
    V1LayerParameter_LayerType_SIGMOID;
  static const LayerType SIGMOID_CROSS_ENTROPY_LOSS =
    V1LayerParameter_LayerType_SIGMOID_CROSS_ENTROPY_LOSS;
  static const LayerType SILENCE =
    V1LayerParameter_LayerType_SILENCE;
  static const LayerType SOFTMAX =
    V1LayerParameter_LayerType_SOFTMAX;
  static const LayerType SOFTMAX_LOSS =
    V1LayerParameter_LayerType_SOFTMAX_LOSS;
  static const LayerType SPLIT =
    V1LayerParameter_LayerType_SPLIT;
  static const LayerType SLICE =
    V1LayerParameter_LayerType_SLICE;
  static const LayerType TANH =
    V1LayerParameter_LayerType_TANH;
  static const LayerType WINDOW_DATA =
    V1LayerParameter_LayerType_WINDOW_DATA;
  static const LayerType THRESHOLD =
    V1LayerParameter_LayerType_THRESHOLD;
  static inline bool LayerType_IsValid(int value) {
    return V1LayerParameter_LayerType_IsValid(value);
  }
  static const LayerType LayerType_MIN =
    V1LayerParameter_LayerType_LayerType_MIN;
  static const LayerType LayerType_MAX =
    V1LayerParameter_LayerType_LayerType_MAX;
  static const int LayerType_ARRAYSIZE =
    V1LayerParameter_LayerType_LayerType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LayerType_descriptor() {
    return V1LayerParameter_LayerType_descriptor();
  }
  static inline const ::std::string& LayerType_Name(LayerType value) {
    return V1LayerParameter_LayerType_Name(value);
  }
  static inline bool LayerType_Parse(const ::std::string& name,
      LayerType* value) {
    return V1LayerParameter_LayerType_Parse(name, value);
  }

  typedef V1LayerParameter_DimCheckMode DimCheckMode;
  static const DimCheckMode STRICT =
    V1LayerParameter_DimCheckMode_STRICT;
  static const DimCheckMode PERMISSIVE =
    V1LayerParameter_DimCheckMode_PERMISSIVE;
  static inline bool DimCheckMode_IsValid(int value) {
    return V1LayerParameter_DimCheckMode_IsValid(value);
  }
  static const DimCheckMode DimCheckMode_MIN =
    V1LayerParameter_DimCheckMode_DimCheckMode_MIN;
  static const DimCheckMode DimCheckMode_MAX =
    V1LayerParameter_DimCheckMode_DimCheckMode_MAX;
  static const int DimCheckMode_ARRAYSIZE =
    V1LayerParameter_DimCheckMode_DimCheckMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DimCheckMode_descriptor() {
    return V1LayerParameter_DimCheckMode_descriptor();
  }
  static inline const ::std::string& DimCheckMode_Name(DimCheckMode value) {
    return V1LayerParameter_DimCheckMode_Name(value);
  }
  static inline bool DimCheckMode_Parse(const ::std::string& name,
      DimCheckMode* value) {
    return V1LayerParameter_DimCheckMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string bottom = 2;
  int bottom_size() const;
  void clear_bottom();
  static const int kBottomFieldNumber = 2;
  const ::std::string& bottom(int index) const;
  ::std::string* mutable_bottom(int index);
  void set_bottom(int index, const ::std::string& value);
  void set_bottom(int index, const char* value);
  void set_bottom(int index, const char* value, size_t size);
  ::std::string* add_bottom();
  void add_bottom(const ::std::string& value);
  void add_bottom(const char* value);
  void add_bottom(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& bottom() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bottom();

  // repeated string top = 3;
  int top_size() const;
  void clear_top();
  static const int kTopFieldNumber = 3;
  const ::std::string& top(int index) const;
  ::std::string* mutable_top(int index);
  void set_top(int index, const ::std::string& value);
  void set_top(int index, const char* value);
  void set_top(int index, const char* value, size_t size);
  ::std::string* add_top();
  void add_top(const ::std::string& value);
  void add_top(const char* value);
  void add_top(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& top() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_top();

  // optional string name = 4;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated .caffe.NetStateRule include = 32;
  int include_size() const;
  void clear_include();
  static const int kIncludeFieldNumber = 32;
  const ::caffe::NetStateRule& include(int index) const;
  ::caffe::NetStateRule* mutable_include(int index);
  ::caffe::NetStateRule* add_include();
  ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
      mutable_include();
  const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
      include() const;

  // repeated .caffe.NetStateRule exclude = 33;
  int exclude_size() const;
  void clear_exclude();
  static const int kExcludeFieldNumber = 33;
  const ::caffe::NetStateRule& exclude(int index) const;
  ::caffe::NetStateRule* mutable_exclude(int index);
  ::caffe::NetStateRule* add_exclude();
  ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
      mutable_exclude();
  const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
      exclude() const;

  // optional .caffe.V1LayerParameter.LayerType type = 5;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::caffe::V1LayerParameter_LayerType type() const;
  void set_type(::caffe::V1LayerParameter_LayerType value);

  // repeated .caffe.BlobProto blobs = 6;
  int blobs_size() const;
  void clear_blobs();
  static const int kBlobsFieldNumber = 6;
  const ::caffe::BlobProto& blobs(int index) const;
  ::caffe::BlobProto* mutable_blobs(int index);
  ::caffe::BlobProto* add_blobs();
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
      mutable_blobs();
  const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
      blobs() const;

  // repeated string param = 1001;
  int param_size() const;
  void clear_param();
  static const int kParamFieldNumber = 1001;
  const ::std::string& param(int index) const;
  ::std::string* mutable_param(int index);
  void set_param(int index, const ::std::string& value);
  void set_param(int index, const char* value);
  void set_param(int index, const char* value, size_t size);
  ::std::string* add_param();
  void add_param(const ::std::string& value);
  void add_param(const char* value);
  void add_param(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& param() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_param();

  // repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
  int blob_share_mode_size() const;
  void clear_blob_share_mode();
  static const int kBlobShareModeFieldNumber = 1002;
  ::caffe::V1LayerParameter_DimCheckMode blob_share_mode(int index) const;
  void set_blob_share_mode(int index, ::caffe::V1LayerParameter_DimCheckMode value);
  void add_blob_share_mode(::caffe::V1LayerParameter_DimCheckMode value);
  const ::google::protobuf::RepeatedField<int>& blob_share_mode() const;
  ::google::protobuf::RepeatedField<int>* mutable_blob_share_mode();

  // repeated float blobs_lr = 7;
  int blobs_lr_size() const;
  void clear_blobs_lr();
  static const int kBlobsLrFieldNumber = 7;
  float blobs_lr(int index) const;
  void set_blobs_lr(int index, float value);
  void add_blobs_lr(float value);
  const ::google::protobuf::RepeatedField< float >&
      blobs_lr() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_blobs_lr();

  // repeated float weight_decay = 8;
  int weight_decay_size() const;
  void clear_weight_decay();
  static const int kWeightDecayFieldNumber = 8;
  float weight_decay(int index) const;
  void set_weight_decay(int index, float value);
  void add_weight_decay(float value);
  const ::google::protobuf::RepeatedField< float >&
      weight_decay() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_weight_decay();

  // repeated float loss_weight = 35;
  int loss_weight_size() const;
  void clear_loss_weight();
  static const int kLossWeightFieldNumber = 35;
  float loss_weight(int index) const;
  void set_loss_weight(int index, float value);
  void add_loss_weight(float value);
  const ::google::protobuf::RepeatedField< float >&
      loss_weight() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_loss_weight();

  // optional .caffe.AccuracyParameter accuracy_param = 27;
  bool has_accuracy_param() const;
  void clear_accuracy_param();
  static const int kAccuracyParamFieldNumber = 27;
  const ::caffe::AccuracyParameter& accuracy_param() const;
  ::caffe::AccuracyParameter* mutable_accuracy_param();
  ::caffe::AccuracyParameter* release_accuracy_param();
  void set_allocated_accuracy_param(::caffe::AccuracyParameter* accuracy_param);

  // optional .caffe.ArgMaxParameter argmax_param = 23;
  bool has_argmax_param() const;
  void clear_argmax_param();
  static const int kArgmaxParamFieldNumber = 23;
  const ::caffe::ArgMaxParameter& argmax_param() const;
  ::caffe::ArgMaxParameter* mutable_argmax_param();
  ::caffe::ArgMaxParameter* release_argmax_param();
  void set_allocated_argmax_param(::caffe::ArgMaxParameter* argmax_param);

  // optional .caffe.ConcatParameter concat_param = 9;
  bool has_concat_param() const;
  void clear_concat_param();
  static const int kConcatParamFieldNumber = 9;
  const ::caffe::ConcatParameter& concat_param() const;
  ::caffe::ConcatParameter* mutable_concat_param();
  ::caffe::ConcatParameter* release_concat_param();
  void set_allocated_concat_param(::caffe::ConcatParameter* concat_param);

  // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;
  bool has_contrastive_loss_param() const;
  void clear_contrastive_loss_param();
  static const int kContrastiveLossParamFieldNumber = 40;
  const ::caffe::ContrastiveLossParameter& contrastive_loss_param() const;
  ::caffe::ContrastiveLossParameter* mutable_contrastive_loss_param();
  ::caffe::ContrastiveLossParameter* release_contrastive_loss_param();
  void set_allocated_contrastive_loss_param(::caffe::ContrastiveLossParameter* contrastive_loss_param);

  // optional .caffe.ConvolutionParameter convolution_param = 10;
  bool has_convolution_param() const;
  void clear_convolution_param();
  static const int kConvolutionParamFieldNumber = 10;
  const ::caffe::ConvolutionParameter& convolution_param() const;
  ::caffe::ConvolutionParameter* mutable_convolution_param();
  ::caffe::ConvolutionParameter* release_convolution_param();
  void set_allocated_convolution_param(::caffe::ConvolutionParameter* convolution_param);

  // optional .caffe.DataParameter data_param = 11;
  bool has_data_param() const;
  void clear_data_param();
  static const int kDataParamFieldNumber = 11;
  const ::caffe::DataParameter& data_param() const;
  ::caffe::DataParameter* mutable_data_param();
  ::caffe::DataParameter* release_data_param();
  void set_allocated_data_param(::caffe::DataParameter* data_param);

  // optional .caffe.DropoutParameter dropout_param = 12;
  bool has_dropout_param() const;
  void clear_dropout_param();
  static const int kDropoutParamFieldNumber = 12;
  const ::caffe::DropoutParameter& dropout_param() const;
  ::caffe::DropoutParameter* mutable_dropout_param();
  ::caffe::DropoutParameter* release_dropout_param();
  void set_allocated_dropout_param(::caffe::DropoutParameter* dropout_param);

  // optional .caffe.DummyDataParameter dummy_data_param = 26;
  bool has_dummy_data_param() const;
  void clear_dummy_data_param();
  static const int kDummyDataParamFieldNumber = 26;
  const ::caffe::DummyDataParameter& dummy_data_param() const;
  ::caffe::DummyDataParameter* mutable_dummy_data_param();
  ::caffe::DummyDataParameter* release_dummy_data_param();
  void set_allocated_dummy_data_param(::caffe::DummyDataParameter* dummy_data_param);

  // optional .caffe.EltwiseParameter eltwise_param = 24;
  bool has_eltwise_param() const;
  void clear_eltwise_param();
  static const int kEltwiseParamFieldNumber = 24;
  const ::caffe::EltwiseParameter& eltwise_param() const;
  ::caffe::EltwiseParameter* mutable_eltwise_param();
  ::caffe::EltwiseParameter* release_eltwise_param();
  void set_allocated_eltwise_param(::caffe::EltwiseParameter* eltwise_param);

  // optional .caffe.ExpParameter exp_param = 41;
  bool has_exp_param() const;
  void clear_exp_param();
  static const int kExpParamFieldNumber = 41;
  const ::caffe::ExpParameter& exp_param() const;
  ::caffe::ExpParameter* mutable_exp_param();
  ::caffe::ExpParameter* release_exp_param();
  void set_allocated_exp_param(::caffe::ExpParameter* exp_param);

  // optional .caffe.HDF5DataParameter hdf5_data_param = 13;
  bool has_hdf5_data_param() const;
  void clear_hdf5_data_param();
  static const int kHdf5DataParamFieldNumber = 13;
  const ::caffe::HDF5DataParameter& hdf5_data_param() const;
  ::caffe::HDF5DataParameter* mutable_hdf5_data_param();
  ::caffe::HDF5DataParameter* release_hdf5_data_param();
  void set_allocated_hdf5_data_param(::caffe::HDF5DataParameter* hdf5_data_param);

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 14;
  bool has_hdf5_output_param() const;
  void clear_hdf5_output_param();
  static const int kHdf5OutputParamFieldNumber = 14;
  const ::caffe::HDF5OutputParameter& hdf5_output_param() const;
  ::caffe::HDF5OutputParameter* mutable_hdf5_output_param();
  ::caffe::HDF5OutputParameter* release_hdf5_output_param();
  void set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param);

  // optional .caffe.HingeLossParameter hinge_loss_param = 29;
  bool has_hinge_loss_param() const;
  void clear_hinge_loss_param();
  static const int kHingeLossParamFieldNumber = 29;
  const ::caffe::HingeLossParameter& hinge_loss_param() const;
  ::caffe::HingeLossParameter* mutable_hinge_loss_param();
  ::caffe::HingeLossParameter* release_hinge_loss_param();
  void set_allocated_hinge_loss_param(::caffe::HingeLossParameter* hinge_loss_param);

  // optional .caffe.ImageDataParameter image_data_param = 15;
  bool has_image_data_param() const;
  void clear_image_data_param();
  static const int kImageDataParamFieldNumber = 15;
  const ::caffe::ImageDataParameter& image_data_param() const;
  ::caffe::ImageDataParameter* mutable_image_data_param();
  ::caffe::ImageDataParameter* release_image_data_param();
  void set_allocated_image_data_param(::caffe::ImageDataParameter* image_data_param);

  // optional .caffe.InfogainLossParameter infogain_loss_param = 16;
  bool has_infogain_loss_param() const;
  void clear_infogain_loss_param();
  static const int kInfogainLossParamFieldNumber = 16;
  const ::caffe::InfogainLossParameter& infogain_loss_param() const;
  ::caffe::InfogainLossParameter* mutable_infogain_loss_param();
  ::caffe::InfogainLossParameter* release_infogain_loss_param();
  void set_allocated_infogain_loss_param(::caffe::InfogainLossParameter* infogain_loss_param);

  // optional .caffe.InnerProductParameter inner_product_param = 17;
  bool has_inner_product_param() const;
  void clear_inner_product_param();
  static const int kInnerProductParamFieldNumber = 17;
  const ::caffe::InnerProductParameter& inner_product_param() const;
  ::caffe::InnerProductParameter* mutable_inner_product_param();
  ::caffe::InnerProductParameter* release_inner_product_param();
  void set_allocated_inner_product_param(::caffe::InnerProductParameter* inner_product_param);

  // optional .caffe.LRNParameter lrn_param = 18;
  bool has_lrn_param() const;
  void clear_lrn_param();
  static const int kLrnParamFieldNumber = 18;
  const ::caffe::LRNParameter& lrn_param() const;
  ::caffe::LRNParameter* mutable_lrn_param();
  ::caffe::LRNParameter* release_lrn_param();
  void set_allocated_lrn_param(::caffe::LRNParameter* lrn_param);

  // optional .caffe.MemoryDataParameter memory_data_param = 22;
  bool has_memory_data_param() const;
  void clear_memory_data_param();
  static const int kMemoryDataParamFieldNumber = 22;
  const ::caffe::MemoryDataParameter& memory_data_param() const;
  ::caffe::MemoryDataParameter* mutable_memory_data_param();
  ::caffe::MemoryDataParameter* release_memory_data_param();
  void set_allocated_memory_data_param(::caffe::MemoryDataParameter* memory_data_param);

  // optional .caffe.MVNParameter mvn_param = 34;
  bool has_mvn_param() const;
  void clear_mvn_param();
  static const int kMvnParamFieldNumber = 34;
  const ::caffe::MVNParameter& mvn_param() const;
  ::caffe::MVNParameter* mutable_mvn_param();
  ::caffe::MVNParameter* release_mvn_param();
  void set_allocated_mvn_param(::caffe::MVNParameter* mvn_param);

  // optional .caffe.PoolingParameter pooling_param = 19;
  bool has_pooling_param() const;
  void clear_pooling_param();
  static const int kPoolingParamFieldNumber = 19;
  const ::caffe::PoolingParameter& pooling_param() const;
  ::caffe::PoolingParameter* mutable_pooling_param();
  ::caffe::PoolingParameter* release_pooling_param();
  void set_allocated_pooling_param(::caffe::PoolingParameter* pooling_param);

  // optional .caffe.PowerParameter power_param = 21;
  bool has_power_param() const;
  void clear_power_param();
  static const int kPowerParamFieldNumber = 21;
  const ::caffe::PowerParameter& power_param() const;
  ::caffe::PowerParameter* mutable_power_param();
  ::caffe::PowerParameter* release_power_param();
  void set_allocated_power_param(::caffe::PowerParameter* power_param);

  // optional .caffe.ReLUParameter relu_param = 30;
  bool has_relu_param() const;
  void clear_relu_param();
  static const int kReluParamFieldNumber = 30;
  const ::caffe::ReLUParameter& relu_param() const;
  ::caffe::ReLUParameter* mutable_relu_param();
  ::caffe::ReLUParameter* release_relu_param();
  void set_allocated_relu_param(::caffe::ReLUParameter* relu_param);

  // optional .caffe.SigmoidParameter sigmoid_param = 38;
  bool has_sigmoid_param() const;
  void clear_sigmoid_param();
  static const int kSigmoidParamFieldNumber = 38;
  const ::caffe::SigmoidParameter& sigmoid_param() const;
  ::caffe::SigmoidParameter* mutable_sigmoid_param();
  ::caffe::SigmoidParameter* release_sigmoid_param();
  void set_allocated_sigmoid_param(::caffe::SigmoidParameter* sigmoid_param);

  // optional .caffe.SoftmaxParameter softmax_param = 39;
  bool has_softmax_param() const;
  void clear_softmax_param();
  static const int kSoftmaxParamFieldNumber = 39;
  const ::caffe::SoftmaxParameter& softmax_param() const;
  ::caffe::SoftmaxParameter* mutable_softmax_param();
  ::caffe::SoftmaxParameter* release_softmax_param();
  void set_allocated_softmax_param(::caffe::SoftmaxParameter* softmax_param);

  // optional .caffe.SliceParameter slice_param = 31;
  bool has_slice_param() const;
  void clear_slice_param();
  static const int kSliceParamFieldNumber = 31;
  const ::caffe::SliceParameter& slice_param() const;
  ::caffe::SliceParameter* mutable_slice_param();
  ::caffe::SliceParameter* release_slice_param();
  void set_allocated_slice_param(::caffe::SliceParameter* slice_param);

  // optional .caffe.TanHParameter tanh_param = 37;
  bool has_tanh_param() const;
  void clear_tanh_param();
  static const int kTanhParamFieldNumber = 37;
  const ::caffe::TanHParameter& tanh_param() const;
  ::caffe::TanHParameter* mutable_tanh_param();
  ::caffe::TanHParameter* release_tanh_param();
  void set_allocated_tanh_param(::caffe::TanHParameter* tanh_param);

  // optional .caffe.ThresholdParameter threshold_param = 25;
  bool has_threshold_param() const;
  void clear_threshold_param();
  static const int kThresholdParamFieldNumber = 25;
  const ::caffe::ThresholdParameter& threshold_param() const;
  ::caffe::ThresholdParameter* mutable_threshold_param();
  ::caffe::ThresholdParameter* release_threshold_param();
  void set_allocated_threshold_param(::caffe::ThresholdParameter* threshold_param);

  // optional .caffe.WindowDataParameter window_data_param = 20;
  bool has_window_data_param() const;
  void clear_window_data_param();
  static const int kWindowDataParamFieldNumber = 20;
  const ::caffe::WindowDataParameter& window_data_param() const;
  ::caffe::WindowDataParameter* mutable_window_data_param();
  ::caffe::WindowDataParameter* release_window_data_param();
  void set_allocated_window_data_param(::caffe::WindowDataParameter* window_data_param);

  // optional .caffe.TransformationParameter transform_param = 36;
  bool has_transform_param() const;
  void clear_transform_param();
  static const int kTransformParamFieldNumber = 36;
  const ::caffe::TransformationParameter& transform_param() const;
  ::caffe::TransformationParameter* mutable_transform_param();
  ::caffe::TransformationParameter* release_transform_param();
  void set_allocated_transform_param(::caffe::TransformationParameter* transform_param);

  // optional .caffe.LossParameter loss_param = 42;
  bool has_loss_param() const;
  void clear_loss_param();
  static const int kLossParamFieldNumber = 42;
  const ::caffe::LossParameter& loss_param() const;
  ::caffe::LossParameter* mutable_loss_param();
  ::caffe::LossParameter* release_loss_param();
  void set_allocated_loss_param(::caffe::LossParameter* loss_param);

  // optional .caffe.V0LayerParameter layer = 1;
  bool has_layer() const;
  void clear_layer();
  static const int kLayerFieldNumber = 1;
  const ::caffe::V0LayerParameter& layer() const;
  ::caffe::V0LayerParameter* mutable_layer();
  ::caffe::V0LayerParameter* release_layer();
  void set_allocated_layer(::caffe::V0LayerParameter* layer);

  // @@protoc_insertion_point(class_scope:caffe.V1LayerParameter)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_accuracy_param();
  inline void clear_has_accuracy_param();
  inline void set_has_argmax_param();
  inline void clear_has_argmax_param();
  inline void set_has_concat_param();
  inline void clear_has_concat_param();
  inline void set_has_contrastive_loss_param();
  inline void clear_has_contrastive_loss_param();
  inline void set_has_convolution_param();
  inline void clear_has_convolution_param();
  inline void set_has_data_param();
  inline void clear_has_data_param();
  inline void set_has_dropout_param();
  inline void clear_has_dropout_param();
  inline void set_has_dummy_data_param();
  inline void clear_has_dummy_data_param();
  inline void set_has_eltwise_param();
  inline void clear_has_eltwise_param();
  inline void set_has_exp_param();
  inline void clear_has_exp_param();
  inline void set_has_hdf5_data_param();
  inline void clear_has_hdf5_data_param();
  inline void set_has_hdf5_output_param();
  inline void clear_has_hdf5_output_param();
  inline void set_has_hinge_loss_param();
  inline void clear_has_hinge_loss_param();
  inline void set_has_image_data_param();
  inline void clear_has_image_data_param();
  inline void set_has_infogain_loss_param();
  inline void clear_has_infogain_loss_param();
  inline void set_has_inner_product_param();
  inline void clear_has_inner_product_param();
  inline void set_has_lrn_param();
  inline void clear_has_lrn_param();
  inline void set_has_memory_data_param();
  inline void clear_has_memory_data_param();
  inline void set_has_mvn_param();
  inline void clear_has_mvn_param();
  inline void set_has_pooling_param();
  inline void clear_has_pooling_param();
  inline void set_has_power_param();
  inline void clear_has_power_param();
  inline void set_has_relu_param();
  inline void clear_has_relu_param();
  inline void set_has_sigmoid_param();
  inline void clear_has_sigmoid_param();
  inline void set_has_softmax_param();
  inline void clear_has_softmax_param();
  inline void set_has_slice_param();
  inline void clear_has_slice_param();
  inline void set_has_tanh_param();
  inline void clear_has_tanh_param();
  inline void set_has_threshold_param();
  inline void clear_has_threshold_param();
  inline void set_has_window_data_param();
  inline void clear_has_window_data_param();
  inline void set_has_transform_param();
  inline void clear_has_transform_param();
  inline void set_has_loss_param();
  inline void clear_has_loss_param();
  inline void set_has_layer();
  inline void clear_has_layer();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::google::protobuf::RepeatedPtrField< ::std::string> bottom_;
  ::google::protobuf::RepeatedPtrField< ::std::string> top_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule > include_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule > exclude_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto > blobs_;
  ::google::protobuf::RepeatedPtrField< ::std::string> param_;
  ::google::protobuf::RepeatedField<int> blob_share_mode_;
  ::google::protobuf::RepeatedField< float > blobs_lr_;
  ::google::protobuf::RepeatedField< float > weight_decay_;
  ::google::protobuf::RepeatedField< float > loss_weight_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::caffe::AccuracyParameter* accuracy_param_;
  ::caffe::ArgMaxParameter* argmax_param_;
  ::caffe::ConcatParameter* concat_param_;
  ::caffe::ContrastiveLossParameter* contrastive_loss_param_;
  ::caffe::ConvolutionParameter* convolution_param_;
  ::caffe::DataParameter* data_param_;
  ::caffe::DropoutParameter* dropout_param_;
  ::caffe::DummyDataParameter* dummy_data_param_;
  ::caffe::EltwiseParameter* eltwise_param_;
  ::caffe::ExpParameter* exp_param_;
  ::caffe::HDF5DataParameter* hdf5_data_param_;
  ::caffe::HDF5OutputParameter* hdf5_output_param_;
  ::caffe::HingeLossParameter* hinge_loss_param_;
  ::caffe::ImageDataParameter* image_data_param_;
  ::caffe::InfogainLossParameter* infogain_loss_param_;
  ::caffe::InnerProductParameter* inner_product_param_;
  ::caffe::LRNParameter* lrn_param_;
  ::caffe::MemoryDataParameter* memory_data_param_;
  ::caffe::MVNParameter* mvn_param_;
  ::caffe::PoolingParameter* pooling_param_;
  ::caffe::PowerParameter* power_param_;
  ::caffe::ReLUParameter* relu_param_;
  ::caffe::SigmoidParameter* sigmoid_param_;
  ::caffe::SoftmaxParameter* softmax_param_;
  ::caffe::SliceParameter* slice_param_;
  ::caffe::TanHParameter* tanh_param_;
  ::caffe::ThresholdParameter* threshold_param_;
  ::caffe::WindowDataParameter* window_data_param_;
  ::caffe::TransformationParameter* transform_param_;
  ::caffe::LossParameter* loss_param_;
  ::caffe::V0LayerParameter* layer_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<V1LayerParameter> V1LayerParameter_default_instance_;

// -------------------------------------------------------------------

class V0LayerParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.V0LayerParameter) */ {
 public:
  V0LayerParameter();
  virtual ~V0LayerParameter();

  V0LayerParameter(const V0LayerParameter& from);

  inline V0LayerParameter& operator=(const V0LayerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const V0LayerParameter& default_instance();

  static const V0LayerParameter* internal_default_instance();

  void Swap(V0LayerParameter* other);

  // implements Message ----------------------------------------------

  inline V0LayerParameter* New() const { return New(NULL); }

  V0LayerParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const V0LayerParameter& from);
  void MergeFrom(const V0LayerParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(V0LayerParameter* other);
  void UnsafeMergeFrom(const V0LayerParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef V0LayerParameter_PoolMethod PoolMethod;
  static const PoolMethod MAX =
    V0LayerParameter_PoolMethod_MAX;
  static const PoolMethod AVE =
    V0LayerParameter_PoolMethod_AVE;
  static const PoolMethod STOCHASTIC =
    V0LayerParameter_PoolMethod_STOCHASTIC;
  static inline bool PoolMethod_IsValid(int value) {
    return V0LayerParameter_PoolMethod_IsValid(value);
  }
  static const PoolMethod PoolMethod_MIN =
    V0LayerParameter_PoolMethod_PoolMethod_MIN;
  static const PoolMethod PoolMethod_MAX =
    V0LayerParameter_PoolMethod_PoolMethod_MAX;
  static const int PoolMethod_ARRAYSIZE =
    V0LayerParameter_PoolMethod_PoolMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PoolMethod_descriptor() {
    return V0LayerParameter_PoolMethod_descriptor();
  }
  static inline const ::std::string& PoolMethod_Name(PoolMethod value) {
    return V0LayerParameter_PoolMethod_Name(value);
  }
  static inline bool PoolMethod_Parse(const ::std::string& name,
      PoolMethod* value) {
    return V0LayerParameter_PoolMethod_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional uint32 num_output = 3;
  bool has_num_output() const;
  void clear_num_output();
  static const int kNumOutputFieldNumber = 3;
  ::google::protobuf::uint32 num_output() const;
  void set_num_output(::google::protobuf::uint32 value);

  // optional bool biasterm = 4 [default = true];
  bool has_biasterm() const;
  void clear_biasterm();
  static const int kBiastermFieldNumber = 4;
  bool biasterm() const;
  void set_biasterm(bool value);

  // optional .caffe.FillerParameter weight_filler = 5;
  bool has_weight_filler() const;
  void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 5;
  const ::caffe::FillerParameter& weight_filler() const;
  ::caffe::FillerParameter* mutable_weight_filler();
  ::caffe::FillerParameter* release_weight_filler();
  void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);

  // optional .caffe.FillerParameter bias_filler = 6;
  bool has_bias_filler() const;
  void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 6;
  const ::caffe::FillerParameter& bias_filler() const;
  ::caffe::FillerParameter* mutable_bias_filler();
  ::caffe::FillerParameter* release_bias_filler();
  void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // optional uint32 pad = 7 [default = 0];
  bool has_pad() const;
  void clear_pad();
  static const int kPadFieldNumber = 7;
  ::google::protobuf::uint32 pad() const;
  void set_pad(::google::protobuf::uint32 value);

  // optional uint32 kernelsize = 8;
  bool has_kernelsize() const;
  void clear_kernelsize();
  static const int kKernelsizeFieldNumber = 8;
  ::google::protobuf::uint32 kernelsize() const;
  void set_kernelsize(::google::protobuf::uint32 value);

  // optional uint32 group = 9 [default = 1];
  bool has_group() const;
  void clear_group();
  static const int kGroupFieldNumber = 9;
  ::google::protobuf::uint32 group() const;
  void set_group(::google::protobuf::uint32 value);

  // optional uint32 stride = 10 [default = 1];
  bool has_stride() const;
  void clear_stride();
  static const int kStrideFieldNumber = 10;
  ::google::protobuf::uint32 stride() const;
  void set_stride(::google::protobuf::uint32 value);

  // optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
  bool has_pool() const;
  void clear_pool();
  static const int kPoolFieldNumber = 11;
  ::caffe::V0LayerParameter_PoolMethod pool() const;
  void set_pool(::caffe::V0LayerParameter_PoolMethod value);

  // optional float dropout_ratio = 12 [default = 0.5];
  bool has_dropout_ratio() const;
  void clear_dropout_ratio();
  static const int kDropoutRatioFieldNumber = 12;
  float dropout_ratio() const;
  void set_dropout_ratio(float value);

  // optional uint32 local_size = 13 [default = 5];
  bool has_local_size() const;
  void clear_local_size();
  static const int kLocalSizeFieldNumber = 13;
  ::google::protobuf::uint32 local_size() const;
  void set_local_size(::google::protobuf::uint32 value);

  // optional float alpha = 14 [default = 1];
  bool has_alpha() const;
  void clear_alpha();
  static const int kAlphaFieldNumber = 14;
  float alpha() const;
  void set_alpha(float value);

  // optional float beta = 15 [default = 0.75];
  bool has_beta() const;
  void clear_beta();
  static const int kBetaFieldNumber = 15;
  float beta() const;
  void set_beta(float value);

  // optional float k = 22 [default = 1];
  bool has_k() const;
  void clear_k();
  static const int kKFieldNumber = 22;
  float k() const;
  void set_k(float value);

  // optional string source = 16;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 16;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // optional float scale = 17 [default = 1];
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 17;
  float scale() const;
  void set_scale(float value);

  // optional string meanfile = 18;
  bool has_meanfile() const;
  void clear_meanfile();
  static const int kMeanfileFieldNumber = 18;
  const ::std::string& meanfile() const;
  void set_meanfile(const ::std::string& value);
  void set_meanfile(const char* value);
  void set_meanfile(const char* value, size_t size);
  ::std::string* mutable_meanfile();
  ::std::string* release_meanfile();
  void set_allocated_meanfile(::std::string* meanfile);

  // optional uint32 batchsize = 19;
  bool has_batchsize() const;
  void clear_batchsize();
  static const int kBatchsizeFieldNumber = 19;
  ::google::protobuf::uint32 batchsize() const;
  void set_batchsize(::google::protobuf::uint32 value);

  // optional uint32 cropsize = 20 [default = 0];
  bool has_cropsize() const;
  void clear_cropsize();
  static const int kCropsizeFieldNumber = 20;
  ::google::protobuf::uint32 cropsize() const;
  void set_cropsize(::google::protobuf::uint32 value);

  // optional bool mirror = 21 [default = false];
  bool has_mirror() const;
  void clear_mirror();
  static const int kMirrorFieldNumber = 21;
  bool mirror() const;
  void set_mirror(bool value);

  // repeated .caffe.BlobProto blobs = 50;
  int blobs_size() const;
  void clear_blobs();
  static const int kBlobsFieldNumber = 50;
  const ::caffe::BlobProto& blobs(int index) const;
  ::caffe::BlobProto* mutable_blobs(int index);
  ::caffe::BlobProto* add_blobs();
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
      mutable_blobs();
  const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
      blobs() const;

  // repeated float blobs_lr = 51;
  int blobs_lr_size() const;
  void clear_blobs_lr();
  static const int kBlobsLrFieldNumber = 51;
  float blobs_lr(int index) const;
  void set_blobs_lr(int index, float value);
  void add_blobs_lr(float value);
  const ::google::protobuf::RepeatedField< float >&
      blobs_lr() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_blobs_lr();

  // repeated float weight_decay = 52;
  int weight_decay_size() const;
  void clear_weight_decay();
  static const int kWeightDecayFieldNumber = 52;
  float weight_decay(int index) const;
  void set_weight_decay(int index, float value);
  void add_weight_decay(float value);
  const ::google::protobuf::RepeatedField< float >&
      weight_decay() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_weight_decay();

  // optional uint32 rand_skip = 53 [default = 0];
  bool has_rand_skip() const;
  void clear_rand_skip();
  static const int kRandSkipFieldNumber = 53;
  ::google::protobuf::uint32 rand_skip() const;
  void set_rand_skip(::google::protobuf::uint32 value);

  // optional float det_fg_threshold = 54 [default = 0.5];
  bool has_det_fg_threshold() const;
  void clear_det_fg_threshold();
  static const int kDetFgThresholdFieldNumber = 54;
  float det_fg_threshold() const;
  void set_det_fg_threshold(float value);

  // optional float det_bg_threshold = 55 [default = 0.5];
  bool has_det_bg_threshold() const;
  void clear_det_bg_threshold();
  static const int kDetBgThresholdFieldNumber = 55;
  float det_bg_threshold() const;
  void set_det_bg_threshold(float value);

  // optional float det_fg_fraction = 56 [default = 0.25];
  bool has_det_fg_fraction() const;
  void clear_det_fg_fraction();
  static const int kDetFgFractionFieldNumber = 56;
  float det_fg_fraction() const;
  void set_det_fg_fraction(float value);

  // optional uint32 det_context_pad = 58 [default = 0];
  bool has_det_context_pad() const;
  void clear_det_context_pad();
  static const int kDetContextPadFieldNumber = 58;
  ::google::protobuf::uint32 det_context_pad() const;
  void set_det_context_pad(::google::protobuf::uint32 value);

  // optional string det_crop_mode = 59 [default = "warp"];
  bool has_det_crop_mode() const;
  void clear_det_crop_mode();
  static const int kDetCropModeFieldNumber = 59;
  const ::std::string& det_crop_mode() const;
  void set_det_crop_mode(const ::std::string& value);
  void set_det_crop_mode(const char* value);
  void set_det_crop_mode(const char* value, size_t size);
  ::std::string* mutable_det_crop_mode();
  ::std::string* release_det_crop_mode();
  void set_allocated_det_crop_mode(::std::string* det_crop_mode);

  // optional int32 new_num = 60 [default = 0];
  bool has_new_num() const;
  void clear_new_num();
  static const int kNewNumFieldNumber = 60;
  ::google::protobuf::int32 new_num() const;
  void set_new_num(::google::protobuf::int32 value);

  // optional int32 new_channels = 61 [default = 0];
  bool has_new_channels() const;
  void clear_new_channels();
  static const int kNewChannelsFieldNumber = 61;
  ::google::protobuf::int32 new_channels() const;
  void set_new_channels(::google::protobuf::int32 value);

  // optional int32 new_height = 62 [default = 0];
  bool has_new_height() const;
  void clear_new_height();
  static const int kNewHeightFieldNumber = 62;
  ::google::protobuf::int32 new_height() const;
  void set_new_height(::google::protobuf::int32 value);

  // optional int32 new_width = 63 [default = 0];
  bool has_new_width() const;
  void clear_new_width();
  static const int kNewWidthFieldNumber = 63;
  ::google::protobuf::int32 new_width() const;
  void set_new_width(::google::protobuf::int32 value);

  // optional bool shuffle_images = 64 [default = false];
  bool has_shuffle_images() const;
  void clear_shuffle_images();
  static const int kShuffleImagesFieldNumber = 64;
  bool shuffle_images() const;
  void set_shuffle_images(bool value);

  // optional uint32 concat_dim = 65 [default = 1];
  bool has_concat_dim() const;
  void clear_concat_dim();
  static const int kConcatDimFieldNumber = 65;
  ::google::protobuf::uint32 concat_dim() const;
  void set_concat_dim(::google::protobuf::uint32 value);

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;
  bool has_hdf5_output_param() const;
  void clear_hdf5_output_param();
  static const int kHdf5OutputParamFieldNumber = 1001;
  const ::caffe::HDF5OutputParameter& hdf5_output_param() const;
  ::caffe::HDF5OutputParameter* mutable_hdf5_output_param();
  ::caffe::HDF5OutputParameter* release_hdf5_output_param();
  void set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param);

  // @@protoc_insertion_point(class_scope:caffe.V0LayerParameter)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_num_output();
  inline void clear_has_num_output();
  inline void set_has_biasterm();
  inline void clear_has_biasterm();
  inline void set_has_weight_filler();
  inline void clear_has_weight_filler();
  inline void set_has_bias_filler();
  inline void clear_has_bias_filler();
  inline void set_has_pad();
  inline void clear_has_pad();
  inline void set_has_kernelsize();
  inline void clear_has_kernelsize();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_stride();
  inline void clear_has_stride();
  inline void set_has_pool();
  inline void clear_has_pool();
  inline void set_has_dropout_ratio();
  inline void clear_has_dropout_ratio();
  inline void set_has_local_size();
  inline void clear_has_local_size();
  inline void set_has_alpha();
  inline void clear_has_alpha();
  inline void set_has_beta();
  inline void clear_has_beta();
  inline void set_has_k();
  inline void clear_has_k();
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_meanfile();
  inline void clear_has_meanfile();
  inline void set_has_batchsize();
  inline void clear_has_batchsize();
  inline void set_has_cropsize();
  inline void clear_has_cropsize();
  inline void set_has_mirror();
  inline void clear_has_mirror();
  inline void set_has_rand_skip();
  inline void clear_has_rand_skip();
  inline void set_has_det_fg_threshold();
  inline void clear_has_det_fg_threshold();
  inline void set_has_det_bg_threshold();
  inline void clear_has_det_bg_threshold();
  inline void set_has_det_fg_fraction();
  inline void clear_has_det_fg_fraction();
  inline void set_has_det_context_pad();
  inline void clear_has_det_context_pad();
  inline void set_has_det_crop_mode();
  inline void clear_has_det_crop_mode();
  inline void set_has_new_num();
  inline void clear_has_new_num();
  inline void set_has_new_channels();
  inline void clear_has_new_channels();
  inline void set_has_new_height();
  inline void clear_has_new_height();
  inline void set_has_new_width();
  inline void clear_has_new_width();
  inline void set_has_shuffle_images();
  inline void clear_has_shuffle_images();
  inline void set_has_concat_dim();
  inline void clear_has_concat_dim();
  inline void set_has_hdf5_output_param();
  inline void clear_has_hdf5_output_param();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto > blobs_;
  ::google::protobuf::RepeatedField< float > blobs_lr_;
  ::google::protobuf::RepeatedField< float > weight_decay_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::internal::ArenaStringPtr meanfile_;
  static ::std::string* _default_det_crop_mode_;
  ::google::protobuf::internal::ArenaStringPtr det_crop_mode_;
  ::caffe::FillerParameter* weight_filler_;
  ::caffe::FillerParameter* bias_filler_;
  ::caffe::HDF5OutputParameter* hdf5_output_param_;
  ::google::protobuf::uint32 num_output_;
  ::google::protobuf::uint32 pad_;
  ::google::protobuf::uint32 kernelsize_;
  int pool_;
  ::google::protobuf::uint32 batchsize_;
  ::google::protobuf::uint32 cropsize_;
  ::google::protobuf::uint32 rand_skip_;
  bool mirror_;
  bool shuffle_images_;
  ::google::protobuf::uint32 det_context_pad_;
  ::google::protobuf::int32 new_num_;
  ::google::protobuf::int32 new_channels_;
  ::google::protobuf::int32 new_height_;
  ::google::protobuf::int32 new_width_;
  ::google::protobuf::uint32 concat_dim_;
  bool biasterm_;
  ::google::protobuf::uint32 group_;
  ::google::protobuf::uint32 stride_;
  float dropout_ratio_;
  ::google::protobuf::uint32 local_size_;
  float alpha_;
  float beta_;
  float k_;
  float scale_;
  float det_fg_threshold_;
  float det_bg_threshold_;
  float det_fg_fraction_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<V0LayerParameter> V0LayerParameter_default_instance_;

// -------------------------------------------------------------------

class PReLUParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.PReLUParameter) */ {
 public:
  PReLUParameter();
  virtual ~PReLUParameter();

  PReLUParameter(const PReLUParameter& from);

  inline PReLUParameter& operator=(const PReLUParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PReLUParameter& default_instance();

  static const PReLUParameter* internal_default_instance();

  void Swap(PReLUParameter* other);

  // implements Message ----------------------------------------------

  inline PReLUParameter* New() const { return New(NULL); }

  PReLUParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PReLUParameter& from);
  void MergeFrom(const PReLUParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PReLUParameter* other);
  void UnsafeMergeFrom(const PReLUParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.FillerParameter filler = 1;
  bool has_filler() const;
  void clear_filler();
  static const int kFillerFieldNumber = 1;
  const ::caffe::FillerParameter& filler() const;
  ::caffe::FillerParameter* mutable_filler();
  ::caffe::FillerParameter* release_filler();
  void set_allocated_filler(::caffe::FillerParameter* filler);

  // optional bool channel_shared = 2 [default = false];
  bool has_channel_shared() const;
  void clear_channel_shared();
  static const int kChannelSharedFieldNumber = 2;
  bool channel_shared() const;
  void set_channel_shared(bool value);

  // @@protoc_insertion_point(class_scope:caffe.PReLUParameter)
 private:
  inline void set_has_filler();
  inline void clear_has_filler();
  inline void set_has_channel_shared();
  inline void clear_has_channel_shared();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::caffe::FillerParameter* filler_;
  bool channel_shared_;
  friend void  protobuf_InitDefaults_caffe_2eproto_impl();
  friend void  protobuf_AddDesc_caffe_2eproto_impl();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<PReLUParameter> PReLUParameter_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ImgBBoxAnnoDatum

// required .caffe.Datum img_datum = 1;
inline bool ImgBBoxAnnoDatum::has_img_datum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImgBBoxAnnoDatum::set_has_img_datum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImgBBoxAnnoDatum::clear_has_img_datum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImgBBoxAnnoDatum::clear_img_datum() {
  if (img_datum_ != NULL) img_datum_->::caffe::Datum::Clear();
  clear_has_img_datum();
}
inline const ::caffe::Datum& ImgBBoxAnnoDatum::img_datum() const {
  // @@protoc_insertion_point(field_get:caffe.ImgBBoxAnnoDatum.img_datum)
  return img_datum_ != NULL ? *img_datum_
                         : *::caffe::Datum::internal_default_instance();
}
inline ::caffe::Datum* ImgBBoxAnnoDatum::mutable_img_datum() {
  set_has_img_datum();
  if (img_datum_ == NULL) {
    img_datum_ = new ::caffe::Datum;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ImgBBoxAnnoDatum.img_datum)
  return img_datum_;
}
inline ::caffe::Datum* ImgBBoxAnnoDatum::release_img_datum() {
  // @@protoc_insertion_point(field_release:caffe.ImgBBoxAnnoDatum.img_datum)
  clear_has_img_datum();
  ::caffe::Datum* temp = img_datum_;
  img_datum_ = NULL;
  return temp;
}
inline void ImgBBoxAnnoDatum::set_allocated_img_datum(::caffe::Datum* img_datum) {
  delete img_datum_;
  img_datum_ = img_datum;
  if (img_datum) {
    set_has_img_datum();
  } else {
    clear_has_img_datum();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ImgBBoxAnnoDatum.img_datum)
}

// repeated int32 label = 2;
inline int ImgBBoxAnnoDatum::label_size() const {
  return label_.size();
}
inline void ImgBBoxAnnoDatum::clear_label() {
  label_.Clear();
}
inline ::google::protobuf::int32 ImgBBoxAnnoDatum::label(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ImgBBoxAnnoDatum.label)
  return label_.Get(index);
}
inline void ImgBBoxAnnoDatum::set_label(int index, ::google::protobuf::int32 value) {
  label_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ImgBBoxAnnoDatum.label)
}
inline void ImgBBoxAnnoDatum::add_label(::google::protobuf::int32 value) {
  label_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ImgBBoxAnnoDatum.label)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ImgBBoxAnnoDatum::label() const {
  // @@protoc_insertion_point(field_list:caffe.ImgBBoxAnnoDatum.label)
  return label_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ImgBBoxAnnoDatum::mutable_label() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ImgBBoxAnnoDatum.label)
  return &label_;
}

// repeated float x_min = 3;
inline int ImgBBoxAnnoDatum::x_min_size() const {
  return x_min_.size();
}
inline void ImgBBoxAnnoDatum::clear_x_min() {
  x_min_.Clear();
}
inline float ImgBBoxAnnoDatum::x_min(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ImgBBoxAnnoDatum.x_min)
  return x_min_.Get(index);
}
inline void ImgBBoxAnnoDatum::set_x_min(int index, float value) {
  x_min_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ImgBBoxAnnoDatum.x_min)
}
inline void ImgBBoxAnnoDatum::add_x_min(float value) {
  x_min_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ImgBBoxAnnoDatum.x_min)
}
inline const ::google::protobuf::RepeatedField< float >&
ImgBBoxAnnoDatum::x_min() const {
  // @@protoc_insertion_point(field_list:caffe.ImgBBoxAnnoDatum.x_min)
  return x_min_;
}
inline ::google::protobuf::RepeatedField< float >*
ImgBBoxAnnoDatum::mutable_x_min() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ImgBBoxAnnoDatum.x_min)
  return &x_min_;
}

// repeated float y_min = 4;
inline int ImgBBoxAnnoDatum::y_min_size() const {
  return y_min_.size();
}
inline void ImgBBoxAnnoDatum::clear_y_min() {
  y_min_.Clear();
}
inline float ImgBBoxAnnoDatum::y_min(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ImgBBoxAnnoDatum.y_min)
  return y_min_.Get(index);
}
inline void ImgBBoxAnnoDatum::set_y_min(int index, float value) {
  y_min_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ImgBBoxAnnoDatum.y_min)
}
inline void ImgBBoxAnnoDatum::add_y_min(float value) {
  y_min_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ImgBBoxAnnoDatum.y_min)
}
inline const ::google::protobuf::RepeatedField< float >&
ImgBBoxAnnoDatum::y_min() const {
  // @@protoc_insertion_point(field_list:caffe.ImgBBoxAnnoDatum.y_min)
  return y_min_;
}
inline ::google::protobuf::RepeatedField< float >*
ImgBBoxAnnoDatum::mutable_y_min() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ImgBBoxAnnoDatum.y_min)
  return &y_min_;
}

// repeated float x_max = 5;
inline int ImgBBoxAnnoDatum::x_max_size() const {
  return x_max_.size();
}
inline void ImgBBoxAnnoDatum::clear_x_max() {
  x_max_.Clear();
}
inline float ImgBBoxAnnoDatum::x_max(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ImgBBoxAnnoDatum.x_max)
  return x_max_.Get(index);
}
inline void ImgBBoxAnnoDatum::set_x_max(int index, float value) {
  x_max_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ImgBBoxAnnoDatum.x_max)
}
inline void ImgBBoxAnnoDatum::add_x_max(float value) {
  x_max_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ImgBBoxAnnoDatum.x_max)
}
inline const ::google::protobuf::RepeatedField< float >&
ImgBBoxAnnoDatum::x_max() const {
  // @@protoc_insertion_point(field_list:caffe.ImgBBoxAnnoDatum.x_max)
  return x_max_;
}
inline ::google::protobuf::RepeatedField< float >*
ImgBBoxAnnoDatum::mutable_x_max() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ImgBBoxAnnoDatum.x_max)
  return &x_max_;
}

// repeated float y_max = 6;
inline int ImgBBoxAnnoDatum::y_max_size() const {
  return y_max_.size();
}
inline void ImgBBoxAnnoDatum::clear_y_max() {
  y_max_.Clear();
}
inline float ImgBBoxAnnoDatum::y_max(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ImgBBoxAnnoDatum.y_max)
  return y_max_.Get(index);
}
inline void ImgBBoxAnnoDatum::set_y_max(int index, float value) {
  y_max_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ImgBBoxAnnoDatum.y_max)
}
inline void ImgBBoxAnnoDatum::add_y_max(float value) {
  y_max_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ImgBBoxAnnoDatum.y_max)
}
inline const ::google::protobuf::RepeatedField< float >&
ImgBBoxAnnoDatum::y_max() const {
  // @@protoc_insertion_point(field_list:caffe.ImgBBoxAnnoDatum.y_max)
  return y_max_;
}
inline ::google::protobuf::RepeatedField< float >*
ImgBBoxAnnoDatum::mutable_y_max() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ImgBBoxAnnoDatum.y_max)
  return &y_max_;
}

inline const ImgBBoxAnnoDatum* ImgBBoxAnnoDatum::internal_default_instance() {
  return &ImgBBoxAnnoDatum_default_instance_.get();
}
// -------------------------------------------------------------------

// ImgBBoxAnnoParameter

// required int32 img_height = 1;
inline bool ImgBBoxAnnoParameter::has_img_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImgBBoxAnnoParameter::set_has_img_height() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImgBBoxAnnoParameter::clear_has_img_height() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImgBBoxAnnoParameter::clear_img_height() {
  img_height_ = 0;
  clear_has_img_height();
}
inline ::google::protobuf::int32 ImgBBoxAnnoParameter::img_height() const {
  // @@protoc_insertion_point(field_get:caffe.ImgBBoxAnnoParameter.img_height)
  return img_height_;
}
inline void ImgBBoxAnnoParameter::set_img_height(::google::protobuf::int32 value) {
  set_has_img_height();
  img_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImgBBoxAnnoParameter.img_height)
}

// required int32 img_width = 2;
inline bool ImgBBoxAnnoParameter::has_img_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImgBBoxAnnoParameter::set_has_img_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImgBBoxAnnoParameter::clear_has_img_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImgBBoxAnnoParameter::clear_img_width() {
  img_width_ = 0;
  clear_has_img_width();
}
inline ::google::protobuf::int32 ImgBBoxAnnoParameter::img_width() const {
  // @@protoc_insertion_point(field_get:caffe.ImgBBoxAnnoParameter.img_width)
  return img_width_;
}
inline void ImgBBoxAnnoParameter::set_img_width(::google::protobuf::int32 value) {
  set_has_img_width();
  img_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImgBBoxAnnoParameter.img_width)
}

// required int32 max_bbox_per_img = 3;
inline bool ImgBBoxAnnoParameter::has_max_bbox_per_img() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImgBBoxAnnoParameter::set_has_max_bbox_per_img() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImgBBoxAnnoParameter::clear_has_max_bbox_per_img() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImgBBoxAnnoParameter::clear_max_bbox_per_img() {
  max_bbox_per_img_ = 0;
  clear_has_max_bbox_per_img();
}
inline ::google::protobuf::int32 ImgBBoxAnnoParameter::max_bbox_per_img() const {
  // @@protoc_insertion_point(field_get:caffe.ImgBBoxAnnoParameter.max_bbox_per_img)
  return max_bbox_per_img_;
}
inline void ImgBBoxAnnoParameter::set_max_bbox_per_img(::google::protobuf::int32 value) {
  set_has_max_bbox_per_img();
  max_bbox_per_img_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImgBBoxAnnoParameter.max_bbox_per_img)
}

// optional bool colored = 4 [default = true];
inline bool ImgBBoxAnnoParameter::has_colored() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ImgBBoxAnnoParameter::set_has_colored() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ImgBBoxAnnoParameter::clear_has_colored() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ImgBBoxAnnoParameter::clear_colored() {
  colored_ = true;
  clear_has_colored();
}
inline bool ImgBBoxAnnoParameter::colored() const {
  // @@protoc_insertion_point(field_get:caffe.ImgBBoxAnnoParameter.colored)
  return colored_;
}
inline void ImgBBoxAnnoParameter::set_colored(bool value) {
  set_has_colored();
  colored_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImgBBoxAnnoParameter.colored)
}

inline const ImgBBoxAnnoParameter* ImgBBoxAnnoParameter::internal_default_instance() {
  return &ImgBBoxAnnoParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// HeatmapConcatParameter

// required string heatmap_file = 1;
inline bool HeatmapConcatParameter::has_heatmap_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeatmapConcatParameter::set_has_heatmap_file() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeatmapConcatParameter::clear_has_heatmap_file() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeatmapConcatParameter::clear_heatmap_file() {
  heatmap_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_heatmap_file();
}
inline const ::std::string& HeatmapConcatParameter::heatmap_file() const {
  // @@protoc_insertion_point(field_get:caffe.HeatmapConcatParameter.heatmap_file)
  return heatmap_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeatmapConcatParameter::set_heatmap_file(const ::std::string& value) {
  set_has_heatmap_file();
  heatmap_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.HeatmapConcatParameter.heatmap_file)
}
inline void HeatmapConcatParameter::set_heatmap_file(const char* value) {
  set_has_heatmap_file();
  heatmap_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.HeatmapConcatParameter.heatmap_file)
}
inline void HeatmapConcatParameter::set_heatmap_file(const char* value, size_t size) {
  set_has_heatmap_file();
  heatmap_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.HeatmapConcatParameter.heatmap_file)
}
inline ::std::string* HeatmapConcatParameter::mutable_heatmap_file() {
  set_has_heatmap_file();
  // @@protoc_insertion_point(field_mutable:caffe.HeatmapConcatParameter.heatmap_file)
  return heatmap_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeatmapConcatParameter::release_heatmap_file() {
  // @@protoc_insertion_point(field_release:caffe.HeatmapConcatParameter.heatmap_file)
  clear_has_heatmap_file();
  return heatmap_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeatmapConcatParameter::set_allocated_heatmap_file(::std::string* heatmap_file) {
  if (heatmap_file != NULL) {
    set_has_heatmap_file();
  } else {
    clear_has_heatmap_file();
  }
  heatmap_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), heatmap_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.HeatmapConcatParameter.heatmap_file)
}

inline const HeatmapConcatParameter* HeatmapConcatParameter::internal_default_instance() {
  return &HeatmapConcatParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// BBoxAnnoMapParameter

// required int32 img_height = 1;
inline bool BBoxAnnoMapParameter::has_img_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BBoxAnnoMapParameter::set_has_img_height() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BBoxAnnoMapParameter::clear_has_img_height() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BBoxAnnoMapParameter::clear_img_height() {
  img_height_ = 0;
  clear_has_img_height();
}
inline ::google::protobuf::int32 BBoxAnnoMapParameter::img_height() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxAnnoMapParameter.img_height)
  return img_height_;
}
inline void BBoxAnnoMapParameter::set_img_height(::google::protobuf::int32 value) {
  set_has_img_height();
  img_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxAnnoMapParameter.img_height)
}

// required int32 img_width = 2;
inline bool BBoxAnnoMapParameter::has_img_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BBoxAnnoMapParameter::set_has_img_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BBoxAnnoMapParameter::clear_has_img_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BBoxAnnoMapParameter::clear_img_width() {
  img_width_ = 0;
  clear_has_img_width();
}
inline ::google::protobuf::int32 BBoxAnnoMapParameter::img_width() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxAnnoMapParameter.img_width)
  return img_width_;
}
inline void BBoxAnnoMapParameter::set_img_width(::google::protobuf::int32 value) {
  set_has_img_width();
  img_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxAnnoMapParameter.img_width)
}

// required int32 receptive_field_height = 3;
inline bool BBoxAnnoMapParameter::has_receptive_field_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BBoxAnnoMapParameter::set_has_receptive_field_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BBoxAnnoMapParameter::clear_has_receptive_field_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BBoxAnnoMapParameter::clear_receptive_field_height() {
  receptive_field_height_ = 0;
  clear_has_receptive_field_height();
}
inline ::google::protobuf::int32 BBoxAnnoMapParameter::receptive_field_height() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxAnnoMapParameter.receptive_field_height)
  return receptive_field_height_;
}
inline void BBoxAnnoMapParameter::set_receptive_field_height(::google::protobuf::int32 value) {
  set_has_receptive_field_height();
  receptive_field_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxAnnoMapParameter.receptive_field_height)
}

// required int32 receptive_field_width = 4;
inline bool BBoxAnnoMapParameter::has_receptive_field_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BBoxAnnoMapParameter::set_has_receptive_field_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BBoxAnnoMapParameter::clear_has_receptive_field_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BBoxAnnoMapParameter::clear_receptive_field_width() {
  receptive_field_width_ = 0;
  clear_has_receptive_field_width();
}
inline ::google::protobuf::int32 BBoxAnnoMapParameter::receptive_field_width() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxAnnoMapParameter.receptive_field_width)
  return receptive_field_width_;
}
inline void BBoxAnnoMapParameter::set_receptive_field_width(::google::protobuf::int32 value) {
  set_has_receptive_field_width();
  receptive_field_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxAnnoMapParameter.receptive_field_width)
}

// required int32 vertical_stride = 5;
inline bool BBoxAnnoMapParameter::has_vertical_stride() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BBoxAnnoMapParameter::set_has_vertical_stride() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BBoxAnnoMapParameter::clear_has_vertical_stride() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BBoxAnnoMapParameter::clear_vertical_stride() {
  vertical_stride_ = 0;
  clear_has_vertical_stride();
}
inline ::google::protobuf::int32 BBoxAnnoMapParameter::vertical_stride() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxAnnoMapParameter.vertical_stride)
  return vertical_stride_;
}
inline void BBoxAnnoMapParameter::set_vertical_stride(::google::protobuf::int32 value) {
  set_has_vertical_stride();
  vertical_stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxAnnoMapParameter.vertical_stride)
}

// required int32 horizontal_stride = 6;
inline bool BBoxAnnoMapParameter::has_horizontal_stride() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BBoxAnnoMapParameter::set_has_horizontal_stride() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BBoxAnnoMapParameter::clear_has_horizontal_stride() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BBoxAnnoMapParameter::clear_horizontal_stride() {
  horizontal_stride_ = 0;
  clear_has_horizontal_stride();
}
inline ::google::protobuf::int32 BBoxAnnoMapParameter::horizontal_stride() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxAnnoMapParameter.horizontal_stride)
  return horizontal_stride_;
}
inline void BBoxAnnoMapParameter::set_horizontal_stride(::google::protobuf::int32 value) {
  set_has_horizontal_stride();
  horizontal_stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxAnnoMapParameter.horizontal_stride)
}

inline const BBoxAnnoMapParameter* BBoxAnnoMapParameter::internal_default_instance() {
  return &BBoxAnnoMapParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// LabelParameter

// required int32 num_label = 2;
inline bool LabelParameter::has_num_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LabelParameter::set_has_num_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LabelParameter::clear_has_num_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LabelParameter::clear_num_label() {
  num_label_ = 0;
  clear_has_num_label();
}
inline ::google::protobuf::int32 LabelParameter::num_label() const {
  // @@protoc_insertion_point(field_get:caffe.LabelParameter.num_label)
  return num_label_;
}
inline void LabelParameter::set_num_label(::google::protobuf::int32 value) {
  set_has_num_label();
  num_label_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelParameter.num_label)
}

inline const LabelParameter* LabelParameter::internal_default_instance() {
  return &LabelParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// PatchDatum

// required .caffe.Datum patch_img = 1;
inline bool PatchDatum::has_patch_img() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PatchDatum::set_has_patch_img() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PatchDatum::clear_has_patch_img() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PatchDatum::clear_patch_img() {
  if (patch_img_ != NULL) patch_img_->::caffe::Datum::Clear();
  clear_has_patch_img();
}
inline const ::caffe::Datum& PatchDatum::patch_img() const {
  // @@protoc_insertion_point(field_get:caffe.PatchDatum.patch_img)
  return patch_img_ != NULL ? *patch_img_
                         : *::caffe::Datum::internal_default_instance();
}
inline ::caffe::Datum* PatchDatum::mutable_patch_img() {
  set_has_patch_img();
  if (patch_img_ == NULL) {
    patch_img_ = new ::caffe::Datum;
  }
  // @@protoc_insertion_point(field_mutable:caffe.PatchDatum.patch_img)
  return patch_img_;
}
inline ::caffe::Datum* PatchDatum::release_patch_img() {
  // @@protoc_insertion_point(field_release:caffe.PatchDatum.patch_img)
  clear_has_patch_img();
  ::caffe::Datum* temp = patch_img_;
  patch_img_ = NULL;
  return temp;
}
inline void PatchDatum::set_allocated_patch_img(::caffe::Datum* patch_img) {
  delete patch_img_;
  patch_img_ = patch_img;
  if (patch_img) {
    set_has_patch_img();
  } else {
    clear_has_patch_img();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.PatchDatum.patch_img)
}

// optional int32 label = 2 [default = -1];
inline bool PatchDatum::has_label() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PatchDatum::set_has_label() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PatchDatum::clear_has_label() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PatchDatum::clear_label() {
  label_ = -1;
  clear_has_label();
}
inline ::google::protobuf::int32 PatchDatum::label() const {
  // @@protoc_insertion_point(field_get:caffe.PatchDatum.label)
  return label_;
}
inline void PatchDatum::set_label(::google::protobuf::int32 value) {
  set_has_label();
  label_ = value;
  // @@protoc_insertion_point(field_set:caffe.PatchDatum.label)
}

// optional float bbox_xmin = 3;
inline bool PatchDatum::has_bbox_xmin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PatchDatum::set_has_bbox_xmin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PatchDatum::clear_has_bbox_xmin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PatchDatum::clear_bbox_xmin() {
  bbox_xmin_ = 0;
  clear_has_bbox_xmin();
}
inline float PatchDatum::bbox_xmin() const {
  // @@protoc_insertion_point(field_get:caffe.PatchDatum.bbox_xmin)
  return bbox_xmin_;
}
inline void PatchDatum::set_bbox_xmin(float value) {
  set_has_bbox_xmin();
  bbox_xmin_ = value;
  // @@protoc_insertion_point(field_set:caffe.PatchDatum.bbox_xmin)
}

// optional float bbox_ymin = 4;
inline bool PatchDatum::has_bbox_ymin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PatchDatum::set_has_bbox_ymin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PatchDatum::clear_has_bbox_ymin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PatchDatum::clear_bbox_ymin() {
  bbox_ymin_ = 0;
  clear_has_bbox_ymin();
}
inline float PatchDatum::bbox_ymin() const {
  // @@protoc_insertion_point(field_get:caffe.PatchDatum.bbox_ymin)
  return bbox_ymin_;
}
inline void PatchDatum::set_bbox_ymin(float value) {
  set_has_bbox_ymin();
  bbox_ymin_ = value;
  // @@protoc_insertion_point(field_set:caffe.PatchDatum.bbox_ymin)
}

// optional float bbox_xmax = 5;
inline bool PatchDatum::has_bbox_xmax() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PatchDatum::set_has_bbox_xmax() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PatchDatum::clear_has_bbox_xmax() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PatchDatum::clear_bbox_xmax() {
  bbox_xmax_ = 0;
  clear_has_bbox_xmax();
}
inline float PatchDatum::bbox_xmax() const {
  // @@protoc_insertion_point(field_get:caffe.PatchDatum.bbox_xmax)
  return bbox_xmax_;
}
inline void PatchDatum::set_bbox_xmax(float value) {
  set_has_bbox_xmax();
  bbox_xmax_ = value;
  // @@protoc_insertion_point(field_set:caffe.PatchDatum.bbox_xmax)
}

// optional float bbox_ymax = 6;
inline bool PatchDatum::has_bbox_ymax() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PatchDatum::set_has_bbox_ymax() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PatchDatum::clear_has_bbox_ymax() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PatchDatum::clear_bbox_ymax() {
  bbox_ymax_ = 0;
  clear_has_bbox_ymax();
}
inline float PatchDatum::bbox_ymax() const {
  // @@protoc_insertion_point(field_get:caffe.PatchDatum.bbox_ymax)
  return bbox_ymax_;
}
inline void PatchDatum::set_bbox_ymax(float value) {
  set_has_bbox_ymax();
  bbox_ymax_ = value;
  // @@protoc_insertion_point(field_set:caffe.PatchDatum.bbox_ymax)
}

// optional float whole_img_height = 7;
inline bool PatchDatum::has_whole_img_height() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PatchDatum::set_has_whole_img_height() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PatchDatum::clear_has_whole_img_height() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PatchDatum::clear_whole_img_height() {
  whole_img_height_ = 0;
  clear_has_whole_img_height();
}
inline float PatchDatum::whole_img_height() const {
  // @@protoc_insertion_point(field_get:caffe.PatchDatum.whole_img_height)
  return whole_img_height_;
}
inline void PatchDatum::set_whole_img_height(float value) {
  set_has_whole_img_height();
  whole_img_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.PatchDatum.whole_img_height)
}

// optional float whole_img_width = 8;
inline bool PatchDatum::has_whole_img_width() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PatchDatum::set_has_whole_img_width() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PatchDatum::clear_has_whole_img_width() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PatchDatum::clear_whole_img_width() {
  whole_img_width_ = 0;
  clear_has_whole_img_width();
}
inline float PatchDatum::whole_img_width() const {
  // @@protoc_insertion_point(field_get:caffe.PatchDatum.whole_img_width)
  return whole_img_width_;
}
inline void PatchDatum::set_whole_img_width(float value) {
  set_has_whole_img_width();
  whole_img_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.PatchDatum.whole_img_width)
}

// optional float patch_offset_xmin = 9;
inline bool PatchDatum::has_patch_offset_xmin() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PatchDatum::set_has_patch_offset_xmin() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PatchDatum::clear_has_patch_offset_xmin() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PatchDatum::clear_patch_offset_xmin() {
  patch_offset_xmin_ = 0;
  clear_has_patch_offset_xmin();
}
inline float PatchDatum::patch_offset_xmin() const {
  // @@protoc_insertion_point(field_get:caffe.PatchDatum.patch_offset_xmin)
  return patch_offset_xmin_;
}
inline void PatchDatum::set_patch_offset_xmin(float value) {
  set_has_patch_offset_xmin();
  patch_offset_xmin_ = value;
  // @@protoc_insertion_point(field_set:caffe.PatchDatum.patch_offset_xmin)
}

// optional float patch_offset_ymin = 10;
inline bool PatchDatum::has_patch_offset_ymin() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PatchDatum::set_has_patch_offset_ymin() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PatchDatum::clear_has_patch_offset_ymin() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PatchDatum::clear_patch_offset_ymin() {
  patch_offset_ymin_ = 0;
  clear_has_patch_offset_ymin();
}
inline float PatchDatum::patch_offset_ymin() const {
  // @@protoc_insertion_point(field_get:caffe.PatchDatum.patch_offset_ymin)
  return patch_offset_ymin_;
}
inline void PatchDatum::set_patch_offset_ymin(float value) {
  set_has_patch_offset_ymin();
  patch_offset_ymin_ = value;
  // @@protoc_insertion_point(field_set:caffe.PatchDatum.patch_offset_ymin)
}

inline const PatchDatum* PatchDatum::internal_default_instance() {
  return &PatchDatum_default_instance_.get();
}
// -------------------------------------------------------------------

// PatchDataParameter

// optional bool positive_only = 1 [default = false];
inline bool PatchDataParameter::has_positive_only() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PatchDataParameter::set_has_positive_only() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PatchDataParameter::clear_has_positive_only() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PatchDataParameter::clear_positive_only() {
  positive_only_ = false;
  clear_has_positive_only();
}
inline bool PatchDataParameter::positive_only() const {
  // @@protoc_insertion_point(field_get:caffe.PatchDataParameter.positive_only)
  return positive_only_;
}
inline void PatchDataParameter::set_positive_only(bool value) {
  set_has_positive_only();
  positive_only_ = value;
  // @@protoc_insertion_point(field_set:caffe.PatchDataParameter.positive_only)
}

// optional bool patch_offset_normalization = 2 [default = true];
inline bool PatchDataParameter::has_patch_offset_normalization() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PatchDataParameter::set_has_patch_offset_normalization() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PatchDataParameter::clear_has_patch_offset_normalization() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PatchDataParameter::clear_patch_offset_normalization() {
  patch_offset_normalization_ = true;
  clear_has_patch_offset_normalization();
}
inline bool PatchDataParameter::patch_offset_normalization() const {
  // @@protoc_insertion_point(field_get:caffe.PatchDataParameter.patch_offset_normalization)
  return patch_offset_normalization_;
}
inline void PatchDataParameter::set_patch_offset_normalization(bool value) {
  set_has_patch_offset_normalization();
  patch_offset_normalization_ = value;
  // @@protoc_insertion_point(field_set:caffe.PatchDataParameter.patch_offset_normalization)
}

// optional bool bbox_normalization = 3 [default = true];
inline bool PatchDataParameter::has_bbox_normalization() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PatchDataParameter::set_has_bbox_normalization() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PatchDataParameter::clear_has_bbox_normalization() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PatchDataParameter::clear_bbox_normalization() {
  bbox_normalization_ = true;
  clear_has_bbox_normalization();
}
inline bool PatchDataParameter::bbox_normalization() const {
  // @@protoc_insertion_point(field_get:caffe.PatchDataParameter.bbox_normalization)
  return bbox_normalization_;
}
inline void PatchDataParameter::set_bbox_normalization(bool value) {
  set_has_bbox_normalization();
  bbox_normalization_ = value;
  // @@protoc_insertion_point(field_set:caffe.PatchDataParameter.bbox_normalization)
}

inline const PatchDataParameter* PatchDataParameter::internal_default_instance() {
  return &PatchDataParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// LabelRemapParameter

// repeated int32 src = 1;
inline int LabelRemapParameter::src_size() const {
  return src_.size();
}
inline void LabelRemapParameter::clear_src() {
  src_.Clear();
}
inline ::google::protobuf::int32 LabelRemapParameter::src(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LabelRemapParameter.src)
  return src_.Get(index);
}
inline void LabelRemapParameter::set_src(int index, ::google::protobuf::int32 value) {
  src_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.LabelRemapParameter.src)
}
inline void LabelRemapParameter::add_src(::google::protobuf::int32 value) {
  src_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.LabelRemapParameter.src)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
LabelRemapParameter::src() const {
  // @@protoc_insertion_point(field_list:caffe.LabelRemapParameter.src)
  return src_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
LabelRemapParameter::mutable_src() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LabelRemapParameter.src)
  return &src_;
}

// repeated int32 dst = 2;
inline int LabelRemapParameter::dst_size() const {
  return dst_.size();
}
inline void LabelRemapParameter::clear_dst() {
  dst_.Clear();
}
inline ::google::protobuf::int32 LabelRemapParameter::dst(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LabelRemapParameter.dst)
  return dst_.Get(index);
}
inline void LabelRemapParameter::set_dst(int index, ::google::protobuf::int32 value) {
  dst_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.LabelRemapParameter.dst)
}
inline void LabelRemapParameter::add_dst(::google::protobuf::int32 value) {
  dst_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.LabelRemapParameter.dst)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
LabelRemapParameter::dst() const {
  // @@protoc_insertion_point(field_list:caffe.LabelRemapParameter.dst)
  return dst_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
LabelRemapParameter::mutable_dst() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LabelRemapParameter.dst)
  return &dst_;
}

inline const LabelRemapParameter* LabelRemapParameter::internal_default_instance() {
  return &LabelRemapParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// BBoxParameter

// optional .caffe.BBoxParameter.BBoxType bbox_type = 1;
inline bool BBoxParameter::has_bbox_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BBoxParameter::set_has_bbox_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BBoxParameter::clear_has_bbox_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BBoxParameter::clear_bbox_type() {
  bbox_type_ = 1;
  clear_has_bbox_type();
}
inline ::caffe::BBoxParameter_BBoxType BBoxParameter::bbox_type() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxParameter.bbox_type)
  return static_cast< ::caffe::BBoxParameter_BBoxType >(bbox_type_);
}
inline void BBoxParameter::set_bbox_type(::caffe::BBoxParameter_BBoxType value) {
  assert(::caffe::BBoxParameter_BBoxType_IsValid(value));
  set_has_bbox_type();
  bbox_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxParameter.bbox_type)
}

// optional .caffe.BBoxParameter.BBoxAnchor anchor = 2;
inline bool BBoxParameter::has_anchor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BBoxParameter::set_has_anchor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BBoxParameter::clear_has_anchor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BBoxParameter::clear_anchor() {
  anchor_ = 1;
  clear_has_anchor();
}
inline ::caffe::BBoxParameter_BBoxAnchor BBoxParameter::anchor() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxParameter.anchor)
  return static_cast< ::caffe::BBoxParameter_BBoxAnchor >(anchor_);
}
inline void BBoxParameter::set_anchor(::caffe::BBoxParameter_BBoxAnchor value) {
  assert(::caffe::BBoxParameter_BBoxAnchor_IsValid(value));
  set_has_anchor();
  anchor_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxParameter.anchor)
}

// optional bool normalize = 3;
inline bool BBoxParameter::has_normalize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BBoxParameter::set_has_normalize() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BBoxParameter::clear_has_normalize() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BBoxParameter::clear_normalize() {
  normalize_ = false;
  clear_has_normalize();
}
inline bool BBoxParameter::normalize() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxParameter.normalize)
  return normalize_;
}
inline void BBoxParameter::set_normalize(bool value) {
  set_has_normalize();
  normalize_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxParameter.normalize)
}

inline const BBoxParameter* BBoxParameter::internal_default_instance() {
  return &BBoxParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// SlidingWindowInputParameter

// required int32 window_width = 1;
inline bool SlidingWindowInputParameter::has_window_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SlidingWindowInputParameter::set_has_window_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SlidingWindowInputParameter::clear_has_window_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SlidingWindowInputParameter::clear_window_width() {
  window_width_ = 0;
  clear_has_window_width();
}
inline ::google::protobuf::int32 SlidingWindowInputParameter::window_width() const {
  // @@protoc_insertion_point(field_get:caffe.SlidingWindowInputParameter.window_width)
  return window_width_;
}
inline void SlidingWindowInputParameter::set_window_width(::google::protobuf::int32 value) {
  set_has_window_width();
  window_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.SlidingWindowInputParameter.window_width)
}

// required int32 window_height = 2;
inline bool SlidingWindowInputParameter::has_window_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SlidingWindowInputParameter::set_has_window_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SlidingWindowInputParameter::clear_has_window_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SlidingWindowInputParameter::clear_window_height() {
  window_height_ = 0;
  clear_has_window_height();
}
inline ::google::protobuf::int32 SlidingWindowInputParameter::window_height() const {
  // @@protoc_insertion_point(field_get:caffe.SlidingWindowInputParameter.window_height)
  return window_height_;
}
inline void SlidingWindowInputParameter::set_window_height(::google::protobuf::int32 value) {
  set_has_window_height();
  window_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.SlidingWindowInputParameter.window_height)
}

// required int32 horizontal_stride = 3;
inline bool SlidingWindowInputParameter::has_horizontal_stride() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SlidingWindowInputParameter::set_has_horizontal_stride() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SlidingWindowInputParameter::clear_has_horizontal_stride() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SlidingWindowInputParameter::clear_horizontal_stride() {
  horizontal_stride_ = 0;
  clear_has_horizontal_stride();
}
inline ::google::protobuf::int32 SlidingWindowInputParameter::horizontal_stride() const {
  // @@protoc_insertion_point(field_get:caffe.SlidingWindowInputParameter.horizontal_stride)
  return horizontal_stride_;
}
inline void SlidingWindowInputParameter::set_horizontal_stride(::google::protobuf::int32 value) {
  set_has_horizontal_stride();
  horizontal_stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.SlidingWindowInputParameter.horizontal_stride)
}

// required int32 vertical_stride = 4;
inline bool SlidingWindowInputParameter::has_vertical_stride() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SlidingWindowInputParameter::set_has_vertical_stride() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SlidingWindowInputParameter::clear_has_vertical_stride() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SlidingWindowInputParameter::clear_vertical_stride() {
  vertical_stride_ = 0;
  clear_has_vertical_stride();
}
inline ::google::protobuf::int32 SlidingWindowInputParameter::vertical_stride() const {
  // @@protoc_insertion_point(field_get:caffe.SlidingWindowInputParameter.vertical_stride)
  return vertical_stride_;
}
inline void SlidingWindowInputParameter::set_vertical_stride(::google::protobuf::int32 value) {
  set_has_vertical_stride();
  vertical_stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.SlidingWindowInputParameter.vertical_stride)
}

// optional bool window_normalization = 5 [default = true];
inline bool SlidingWindowInputParameter::has_window_normalization() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SlidingWindowInputParameter::set_has_window_normalization() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SlidingWindowInputParameter::clear_has_window_normalization() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SlidingWindowInputParameter::clear_window_normalization() {
  window_normalization_ = true;
  clear_has_window_normalization();
}
inline bool SlidingWindowInputParameter::window_normalization() const {
  // @@protoc_insertion_point(field_get:caffe.SlidingWindowInputParameter.window_normalization)
  return window_normalization_;
}
inline void SlidingWindowInputParameter::set_window_normalization(bool value) {
  set_has_window_normalization();
  window_normalization_ = value;
  // @@protoc_insertion_point(field_set:caffe.SlidingWindowInputParameter.window_normalization)
}

inline const SlidingWindowInputParameter* SlidingWindowInputParameter::internal_default_instance() {
  return &SlidingWindowInputParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// BBoxToGridAndSizeParameter

// repeated float x_grid = 1;
inline int BBoxToGridAndSizeParameter::x_grid_size() const {
  return x_grid_.size();
}
inline void BBoxToGridAndSizeParameter::clear_x_grid() {
  x_grid_.Clear();
}
inline float BBoxToGridAndSizeParameter::x_grid(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BBoxToGridAndSizeParameter.x_grid)
  return x_grid_.Get(index);
}
inline void BBoxToGridAndSizeParameter::set_x_grid(int index, float value) {
  x_grid_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BBoxToGridAndSizeParameter.x_grid)
}
inline void BBoxToGridAndSizeParameter::add_x_grid(float value) {
  x_grid_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BBoxToGridAndSizeParameter.x_grid)
}
inline const ::google::protobuf::RepeatedField< float >&
BBoxToGridAndSizeParameter::x_grid() const {
  // @@protoc_insertion_point(field_list:caffe.BBoxToGridAndSizeParameter.x_grid)
  return x_grid_;
}
inline ::google::protobuf::RepeatedField< float >*
BBoxToGridAndSizeParameter::mutable_x_grid() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BBoxToGridAndSizeParameter.x_grid)
  return &x_grid_;
}

// repeated float y_grid = 2;
inline int BBoxToGridAndSizeParameter::y_grid_size() const {
  return y_grid_.size();
}
inline void BBoxToGridAndSizeParameter::clear_y_grid() {
  y_grid_.Clear();
}
inline float BBoxToGridAndSizeParameter::y_grid(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BBoxToGridAndSizeParameter.y_grid)
  return y_grid_.Get(index);
}
inline void BBoxToGridAndSizeParameter::set_y_grid(int index, float value) {
  y_grid_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BBoxToGridAndSizeParameter.y_grid)
}
inline void BBoxToGridAndSizeParameter::add_y_grid(float value) {
  y_grid_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BBoxToGridAndSizeParameter.y_grid)
}
inline const ::google::protobuf::RepeatedField< float >&
BBoxToGridAndSizeParameter::y_grid() const {
  // @@protoc_insertion_point(field_list:caffe.BBoxToGridAndSizeParameter.y_grid)
  return y_grid_;
}
inline ::google::protobuf::RepeatedField< float >*
BBoxToGridAndSizeParameter::mutable_y_grid() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BBoxToGridAndSizeParameter.y_grid)
  return &y_grid_;
}

// repeated float size_grid = 3;
inline int BBoxToGridAndSizeParameter::size_grid_size() const {
  return size_grid_.size();
}
inline void BBoxToGridAndSizeParameter::clear_size_grid() {
  size_grid_.Clear();
}
inline float BBoxToGridAndSizeParameter::size_grid(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BBoxToGridAndSizeParameter.size_grid)
  return size_grid_.Get(index);
}
inline void BBoxToGridAndSizeParameter::set_size_grid(int index, float value) {
  size_grid_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BBoxToGridAndSizeParameter.size_grid)
}
inline void BBoxToGridAndSizeParameter::add_size_grid(float value) {
  size_grid_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BBoxToGridAndSizeParameter.size_grid)
}
inline const ::google::protobuf::RepeatedField< float >&
BBoxToGridAndSizeParameter::size_grid() const {
  // @@protoc_insertion_point(field_list:caffe.BBoxToGridAndSizeParameter.size_grid)
  return size_grid_;
}
inline ::google::protobuf::RepeatedField< float >*
BBoxToGridAndSizeParameter::mutable_size_grid() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BBoxToGridAndSizeParameter.size_grid)
  return &size_grid_;
}

inline const BBoxToGridAndSizeParameter* BBoxToGridAndSizeParameter::internal_default_instance() {
  return &BBoxToGridAndSizeParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// SizeUnitParameter

// required float unit = 1;
inline bool SizeUnitParameter::has_unit() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SizeUnitParameter::set_has_unit() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SizeUnitParameter::clear_has_unit() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SizeUnitParameter::clear_unit() {
  unit_ = 0;
  clear_has_unit();
}
inline float SizeUnitParameter::unit() const {
  // @@protoc_insertion_point(field_get:caffe.SizeUnitParameter.unit)
  return unit_;
}
inline void SizeUnitParameter::set_unit(float value) {
  set_has_unit();
  unit_ = value;
  // @@protoc_insertion_point(field_set:caffe.SizeUnitParameter.unit)
}

inline const SizeUnitParameter* SizeUnitParameter::internal_default_instance() {
  return &SizeUnitParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// PaddingParameter

// optional .caffe.PaddingParameter.PaddingType type = 1 [default = ZERO];
inline bool PaddingParameter::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PaddingParameter::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PaddingParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PaddingParameter::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::caffe::PaddingParameter_PaddingType PaddingParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.PaddingParameter.type)
  return static_cast< ::caffe::PaddingParameter_PaddingType >(type_);
}
inline void PaddingParameter::set_type(::caffe::PaddingParameter_PaddingType value) {
  assert(::caffe::PaddingParameter_PaddingType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:caffe.PaddingParameter.type)
}

// optional uint32 pad_up = 2 [default = 0];
inline bool PaddingParameter::has_pad_up() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PaddingParameter::set_has_pad_up() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PaddingParameter::clear_has_pad_up() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PaddingParameter::clear_pad_up() {
  pad_up_ = 0u;
  clear_has_pad_up();
}
inline ::google::protobuf::uint32 PaddingParameter::pad_up() const {
  // @@protoc_insertion_point(field_get:caffe.PaddingParameter.pad_up)
  return pad_up_;
}
inline void PaddingParameter::set_pad_up(::google::protobuf::uint32 value) {
  set_has_pad_up();
  pad_up_ = value;
  // @@protoc_insertion_point(field_set:caffe.PaddingParameter.pad_up)
}

// optional uint32 pad_down = 3 [default = 0];
inline bool PaddingParameter::has_pad_down() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PaddingParameter::set_has_pad_down() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PaddingParameter::clear_has_pad_down() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PaddingParameter::clear_pad_down() {
  pad_down_ = 0u;
  clear_has_pad_down();
}
inline ::google::protobuf::uint32 PaddingParameter::pad_down() const {
  // @@protoc_insertion_point(field_get:caffe.PaddingParameter.pad_down)
  return pad_down_;
}
inline void PaddingParameter::set_pad_down(::google::protobuf::uint32 value) {
  set_has_pad_down();
  pad_down_ = value;
  // @@protoc_insertion_point(field_set:caffe.PaddingParameter.pad_down)
}

// optional uint32 pad_left = 4 [default = 0];
inline bool PaddingParameter::has_pad_left() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PaddingParameter::set_has_pad_left() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PaddingParameter::clear_has_pad_left() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PaddingParameter::clear_pad_left() {
  pad_left_ = 0u;
  clear_has_pad_left();
}
inline ::google::protobuf::uint32 PaddingParameter::pad_left() const {
  // @@protoc_insertion_point(field_get:caffe.PaddingParameter.pad_left)
  return pad_left_;
}
inline void PaddingParameter::set_pad_left(::google::protobuf::uint32 value) {
  set_has_pad_left();
  pad_left_ = value;
  // @@protoc_insertion_point(field_set:caffe.PaddingParameter.pad_left)
}

// optional uint32 pad_right = 5 [default = 0];
inline bool PaddingParameter::has_pad_right() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PaddingParameter::set_has_pad_right() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PaddingParameter::clear_has_pad_right() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PaddingParameter::clear_pad_right() {
  pad_right_ = 0u;
  clear_has_pad_right();
}
inline ::google::protobuf::uint32 PaddingParameter::pad_right() const {
  // @@protoc_insertion_point(field_get:caffe.PaddingParameter.pad_right)
  return pad_right_;
}
inline void PaddingParameter::set_pad_right(::google::protobuf::uint32 value) {
  set_has_pad_right();
  pad_right_ = value;
  // @@protoc_insertion_point(field_set:caffe.PaddingParameter.pad_right)
}

inline const PaddingParameter* PaddingParameter::internal_default_instance() {
  return &PaddingParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// Point2i

// required int32 x = 1;
inline bool Point2i::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Point2i::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Point2i::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Point2i::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 Point2i::x() const {
  // @@protoc_insertion_point(field_get:caffe.Point2i.x)
  return x_;
}
inline void Point2i::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:caffe.Point2i.x)
}

// required int32 y = 2;
inline bool Point2i::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Point2i::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Point2i::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Point2i::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 Point2i::y() const {
  // @@protoc_insertion_point(field_get:caffe.Point2i.y)
  return y_;
}
inline void Point2i::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:caffe.Point2i.y)
}

inline const Point2i* Point2i::internal_default_instance() {
  return &Point2i_default_instance_.get();
}
// -------------------------------------------------------------------

// Point2f

// required float x = 1;
inline bool Point2f::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Point2f::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Point2f::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Point2f::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Point2f::x() const {
  // @@protoc_insertion_point(field_get:caffe.Point2f.x)
  return x_;
}
inline void Point2f::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:caffe.Point2f.x)
}

// required float y = 2;
inline bool Point2f::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Point2f::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Point2f::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Point2f::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Point2f::y() const {
  // @@protoc_insertion_point(field_get:caffe.Point2f.y)
  return y_;
}
inline void Point2f::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:caffe.Point2f.y)
}

inline const Point2f* Point2f::internal_default_instance() {
  return &Point2f_default_instance_.get();
}
// -------------------------------------------------------------------

// Size2i

// required uint32 width = 1;
inline bool Size2i::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Size2i::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Size2i::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Size2i::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 Size2i::width() const {
  // @@protoc_insertion_point(field_get:caffe.Size2i.width)
  return width_;
}
inline void Size2i::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.Size2i.width)
}

// required uint32 height = 2;
inline bool Size2i::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Size2i::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Size2i::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Size2i::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 Size2i::height() const {
  // @@protoc_insertion_point(field_get:caffe.Size2i.height)
  return height_;
}
inline void Size2i::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.Size2i.height)
}

inline const Size2i* Size2i::internal_default_instance() {
  return &Size2i_default_instance_.get();
}
// -------------------------------------------------------------------

// Size2f

// required float width = 1;
inline bool Size2f::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Size2f::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Size2f::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Size2f::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline float Size2f::width() const {
  // @@protoc_insertion_point(field_get:caffe.Size2f.width)
  return width_;
}
inline void Size2f::set_width(float value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.Size2f.width)
}

// required float height = 2;
inline bool Size2f::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Size2f::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Size2f::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Size2f::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline float Size2f::height() const {
  // @@protoc_insertion_point(field_get:caffe.Size2f.height)
  return height_;
}
inline void Size2f::set_height(float value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.Size2f.height)
}

inline const Size2f* Size2f::internal_default_instance() {
  return &Size2f_default_instance_.get();
}
// -------------------------------------------------------------------

// Rect2f

// required .caffe.Point2f top_left = 1;
inline bool Rect2f::has_top_left() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Rect2f::set_has_top_left() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Rect2f::clear_has_top_left() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Rect2f::clear_top_left() {
  if (top_left_ != NULL) top_left_->::caffe::Point2f::Clear();
  clear_has_top_left();
}
inline const ::caffe::Point2f& Rect2f::top_left() const {
  // @@protoc_insertion_point(field_get:caffe.Rect2f.top_left)
  return top_left_ != NULL ? *top_left_
                         : *::caffe::Point2f::internal_default_instance();
}
inline ::caffe::Point2f* Rect2f::mutable_top_left() {
  set_has_top_left();
  if (top_left_ == NULL) {
    top_left_ = new ::caffe::Point2f;
  }
  // @@protoc_insertion_point(field_mutable:caffe.Rect2f.top_left)
  return top_left_;
}
inline ::caffe::Point2f* Rect2f::release_top_left() {
  // @@protoc_insertion_point(field_release:caffe.Rect2f.top_left)
  clear_has_top_left();
  ::caffe::Point2f* temp = top_left_;
  top_left_ = NULL;
  return temp;
}
inline void Rect2f::set_allocated_top_left(::caffe::Point2f* top_left) {
  delete top_left_;
  top_left_ = top_left;
  if (top_left) {
    set_has_top_left();
  } else {
    clear_has_top_left();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.Rect2f.top_left)
}

// required .caffe.Size2f size = 2;
inline bool Rect2f::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Rect2f::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Rect2f::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Rect2f::clear_size() {
  if (size_ != NULL) size_->::caffe::Size2f::Clear();
  clear_has_size();
}
inline const ::caffe::Size2f& Rect2f::size() const {
  // @@protoc_insertion_point(field_get:caffe.Rect2f.size)
  return size_ != NULL ? *size_
                         : *::caffe::Size2f::internal_default_instance();
}
inline ::caffe::Size2f* Rect2f::mutable_size() {
  set_has_size();
  if (size_ == NULL) {
    size_ = new ::caffe::Size2f;
  }
  // @@protoc_insertion_point(field_mutable:caffe.Rect2f.size)
  return size_;
}
inline ::caffe::Size2f* Rect2f::release_size() {
  // @@protoc_insertion_point(field_release:caffe.Rect2f.size)
  clear_has_size();
  ::caffe::Size2f* temp = size_;
  size_ = NULL;
  return temp;
}
inline void Rect2f::set_allocated_size(::caffe::Size2f* size) {
  delete size_;
  size_ = size;
  if (size) {
    set_has_size();
  } else {
    clear_has_size();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.Rect2f.size)
}

inline const Rect2f* Rect2f::internal_default_instance() {
  return &Rect2f_default_instance_.get();
}
// -------------------------------------------------------------------

// Rect2i

// required .caffe.Point2i top_left = 1;
inline bool Rect2i::has_top_left() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Rect2i::set_has_top_left() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Rect2i::clear_has_top_left() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Rect2i::clear_top_left() {
  if (top_left_ != NULL) top_left_->::caffe::Point2i::Clear();
  clear_has_top_left();
}
inline const ::caffe::Point2i& Rect2i::top_left() const {
  // @@protoc_insertion_point(field_get:caffe.Rect2i.top_left)
  return top_left_ != NULL ? *top_left_
                         : *::caffe::Point2i::internal_default_instance();
}
inline ::caffe::Point2i* Rect2i::mutable_top_left() {
  set_has_top_left();
  if (top_left_ == NULL) {
    top_left_ = new ::caffe::Point2i;
  }
  // @@protoc_insertion_point(field_mutable:caffe.Rect2i.top_left)
  return top_left_;
}
inline ::caffe::Point2i* Rect2i::release_top_left() {
  // @@protoc_insertion_point(field_release:caffe.Rect2i.top_left)
  clear_has_top_left();
  ::caffe::Point2i* temp = top_left_;
  top_left_ = NULL;
  return temp;
}
inline void Rect2i::set_allocated_top_left(::caffe::Point2i* top_left) {
  delete top_left_;
  top_left_ = top_left;
  if (top_left) {
    set_has_top_left();
  } else {
    clear_has_top_left();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.Rect2i.top_left)
}

// required .caffe.Size2i size = 2;
inline bool Rect2i::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Rect2i::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Rect2i::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Rect2i::clear_size() {
  if (size_ != NULL) size_->::caffe::Size2i::Clear();
  clear_has_size();
}
inline const ::caffe::Size2i& Rect2i::size() const {
  // @@protoc_insertion_point(field_get:caffe.Rect2i.size)
  return size_ != NULL ? *size_
                         : *::caffe::Size2i::internal_default_instance();
}
inline ::caffe::Size2i* Rect2i::mutable_size() {
  set_has_size();
  if (size_ == NULL) {
    size_ = new ::caffe::Size2i;
  }
  // @@protoc_insertion_point(field_mutable:caffe.Rect2i.size)
  return size_;
}
inline ::caffe::Size2i* Rect2i::release_size() {
  // @@protoc_insertion_point(field_release:caffe.Rect2i.size)
  clear_has_size();
  ::caffe::Size2i* temp = size_;
  size_ = NULL;
  return temp;
}
inline void Rect2i::set_allocated_size(::caffe::Size2i* size) {
  delete size_;
  size_ = size;
  if (size) {
    set_has_size();
  } else {
    clear_has_size();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.Rect2i.size)
}

inline const Rect2i* Rect2i::internal_default_instance() {
  return &Rect2i_default_instance_.get();
}
// -------------------------------------------------------------------

// ActivationRegionParameter

// optional .caffe.ActivationRegionParameter.ActivationMethod method = 1 [default = WHOLE];
inline bool ActivationRegionParameter::has_method() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivationRegionParameter::set_has_method() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActivationRegionParameter::clear_has_method() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActivationRegionParameter::clear_method() {
  method_ = 1;
  clear_has_method();
}
inline ::caffe::ActivationRegionParameter_ActivationMethod ActivationRegionParameter::method() const {
  // @@protoc_insertion_point(field_get:caffe.ActivationRegionParameter.method)
  return static_cast< ::caffe::ActivationRegionParameter_ActivationMethod >(method_);
}
inline void ActivationRegionParameter::set_method(::caffe::ActivationRegionParameter_ActivationMethod value) {
  assert(::caffe::ActivationRegionParameter_ActivationMethod_IsValid(value));
  set_has_method();
  method_ = value;
  // @@protoc_insertion_point(field_set:caffe.ActivationRegionParameter.method)
}

// optional .caffe.Rect2i region = 2;
inline bool ActivationRegionParameter::has_region() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActivationRegionParameter::set_has_region() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActivationRegionParameter::clear_has_region() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActivationRegionParameter::clear_region() {
  if (region_ != NULL) region_->::caffe::Rect2i::Clear();
  clear_has_region();
}
inline const ::caffe::Rect2i& ActivationRegionParameter::region() const {
  // @@protoc_insertion_point(field_get:caffe.ActivationRegionParameter.region)
  return region_ != NULL ? *region_
                         : *::caffe::Rect2i::internal_default_instance();
}
inline ::caffe::Rect2i* ActivationRegionParameter::mutable_region() {
  set_has_region();
  if (region_ == NULL) {
    region_ = new ::caffe::Rect2i;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ActivationRegionParameter.region)
  return region_;
}
inline ::caffe::Rect2i* ActivationRegionParameter::release_region() {
  // @@protoc_insertion_point(field_release:caffe.ActivationRegionParameter.region)
  clear_has_region();
  ::caffe::Rect2i* temp = region_;
  region_ = NULL;
  return temp;
}
inline void ActivationRegionParameter::set_allocated_region(::caffe::Rect2i* region) {
  delete region_;
  region_ = region;
  if (region) {
    set_has_region();
  } else {
    clear_has_region();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ActivationRegionParameter.region)
}

inline const ActivationRegionParameter* ActivationRegionParameter::internal_default_instance() {
  return &ActivationRegionParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// GTMapDataParameter

// required .caffe.Size2i receptive_field = 1;
inline bool GTMapDataParameter::has_receptive_field() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GTMapDataParameter::set_has_receptive_field() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GTMapDataParameter::clear_has_receptive_field() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GTMapDataParameter::clear_receptive_field() {
  if (receptive_field_ != NULL) receptive_field_->::caffe::Size2i::Clear();
  clear_has_receptive_field();
}
inline const ::caffe::Size2i& GTMapDataParameter::receptive_field() const {
  // @@protoc_insertion_point(field_get:caffe.GTMapDataParameter.receptive_field)
  return receptive_field_ != NULL ? *receptive_field_
                         : *::caffe::Size2i::internal_default_instance();
}
inline ::caffe::Size2i* GTMapDataParameter::mutable_receptive_field() {
  set_has_receptive_field();
  if (receptive_field_ == NULL) {
    receptive_field_ = new ::caffe::Size2i;
  }
  // @@protoc_insertion_point(field_mutable:caffe.GTMapDataParameter.receptive_field)
  return receptive_field_;
}
inline ::caffe::Size2i* GTMapDataParameter::release_receptive_field() {
  // @@protoc_insertion_point(field_release:caffe.GTMapDataParameter.receptive_field)
  clear_has_receptive_field();
  ::caffe::Size2i* temp = receptive_field_;
  receptive_field_ = NULL;
  return temp;
}
inline void GTMapDataParameter::set_allocated_receptive_field(::caffe::Size2i* receptive_field) {
  delete receptive_field_;
  receptive_field_ = receptive_field;
  if (receptive_field) {
    set_has_receptive_field();
  } else {
    clear_has_receptive_field();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.GTMapDataParameter.receptive_field)
}

// required uint32 horizontal_stride = 2;
inline bool GTMapDataParameter::has_horizontal_stride() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GTMapDataParameter::set_has_horizontal_stride() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GTMapDataParameter::clear_has_horizontal_stride() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GTMapDataParameter::clear_horizontal_stride() {
  horizontal_stride_ = 0u;
  clear_has_horizontal_stride();
}
inline ::google::protobuf::uint32 GTMapDataParameter::horizontal_stride() const {
  // @@protoc_insertion_point(field_get:caffe.GTMapDataParameter.horizontal_stride)
  return horizontal_stride_;
}
inline void GTMapDataParameter::set_horizontal_stride(::google::protobuf::uint32 value) {
  set_has_horizontal_stride();
  horizontal_stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.GTMapDataParameter.horizontal_stride)
}

// required uint32 vertical_stride = 3;
inline bool GTMapDataParameter::has_vertical_stride() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GTMapDataParameter::set_has_vertical_stride() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GTMapDataParameter::clear_has_vertical_stride() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GTMapDataParameter::clear_vertical_stride() {
  vertical_stride_ = 0u;
  clear_has_vertical_stride();
}
inline ::google::protobuf::uint32 GTMapDataParameter::vertical_stride() const {
  // @@protoc_insertion_point(field_get:caffe.GTMapDataParameter.vertical_stride)
  return vertical_stride_;
}
inline void GTMapDataParameter::set_vertical_stride(::google::protobuf::uint32 value) {
  set_has_vertical_stride();
  vertical_stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.GTMapDataParameter.vertical_stride)
}

// optional .caffe.ActivationRegionParameter activation_region_param = 4;
inline bool GTMapDataParameter::has_activation_region_param() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GTMapDataParameter::set_has_activation_region_param() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GTMapDataParameter::clear_has_activation_region_param() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GTMapDataParameter::clear_activation_region_param() {
  if (activation_region_param_ != NULL) activation_region_param_->::caffe::ActivationRegionParameter::Clear();
  clear_has_activation_region_param();
}
inline const ::caffe::ActivationRegionParameter& GTMapDataParameter::activation_region_param() const {
  // @@protoc_insertion_point(field_get:caffe.GTMapDataParameter.activation_region_param)
  return activation_region_param_ != NULL ? *activation_region_param_
                         : *::caffe::ActivationRegionParameter::internal_default_instance();
}
inline ::caffe::ActivationRegionParameter* GTMapDataParameter::mutable_activation_region_param() {
  set_has_activation_region_param();
  if (activation_region_param_ == NULL) {
    activation_region_param_ = new ::caffe::ActivationRegionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.GTMapDataParameter.activation_region_param)
  return activation_region_param_;
}
inline ::caffe::ActivationRegionParameter* GTMapDataParameter::release_activation_region_param() {
  // @@protoc_insertion_point(field_release:caffe.GTMapDataParameter.activation_region_param)
  clear_has_activation_region_param();
  ::caffe::ActivationRegionParameter* temp = activation_region_param_;
  activation_region_param_ = NULL;
  return temp;
}
inline void GTMapDataParameter::set_allocated_activation_region_param(::caffe::ActivationRegionParameter* activation_region_param) {
  delete activation_region_param_;
  activation_region_param_ = activation_region_param;
  if (activation_region_param) {
    set_has_activation_region_param();
  } else {
    clear_has_activation_region_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.GTMapDataParameter.activation_region_param)
}

// required bool patch_offset_normalization = 5;
inline bool GTMapDataParameter::has_patch_offset_normalization() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GTMapDataParameter::set_has_patch_offset_normalization() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GTMapDataParameter::clear_has_patch_offset_normalization() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GTMapDataParameter::clear_patch_offset_normalization() {
  patch_offset_normalization_ = false;
  clear_has_patch_offset_normalization();
}
inline bool GTMapDataParameter::patch_offset_normalization() const {
  // @@protoc_insertion_point(field_get:caffe.GTMapDataParameter.patch_offset_normalization)
  return patch_offset_normalization_;
}
inline void GTMapDataParameter::set_patch_offset_normalization(bool value) {
  set_has_patch_offset_normalization();
  patch_offset_normalization_ = value;
  // @@protoc_insertion_point(field_set:caffe.GTMapDataParameter.patch_offset_normalization)
}

// required bool bbox_normalization = 6;
inline bool GTMapDataParameter::has_bbox_normalization() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GTMapDataParameter::set_has_bbox_normalization() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GTMapDataParameter::clear_has_bbox_normalization() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GTMapDataParameter::clear_bbox_normalization() {
  bbox_normalization_ = false;
  clear_has_bbox_normalization();
}
inline bool GTMapDataParameter::bbox_normalization() const {
  // @@protoc_insertion_point(field_get:caffe.GTMapDataParameter.bbox_normalization)
  return bbox_normalization_;
}
inline void GTMapDataParameter::set_bbox_normalization(bool value) {
  set_has_bbox_normalization();
  bbox_normalization_ = value;
  // @@protoc_insertion_point(field_set:caffe.GTMapDataParameter.bbox_normalization)
}

inline const GTMapDataParameter* GTMapDataParameter::internal_default_instance() {
  return &GTMapDataParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// LabelDiffIgnoreParameter

// repeated uint32 ignore_label = 1;
inline int LabelDiffIgnoreParameter::ignore_label_size() const {
  return ignore_label_.size();
}
inline void LabelDiffIgnoreParameter::clear_ignore_label() {
  ignore_label_.Clear();
}
inline ::google::protobuf::uint32 LabelDiffIgnoreParameter::ignore_label(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LabelDiffIgnoreParameter.ignore_label)
  return ignore_label_.Get(index);
}
inline void LabelDiffIgnoreParameter::set_ignore_label(int index, ::google::protobuf::uint32 value) {
  ignore_label_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.LabelDiffIgnoreParameter.ignore_label)
}
inline void LabelDiffIgnoreParameter::add_ignore_label(::google::protobuf::uint32 value) {
  ignore_label_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.LabelDiffIgnoreParameter.ignore_label)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
LabelDiffIgnoreParameter::ignore_label() const {
  // @@protoc_insertion_point(field_list:caffe.LabelDiffIgnoreParameter.ignore_label)
  return ignore_label_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
LabelDiffIgnoreParameter::mutable_ignore_label() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LabelDiffIgnoreParameter.ignore_label)
  return &ignore_label_;
}

// repeated float ignore_rate = 2;
inline int LabelDiffIgnoreParameter::ignore_rate_size() const {
  return ignore_rate_.size();
}
inline void LabelDiffIgnoreParameter::clear_ignore_rate() {
  ignore_rate_.Clear();
}
inline float LabelDiffIgnoreParameter::ignore_rate(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LabelDiffIgnoreParameter.ignore_rate)
  return ignore_rate_.Get(index);
}
inline void LabelDiffIgnoreParameter::set_ignore_rate(int index, float value) {
  ignore_rate_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.LabelDiffIgnoreParameter.ignore_rate)
}
inline void LabelDiffIgnoreParameter::add_ignore_rate(float value) {
  ignore_rate_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.LabelDiffIgnoreParameter.ignore_rate)
}
inline const ::google::protobuf::RepeatedField< float >&
LabelDiffIgnoreParameter::ignore_rate() const {
  // @@protoc_insertion_point(field_list:caffe.LabelDiffIgnoreParameter.ignore_rate)
  return ignore_rate_;
}
inline ::google::protobuf::RepeatedField< float >*
LabelDiffIgnoreParameter::mutable_ignore_rate() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LabelDiffIgnoreParameter.ignore_rate)
  return &ignore_rate_;
}

// optional bool elem_wise = 3 [default = true];
inline bool LabelDiffIgnoreParameter::has_elem_wise() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LabelDiffIgnoreParameter::set_has_elem_wise() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LabelDiffIgnoreParameter::clear_has_elem_wise() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LabelDiffIgnoreParameter::clear_elem_wise() {
  elem_wise_ = true;
  clear_has_elem_wise();
}
inline bool LabelDiffIgnoreParameter::elem_wise() const {
  // @@protoc_insertion_point(field_get:caffe.LabelDiffIgnoreParameter.elem_wise)
  return elem_wise_;
}
inline void LabelDiffIgnoreParameter::set_elem_wise(bool value) {
  set_has_elem_wise();
  elem_wise_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelDiffIgnoreParameter.elem_wise)
}

inline const LabelDiffIgnoreParameter* LabelDiffIgnoreParameter::internal_default_instance() {
  return &LabelDiffIgnoreParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// OffsetParameter

// optional .caffe.OffsetParameter.Anchor origin = 1 [default = TOP_LEFT];
inline bool OffsetParameter::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OffsetParameter::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OffsetParameter::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OffsetParameter::clear_origin() {
  origin_ = 1;
  clear_has_origin();
}
inline ::caffe::OffsetParameter_Anchor OffsetParameter::origin() const {
  // @@protoc_insertion_point(field_get:caffe.OffsetParameter.origin)
  return static_cast< ::caffe::OffsetParameter_Anchor >(origin_);
}
inline void OffsetParameter::set_origin(::caffe::OffsetParameter_Anchor value) {
  assert(::caffe::OffsetParameter_Anchor_IsValid(value));
  set_has_origin();
  origin_ = value;
  // @@protoc_insertion_point(field_set:caffe.OffsetParameter.origin)
}

// optional .caffe.OffsetParameter.Anchor anchor = 2 [default = TOP_LEFT];
inline bool OffsetParameter::has_anchor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OffsetParameter::set_has_anchor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OffsetParameter::clear_has_anchor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OffsetParameter::clear_anchor() {
  anchor_ = 1;
  clear_has_anchor();
}
inline ::caffe::OffsetParameter_Anchor OffsetParameter::anchor() const {
  // @@protoc_insertion_point(field_get:caffe.OffsetParameter.anchor)
  return static_cast< ::caffe::OffsetParameter_Anchor >(anchor_);
}
inline void OffsetParameter::set_anchor(::caffe::OffsetParameter_Anchor value) {
  assert(::caffe::OffsetParameter_Anchor_IsValid(value));
  set_has_anchor();
  anchor_ = value;
  // @@protoc_insertion_point(field_set:caffe.OffsetParameter.anchor)
}

// optional bool normalize = 3 [default = true];
inline bool OffsetParameter::has_normalize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OffsetParameter::set_has_normalize() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OffsetParameter::clear_has_normalize() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OffsetParameter::clear_normalize() {
  normalize_ = true;
  clear_has_normalize();
}
inline bool OffsetParameter::normalize() const {
  // @@protoc_insertion_point(field_get:caffe.OffsetParameter.normalize)
  return normalize_;
}
inline void OffsetParameter::set_normalize(bool value) {
  set_has_normalize();
  normalize_ = value;
  // @@protoc_insertion_point(field_set:caffe.OffsetParameter.normalize)
}

inline const OffsetParameter* OffsetParameter::internal_default_instance() {
  return &OffsetParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// GTSubmapDataParameter

// required uint32 submap_batch_size = 1;
inline bool GTSubmapDataParameter::has_submap_batch_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GTSubmapDataParameter::set_has_submap_batch_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GTSubmapDataParameter::clear_has_submap_batch_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GTSubmapDataParameter::clear_submap_batch_size() {
  submap_batch_size_ = 0u;
  clear_has_submap_batch_size();
}
inline ::google::protobuf::uint32 GTSubmapDataParameter::submap_batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.GTSubmapDataParameter.submap_batch_size)
  return submap_batch_size_;
}
inline void GTSubmapDataParameter::set_submap_batch_size(::google::protobuf::uint32 value) {
  set_has_submap_batch_size();
  submap_batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.GTSubmapDataParameter.submap_batch_size)
}

// required .caffe.Size2i submap_size = 2;
inline bool GTSubmapDataParameter::has_submap_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GTSubmapDataParameter::set_has_submap_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GTSubmapDataParameter::clear_has_submap_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GTSubmapDataParameter::clear_submap_size() {
  if (submap_size_ != NULL) submap_size_->::caffe::Size2i::Clear();
  clear_has_submap_size();
}
inline const ::caffe::Size2i& GTSubmapDataParameter::submap_size() const {
  // @@protoc_insertion_point(field_get:caffe.GTSubmapDataParameter.submap_size)
  return submap_size_ != NULL ? *submap_size_
                         : *::caffe::Size2i::internal_default_instance();
}
inline ::caffe::Size2i* GTSubmapDataParameter::mutable_submap_size() {
  set_has_submap_size();
  if (submap_size_ == NULL) {
    submap_size_ = new ::caffe::Size2i;
  }
  // @@protoc_insertion_point(field_mutable:caffe.GTSubmapDataParameter.submap_size)
  return submap_size_;
}
inline ::caffe::Size2i* GTSubmapDataParameter::release_submap_size() {
  // @@protoc_insertion_point(field_release:caffe.GTSubmapDataParameter.submap_size)
  clear_has_submap_size();
  ::caffe::Size2i* temp = submap_size_;
  submap_size_ = NULL;
  return temp;
}
inline void GTSubmapDataParameter::set_allocated_submap_size(::caffe::Size2i* submap_size) {
  delete submap_size_;
  submap_size_ = submap_size;
  if (submap_size) {
    set_has_submap_size();
  } else {
    clear_has_submap_size();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.GTSubmapDataParameter.submap_size)
}

// required .caffe.Size2i receptive_field = 3;
inline bool GTSubmapDataParameter::has_receptive_field() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GTSubmapDataParameter::set_has_receptive_field() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GTSubmapDataParameter::clear_has_receptive_field() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GTSubmapDataParameter::clear_receptive_field() {
  if (receptive_field_ != NULL) receptive_field_->::caffe::Size2i::Clear();
  clear_has_receptive_field();
}
inline const ::caffe::Size2i& GTSubmapDataParameter::receptive_field() const {
  // @@protoc_insertion_point(field_get:caffe.GTSubmapDataParameter.receptive_field)
  return receptive_field_ != NULL ? *receptive_field_
                         : *::caffe::Size2i::internal_default_instance();
}
inline ::caffe::Size2i* GTSubmapDataParameter::mutable_receptive_field() {
  set_has_receptive_field();
  if (receptive_field_ == NULL) {
    receptive_field_ = new ::caffe::Size2i;
  }
  // @@protoc_insertion_point(field_mutable:caffe.GTSubmapDataParameter.receptive_field)
  return receptive_field_;
}
inline ::caffe::Size2i* GTSubmapDataParameter::release_receptive_field() {
  // @@protoc_insertion_point(field_release:caffe.GTSubmapDataParameter.receptive_field)
  clear_has_receptive_field();
  ::caffe::Size2i* temp = receptive_field_;
  receptive_field_ = NULL;
  return temp;
}
inline void GTSubmapDataParameter::set_allocated_receptive_field(::caffe::Size2i* receptive_field) {
  delete receptive_field_;
  receptive_field_ = receptive_field;
  if (receptive_field) {
    set_has_receptive_field();
  } else {
    clear_has_receptive_field();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.GTSubmapDataParameter.receptive_field)
}

// required uint32 horizontal_stride = 4;
inline bool GTSubmapDataParameter::has_horizontal_stride() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GTSubmapDataParameter::set_has_horizontal_stride() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GTSubmapDataParameter::clear_has_horizontal_stride() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GTSubmapDataParameter::clear_horizontal_stride() {
  horizontal_stride_ = 0u;
  clear_has_horizontal_stride();
}
inline ::google::protobuf::uint32 GTSubmapDataParameter::horizontal_stride() const {
  // @@protoc_insertion_point(field_get:caffe.GTSubmapDataParameter.horizontal_stride)
  return horizontal_stride_;
}
inline void GTSubmapDataParameter::set_horizontal_stride(::google::protobuf::uint32 value) {
  set_has_horizontal_stride();
  horizontal_stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.GTSubmapDataParameter.horizontal_stride)
}

// required uint32 vertical_stride = 5;
inline bool GTSubmapDataParameter::has_vertical_stride() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GTSubmapDataParameter::set_has_vertical_stride() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GTSubmapDataParameter::clear_has_vertical_stride() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GTSubmapDataParameter::clear_vertical_stride() {
  vertical_stride_ = 0u;
  clear_has_vertical_stride();
}
inline ::google::protobuf::uint32 GTSubmapDataParameter::vertical_stride() const {
  // @@protoc_insertion_point(field_get:caffe.GTSubmapDataParameter.vertical_stride)
  return vertical_stride_;
}
inline void GTSubmapDataParameter::set_vertical_stride(::google::protobuf::uint32 value) {
  set_has_vertical_stride();
  vertical_stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.GTSubmapDataParameter.vertical_stride)
}

// optional .caffe.ActivationRegionParameter activation_region_param = 6;
inline bool GTSubmapDataParameter::has_activation_region_param() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GTSubmapDataParameter::set_has_activation_region_param() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GTSubmapDataParameter::clear_has_activation_region_param() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GTSubmapDataParameter::clear_activation_region_param() {
  if (activation_region_param_ != NULL) activation_region_param_->::caffe::ActivationRegionParameter::Clear();
  clear_has_activation_region_param();
}
inline const ::caffe::ActivationRegionParameter& GTSubmapDataParameter::activation_region_param() const {
  // @@protoc_insertion_point(field_get:caffe.GTSubmapDataParameter.activation_region_param)
  return activation_region_param_ != NULL ? *activation_region_param_
                         : *::caffe::ActivationRegionParameter::internal_default_instance();
}
inline ::caffe::ActivationRegionParameter* GTSubmapDataParameter::mutable_activation_region_param() {
  set_has_activation_region_param();
  if (activation_region_param_ == NULL) {
    activation_region_param_ = new ::caffe::ActivationRegionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.GTSubmapDataParameter.activation_region_param)
  return activation_region_param_;
}
inline ::caffe::ActivationRegionParameter* GTSubmapDataParameter::release_activation_region_param() {
  // @@protoc_insertion_point(field_release:caffe.GTSubmapDataParameter.activation_region_param)
  clear_has_activation_region_param();
  ::caffe::ActivationRegionParameter* temp = activation_region_param_;
  activation_region_param_ = NULL;
  return temp;
}
inline void GTSubmapDataParameter::set_allocated_activation_region_param(::caffe::ActivationRegionParameter* activation_region_param) {
  delete activation_region_param_;
  activation_region_param_ = activation_region_param;
  if (activation_region_param) {
    set_has_activation_region_param();
  } else {
    clear_has_activation_region_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.GTSubmapDataParameter.activation_region_param)
}

// optional uint32 num_jitter = 7 [default = 0];
inline bool GTSubmapDataParameter::has_num_jitter() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GTSubmapDataParameter::set_has_num_jitter() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GTSubmapDataParameter::clear_has_num_jitter() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GTSubmapDataParameter::clear_num_jitter() {
  num_jitter_ = 0u;
  clear_has_num_jitter();
}
inline ::google::protobuf::uint32 GTSubmapDataParameter::num_jitter() const {
  // @@protoc_insertion_point(field_get:caffe.GTSubmapDataParameter.num_jitter)
  return num_jitter_;
}
inline void GTSubmapDataParameter::set_num_jitter(::google::protobuf::uint32 value) {
  set_has_num_jitter();
  num_jitter_ = value;
  // @@protoc_insertion_point(field_set:caffe.GTSubmapDataParameter.num_jitter)
}

// optional bool bbox_normalization = 8 [default = true];
inline bool GTSubmapDataParameter::has_bbox_normalization() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GTSubmapDataParameter::set_has_bbox_normalization() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GTSubmapDataParameter::clear_has_bbox_normalization() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GTSubmapDataParameter::clear_bbox_normalization() {
  bbox_normalization_ = true;
  clear_has_bbox_normalization();
}
inline bool GTSubmapDataParameter::bbox_normalization() const {
  // @@protoc_insertion_point(field_get:caffe.GTSubmapDataParameter.bbox_normalization)
  return bbox_normalization_;
}
inline void GTSubmapDataParameter::set_bbox_normalization(bool value) {
  set_has_bbox_normalization();
  bbox_normalization_ = value;
  // @@protoc_insertion_point(field_set:caffe.GTSubmapDataParameter.bbox_normalization)
}

// required .caffe.OffsetParameter offset_param = 9;
inline bool GTSubmapDataParameter::has_offset_param() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GTSubmapDataParameter::set_has_offset_param() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GTSubmapDataParameter::clear_has_offset_param() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GTSubmapDataParameter::clear_offset_param() {
  if (offset_param_ != NULL) offset_param_->::caffe::OffsetParameter::Clear();
  clear_has_offset_param();
}
inline const ::caffe::OffsetParameter& GTSubmapDataParameter::offset_param() const {
  // @@protoc_insertion_point(field_get:caffe.GTSubmapDataParameter.offset_param)
  return offset_param_ != NULL ? *offset_param_
                         : *::caffe::OffsetParameter::internal_default_instance();
}
inline ::caffe::OffsetParameter* GTSubmapDataParameter::mutable_offset_param() {
  set_has_offset_param();
  if (offset_param_ == NULL) {
    offset_param_ = new ::caffe::OffsetParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.GTSubmapDataParameter.offset_param)
  return offset_param_;
}
inline ::caffe::OffsetParameter* GTSubmapDataParameter::release_offset_param() {
  // @@protoc_insertion_point(field_release:caffe.GTSubmapDataParameter.offset_param)
  clear_has_offset_param();
  ::caffe::OffsetParameter* temp = offset_param_;
  offset_param_ = NULL;
  return temp;
}
inline void GTSubmapDataParameter::set_allocated_offset_param(::caffe::OffsetParameter* offset_param) {
  delete offset_param_;
  offset_param_ = offset_param;
  if (offset_param) {
    set_has_offset_param();
  } else {
    clear_has_offset_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.GTSubmapDataParameter.offset_param)
}

inline const GTSubmapDataParameter* GTSubmapDataParameter::internal_default_instance() {
  return &GTSubmapDataParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// TopSubmapDataParameter

// required .caffe.Size2i img_size = 1;
inline bool TopSubmapDataParameter::has_img_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TopSubmapDataParameter::set_has_img_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TopSubmapDataParameter::clear_has_img_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TopSubmapDataParameter::clear_img_size() {
  if (img_size_ != NULL) img_size_->::caffe::Size2i::Clear();
  clear_has_img_size();
}
inline const ::caffe::Size2i& TopSubmapDataParameter::img_size() const {
  // @@protoc_insertion_point(field_get:caffe.TopSubmapDataParameter.img_size)
  return img_size_ != NULL ? *img_size_
                         : *::caffe::Size2i::internal_default_instance();
}
inline ::caffe::Size2i* TopSubmapDataParameter::mutable_img_size() {
  set_has_img_size();
  if (img_size_ == NULL) {
    img_size_ = new ::caffe::Size2i;
  }
  // @@protoc_insertion_point(field_mutable:caffe.TopSubmapDataParameter.img_size)
  return img_size_;
}
inline ::caffe::Size2i* TopSubmapDataParameter::release_img_size() {
  // @@protoc_insertion_point(field_release:caffe.TopSubmapDataParameter.img_size)
  clear_has_img_size();
  ::caffe::Size2i* temp = img_size_;
  img_size_ = NULL;
  return temp;
}
inline void TopSubmapDataParameter::set_allocated_img_size(::caffe::Size2i* img_size) {
  delete img_size_;
  img_size_ = img_size;
  if (img_size) {
    set_has_img_size();
  } else {
    clear_has_img_size();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.TopSubmapDataParameter.img_size)
}

// required uint32 submap_batch_size = 2;
inline bool TopSubmapDataParameter::has_submap_batch_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TopSubmapDataParameter::set_has_submap_batch_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TopSubmapDataParameter::clear_has_submap_batch_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TopSubmapDataParameter::clear_submap_batch_size() {
  submap_batch_size_ = 0u;
  clear_has_submap_batch_size();
}
inline ::google::protobuf::uint32 TopSubmapDataParameter::submap_batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.TopSubmapDataParameter.submap_batch_size)
  return submap_batch_size_;
}
inline void TopSubmapDataParameter::set_submap_batch_size(::google::protobuf::uint32 value) {
  set_has_submap_batch_size();
  submap_batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.TopSubmapDataParameter.submap_batch_size)
}

// required .caffe.Size2i win_size = 3;
inline bool TopSubmapDataParameter::has_win_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TopSubmapDataParameter::set_has_win_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TopSubmapDataParameter::clear_has_win_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TopSubmapDataParameter::clear_win_size() {
  if (win_size_ != NULL) win_size_->::caffe::Size2i::Clear();
  clear_has_win_size();
}
inline const ::caffe::Size2i& TopSubmapDataParameter::win_size() const {
  // @@protoc_insertion_point(field_get:caffe.TopSubmapDataParameter.win_size)
  return win_size_ != NULL ? *win_size_
                         : *::caffe::Size2i::internal_default_instance();
}
inline ::caffe::Size2i* TopSubmapDataParameter::mutable_win_size() {
  set_has_win_size();
  if (win_size_ == NULL) {
    win_size_ = new ::caffe::Size2i;
  }
  // @@protoc_insertion_point(field_mutable:caffe.TopSubmapDataParameter.win_size)
  return win_size_;
}
inline ::caffe::Size2i* TopSubmapDataParameter::release_win_size() {
  // @@protoc_insertion_point(field_release:caffe.TopSubmapDataParameter.win_size)
  clear_has_win_size();
  ::caffe::Size2i* temp = win_size_;
  win_size_ = NULL;
  return temp;
}
inline void TopSubmapDataParameter::set_allocated_win_size(::caffe::Size2i* win_size) {
  delete win_size_;
  win_size_ = win_size;
  if (win_size) {
    set_has_win_size();
  } else {
    clear_has_win_size();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.TopSubmapDataParameter.win_size)
}

// optional uint32 win_horizontal_stride = 4 [default = 1];
inline bool TopSubmapDataParameter::has_win_horizontal_stride() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TopSubmapDataParameter::set_has_win_horizontal_stride() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TopSubmapDataParameter::clear_has_win_horizontal_stride() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TopSubmapDataParameter::clear_win_horizontal_stride() {
  win_horizontal_stride_ = 1u;
  clear_has_win_horizontal_stride();
}
inline ::google::protobuf::uint32 TopSubmapDataParameter::win_horizontal_stride() const {
  // @@protoc_insertion_point(field_get:caffe.TopSubmapDataParameter.win_horizontal_stride)
  return win_horizontal_stride_;
}
inline void TopSubmapDataParameter::set_win_horizontal_stride(::google::protobuf::uint32 value) {
  set_has_win_horizontal_stride();
  win_horizontal_stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.TopSubmapDataParameter.win_horizontal_stride)
}

// optional uint32 win_vertical_stride = 5 [default = 0];
inline bool TopSubmapDataParameter::has_win_vertical_stride() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TopSubmapDataParameter::set_has_win_vertical_stride() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TopSubmapDataParameter::clear_has_win_vertical_stride() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TopSubmapDataParameter::clear_win_vertical_stride() {
  win_vertical_stride_ = 0u;
  clear_has_win_vertical_stride();
}
inline ::google::protobuf::uint32 TopSubmapDataParameter::win_vertical_stride() const {
  // @@protoc_insertion_point(field_get:caffe.TopSubmapDataParameter.win_vertical_stride)
  return win_vertical_stride_;
}
inline void TopSubmapDataParameter::set_win_vertical_stride(::google::protobuf::uint32 value) {
  set_has_win_vertical_stride();
  win_vertical_stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.TopSubmapDataParameter.win_vertical_stride)
}

// optional uint32 num_win_rows = 6;
inline bool TopSubmapDataParameter::has_num_win_rows() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TopSubmapDataParameter::set_has_num_win_rows() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TopSubmapDataParameter::clear_has_num_win_rows() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TopSubmapDataParameter::clear_num_win_rows() {
  num_win_rows_ = 0u;
  clear_has_num_win_rows();
}
inline ::google::protobuf::uint32 TopSubmapDataParameter::num_win_rows() const {
  // @@protoc_insertion_point(field_get:caffe.TopSubmapDataParameter.num_win_rows)
  return num_win_rows_;
}
inline void TopSubmapDataParameter::set_num_win_rows(::google::protobuf::uint32 value) {
  set_has_num_win_rows();
  num_win_rows_ = value;
  // @@protoc_insertion_point(field_set:caffe.TopSubmapDataParameter.num_win_rows)
}

// optional uint32 num_win_cols = 7;
inline bool TopSubmapDataParameter::has_num_win_cols() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TopSubmapDataParameter::set_has_num_win_cols() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TopSubmapDataParameter::clear_has_num_win_cols() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TopSubmapDataParameter::clear_num_win_cols() {
  num_win_cols_ = 0u;
  clear_has_num_win_cols();
}
inline ::google::protobuf::uint32 TopSubmapDataParameter::num_win_cols() const {
  // @@protoc_insertion_point(field_get:caffe.TopSubmapDataParameter.num_win_cols)
  return num_win_cols_;
}
inline void TopSubmapDataParameter::set_num_win_cols(::google::protobuf::uint32 value) {
  set_has_num_win_cols();
  num_win_cols_ = value;
  // @@protoc_insertion_point(field_set:caffe.TopSubmapDataParameter.num_win_cols)
}

// optional .caffe.Size2i offset_unit = 8;
inline bool TopSubmapDataParameter::has_offset_unit() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TopSubmapDataParameter::set_has_offset_unit() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TopSubmapDataParameter::clear_has_offset_unit() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TopSubmapDataParameter::clear_offset_unit() {
  if (offset_unit_ != NULL) offset_unit_->::caffe::Size2i::Clear();
  clear_has_offset_unit();
}
inline const ::caffe::Size2i& TopSubmapDataParameter::offset_unit() const {
  // @@protoc_insertion_point(field_get:caffe.TopSubmapDataParameter.offset_unit)
  return offset_unit_ != NULL ? *offset_unit_
                         : *::caffe::Size2i::internal_default_instance();
}
inline ::caffe::Size2i* TopSubmapDataParameter::mutable_offset_unit() {
  set_has_offset_unit();
  if (offset_unit_ == NULL) {
    offset_unit_ = new ::caffe::Size2i;
  }
  // @@protoc_insertion_point(field_mutable:caffe.TopSubmapDataParameter.offset_unit)
  return offset_unit_;
}
inline ::caffe::Size2i* TopSubmapDataParameter::release_offset_unit() {
  // @@protoc_insertion_point(field_release:caffe.TopSubmapDataParameter.offset_unit)
  clear_has_offset_unit();
  ::caffe::Size2i* temp = offset_unit_;
  offset_unit_ = NULL;
  return temp;
}
inline void TopSubmapDataParameter::set_allocated_offset_unit(::caffe::Size2i* offset_unit) {
  delete offset_unit_;
  offset_unit_ = offset_unit;
  if (offset_unit) {
    set_has_offset_unit();
  } else {
    clear_has_offset_unit();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.TopSubmapDataParameter.offset_unit)
}

// optional uint32 offset_horizontal_stride = 9;
inline bool TopSubmapDataParameter::has_offset_horizontal_stride() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TopSubmapDataParameter::set_has_offset_horizontal_stride() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TopSubmapDataParameter::clear_has_offset_horizontal_stride() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TopSubmapDataParameter::clear_offset_horizontal_stride() {
  offset_horizontal_stride_ = 0u;
  clear_has_offset_horizontal_stride();
}
inline ::google::protobuf::uint32 TopSubmapDataParameter::offset_horizontal_stride() const {
  // @@protoc_insertion_point(field_get:caffe.TopSubmapDataParameter.offset_horizontal_stride)
  return offset_horizontal_stride_;
}
inline void TopSubmapDataParameter::set_offset_horizontal_stride(::google::protobuf::uint32 value) {
  set_has_offset_horizontal_stride();
  offset_horizontal_stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.TopSubmapDataParameter.offset_horizontal_stride)
}

// optional uint32 offset_vertical_stride = 10;
inline bool TopSubmapDataParameter::has_offset_vertical_stride() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TopSubmapDataParameter::set_has_offset_vertical_stride() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TopSubmapDataParameter::clear_has_offset_vertical_stride() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TopSubmapDataParameter::clear_offset_vertical_stride() {
  offset_vertical_stride_ = 0u;
  clear_has_offset_vertical_stride();
}
inline ::google::protobuf::uint32 TopSubmapDataParameter::offset_vertical_stride() const {
  // @@protoc_insertion_point(field_get:caffe.TopSubmapDataParameter.offset_vertical_stride)
  return offset_vertical_stride_;
}
inline void TopSubmapDataParameter::set_offset_vertical_stride(::google::protobuf::uint32 value) {
  set_has_offset_vertical_stride();
  offset_vertical_stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.TopSubmapDataParameter.offset_vertical_stride)
}

// optional .caffe.Size2i gt_unit = 11;
inline bool TopSubmapDataParameter::has_gt_unit() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TopSubmapDataParameter::set_has_gt_unit() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TopSubmapDataParameter::clear_has_gt_unit() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TopSubmapDataParameter::clear_gt_unit() {
  if (gt_unit_ != NULL) gt_unit_->::caffe::Size2i::Clear();
  clear_has_gt_unit();
}
inline const ::caffe::Size2i& TopSubmapDataParameter::gt_unit() const {
  // @@protoc_insertion_point(field_get:caffe.TopSubmapDataParameter.gt_unit)
  return gt_unit_ != NULL ? *gt_unit_
                         : *::caffe::Size2i::internal_default_instance();
}
inline ::caffe::Size2i* TopSubmapDataParameter::mutable_gt_unit() {
  set_has_gt_unit();
  if (gt_unit_ == NULL) {
    gt_unit_ = new ::caffe::Size2i;
  }
  // @@protoc_insertion_point(field_mutable:caffe.TopSubmapDataParameter.gt_unit)
  return gt_unit_;
}
inline ::caffe::Size2i* TopSubmapDataParameter::release_gt_unit() {
  // @@protoc_insertion_point(field_release:caffe.TopSubmapDataParameter.gt_unit)
  clear_has_gt_unit();
  ::caffe::Size2i* temp = gt_unit_;
  gt_unit_ = NULL;
  return temp;
}
inline void TopSubmapDataParameter::set_allocated_gt_unit(::caffe::Size2i* gt_unit) {
  delete gt_unit_;
  gt_unit_ = gt_unit;
  if (gt_unit) {
    set_has_gt_unit();
  } else {
    clear_has_gt_unit();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.TopSubmapDataParameter.gt_unit)
}

// optional uint32 gt_horizontal_stride = 12;
inline bool TopSubmapDataParameter::has_gt_horizontal_stride() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TopSubmapDataParameter::set_has_gt_horizontal_stride() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TopSubmapDataParameter::clear_has_gt_horizontal_stride() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TopSubmapDataParameter::clear_gt_horizontal_stride() {
  gt_horizontal_stride_ = 0u;
  clear_has_gt_horizontal_stride();
}
inline ::google::protobuf::uint32 TopSubmapDataParameter::gt_horizontal_stride() const {
  // @@protoc_insertion_point(field_get:caffe.TopSubmapDataParameter.gt_horizontal_stride)
  return gt_horizontal_stride_;
}
inline void TopSubmapDataParameter::set_gt_horizontal_stride(::google::protobuf::uint32 value) {
  set_has_gt_horizontal_stride();
  gt_horizontal_stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.TopSubmapDataParameter.gt_horizontal_stride)
}

// optional uint32 gt_vertical_stride = 13;
inline bool TopSubmapDataParameter::has_gt_vertical_stride() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TopSubmapDataParameter::set_has_gt_vertical_stride() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TopSubmapDataParameter::clear_has_gt_vertical_stride() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TopSubmapDataParameter::clear_gt_vertical_stride() {
  gt_vertical_stride_ = 0u;
  clear_has_gt_vertical_stride();
}
inline ::google::protobuf::uint32 TopSubmapDataParameter::gt_vertical_stride() const {
  // @@protoc_insertion_point(field_get:caffe.TopSubmapDataParameter.gt_vertical_stride)
  return gt_vertical_stride_;
}
inline void TopSubmapDataParameter::set_gt_vertical_stride(::google::protobuf::uint32 value) {
  set_has_gt_vertical_stride();
  gt_vertical_stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.TopSubmapDataParameter.gt_vertical_stride)
}

// optional .caffe.BBoxParameter bbox_param = 14;
inline bool TopSubmapDataParameter::has_bbox_param() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TopSubmapDataParameter::set_has_bbox_param() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TopSubmapDataParameter::clear_has_bbox_param() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TopSubmapDataParameter::clear_bbox_param() {
  if (bbox_param_ != NULL) bbox_param_->::caffe::BBoxParameter::Clear();
  clear_has_bbox_param();
}
inline const ::caffe::BBoxParameter& TopSubmapDataParameter::bbox_param() const {
  // @@protoc_insertion_point(field_get:caffe.TopSubmapDataParameter.bbox_param)
  return bbox_param_ != NULL ? *bbox_param_
                         : *::caffe::BBoxParameter::internal_default_instance();
}
inline ::caffe::BBoxParameter* TopSubmapDataParameter::mutable_bbox_param() {
  set_has_bbox_param();
  if (bbox_param_ == NULL) {
    bbox_param_ = new ::caffe::BBoxParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.TopSubmapDataParameter.bbox_param)
  return bbox_param_;
}
inline ::caffe::BBoxParameter* TopSubmapDataParameter::release_bbox_param() {
  // @@protoc_insertion_point(field_release:caffe.TopSubmapDataParameter.bbox_param)
  clear_has_bbox_param();
  ::caffe::BBoxParameter* temp = bbox_param_;
  bbox_param_ = NULL;
  return temp;
}
inline void TopSubmapDataParameter::set_allocated_bbox_param(::caffe::BBoxParameter* bbox_param) {
  delete bbox_param_;
  bbox_param_ = bbox_param;
  if (bbox_param) {
    set_has_bbox_param();
  } else {
    clear_has_bbox_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.TopSubmapDataParameter.bbox_param)
}

// optional bool offset_normalize = 15 [default = true];
inline bool TopSubmapDataParameter::has_offset_normalize() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TopSubmapDataParameter::set_has_offset_normalize() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TopSubmapDataParameter::clear_has_offset_normalize() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TopSubmapDataParameter::clear_offset_normalize() {
  offset_normalize_ = true;
  clear_has_offset_normalize();
}
inline bool TopSubmapDataParameter::offset_normalize() const {
  // @@protoc_insertion_point(field_get:caffe.TopSubmapDataParameter.offset_normalize)
  return offset_normalize_;
}
inline void TopSubmapDataParameter::set_offset_normalize(bool value) {
  set_has_offset_normalize();
  offset_normalize_ = value;
  // @@protoc_insertion_point(field_set:caffe.TopSubmapDataParameter.offset_normalize)
}

inline const TopSubmapDataParameter* TopSubmapDataParameter::internal_default_instance() {
  return &TopSubmapDataParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// YOLOLikeLossParameter

// optional uint32 num_bbox_per_cell = 1 [default = 2];
inline bool YOLOLikeLossParameter::has_num_bbox_per_cell() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YOLOLikeLossParameter::set_has_num_bbox_per_cell() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YOLOLikeLossParameter::clear_has_num_bbox_per_cell() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YOLOLikeLossParameter::clear_num_bbox_per_cell() {
  num_bbox_per_cell_ = 2u;
  clear_has_num_bbox_per_cell();
}
inline ::google::protobuf::uint32 YOLOLikeLossParameter::num_bbox_per_cell() const {
  // @@protoc_insertion_point(field_get:caffe.YOLOLikeLossParameter.num_bbox_per_cell)
  return num_bbox_per_cell_;
}
inline void YOLOLikeLossParameter::set_num_bbox_per_cell(::google::protobuf::uint32 value) {
  set_has_num_bbox_per_cell();
  num_bbox_per_cell_ = value;
  // @@protoc_insertion_point(field_set:caffe.YOLOLikeLossParameter.num_bbox_per_cell)
}

// optional uint32 num_class = 2 [default = 20];
inline bool YOLOLikeLossParameter::has_num_class() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YOLOLikeLossParameter::set_has_num_class() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YOLOLikeLossParameter::clear_has_num_class() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YOLOLikeLossParameter::clear_num_class() {
  num_class_ = 20u;
  clear_has_num_class();
}
inline ::google::protobuf::uint32 YOLOLikeLossParameter::num_class() const {
  // @@protoc_insertion_point(field_get:caffe.YOLOLikeLossParameter.num_class)
  return num_class_;
}
inline void YOLOLikeLossParameter::set_num_class(::google::protobuf::uint32 value) {
  set_has_num_class();
  num_class_ = value;
  // @@protoc_insertion_point(field_set:caffe.YOLOLikeLossParameter.num_class)
}

// optional float noobj_scale = 3 [default = 1];
inline bool YOLOLikeLossParameter::has_noobj_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YOLOLikeLossParameter::set_has_noobj_scale() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YOLOLikeLossParameter::clear_has_noobj_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YOLOLikeLossParameter::clear_noobj_scale() {
  noobj_scale_ = 1;
  clear_has_noobj_scale();
}
inline float YOLOLikeLossParameter::noobj_scale() const {
  // @@protoc_insertion_point(field_get:caffe.YOLOLikeLossParameter.noobj_scale)
  return noobj_scale_;
}
inline void YOLOLikeLossParameter::set_noobj_scale(float value) {
  set_has_noobj_scale();
  noobj_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.YOLOLikeLossParameter.noobj_scale)
}

// optional float obj_scale = 4 [default = 1];
inline bool YOLOLikeLossParameter::has_obj_scale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YOLOLikeLossParameter::set_has_obj_scale() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YOLOLikeLossParameter::clear_has_obj_scale() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YOLOLikeLossParameter::clear_obj_scale() {
  obj_scale_ = 1;
  clear_has_obj_scale();
}
inline float YOLOLikeLossParameter::obj_scale() const {
  // @@protoc_insertion_point(field_get:caffe.YOLOLikeLossParameter.obj_scale)
  return obj_scale_;
}
inline void YOLOLikeLossParameter::set_obj_scale(float value) {
  set_has_obj_scale();
  obj_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.YOLOLikeLossParameter.obj_scale)
}

// optional float class_scale = 5 [default = 1];
inline bool YOLOLikeLossParameter::has_class_scale() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void YOLOLikeLossParameter::set_has_class_scale() {
  _has_bits_[0] |= 0x00000010u;
}
inline void YOLOLikeLossParameter::clear_has_class_scale() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void YOLOLikeLossParameter::clear_class_scale() {
  class_scale_ = 1;
  clear_has_class_scale();
}
inline float YOLOLikeLossParameter::class_scale() const {
  // @@protoc_insertion_point(field_get:caffe.YOLOLikeLossParameter.class_scale)
  return class_scale_;
}
inline void YOLOLikeLossParameter::set_class_scale(float value) {
  set_has_class_scale();
  class_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.YOLOLikeLossParameter.class_scale)
}

// optional float coord_scale = 6 [default = 1];
inline bool YOLOLikeLossParameter::has_coord_scale() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void YOLOLikeLossParameter::set_has_coord_scale() {
  _has_bits_[0] |= 0x00000020u;
}
inline void YOLOLikeLossParameter::clear_has_coord_scale() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void YOLOLikeLossParameter::clear_coord_scale() {
  coord_scale_ = 1;
  clear_has_coord_scale();
}
inline float YOLOLikeLossParameter::coord_scale() const {
  // @@protoc_insertion_point(field_get:caffe.YOLOLikeLossParameter.coord_scale)
  return coord_scale_;
}
inline void YOLOLikeLossParameter::set_coord_scale(float value) {
  set_has_coord_scale();
  coord_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.YOLOLikeLossParameter.coord_scale)
}

// optional .caffe.BBoxParameter bbox_param = 7;
inline bool YOLOLikeLossParameter::has_bbox_param() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void YOLOLikeLossParameter::set_has_bbox_param() {
  _has_bits_[0] |= 0x00000040u;
}
inline void YOLOLikeLossParameter::clear_has_bbox_param() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void YOLOLikeLossParameter::clear_bbox_param() {
  if (bbox_param_ != NULL) bbox_param_->::caffe::BBoxParameter::Clear();
  clear_has_bbox_param();
}
inline const ::caffe::BBoxParameter& YOLOLikeLossParameter::bbox_param() const {
  // @@protoc_insertion_point(field_get:caffe.YOLOLikeLossParameter.bbox_param)
  return bbox_param_ != NULL ? *bbox_param_
                         : *::caffe::BBoxParameter::internal_default_instance();
}
inline ::caffe::BBoxParameter* YOLOLikeLossParameter::mutable_bbox_param() {
  set_has_bbox_param();
  if (bbox_param_ == NULL) {
    bbox_param_ = new ::caffe::BBoxParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.YOLOLikeLossParameter.bbox_param)
  return bbox_param_;
}
inline ::caffe::BBoxParameter* YOLOLikeLossParameter::release_bbox_param() {
  // @@protoc_insertion_point(field_release:caffe.YOLOLikeLossParameter.bbox_param)
  clear_has_bbox_param();
  ::caffe::BBoxParameter* temp = bbox_param_;
  bbox_param_ = NULL;
  return temp;
}
inline void YOLOLikeLossParameter::set_allocated_bbox_param(::caffe::BBoxParameter* bbox_param) {
  delete bbox_param_;
  bbox_param_ = bbox_param;
  if (bbox_param) {
    set_has_bbox_param();
  } else {
    clear_has_bbox_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.YOLOLikeLossParameter.bbox_param)
}

// repeated float class_weight = 8;
inline int YOLOLikeLossParameter::class_weight_size() const {
  return class_weight_.size();
}
inline void YOLOLikeLossParameter::clear_class_weight() {
  class_weight_.Clear();
}
inline float YOLOLikeLossParameter::class_weight(int index) const {
  // @@protoc_insertion_point(field_get:caffe.YOLOLikeLossParameter.class_weight)
  return class_weight_.Get(index);
}
inline void YOLOLikeLossParameter::set_class_weight(int index, float value) {
  class_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.YOLOLikeLossParameter.class_weight)
}
inline void YOLOLikeLossParameter::add_class_weight(float value) {
  class_weight_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.YOLOLikeLossParameter.class_weight)
}
inline const ::google::protobuf::RepeatedField< float >&
YOLOLikeLossParameter::class_weight() const {
  // @@protoc_insertion_point(field_list:caffe.YOLOLikeLossParameter.class_weight)
  return class_weight_;
}
inline ::google::protobuf::RepeatedField< float >*
YOLOLikeLossParameter::mutable_class_weight() {
  // @@protoc_insertion_point(field_mutable_list:caffe.YOLOLikeLossParameter.class_weight)
  return &class_weight_;
}

inline const YOLOLikeLossParameter* YOLOLikeLossParameter::internal_default_instance() {
  return &YOLOLikeLossParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// WeightedSoftmaxLossParameter

// repeated float class_weight = 1;
inline int WeightedSoftmaxLossParameter::class_weight_size() const {
  return class_weight_.size();
}
inline void WeightedSoftmaxLossParameter::clear_class_weight() {
  class_weight_.Clear();
}
inline float WeightedSoftmaxLossParameter::class_weight(int index) const {
  // @@protoc_insertion_point(field_get:caffe.WeightedSoftmaxLossParameter.class_weight)
  return class_weight_.Get(index);
}
inline void WeightedSoftmaxLossParameter::set_class_weight(int index, float value) {
  class_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.WeightedSoftmaxLossParameter.class_weight)
}
inline void WeightedSoftmaxLossParameter::add_class_weight(float value) {
  class_weight_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.WeightedSoftmaxLossParameter.class_weight)
}
inline const ::google::protobuf::RepeatedField< float >&
WeightedSoftmaxLossParameter::class_weight() const {
  // @@protoc_insertion_point(field_list:caffe.WeightedSoftmaxLossParameter.class_weight)
  return class_weight_;
}
inline ::google::protobuf::RepeatedField< float >*
WeightedSoftmaxLossParameter::mutable_class_weight() {
  // @@protoc_insertion_point(field_mutable_list:caffe.WeightedSoftmaxLossParameter.class_weight)
  return &class_weight_;
}

inline const WeightedSoftmaxLossParameter* WeightedSoftmaxLossParameter::internal_default_instance() {
  return &WeightedSoftmaxLossParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// GridProposalLossParameter

// optional float noobj_weight = 1 [default = 1];
inline bool GridProposalLossParameter::has_noobj_weight() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GridProposalLossParameter::set_has_noobj_weight() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GridProposalLossParameter::clear_has_noobj_weight() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GridProposalLossParameter::clear_noobj_weight() {
  noobj_weight_ = 1;
  clear_has_noobj_weight();
}
inline float GridProposalLossParameter::noobj_weight() const {
  // @@protoc_insertion_point(field_get:caffe.GridProposalLossParameter.noobj_weight)
  return noobj_weight_;
}
inline void GridProposalLossParameter::set_noobj_weight(float value) {
  set_has_noobj_weight();
  noobj_weight_ = value;
  // @@protoc_insertion_point(field_set:caffe.GridProposalLossParameter.noobj_weight)
}

// repeated float obj_weight = 2;
inline int GridProposalLossParameter::obj_weight_size() const {
  return obj_weight_.size();
}
inline void GridProposalLossParameter::clear_obj_weight() {
  obj_weight_.Clear();
}
inline float GridProposalLossParameter::obj_weight(int index) const {
  // @@protoc_insertion_point(field_get:caffe.GridProposalLossParameter.obj_weight)
  return obj_weight_.Get(index);
}
inline void GridProposalLossParameter::set_obj_weight(int index, float value) {
  obj_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.GridProposalLossParameter.obj_weight)
}
inline void GridProposalLossParameter::add_obj_weight(float value) {
  obj_weight_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.GridProposalLossParameter.obj_weight)
}
inline const ::google::protobuf::RepeatedField< float >&
GridProposalLossParameter::obj_weight() const {
  // @@protoc_insertion_point(field_list:caffe.GridProposalLossParameter.obj_weight)
  return obj_weight_;
}
inline ::google::protobuf::RepeatedField< float >*
GridProposalLossParameter::mutable_obj_weight() {
  // @@protoc_insertion_point(field_mutable_list:caffe.GridProposalLossParameter.obj_weight)
  return &obj_weight_;
}

// optional uint32 num_class = 3 [default = 1];
inline bool GridProposalLossParameter::has_num_class() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GridProposalLossParameter::set_has_num_class() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GridProposalLossParameter::clear_has_num_class() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GridProposalLossParameter::clear_num_class() {
  num_class_ = 1u;
  clear_has_num_class();
}
inline ::google::protobuf::uint32 GridProposalLossParameter::num_class() const {
  // @@protoc_insertion_point(field_get:caffe.GridProposalLossParameter.num_class)
  return num_class_;
}
inline void GridProposalLossParameter::set_num_class(::google::protobuf::uint32 value) {
  set_has_num_class();
  num_class_ = value;
  // @@protoc_insertion_point(field_set:caffe.GridProposalLossParameter.num_class)
}

// optional bool general_obj_proposal = 4 [default = false];
inline bool GridProposalLossParameter::has_general_obj_proposal() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GridProposalLossParameter::set_has_general_obj_proposal() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GridProposalLossParameter::clear_has_general_obj_proposal() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GridProposalLossParameter::clear_general_obj_proposal() {
  general_obj_proposal_ = false;
  clear_has_general_obj_proposal();
}
inline bool GridProposalLossParameter::general_obj_proposal() const {
  // @@protoc_insertion_point(field_get:caffe.GridProposalLossParameter.general_obj_proposal)
  return general_obj_proposal_;
}
inline void GridProposalLossParameter::set_general_obj_proposal(bool value) {
  set_has_general_obj_proposal();
  general_obj_proposal_ = value;
  // @@protoc_insertion_point(field_set:caffe.GridProposalLossParameter.general_obj_proposal)
}

inline const GridProposalLossParameter* GridProposalLossParameter::internal_default_instance() {
  return &GridProposalLossParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// BGSynthesisDataParameter

// required uint32 width = 1;
inline bool BGSynthesisDataParameter::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BGSynthesisDataParameter::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BGSynthesisDataParameter::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BGSynthesisDataParameter::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 BGSynthesisDataParameter::width() const {
  // @@protoc_insertion_point(field_get:caffe.BGSynthesisDataParameter.width)
  return width_;
}
inline void BGSynthesisDataParameter::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.BGSynthesisDataParameter.width)
}

// required uint32 height = 2;
inline bool BGSynthesisDataParameter::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BGSynthesisDataParameter::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BGSynthesisDataParameter::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BGSynthesisDataParameter::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 BGSynthesisDataParameter::height() const {
  // @@protoc_insertion_point(field_get:caffe.BGSynthesisDataParameter.height)
  return height_;
}
inline void BGSynthesisDataParameter::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.BGSynthesisDataParameter.height)
}

// required .caffe.LayerParameter obj_data_param = 3;
inline bool BGSynthesisDataParameter::has_obj_data_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BGSynthesisDataParameter::set_has_obj_data_param() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BGSynthesisDataParameter::clear_has_obj_data_param() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BGSynthesisDataParameter::clear_obj_data_param() {
  if (obj_data_param_ != NULL) obj_data_param_->::caffe::LayerParameter::Clear();
  clear_has_obj_data_param();
}
inline const ::caffe::LayerParameter& BGSynthesisDataParameter::obj_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.BGSynthesisDataParameter.obj_data_param)
  return obj_data_param_ != NULL ? *obj_data_param_
                         : *::caffe::LayerParameter::internal_default_instance();
}
inline ::caffe::LayerParameter* BGSynthesisDataParameter::mutable_obj_data_param() {
  set_has_obj_data_param();
  if (obj_data_param_ == NULL) {
    obj_data_param_ = new ::caffe::LayerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.BGSynthesisDataParameter.obj_data_param)
  return obj_data_param_;
}
inline ::caffe::LayerParameter* BGSynthesisDataParameter::release_obj_data_param() {
  // @@protoc_insertion_point(field_release:caffe.BGSynthesisDataParameter.obj_data_param)
  clear_has_obj_data_param();
  ::caffe::LayerParameter* temp = obj_data_param_;
  obj_data_param_ = NULL;
  return temp;
}
inline void BGSynthesisDataParameter::set_allocated_obj_data_param(::caffe::LayerParameter* obj_data_param) {
  delete obj_data_param_;
  obj_data_param_ = obj_data_param;
  if (obj_data_param) {
    set_has_obj_data_param();
  } else {
    clear_has_obj_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.BGSynthesisDataParameter.obj_data_param)
}

// required .caffe.LayerParameter bg_data_param = 4;
inline bool BGSynthesisDataParameter::has_bg_data_param() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BGSynthesisDataParameter::set_has_bg_data_param() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BGSynthesisDataParameter::clear_has_bg_data_param() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BGSynthesisDataParameter::clear_bg_data_param() {
  if (bg_data_param_ != NULL) bg_data_param_->::caffe::LayerParameter::Clear();
  clear_has_bg_data_param();
}
inline const ::caffe::LayerParameter& BGSynthesisDataParameter::bg_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.BGSynthesisDataParameter.bg_data_param)
  return bg_data_param_ != NULL ? *bg_data_param_
                         : *::caffe::LayerParameter::internal_default_instance();
}
inline ::caffe::LayerParameter* BGSynthesisDataParameter::mutable_bg_data_param() {
  set_has_bg_data_param();
  if (bg_data_param_ == NULL) {
    bg_data_param_ = new ::caffe::LayerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.BGSynthesisDataParameter.bg_data_param)
  return bg_data_param_;
}
inline ::caffe::LayerParameter* BGSynthesisDataParameter::release_bg_data_param() {
  // @@protoc_insertion_point(field_release:caffe.BGSynthesisDataParameter.bg_data_param)
  clear_has_bg_data_param();
  ::caffe::LayerParameter* temp = bg_data_param_;
  bg_data_param_ = NULL;
  return temp;
}
inline void BGSynthesisDataParameter::set_allocated_bg_data_param(::caffe::LayerParameter* bg_data_param) {
  delete bg_data_param_;
  bg_data_param_ = bg_data_param;
  if (bg_data_param) {
    set_has_bg_data_param();
  } else {
    clear_has_bg_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.BGSynthesisDataParameter.bg_data_param)
}

// required uint32 max_obj = 5;
inline bool BGSynthesisDataParameter::has_max_obj() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BGSynthesisDataParameter::set_has_max_obj() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BGSynthesisDataParameter::clear_has_max_obj() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BGSynthesisDataParameter::clear_max_obj() {
  max_obj_ = 0u;
  clear_has_max_obj();
}
inline ::google::protobuf::uint32 BGSynthesisDataParameter::max_obj() const {
  // @@protoc_insertion_point(field_get:caffe.BGSynthesisDataParameter.max_obj)
  return max_obj_;
}
inline void BGSynthesisDataParameter::set_max_obj(::google::protobuf::uint32 value) {
  set_has_max_obj();
  max_obj_ = value;
  // @@protoc_insertion_point(field_set:caffe.BGSynthesisDataParameter.max_obj)
}

// optional uint32 min_obj = 6;
inline bool BGSynthesisDataParameter::has_min_obj() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BGSynthesisDataParameter::set_has_min_obj() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BGSynthesisDataParameter::clear_has_min_obj() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BGSynthesisDataParameter::clear_min_obj() {
  min_obj_ = 0u;
  clear_has_min_obj();
}
inline ::google::protobuf::uint32 BGSynthesisDataParameter::min_obj() const {
  // @@protoc_insertion_point(field_get:caffe.BGSynthesisDataParameter.min_obj)
  return min_obj_;
}
inline void BGSynthesisDataParameter::set_min_obj(::google::protobuf::uint32 value) {
  set_has_min_obj();
  min_obj_ = value;
  // @@protoc_insertion_point(field_set:caffe.BGSynthesisDataParameter.min_obj)
}

// optional .caffe.ActivationRegionParameter active_region_param = 7;
inline bool BGSynthesisDataParameter::has_active_region_param() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BGSynthesisDataParameter::set_has_active_region_param() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BGSynthesisDataParameter::clear_has_active_region_param() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BGSynthesisDataParameter::clear_active_region_param() {
  if (active_region_param_ != NULL) active_region_param_->::caffe::ActivationRegionParameter::Clear();
  clear_has_active_region_param();
}
inline const ::caffe::ActivationRegionParameter& BGSynthesisDataParameter::active_region_param() const {
  // @@protoc_insertion_point(field_get:caffe.BGSynthesisDataParameter.active_region_param)
  return active_region_param_ != NULL ? *active_region_param_
                         : *::caffe::ActivationRegionParameter::internal_default_instance();
}
inline ::caffe::ActivationRegionParameter* BGSynthesisDataParameter::mutable_active_region_param() {
  set_has_active_region_param();
  if (active_region_param_ == NULL) {
    active_region_param_ = new ::caffe::ActivationRegionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.BGSynthesisDataParameter.active_region_param)
  return active_region_param_;
}
inline ::caffe::ActivationRegionParameter* BGSynthesisDataParameter::release_active_region_param() {
  // @@protoc_insertion_point(field_release:caffe.BGSynthesisDataParameter.active_region_param)
  clear_has_active_region_param();
  ::caffe::ActivationRegionParameter* temp = active_region_param_;
  active_region_param_ = NULL;
  return temp;
}
inline void BGSynthesisDataParameter::set_allocated_active_region_param(::caffe::ActivationRegionParameter* active_region_param) {
  delete active_region_param_;
  active_region_param_ = active_region_param;
  if (active_region_param) {
    set_has_active_region_param();
  } else {
    clear_has_active_region_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.BGSynthesisDataParameter.active_region_param)
}

// optional uint32 batch_size = 8 [default = 1];
inline bool BGSynthesisDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BGSynthesisDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BGSynthesisDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BGSynthesisDataParameter::clear_batch_size() {
  batch_size_ = 1u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 BGSynthesisDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.BGSynthesisDataParameter.batch_size)
  return batch_size_;
}
inline void BGSynthesisDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.BGSynthesisDataParameter.batch_size)
}

// optional uint32 num_neg = 9 [default = 0];
inline bool BGSynthesisDataParameter::has_num_neg() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BGSynthesisDataParameter::set_has_num_neg() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BGSynthesisDataParameter::clear_has_num_neg() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BGSynthesisDataParameter::clear_num_neg() {
  num_neg_ = 0u;
  clear_has_num_neg();
}
inline ::google::protobuf::uint32 BGSynthesisDataParameter::num_neg() const {
  // @@protoc_insertion_point(field_get:caffe.BGSynthesisDataParameter.num_neg)
  return num_neg_;
}
inline void BGSynthesisDataParameter::set_num_neg(::google::protobuf::uint32 value) {
  set_has_num_neg();
  num_neg_ = value;
  // @@protoc_insertion_point(field_set:caffe.BGSynthesisDataParameter.num_neg)
}

inline const BGSynthesisDataParameter* BGSynthesisDataParameter::internal_default_instance() {
  return &BGSynthesisDataParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// SizeFilterParameter

// optional uint32 axis = 1 [default = 2];
inline bool SizeFilterParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SizeFilterParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SizeFilterParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SizeFilterParameter::clear_axis() {
  axis_ = 2u;
  clear_has_axis();
}
inline ::google::protobuf::uint32 SizeFilterParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.SizeFilterParameter.axis)
  return axis_;
}
inline void SizeFilterParameter::set_axis(::google::protobuf::uint32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.SizeFilterParameter.axis)
}

// optional double min = 2;
inline bool SizeFilterParameter::has_min() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SizeFilterParameter::set_has_min() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SizeFilterParameter::clear_has_min() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SizeFilterParameter::clear_min() {
  min_ = 0;
  clear_has_min();
}
inline double SizeFilterParameter::min() const {
  // @@protoc_insertion_point(field_get:caffe.SizeFilterParameter.min)
  return min_;
}
inline void SizeFilterParameter::set_min(double value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:caffe.SizeFilterParameter.min)
}

// optional double max = 3;
inline bool SizeFilterParameter::has_max() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SizeFilterParameter::set_has_max() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SizeFilterParameter::clear_has_max() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SizeFilterParameter::clear_max() {
  max_ = 0;
  clear_has_max();
}
inline double SizeFilterParameter::max() const {
  // @@protoc_insertion_point(field_get:caffe.SizeFilterParameter.max)
  return max_;
}
inline void SizeFilterParameter::set_max(double value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:caffe.SizeFilterParameter.max)
}

inline const SizeFilterParameter* SizeFilterParameter::internal_default_instance() {
  return &SizeFilterParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// RandomResizeParameter

// optional float p = 1 [default = 1];
inline bool RandomResizeParameter::has_p() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RandomResizeParameter::set_has_p() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RandomResizeParameter::clear_has_p() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RandomResizeParameter::clear_p() {
  p_ = 1;
  clear_has_p();
}
inline float RandomResizeParameter::p() const {
  // @@protoc_insertion_point(field_get:caffe.RandomResizeParameter.p)
  return p_;
}
inline void RandomResizeParameter::set_p(float value) {
  set_has_p();
  p_ = value;
  // @@protoc_insertion_point(field_set:caffe.RandomResizeParameter.p)
}

// optional float w_min = 2 [default = 1];
inline bool RandomResizeParameter::has_w_min() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RandomResizeParameter::set_has_w_min() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RandomResizeParameter::clear_has_w_min() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RandomResizeParameter::clear_w_min() {
  w_min_ = 1;
  clear_has_w_min();
}
inline float RandomResizeParameter::w_min() const {
  // @@protoc_insertion_point(field_get:caffe.RandomResizeParameter.w_min)
  return w_min_;
}
inline void RandomResizeParameter::set_w_min(float value) {
  set_has_w_min();
  w_min_ = value;
  // @@protoc_insertion_point(field_set:caffe.RandomResizeParameter.w_min)
}

// optional float w_max = 3 [default = 1];
inline bool RandomResizeParameter::has_w_max() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RandomResizeParameter::set_has_w_max() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RandomResizeParameter::clear_has_w_max() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RandomResizeParameter::clear_w_max() {
  w_max_ = 1;
  clear_has_w_max();
}
inline float RandomResizeParameter::w_max() const {
  // @@protoc_insertion_point(field_get:caffe.RandomResizeParameter.w_max)
  return w_max_;
}
inline void RandomResizeParameter::set_w_max(float value) {
  set_has_w_max();
  w_max_ = value;
  // @@protoc_insertion_point(field_set:caffe.RandomResizeParameter.w_max)
}

// optional float h_min = 4 [default = 1];
inline bool RandomResizeParameter::has_h_min() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RandomResizeParameter::set_has_h_min() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RandomResizeParameter::clear_has_h_min() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RandomResizeParameter::clear_h_min() {
  h_min_ = 1;
  clear_has_h_min();
}
inline float RandomResizeParameter::h_min() const {
  // @@protoc_insertion_point(field_get:caffe.RandomResizeParameter.h_min)
  return h_min_;
}
inline void RandomResizeParameter::set_h_min(float value) {
  set_has_h_min();
  h_min_ = value;
  // @@protoc_insertion_point(field_set:caffe.RandomResizeParameter.h_min)
}

// optional float h_max = 5 [default = 1];
inline bool RandomResizeParameter::has_h_max() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RandomResizeParameter::set_has_h_max() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RandomResizeParameter::clear_has_h_max() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RandomResizeParameter::clear_h_max() {
  h_max_ = 1;
  clear_has_h_max();
}
inline float RandomResizeParameter::h_max() const {
  // @@protoc_insertion_point(field_get:caffe.RandomResizeParameter.h_max)
  return h_max_;
}
inline void RandomResizeParameter::set_h_max(float value) {
  set_has_h_max();
  h_max_ = value;
  // @@protoc_insertion_point(field_set:caffe.RandomResizeParameter.h_max)
}

inline const RandomResizeParameter* RandomResizeParameter::internal_default_instance() {
  return &RandomResizeParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// GaussianNoiseParameter

// optional float p = 1 [default = 1];
inline bool GaussianNoiseParameter::has_p() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GaussianNoiseParameter::set_has_p() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GaussianNoiseParameter::clear_has_p() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GaussianNoiseParameter::clear_p() {
  p_ = 1;
  clear_has_p();
}
inline float GaussianNoiseParameter::p() const {
  // @@protoc_insertion_point(field_get:caffe.GaussianNoiseParameter.p)
  return p_;
}
inline void GaussianNoiseParameter::set_p(float value) {
  set_has_p();
  p_ = value;
  // @@protoc_insertion_point(field_set:caffe.GaussianNoiseParameter.p)
}

// optional float mean = 2 [default = 0];
inline bool GaussianNoiseParameter::has_mean() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GaussianNoiseParameter::set_has_mean() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GaussianNoiseParameter::clear_has_mean() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GaussianNoiseParameter::clear_mean() {
  mean_ = 0;
  clear_has_mean();
}
inline float GaussianNoiseParameter::mean() const {
  // @@protoc_insertion_point(field_get:caffe.GaussianNoiseParameter.mean)
  return mean_;
}
inline void GaussianNoiseParameter::set_mean(float value) {
  set_has_mean();
  mean_ = value;
  // @@protoc_insertion_point(field_set:caffe.GaussianNoiseParameter.mean)
}

// optional float stddev = 3 [default = 1];
inline bool GaussianNoiseParameter::has_stddev() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GaussianNoiseParameter::set_has_stddev() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GaussianNoiseParameter::clear_has_stddev() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GaussianNoiseParameter::clear_stddev() {
  stddev_ = 1;
  clear_has_stddev();
}
inline float GaussianNoiseParameter::stddev() const {
  // @@protoc_insertion_point(field_get:caffe.GaussianNoiseParameter.stddev)
  return stddev_;
}
inline void GaussianNoiseParameter::set_stddev(float value) {
  set_has_stddev();
  stddev_ = value;
  // @@protoc_insertion_point(field_set:caffe.GaussianNoiseParameter.stddev)
}

inline const GaussianNoiseParameter* GaussianNoiseParameter::internal_default_instance() {
  return &GaussianNoiseParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// MirrorParameter

// optional float p = 1 [default = 0.5];
inline bool MirrorParameter::has_p() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MirrorParameter::set_has_p() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MirrorParameter::clear_has_p() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MirrorParameter::clear_p() {
  p_ = 0.5f;
  clear_has_p();
}
inline float MirrorParameter::p() const {
  // @@protoc_insertion_point(field_get:caffe.MirrorParameter.p)
  return p_;
}
inline void MirrorParameter::set_p(float value) {
  set_has_p();
  p_ = value;
  // @@protoc_insertion_point(field_set:caffe.MirrorParameter.p)
}

inline const MirrorParameter* MirrorParameter::internal_default_instance() {
  return &MirrorParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// BlurParameter

// optional float p = 1 [default = 0.5];
inline bool BlurParameter::has_p() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlurParameter::set_has_p() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlurParameter::clear_has_p() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlurParameter::clear_p() {
  p_ = 0.5f;
  clear_has_p();
}
inline float BlurParameter::p() const {
  // @@protoc_insertion_point(field_get:caffe.BlurParameter.p)
  return p_;
}
inline void BlurParameter::set_p(float value) {
  set_has_p();
  p_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlurParameter.p)
}

// optional uint32 kernel_size = 2 [default = 3];
inline bool BlurParameter::has_kernel_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlurParameter::set_has_kernel_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlurParameter::clear_has_kernel_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlurParameter::clear_kernel_size() {
  kernel_size_ = 3u;
  clear_has_kernel_size();
}
inline ::google::protobuf::uint32 BlurParameter::kernel_size() const {
  // @@protoc_insertion_point(field_get:caffe.BlurParameter.kernel_size)
  return kernel_size_;
}
inline void BlurParameter::set_kernel_size(::google::protobuf::uint32 value) {
  set_has_kernel_size();
  kernel_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlurParameter.kernel_size)
}

// optional float sigma = 3 [default = 1.4];
inline bool BlurParameter::has_sigma() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlurParameter::set_has_sigma() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlurParameter::clear_has_sigma() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlurParameter::clear_sigma() {
  sigma_ = 1.4f;
  clear_has_sigma();
}
inline float BlurParameter::sigma() const {
  // @@protoc_insertion_point(field_get:caffe.BlurParameter.sigma)
  return sigma_;
}
inline void BlurParameter::set_sigma(float value) {
  set_has_sigma();
  sigma_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlurParameter.sigma)
}

inline const BlurParameter* BlurParameter::internal_default_instance() {
  return &BlurParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// AugmentationParameter

// optional .caffe.PaddingParameter pad_param = 1;
inline bool AugmentationParameter::has_pad_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AugmentationParameter::set_has_pad_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AugmentationParameter::clear_has_pad_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AugmentationParameter::clear_pad_param() {
  if (pad_param_ != NULL) pad_param_->::caffe::PaddingParameter::Clear();
  clear_has_pad_param();
}
inline const ::caffe::PaddingParameter& AugmentationParameter::pad_param() const {
  // @@protoc_insertion_point(field_get:caffe.AugmentationParameter.pad_param)
  return pad_param_ != NULL ? *pad_param_
                         : *::caffe::PaddingParameter::internal_default_instance();
}
inline ::caffe::PaddingParameter* AugmentationParameter::mutable_pad_param() {
  set_has_pad_param();
  if (pad_param_ == NULL) {
    pad_param_ = new ::caffe::PaddingParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.AugmentationParameter.pad_param)
  return pad_param_;
}
inline ::caffe::PaddingParameter* AugmentationParameter::release_pad_param() {
  // @@protoc_insertion_point(field_release:caffe.AugmentationParameter.pad_param)
  clear_has_pad_param();
  ::caffe::PaddingParameter* temp = pad_param_;
  pad_param_ = NULL;
  return temp;
}
inline void AugmentationParameter::set_allocated_pad_param(::caffe::PaddingParameter* pad_param) {
  delete pad_param_;
  pad_param_ = pad_param;
  if (pad_param) {
    set_has_pad_param();
  } else {
    clear_has_pad_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.AugmentationParameter.pad_param)
}

// optional .caffe.RandomResizeParameter rand_resize_param = 2;
inline bool AugmentationParameter::has_rand_resize_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AugmentationParameter::set_has_rand_resize_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AugmentationParameter::clear_has_rand_resize_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AugmentationParameter::clear_rand_resize_param() {
  if (rand_resize_param_ != NULL) rand_resize_param_->::caffe::RandomResizeParameter::Clear();
  clear_has_rand_resize_param();
}
inline const ::caffe::RandomResizeParameter& AugmentationParameter::rand_resize_param() const {
  // @@protoc_insertion_point(field_get:caffe.AugmentationParameter.rand_resize_param)
  return rand_resize_param_ != NULL ? *rand_resize_param_
                         : *::caffe::RandomResizeParameter::internal_default_instance();
}
inline ::caffe::RandomResizeParameter* AugmentationParameter::mutable_rand_resize_param() {
  set_has_rand_resize_param();
  if (rand_resize_param_ == NULL) {
    rand_resize_param_ = new ::caffe::RandomResizeParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.AugmentationParameter.rand_resize_param)
  return rand_resize_param_;
}
inline ::caffe::RandomResizeParameter* AugmentationParameter::release_rand_resize_param() {
  // @@protoc_insertion_point(field_release:caffe.AugmentationParameter.rand_resize_param)
  clear_has_rand_resize_param();
  ::caffe::RandomResizeParameter* temp = rand_resize_param_;
  rand_resize_param_ = NULL;
  return temp;
}
inline void AugmentationParameter::set_allocated_rand_resize_param(::caffe::RandomResizeParameter* rand_resize_param) {
  delete rand_resize_param_;
  rand_resize_param_ = rand_resize_param;
  if (rand_resize_param) {
    set_has_rand_resize_param();
  } else {
    clear_has_rand_resize_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.AugmentationParameter.rand_resize_param)
}

// repeated .caffe.GaussianNoiseParameter gauss_noise_param = 3;
inline int AugmentationParameter::gauss_noise_param_size() const {
  return gauss_noise_param_.size();
}
inline void AugmentationParameter::clear_gauss_noise_param() {
  gauss_noise_param_.Clear();
}
inline const ::caffe::GaussianNoiseParameter& AugmentationParameter::gauss_noise_param(int index) const {
  // @@protoc_insertion_point(field_get:caffe.AugmentationParameter.gauss_noise_param)
  return gauss_noise_param_.Get(index);
}
inline ::caffe::GaussianNoiseParameter* AugmentationParameter::mutable_gauss_noise_param(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.AugmentationParameter.gauss_noise_param)
  return gauss_noise_param_.Mutable(index);
}
inline ::caffe::GaussianNoiseParameter* AugmentationParameter::add_gauss_noise_param() {
  // @@protoc_insertion_point(field_add:caffe.AugmentationParameter.gauss_noise_param)
  return gauss_noise_param_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::GaussianNoiseParameter >*
AugmentationParameter::mutable_gauss_noise_param() {
  // @@protoc_insertion_point(field_mutable_list:caffe.AugmentationParameter.gauss_noise_param)
  return &gauss_noise_param_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::GaussianNoiseParameter >&
AugmentationParameter::gauss_noise_param() const {
  // @@protoc_insertion_point(field_list:caffe.AugmentationParameter.gauss_noise_param)
  return gauss_noise_param_;
}

// optional .caffe.MirrorParameter mirror_param = 4;
inline bool AugmentationParameter::has_mirror_param() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AugmentationParameter::set_has_mirror_param() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AugmentationParameter::clear_has_mirror_param() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AugmentationParameter::clear_mirror_param() {
  if (mirror_param_ != NULL) mirror_param_->::caffe::MirrorParameter::Clear();
  clear_has_mirror_param();
}
inline const ::caffe::MirrorParameter& AugmentationParameter::mirror_param() const {
  // @@protoc_insertion_point(field_get:caffe.AugmentationParameter.mirror_param)
  return mirror_param_ != NULL ? *mirror_param_
                         : *::caffe::MirrorParameter::internal_default_instance();
}
inline ::caffe::MirrorParameter* AugmentationParameter::mutable_mirror_param() {
  set_has_mirror_param();
  if (mirror_param_ == NULL) {
    mirror_param_ = new ::caffe::MirrorParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.AugmentationParameter.mirror_param)
  return mirror_param_;
}
inline ::caffe::MirrorParameter* AugmentationParameter::release_mirror_param() {
  // @@protoc_insertion_point(field_release:caffe.AugmentationParameter.mirror_param)
  clear_has_mirror_param();
  ::caffe::MirrorParameter* temp = mirror_param_;
  mirror_param_ = NULL;
  return temp;
}
inline void AugmentationParameter::set_allocated_mirror_param(::caffe::MirrorParameter* mirror_param) {
  delete mirror_param_;
  mirror_param_ = mirror_param;
  if (mirror_param) {
    set_has_mirror_param();
  } else {
    clear_has_mirror_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.AugmentationParameter.mirror_param)
}

// optional .caffe.BlurParameter blur_param = 5;
inline bool AugmentationParameter::has_blur_param() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AugmentationParameter::set_has_blur_param() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AugmentationParameter::clear_has_blur_param() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AugmentationParameter::clear_blur_param() {
  if (blur_param_ != NULL) blur_param_->::caffe::BlurParameter::Clear();
  clear_has_blur_param();
}
inline const ::caffe::BlurParameter& AugmentationParameter::blur_param() const {
  // @@protoc_insertion_point(field_get:caffe.AugmentationParameter.blur_param)
  return blur_param_ != NULL ? *blur_param_
                         : *::caffe::BlurParameter::internal_default_instance();
}
inline ::caffe::BlurParameter* AugmentationParameter::mutable_blur_param() {
  set_has_blur_param();
  if (blur_param_ == NULL) {
    blur_param_ = new ::caffe::BlurParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.AugmentationParameter.blur_param)
  return blur_param_;
}
inline ::caffe::BlurParameter* AugmentationParameter::release_blur_param() {
  // @@protoc_insertion_point(field_release:caffe.AugmentationParameter.blur_param)
  clear_has_blur_param();
  ::caffe::BlurParameter* temp = blur_param_;
  blur_param_ = NULL;
  return temp;
}
inline void AugmentationParameter::set_allocated_blur_param(::caffe::BlurParameter* blur_param) {
  delete blur_param_;
  blur_param_ = blur_param;
  if (blur_param) {
    set_has_blur_param();
  } else {
    clear_has_blur_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.AugmentationParameter.blur_param)
}

inline const AugmentationParameter* AugmentationParameter::internal_default_instance() {
  return &AugmentationParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// HeatmapParameter

// optional uint32 num_label = 1 [default = 1];
inline bool HeatmapParameter::has_num_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeatmapParameter::set_has_num_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeatmapParameter::clear_has_num_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeatmapParameter::clear_num_label() {
  num_label_ = 1u;
  clear_has_num_label();
}
inline ::google::protobuf::uint32 HeatmapParameter::num_label() const {
  // @@protoc_insertion_point(field_get:caffe.HeatmapParameter.num_label)
  return num_label_;
}
inline void HeatmapParameter::set_num_label(::google::protobuf::uint32 value) {
  set_has_num_label();
  num_label_ = value;
  // @@protoc_insertion_point(field_set:caffe.HeatmapParameter.num_label)
}

// optional bool bbox_normalized = 2 [default = true];
inline bool HeatmapParameter::has_bbox_normalized() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeatmapParameter::set_has_bbox_normalized() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeatmapParameter::clear_has_bbox_normalized() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeatmapParameter::clear_bbox_normalized() {
  bbox_normalized_ = true;
  clear_has_bbox_normalized();
}
inline bool HeatmapParameter::bbox_normalized() const {
  // @@protoc_insertion_point(field_get:caffe.HeatmapParameter.bbox_normalized)
  return bbox_normalized_;
}
inline void HeatmapParameter::set_bbox_normalized(bool value) {
  set_has_bbox_normalized();
  bbox_normalized_ = value;
  // @@protoc_insertion_point(field_set:caffe.HeatmapParameter.bbox_normalized)
}

// optional float width = 3 [default = 1];
inline bool HeatmapParameter::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HeatmapParameter::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HeatmapParameter::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HeatmapParameter::clear_width() {
  width_ = 1;
  clear_has_width();
}
inline float HeatmapParameter::width() const {
  // @@protoc_insertion_point(field_get:caffe.HeatmapParameter.width)
  return width_;
}
inline void HeatmapParameter::set_width(float value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.HeatmapParameter.width)
}

// optional float height = 4 [default = 1];
inline bool HeatmapParameter::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HeatmapParameter::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HeatmapParameter::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HeatmapParameter::clear_height() {
  height_ = 1;
  clear_has_height();
}
inline float HeatmapParameter::height() const {
  // @@protoc_insertion_point(field_get:caffe.HeatmapParameter.height)
  return height_;
}
inline void HeatmapParameter::set_height(float value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.HeatmapParameter.height)
}

// optional uint32 rows = 5;
inline bool HeatmapParameter::has_rows() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HeatmapParameter::set_has_rows() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HeatmapParameter::clear_has_rows() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HeatmapParameter::clear_rows() {
  rows_ = 0u;
  clear_has_rows();
}
inline ::google::protobuf::uint32 HeatmapParameter::rows() const {
  // @@protoc_insertion_point(field_get:caffe.HeatmapParameter.rows)
  return rows_;
}
inline void HeatmapParameter::set_rows(::google::protobuf::uint32 value) {
  set_has_rows();
  rows_ = value;
  // @@protoc_insertion_point(field_set:caffe.HeatmapParameter.rows)
}

// optional uint32 cols = 6;
inline bool HeatmapParameter::has_cols() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HeatmapParameter::set_has_cols() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HeatmapParameter::clear_has_cols() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HeatmapParameter::clear_cols() {
  cols_ = 0u;
  clear_has_cols();
}
inline ::google::protobuf::uint32 HeatmapParameter::cols() const {
  // @@protoc_insertion_point(field_get:caffe.HeatmapParameter.cols)
  return cols_;
}
inline void HeatmapParameter::set_cols(::google::protobuf::uint32 value) {
  set_has_cols();
  cols_ = value;
  // @@protoc_insertion_point(field_set:caffe.HeatmapParameter.cols)
}

inline const HeatmapParameter* HeatmapParameter::internal_default_instance() {
  return &HeatmapParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// MinibatchDataParameter

// optional uint32 num_batch = 1 [default = 128];
inline bool MinibatchDataParameter::has_num_batch() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MinibatchDataParameter::set_has_num_batch() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MinibatchDataParameter::clear_has_num_batch() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MinibatchDataParameter::clear_num_batch() {
  num_batch_ = 128u;
  clear_has_num_batch();
}
inline ::google::protobuf::uint32 MinibatchDataParameter::num_batch() const {
  // @@protoc_insertion_point(field_get:caffe.MinibatchDataParameter.num_batch)
  return num_batch_;
}
inline void MinibatchDataParameter::set_num_batch(::google::protobuf::uint32 value) {
  set_has_num_batch();
  num_batch_ = value;
  // @@protoc_insertion_point(field_set:caffe.MinibatchDataParameter.num_batch)
}

// optional uint32 width = 2 [default = 0];
inline bool MinibatchDataParameter::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MinibatchDataParameter::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MinibatchDataParameter::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MinibatchDataParameter::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 MinibatchDataParameter::width() const {
  // @@protoc_insertion_point(field_get:caffe.MinibatchDataParameter.width)
  return width_;
}
inline void MinibatchDataParameter::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.MinibatchDataParameter.width)
}

// optional uint32 height = 3 [default = 0];
inline bool MinibatchDataParameter::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MinibatchDataParameter::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MinibatchDataParameter::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MinibatchDataParameter::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 MinibatchDataParameter::height() const {
  // @@protoc_insertion_point(field_get:caffe.MinibatchDataParameter.height)
  return height_;
}
inline void MinibatchDataParameter::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.MinibatchDataParameter.height)
}

// optional uint32 num_gt = 4 [default = 10];
inline bool MinibatchDataParameter::has_num_gt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MinibatchDataParameter::set_has_num_gt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MinibatchDataParameter::clear_has_num_gt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MinibatchDataParameter::clear_num_gt() {
  num_gt_ = 10u;
  clear_has_num_gt();
}
inline ::google::protobuf::uint32 MinibatchDataParameter::num_gt() const {
  // @@protoc_insertion_point(field_get:caffe.MinibatchDataParameter.num_gt)
  return num_gt_;
}
inline void MinibatchDataParameter::set_num_gt(::google::protobuf::uint32 value) {
  set_has_num_gt();
  num_gt_ = value;
  // @@protoc_insertion_point(field_set:caffe.MinibatchDataParameter.num_gt)
}

// optional uint32 max_num_patch = 5 [default = 1];
inline bool MinibatchDataParameter::has_max_num_patch() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MinibatchDataParameter::set_has_max_num_patch() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MinibatchDataParameter::clear_has_max_num_patch() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MinibatchDataParameter::clear_max_num_patch() {
  max_num_patch_ = 1u;
  clear_has_max_num_patch();
}
inline ::google::protobuf::uint32 MinibatchDataParameter::max_num_patch() const {
  // @@protoc_insertion_point(field_get:caffe.MinibatchDataParameter.max_num_patch)
  return max_num_patch_;
}
inline void MinibatchDataParameter::set_max_num_patch(::google::protobuf::uint32 value) {
  set_has_max_num_patch();
  max_num_patch_ = value;
  // @@protoc_insertion_point(field_set:caffe.MinibatchDataParameter.max_num_patch)
}

inline const MinibatchDataParameter* MinibatchDataParameter::internal_default_instance() {
  return &MinibatchDataParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// RowColProposalTransformParameter

// optional uint32 row = 1 [default = 7];
inline bool RowColProposalTransformParameter::has_row() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RowColProposalTransformParameter::set_has_row() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RowColProposalTransformParameter::clear_has_row() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RowColProposalTransformParameter::clear_row() {
  row_ = 7u;
  clear_has_row();
}
inline ::google::protobuf::uint32 RowColProposalTransformParameter::row() const {
  // @@protoc_insertion_point(field_get:caffe.RowColProposalTransformParameter.row)
  return row_;
}
inline void RowColProposalTransformParameter::set_row(::google::protobuf::uint32 value) {
  set_has_row();
  row_ = value;
  // @@protoc_insertion_point(field_set:caffe.RowColProposalTransformParameter.row)
}

// optional uint32 col = 2 [default = 7];
inline bool RowColProposalTransformParameter::has_col() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RowColProposalTransformParameter::set_has_col() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RowColProposalTransformParameter::clear_has_col() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RowColProposalTransformParameter::clear_col() {
  col_ = 7u;
  clear_has_col();
}
inline ::google::protobuf::uint32 RowColProposalTransformParameter::col() const {
  // @@protoc_insertion_point(field_get:caffe.RowColProposalTransformParameter.col)
  return col_;
}
inline void RowColProposalTransformParameter::set_col(::google::protobuf::uint32 value) {
  set_has_col();
  col_ = value;
  // @@protoc_insertion_point(field_set:caffe.RowColProposalTransformParameter.col)
}

// required uint32 in_width = 3;
inline bool RowColProposalTransformParameter::has_in_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RowColProposalTransformParameter::set_has_in_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RowColProposalTransformParameter::clear_has_in_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RowColProposalTransformParameter::clear_in_width() {
  in_width_ = 0u;
  clear_has_in_width();
}
inline ::google::protobuf::uint32 RowColProposalTransformParameter::in_width() const {
  // @@protoc_insertion_point(field_get:caffe.RowColProposalTransformParameter.in_width)
  return in_width_;
}
inline void RowColProposalTransformParameter::set_in_width(::google::protobuf::uint32 value) {
  set_has_in_width();
  in_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.RowColProposalTransformParameter.in_width)
}

// required uint32 in_height = 4;
inline bool RowColProposalTransformParameter::has_in_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RowColProposalTransformParameter::set_has_in_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RowColProposalTransformParameter::clear_has_in_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RowColProposalTransformParameter::clear_in_height() {
  in_height_ = 0u;
  clear_has_in_height();
}
inline ::google::protobuf::uint32 RowColProposalTransformParameter::in_height() const {
  // @@protoc_insertion_point(field_get:caffe.RowColProposalTransformParameter.in_height)
  return in_height_;
}
inline void RowColProposalTransformParameter::set_in_height(::google::protobuf::uint32 value) {
  set_has_in_height();
  in_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.RowColProposalTransformParameter.in_height)
}

// optional uint32 out_width = 5 [default = 1];
inline bool RowColProposalTransformParameter::has_out_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RowColProposalTransformParameter::set_has_out_width() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RowColProposalTransformParameter::clear_has_out_width() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RowColProposalTransformParameter::clear_out_width() {
  out_width_ = 1u;
  clear_has_out_width();
}
inline ::google::protobuf::uint32 RowColProposalTransformParameter::out_width() const {
  // @@protoc_insertion_point(field_get:caffe.RowColProposalTransformParameter.out_width)
  return out_width_;
}
inline void RowColProposalTransformParameter::set_out_width(::google::protobuf::uint32 value) {
  set_has_out_width();
  out_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.RowColProposalTransformParameter.out_width)
}

// optional uint32 out_height = 6 [default = 1];
inline bool RowColProposalTransformParameter::has_out_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RowColProposalTransformParameter::set_has_out_height() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RowColProposalTransformParameter::clear_has_out_height() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RowColProposalTransformParameter::clear_out_height() {
  out_height_ = 1u;
  clear_has_out_height();
}
inline ::google::protobuf::uint32 RowColProposalTransformParameter::out_height() const {
  // @@protoc_insertion_point(field_get:caffe.RowColProposalTransformParameter.out_height)
  return out_height_;
}
inline void RowColProposalTransformParameter::set_out_height(::google::protobuf::uint32 value) {
  set_has_out_height();
  out_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.RowColProposalTransformParameter.out_height)
}

// optional bool objectness = 7;
inline bool RowColProposalTransformParameter::has_objectness() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RowColProposalTransformParameter::set_has_objectness() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RowColProposalTransformParameter::clear_has_objectness() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RowColProposalTransformParameter::clear_objectness() {
  objectness_ = false;
  clear_has_objectness();
}
inline bool RowColProposalTransformParameter::objectness() const {
  // @@protoc_insertion_point(field_get:caffe.RowColProposalTransformParameter.objectness)
  return objectness_;
}
inline void RowColProposalTransformParameter::set_objectness(bool value) {
  set_has_objectness();
  objectness_ = value;
  // @@protoc_insertion_point(field_set:caffe.RowColProposalTransformParameter.objectness)
}

// optional uint32 num_label = 8;
inline bool RowColProposalTransformParameter::has_num_label() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RowColProposalTransformParameter::set_has_num_label() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RowColProposalTransformParameter::clear_has_num_label() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RowColProposalTransformParameter::clear_num_label() {
  num_label_ = 0u;
  clear_has_num_label();
}
inline ::google::protobuf::uint32 RowColProposalTransformParameter::num_label() const {
  // @@protoc_insertion_point(field_get:caffe.RowColProposalTransformParameter.num_label)
  return num_label_;
}
inline void RowColProposalTransformParameter::set_num_label(::google::protobuf::uint32 value) {
  set_has_num_label();
  num_label_ = value;
  // @@protoc_insertion_point(field_set:caffe.RowColProposalTransformParameter.num_label)
}

// repeated uint32 ignore_label = 9;
inline int RowColProposalTransformParameter::ignore_label_size() const {
  return ignore_label_.size();
}
inline void RowColProposalTransformParameter::clear_ignore_label() {
  ignore_label_.Clear();
}
inline ::google::protobuf::uint32 RowColProposalTransformParameter::ignore_label(int index) const {
  // @@protoc_insertion_point(field_get:caffe.RowColProposalTransformParameter.ignore_label)
  return ignore_label_.Get(index);
}
inline void RowColProposalTransformParameter::set_ignore_label(int index, ::google::protobuf::uint32 value) {
  ignore_label_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.RowColProposalTransformParameter.ignore_label)
}
inline void RowColProposalTransformParameter::add_ignore_label(::google::protobuf::uint32 value) {
  ignore_label_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.RowColProposalTransformParameter.ignore_label)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RowColProposalTransformParameter::ignore_label() const {
  // @@protoc_insertion_point(field_list:caffe.RowColProposalTransformParameter.ignore_label)
  return ignore_label_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RowColProposalTransformParameter::mutable_ignore_label() {
  // @@protoc_insertion_point(field_mutable_list:caffe.RowColProposalTransformParameter.ignore_label)
  return &ignore_label_;
}

inline const RowColProposalTransformParameter* RowColProposalTransformParameter::internal_default_instance() {
  return &RowColProposalTransformParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// CheckParameter

// optional string dst_path = 1;
inline bool CheckParameter::has_dst_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckParameter::set_has_dst_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckParameter::clear_has_dst_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckParameter::clear_dst_path() {
  dst_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dst_path();
}
inline const ::std::string& CheckParameter::dst_path() const {
  // @@protoc_insertion_point(field_get:caffe.CheckParameter.dst_path)
  return dst_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckParameter::set_dst_path(const ::std::string& value) {
  set_has_dst_path();
  dst_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.CheckParameter.dst_path)
}
inline void CheckParameter::set_dst_path(const char* value) {
  set_has_dst_path();
  dst_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.CheckParameter.dst_path)
}
inline void CheckParameter::set_dst_path(const char* value, size_t size) {
  set_has_dst_path();
  dst_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.CheckParameter.dst_path)
}
inline ::std::string* CheckParameter::mutable_dst_path() {
  set_has_dst_path();
  // @@protoc_insertion_point(field_mutable:caffe.CheckParameter.dst_path)
  return dst_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckParameter::release_dst_path() {
  // @@protoc_insertion_point(field_release:caffe.CheckParameter.dst_path)
  clear_has_dst_path();
  return dst_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckParameter::set_allocated_dst_path(::std::string* dst_path) {
  if (dst_path != NULL) {
    set_has_dst_path();
  } else {
    clear_has_dst_path();
  }
  dst_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dst_path);
  // @@protoc_insertion_point(field_set_allocated:caffe.CheckParameter.dst_path)
}

// optional bool bbox_norm = 2 [default = true];
inline bool CheckParameter::has_bbox_norm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CheckParameter::set_has_bbox_norm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CheckParameter::clear_has_bbox_norm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CheckParameter::clear_bbox_norm() {
  bbox_norm_ = true;
  clear_has_bbox_norm();
}
inline bool CheckParameter::bbox_norm() const {
  // @@protoc_insertion_point(field_get:caffe.CheckParameter.bbox_norm)
  return bbox_norm_;
}
inline void CheckParameter::set_bbox_norm(bool value) {
  set_has_bbox_norm();
  bbox_norm_ = value;
  // @@protoc_insertion_point(field_set:caffe.CheckParameter.bbox_norm)
}

// optional float w_divider = 3;
inline bool CheckParameter::has_w_divider() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CheckParameter::set_has_w_divider() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CheckParameter::clear_has_w_divider() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CheckParameter::clear_w_divider() {
  w_divider_ = 0;
  clear_has_w_divider();
}
inline float CheckParameter::w_divider() const {
  // @@protoc_insertion_point(field_get:caffe.CheckParameter.w_divider)
  return w_divider_;
}
inline void CheckParameter::set_w_divider(float value) {
  set_has_w_divider();
  w_divider_ = value;
  // @@protoc_insertion_point(field_set:caffe.CheckParameter.w_divider)
}

// optional float h_divider = 4;
inline bool CheckParameter::has_h_divider() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CheckParameter::set_has_h_divider() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CheckParameter::clear_has_h_divider() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CheckParameter::clear_h_divider() {
  h_divider_ = 0;
  clear_has_h_divider();
}
inline float CheckParameter::h_divider() const {
  // @@protoc_insertion_point(field_get:caffe.CheckParameter.h_divider)
  return h_divider_;
}
inline void CheckParameter::set_h_divider(float value) {
  set_has_h_divider();
  h_divider_ = value;
  // @@protoc_insertion_point(field_set:caffe.CheckParameter.h_divider)
}

inline const CheckParameter* CheckParameter::internal_default_instance() {
  return &CheckParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// MeanSubParameter

// required string mean_file = 1;
inline bool MeanSubParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MeanSubParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MeanSubParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MeanSubParameter::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mean_file();
}
inline const ::std::string& MeanSubParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.MeanSubParameter.mean_file)
  return mean_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MeanSubParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.MeanSubParameter.mean_file)
}
inline void MeanSubParameter::set_mean_file(const char* value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.MeanSubParameter.mean_file)
}
inline void MeanSubParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.MeanSubParameter.mean_file)
}
inline ::std::string* MeanSubParameter::mutable_mean_file() {
  set_has_mean_file();
  // @@protoc_insertion_point(field_mutable:caffe.MeanSubParameter.mean_file)
  return mean_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MeanSubParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:caffe.MeanSubParameter.mean_file)
  clear_has_mean_file();
  return mean_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MeanSubParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file != NULL) {
    set_has_mean_file();
  } else {
    clear_has_mean_file();
  }
  mean_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.MeanSubParameter.mean_file)
}

inline const MeanSubParameter* MeanSubParameter::internal_default_instance() {
  return &MeanSubParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// AnnoToSegParameter

// optional bool objectness = 1 [default = false];
inline bool AnnoToSegParameter::has_objectness() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AnnoToSegParameter::set_has_objectness() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AnnoToSegParameter::clear_has_objectness() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AnnoToSegParameter::clear_objectness() {
  objectness_ = false;
  clear_has_objectness();
}
inline bool AnnoToSegParameter::objectness() const {
  // @@protoc_insertion_point(field_get:caffe.AnnoToSegParameter.objectness)
  return objectness_;
}
inline void AnnoToSegParameter::set_objectness(bool value) {
  set_has_objectness();
  objectness_ = value;
  // @@protoc_insertion_point(field_set:caffe.AnnoToSegParameter.objectness)
}

// optional uint32 num_label = 2;
inline bool AnnoToSegParameter::has_num_label() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AnnoToSegParameter::set_has_num_label() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AnnoToSegParameter::clear_has_num_label() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AnnoToSegParameter::clear_num_label() {
  num_label_ = 0u;
  clear_has_num_label();
}
inline ::google::protobuf::uint32 AnnoToSegParameter::num_label() const {
  // @@protoc_insertion_point(field_get:caffe.AnnoToSegParameter.num_label)
  return num_label_;
}
inline void AnnoToSegParameter::set_num_label(::google::protobuf::uint32 value) {
  set_has_num_label();
  num_label_ = value;
  // @@protoc_insertion_point(field_set:caffe.AnnoToSegParameter.num_label)
}

// optional bool bbox_normalized = 3 [default = false];
inline bool AnnoToSegParameter::has_bbox_normalized() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AnnoToSegParameter::set_has_bbox_normalized() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AnnoToSegParameter::clear_has_bbox_normalized() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AnnoToSegParameter::clear_bbox_normalized() {
  bbox_normalized_ = false;
  clear_has_bbox_normalized();
}
inline bool AnnoToSegParameter::bbox_normalized() const {
  // @@protoc_insertion_point(field_get:caffe.AnnoToSegParameter.bbox_normalized)
  return bbox_normalized_;
}
inline void AnnoToSegParameter::set_bbox_normalized(bool value) {
  set_has_bbox_normalized();
  bbox_normalized_ = value;
  // @@protoc_insertion_point(field_set:caffe.AnnoToSegParameter.bbox_normalized)
}

// optional uint32 in_width = 4 [default = 1];
inline bool AnnoToSegParameter::has_in_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AnnoToSegParameter::set_has_in_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AnnoToSegParameter::clear_has_in_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AnnoToSegParameter::clear_in_width() {
  in_width_ = 1u;
  clear_has_in_width();
}
inline ::google::protobuf::uint32 AnnoToSegParameter::in_width() const {
  // @@protoc_insertion_point(field_get:caffe.AnnoToSegParameter.in_width)
  return in_width_;
}
inline void AnnoToSegParameter::set_in_width(::google::protobuf::uint32 value) {
  set_has_in_width();
  in_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.AnnoToSegParameter.in_width)
}

// optional uint32 in_height = 5 [default = 1];
inline bool AnnoToSegParameter::has_in_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AnnoToSegParameter::set_has_in_height() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AnnoToSegParameter::clear_has_in_height() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AnnoToSegParameter::clear_in_height() {
  in_height_ = 1u;
  clear_has_in_height();
}
inline ::google::protobuf::uint32 AnnoToSegParameter::in_height() const {
  // @@protoc_insertion_point(field_get:caffe.AnnoToSegParameter.in_height)
  return in_height_;
}
inline void AnnoToSegParameter::set_in_height(::google::protobuf::uint32 value) {
  set_has_in_height();
  in_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.AnnoToSegParameter.in_height)
}

// optional uint32 out_width = 6;
inline bool AnnoToSegParameter::has_out_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AnnoToSegParameter::set_has_out_width() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AnnoToSegParameter::clear_has_out_width() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AnnoToSegParameter::clear_out_width() {
  out_width_ = 0u;
  clear_has_out_width();
}
inline ::google::protobuf::uint32 AnnoToSegParameter::out_width() const {
  // @@protoc_insertion_point(field_get:caffe.AnnoToSegParameter.out_width)
  return out_width_;
}
inline void AnnoToSegParameter::set_out_width(::google::protobuf::uint32 value) {
  set_has_out_width();
  out_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.AnnoToSegParameter.out_width)
}

// optional uint32 out_height = 7;
inline bool AnnoToSegParameter::has_out_height() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AnnoToSegParameter::set_has_out_height() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AnnoToSegParameter::clear_has_out_height() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AnnoToSegParameter::clear_out_height() {
  out_height_ = 0u;
  clear_has_out_height();
}
inline ::google::protobuf::uint32 AnnoToSegParameter::out_height() const {
  // @@protoc_insertion_point(field_get:caffe.AnnoToSegParameter.out_height)
  return out_height_;
}
inline void AnnoToSegParameter::set_out_height(::google::protobuf::uint32 value) {
  set_has_out_height();
  out_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.AnnoToSegParameter.out_height)
}

inline const AnnoToSegParameter* AnnoToSegParameter::internal_default_instance() {
  return &AnnoToSegParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// TrainROIParameter

// required uint32 img_width = 1;
inline bool TrainROIParameter::has_img_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrainROIParameter::set_has_img_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrainROIParameter::clear_has_img_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrainROIParameter::clear_img_width() {
  img_width_ = 0u;
  clear_has_img_width();
}
inline ::google::protobuf::uint32 TrainROIParameter::img_width() const {
  // @@protoc_insertion_point(field_get:caffe.TrainROIParameter.img_width)
  return img_width_;
}
inline void TrainROIParameter::set_img_width(::google::protobuf::uint32 value) {
  set_has_img_width();
  img_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.TrainROIParameter.img_width)
}

// required uint32 img_height = 2;
inline bool TrainROIParameter::has_img_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrainROIParameter::set_has_img_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrainROIParameter::clear_has_img_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrainROIParameter::clear_img_height() {
  img_height_ = 0u;
  clear_has_img_height();
}
inline ::google::protobuf::uint32 TrainROIParameter::img_height() const {
  // @@protoc_insertion_point(field_get:caffe.TrainROIParameter.img_height)
  return img_height_;
}
inline void TrainROIParameter::set_img_height(::google::protobuf::uint32 value) {
  set_has_img_height();
  img_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.TrainROIParameter.img_height)
}

// required uint32 roi_width = 3;
inline bool TrainROIParameter::has_roi_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrainROIParameter::set_has_roi_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrainROIParameter::clear_has_roi_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrainROIParameter::clear_roi_width() {
  roi_width_ = 0u;
  clear_has_roi_width();
}
inline ::google::protobuf::uint32 TrainROIParameter::roi_width() const {
  // @@protoc_insertion_point(field_get:caffe.TrainROIParameter.roi_width)
  return roi_width_;
}
inline void TrainROIParameter::set_roi_width(::google::protobuf::uint32 value) {
  set_has_roi_width();
  roi_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.TrainROIParameter.roi_width)
}

// required uint32 roi_height = 4;
inline bool TrainROIParameter::has_roi_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrainROIParameter::set_has_roi_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrainROIParameter::clear_has_roi_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrainROIParameter::clear_roi_height() {
  roi_height_ = 0u;
  clear_has_roi_height();
}
inline ::google::protobuf::uint32 TrainROIParameter::roi_height() const {
  // @@protoc_insertion_point(field_get:caffe.TrainROIParameter.roi_height)
  return roi_height_;
}
inline void TrainROIParameter::set_roi_height(::google::protobuf::uint32 value) {
  set_has_roi_height();
  roi_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.TrainROIParameter.roi_height)
}

inline const TrainROIParameter* TrainROIParameter::internal_default_instance() {
  return &TrainROIParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// YOLOV2LossParameter

// repeated .caffe.Rect2f anchor = 1;
inline int YOLOV2LossParameter::anchor_size() const {
  return anchor_.size();
}
inline void YOLOV2LossParameter::clear_anchor() {
  anchor_.Clear();
}
inline const ::caffe::Rect2f& YOLOV2LossParameter::anchor(int index) const {
  // @@protoc_insertion_point(field_get:caffe.YOLOV2LossParameter.anchor)
  return anchor_.Get(index);
}
inline ::caffe::Rect2f* YOLOV2LossParameter::mutable_anchor(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.YOLOV2LossParameter.anchor)
  return anchor_.Mutable(index);
}
inline ::caffe::Rect2f* YOLOV2LossParameter::add_anchor() {
  // @@protoc_insertion_point(field_add:caffe.YOLOV2LossParameter.anchor)
  return anchor_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::Rect2f >*
YOLOV2LossParameter::mutable_anchor() {
  // @@protoc_insertion_point(field_mutable_list:caffe.YOLOV2LossParameter.anchor)
  return &anchor_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::Rect2f >&
YOLOV2LossParameter::anchor() const {
  // @@protoc_insertion_point(field_list:caffe.YOLOV2LossParameter.anchor)
  return anchor_;
}

// required uint32 num_class = 2;
inline bool YOLOV2LossParameter::has_num_class() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YOLOV2LossParameter::set_has_num_class() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YOLOV2LossParameter::clear_has_num_class() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YOLOV2LossParameter::clear_num_class() {
  num_class_ = 0u;
  clear_has_num_class();
}
inline ::google::protobuf::uint32 YOLOV2LossParameter::num_class() const {
  // @@protoc_insertion_point(field_get:caffe.YOLOV2LossParameter.num_class)
  return num_class_;
}
inline void YOLOV2LossParameter::set_num_class(::google::protobuf::uint32 value) {
  set_has_num_class();
  num_class_ = value;
  // @@protoc_insertion_point(field_set:caffe.YOLOV2LossParameter.num_class)
}

// required .caffe.Size2i img_size = 3;
inline bool YOLOV2LossParameter::has_img_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YOLOV2LossParameter::set_has_img_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YOLOV2LossParameter::clear_has_img_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YOLOV2LossParameter::clear_img_size() {
  if (img_size_ != NULL) img_size_->::caffe::Size2i::Clear();
  clear_has_img_size();
}
inline const ::caffe::Size2i& YOLOV2LossParameter::img_size() const {
  // @@protoc_insertion_point(field_get:caffe.YOLOV2LossParameter.img_size)
  return img_size_ != NULL ? *img_size_
                         : *::caffe::Size2i::internal_default_instance();
}
inline ::caffe::Size2i* YOLOV2LossParameter::mutable_img_size() {
  set_has_img_size();
  if (img_size_ == NULL) {
    img_size_ = new ::caffe::Size2i;
  }
  // @@protoc_insertion_point(field_mutable:caffe.YOLOV2LossParameter.img_size)
  return img_size_;
}
inline ::caffe::Size2i* YOLOV2LossParameter::release_img_size() {
  // @@protoc_insertion_point(field_release:caffe.YOLOV2LossParameter.img_size)
  clear_has_img_size();
  ::caffe::Size2i* temp = img_size_;
  img_size_ = NULL;
  return temp;
}
inline void YOLOV2LossParameter::set_allocated_img_size(::caffe::Size2i* img_size) {
  delete img_size_;
  img_size_ = img_size;
  if (img_size) {
    set_has_img_size();
  } else {
    clear_has_img_size();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.YOLOV2LossParameter.img_size)
}

// required .caffe.Size2i yolo_map_size = 4;
inline bool YOLOV2LossParameter::has_yolo_map_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YOLOV2LossParameter::set_has_yolo_map_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YOLOV2LossParameter::clear_has_yolo_map_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YOLOV2LossParameter::clear_yolo_map_size() {
  if (yolo_map_size_ != NULL) yolo_map_size_->::caffe::Size2i::Clear();
  clear_has_yolo_map_size();
}
inline const ::caffe::Size2i& YOLOV2LossParameter::yolo_map_size() const {
  // @@protoc_insertion_point(field_get:caffe.YOLOV2LossParameter.yolo_map_size)
  return yolo_map_size_ != NULL ? *yolo_map_size_
                         : *::caffe::Size2i::internal_default_instance();
}
inline ::caffe::Size2i* YOLOV2LossParameter::mutable_yolo_map_size() {
  set_has_yolo_map_size();
  if (yolo_map_size_ == NULL) {
    yolo_map_size_ = new ::caffe::Size2i;
  }
  // @@protoc_insertion_point(field_mutable:caffe.YOLOV2LossParameter.yolo_map_size)
  return yolo_map_size_;
}
inline ::caffe::Size2i* YOLOV2LossParameter::release_yolo_map_size() {
  // @@protoc_insertion_point(field_release:caffe.YOLOV2LossParameter.yolo_map_size)
  clear_has_yolo_map_size();
  ::caffe::Size2i* temp = yolo_map_size_;
  yolo_map_size_ = NULL;
  return temp;
}
inline void YOLOV2LossParameter::set_allocated_yolo_map_size(::caffe::Size2i* yolo_map_size) {
  delete yolo_map_size_;
  yolo_map_size_ = yolo_map_size;
  if (yolo_map_size) {
    set_has_yolo_map_size();
  } else {
    clear_has_yolo_map_size();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.YOLOV2LossParameter.yolo_map_size)
}

// optional float overlap_threshold = 5 [default = 0.3];
inline bool YOLOV2LossParameter::has_overlap_threshold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void YOLOV2LossParameter::set_has_overlap_threshold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void YOLOV2LossParameter::clear_has_overlap_threshold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void YOLOV2LossParameter::clear_overlap_threshold() {
  overlap_threshold_ = 0.3f;
  clear_has_overlap_threshold();
}
inline float YOLOV2LossParameter::overlap_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.YOLOV2LossParameter.overlap_threshold)
  return overlap_threshold_;
}
inline void YOLOV2LossParameter::set_overlap_threshold(float value) {
  set_has_overlap_threshold();
  overlap_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.YOLOV2LossParameter.overlap_threshold)
}

// optional float noobj_scale = 6 [default = 1];
inline bool YOLOV2LossParameter::has_noobj_scale() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void YOLOV2LossParameter::set_has_noobj_scale() {
  _has_bits_[0] |= 0x00000020u;
}
inline void YOLOV2LossParameter::clear_has_noobj_scale() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void YOLOV2LossParameter::clear_noobj_scale() {
  noobj_scale_ = 1;
  clear_has_noobj_scale();
}
inline float YOLOV2LossParameter::noobj_scale() const {
  // @@protoc_insertion_point(field_get:caffe.YOLOV2LossParameter.noobj_scale)
  return noobj_scale_;
}
inline void YOLOV2LossParameter::set_noobj_scale(float value) {
  set_has_noobj_scale();
  noobj_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.YOLOV2LossParameter.noobj_scale)
}

// optional float obj_scale = 7 [default = 3];
inline bool YOLOV2LossParameter::has_obj_scale() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void YOLOV2LossParameter::set_has_obj_scale() {
  _has_bits_[0] |= 0x00000040u;
}
inline void YOLOV2LossParameter::clear_has_obj_scale() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void YOLOV2LossParameter::clear_obj_scale() {
  obj_scale_ = 3;
  clear_has_obj_scale();
}
inline float YOLOV2LossParameter::obj_scale() const {
  // @@protoc_insertion_point(field_get:caffe.YOLOV2LossParameter.obj_scale)
  return obj_scale_;
}
inline void YOLOV2LossParameter::set_obj_scale(float value) {
  set_has_obj_scale();
  obj_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.YOLOV2LossParameter.obj_scale)
}

// optional float cls_scale = 8 [default = 2];
inline bool YOLOV2LossParameter::has_cls_scale() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void YOLOV2LossParameter::set_has_cls_scale() {
  _has_bits_[0] |= 0x00000080u;
}
inline void YOLOV2LossParameter::clear_has_cls_scale() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void YOLOV2LossParameter::clear_cls_scale() {
  cls_scale_ = 2;
  clear_has_cls_scale();
}
inline float YOLOV2LossParameter::cls_scale() const {
  // @@protoc_insertion_point(field_get:caffe.YOLOV2LossParameter.cls_scale)
  return cls_scale_;
}
inline void YOLOV2LossParameter::set_cls_scale(float value) {
  set_has_cls_scale();
  cls_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.YOLOV2LossParameter.cls_scale)
}

// optional float coord_scale = 9 [default = 2];
inline bool YOLOV2LossParameter::has_coord_scale() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void YOLOV2LossParameter::set_has_coord_scale() {
  _has_bits_[0] |= 0x00000100u;
}
inline void YOLOV2LossParameter::clear_has_coord_scale() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void YOLOV2LossParameter::clear_coord_scale() {
  coord_scale_ = 2;
  clear_has_coord_scale();
}
inline float YOLOV2LossParameter::coord_scale() const {
  // @@protoc_insertion_point(field_get:caffe.YOLOV2LossParameter.coord_scale)
  return coord_scale_;
}
inline void YOLOV2LossParameter::set_coord_scale(float value) {
  set_has_coord_scale();
  coord_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.YOLOV2LossParameter.coord_scale)
}

inline const YOLOV2LossParameter* YOLOV2LossParameter::internal_default_instance() {
  return &YOLOV2LossParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// YOLOV2ResultParameter

// required .caffe.Size2i cell_size = 1;
inline bool YOLOV2ResultParameter::has_cell_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YOLOV2ResultParameter::set_has_cell_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YOLOV2ResultParameter::clear_has_cell_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YOLOV2ResultParameter::clear_cell_size() {
  if (cell_size_ != NULL) cell_size_->::caffe::Size2i::Clear();
  clear_has_cell_size();
}
inline const ::caffe::Size2i& YOLOV2ResultParameter::cell_size() const {
  // @@protoc_insertion_point(field_get:caffe.YOLOV2ResultParameter.cell_size)
  return cell_size_ != NULL ? *cell_size_
                         : *::caffe::Size2i::internal_default_instance();
}
inline ::caffe::Size2i* YOLOV2ResultParameter::mutable_cell_size() {
  set_has_cell_size();
  if (cell_size_ == NULL) {
    cell_size_ = new ::caffe::Size2i;
  }
  // @@protoc_insertion_point(field_mutable:caffe.YOLOV2ResultParameter.cell_size)
  return cell_size_;
}
inline ::caffe::Size2i* YOLOV2ResultParameter::release_cell_size() {
  // @@protoc_insertion_point(field_release:caffe.YOLOV2ResultParameter.cell_size)
  clear_has_cell_size();
  ::caffe::Size2i* temp = cell_size_;
  cell_size_ = NULL;
  return temp;
}
inline void YOLOV2ResultParameter::set_allocated_cell_size(::caffe::Size2i* cell_size) {
  delete cell_size_;
  cell_size_ = cell_size;
  if (cell_size) {
    set_has_cell_size();
  } else {
    clear_has_cell_size();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.YOLOV2ResultParameter.cell_size)
}

// required uint32 num_class = 2;
inline bool YOLOV2ResultParameter::has_num_class() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YOLOV2ResultParameter::set_has_num_class() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YOLOV2ResultParameter::clear_has_num_class() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YOLOV2ResultParameter::clear_num_class() {
  num_class_ = 0u;
  clear_has_num_class();
}
inline ::google::protobuf::uint32 YOLOV2ResultParameter::num_class() const {
  // @@protoc_insertion_point(field_get:caffe.YOLOV2ResultParameter.num_class)
  return num_class_;
}
inline void YOLOV2ResultParameter::set_num_class(::google::protobuf::uint32 value) {
  set_has_num_class();
  num_class_ = value;
  // @@protoc_insertion_point(field_set:caffe.YOLOV2ResultParameter.num_class)
}

// repeated .caffe.Rect2f anchor = 3;
inline int YOLOV2ResultParameter::anchor_size() const {
  return anchor_.size();
}
inline void YOLOV2ResultParameter::clear_anchor() {
  anchor_.Clear();
}
inline const ::caffe::Rect2f& YOLOV2ResultParameter::anchor(int index) const {
  // @@protoc_insertion_point(field_get:caffe.YOLOV2ResultParameter.anchor)
  return anchor_.Get(index);
}
inline ::caffe::Rect2f* YOLOV2ResultParameter::mutable_anchor(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.YOLOV2ResultParameter.anchor)
  return anchor_.Mutable(index);
}
inline ::caffe::Rect2f* YOLOV2ResultParameter::add_anchor() {
  // @@protoc_insertion_point(field_add:caffe.YOLOV2ResultParameter.anchor)
  return anchor_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::Rect2f >*
YOLOV2ResultParameter::mutable_anchor() {
  // @@protoc_insertion_point(field_mutable_list:caffe.YOLOV2ResultParameter.anchor)
  return &anchor_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::Rect2f >&
YOLOV2ResultParameter::anchor() const {
  // @@protoc_insertion_point(field_list:caffe.YOLOV2ResultParameter.anchor)
  return anchor_;
}

// required uint32 num_detection = 4;
inline bool YOLOV2ResultParameter::has_num_detection() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YOLOV2ResultParameter::set_has_num_detection() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YOLOV2ResultParameter::clear_has_num_detection() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YOLOV2ResultParameter::clear_num_detection() {
  num_detection_ = 0u;
  clear_has_num_detection();
}
inline ::google::protobuf::uint32 YOLOV2ResultParameter::num_detection() const {
  // @@protoc_insertion_point(field_get:caffe.YOLOV2ResultParameter.num_detection)
  return num_detection_;
}
inline void YOLOV2ResultParameter::set_num_detection(::google::protobuf::uint32 value) {
  set_has_num_detection();
  num_detection_ = value;
  // @@protoc_insertion_point(field_set:caffe.YOLOV2ResultParameter.num_detection)
}

// optional bool do_nms = 5 [default = true];
inline bool YOLOV2ResultParameter::has_do_nms() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void YOLOV2ResultParameter::set_has_do_nms() {
  _has_bits_[0] |= 0x00000010u;
}
inline void YOLOV2ResultParameter::clear_has_do_nms() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void YOLOV2ResultParameter::clear_do_nms() {
  do_nms_ = true;
  clear_has_do_nms();
}
inline bool YOLOV2ResultParameter::do_nms() const {
  // @@protoc_insertion_point(field_get:caffe.YOLOV2ResultParameter.do_nms)
  return do_nms_;
}
inline void YOLOV2ResultParameter::set_do_nms(bool value) {
  set_has_do_nms();
  do_nms_ = value;
  // @@protoc_insertion_point(field_set:caffe.YOLOV2ResultParameter.do_nms)
}

// optional float nms_overlap_threshold = 6 [default = 0.5];
inline bool YOLOV2ResultParameter::has_nms_overlap_threshold() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void YOLOV2ResultParameter::set_has_nms_overlap_threshold() {
  _has_bits_[0] |= 0x00000020u;
}
inline void YOLOV2ResultParameter::clear_has_nms_overlap_threshold() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void YOLOV2ResultParameter::clear_nms_overlap_threshold() {
  nms_overlap_threshold_ = 0.5f;
  clear_has_nms_overlap_threshold();
}
inline float YOLOV2ResultParameter::nms_overlap_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.YOLOV2ResultParameter.nms_overlap_threshold)
  return nms_overlap_threshold_;
}
inline void YOLOV2ResultParameter::set_nms_overlap_threshold(float value) {
  set_has_nms_overlap_threshold();
  nms_overlap_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.YOLOV2ResultParameter.nms_overlap_threshold)
}

// optional float conf_threshold = 7 [default = 0.5];
inline bool YOLOV2ResultParameter::has_conf_threshold() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void YOLOV2ResultParameter::set_has_conf_threshold() {
  _has_bits_[0] |= 0x00000040u;
}
inline void YOLOV2ResultParameter::clear_has_conf_threshold() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void YOLOV2ResultParameter::clear_conf_threshold() {
  conf_threshold_ = 0.5f;
  clear_has_conf_threshold();
}
inline float YOLOV2ResultParameter::conf_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.YOLOV2ResultParameter.conf_threshold)
  return conf_threshold_;
}
inline void YOLOV2ResultParameter::set_conf_threshold(float value) {
  set_has_conf_threshold();
  conf_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.YOLOV2ResultParameter.conf_threshold)
}

inline const YOLOV2ResultParameter* YOLOV2ResultParameter::internal_default_instance() {
  return &YOLOV2ResultParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// DetectionCheckParameter

// optional bool eval_performance = 1 [default = true];
inline bool DetectionCheckParameter::has_eval_performance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DetectionCheckParameter::set_has_eval_performance() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DetectionCheckParameter::clear_has_eval_performance() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DetectionCheckParameter::clear_eval_performance() {
  eval_performance_ = true;
  clear_has_eval_performance();
}
inline bool DetectionCheckParameter::eval_performance() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionCheckParameter.eval_performance)
  return eval_performance_;
}
inline void DetectionCheckParameter::set_eval_performance(bool value) {
  set_has_eval_performance();
  eval_performance_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionCheckParameter.eval_performance)
}

// optional bool draw = 2 [default = true];
inline bool DetectionCheckParameter::has_draw() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DetectionCheckParameter::set_has_draw() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DetectionCheckParameter::clear_has_draw() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DetectionCheckParameter::clear_draw() {
  draw_ = true;
  clear_has_draw();
}
inline bool DetectionCheckParameter::draw() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionCheckParameter.draw)
  return draw_;
}
inline void DetectionCheckParameter::set_draw(bool value) {
  set_has_draw();
  draw_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionCheckParameter.draw)
}

// optional float detection_conf_threshold = 3 [default = 0];
inline bool DetectionCheckParameter::has_detection_conf_threshold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DetectionCheckParameter::set_has_detection_conf_threshold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DetectionCheckParameter::clear_has_detection_conf_threshold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DetectionCheckParameter::clear_detection_conf_threshold() {
  detection_conf_threshold_ = 0;
  clear_has_detection_conf_threshold();
}
inline float DetectionCheckParameter::detection_conf_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionCheckParameter.detection_conf_threshold)
  return detection_conf_threshold_;
}
inline void DetectionCheckParameter::set_detection_conf_threshold(float value) {
  set_has_detection_conf_threshold();
  detection_conf_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionCheckParameter.detection_conf_threshold)
}

// optional float iou_threshold = 4 [default = 0.5];
inline bool DetectionCheckParameter::has_iou_threshold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DetectionCheckParameter::set_has_iou_threshold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DetectionCheckParameter::clear_has_iou_threshold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DetectionCheckParameter::clear_iou_threshold() {
  iou_threshold_ = 0.5f;
  clear_has_iou_threshold();
}
inline float DetectionCheckParameter::iou_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionCheckParameter.iou_threshold)
  return iou_threshold_;
}
inline void DetectionCheckParameter::set_iou_threshold(float value) {
  set_has_iou_threshold();
  iou_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionCheckParameter.iou_threshold)
}

// optional string log_path = 5 [default = "./detection_log/"];
inline bool DetectionCheckParameter::has_log_path() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DetectionCheckParameter::set_has_log_path() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DetectionCheckParameter::clear_has_log_path() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DetectionCheckParameter::clear_log_path() {
  log_path_.ClearToDefaultNoArena(_default_log_path_);
  clear_has_log_path();
}
inline const ::std::string& DetectionCheckParameter::log_path() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionCheckParameter.log_path)
  return log_path_.GetNoArena(_default_log_path_);
}
inline void DetectionCheckParameter::set_log_path(const ::std::string& value) {
  set_has_log_path();
  log_path_.SetNoArena(_default_log_path_, value);
  // @@protoc_insertion_point(field_set:caffe.DetectionCheckParameter.log_path)
}
inline void DetectionCheckParameter::set_log_path(const char* value) {
  set_has_log_path();
  log_path_.SetNoArena(_default_log_path_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.DetectionCheckParameter.log_path)
}
inline void DetectionCheckParameter::set_log_path(const char* value, size_t size) {
  set_has_log_path();
  log_path_.SetNoArena(_default_log_path_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.DetectionCheckParameter.log_path)
}
inline ::std::string* DetectionCheckParameter::mutable_log_path() {
  set_has_log_path();
  // @@protoc_insertion_point(field_mutable:caffe.DetectionCheckParameter.log_path)
  return log_path_.MutableNoArena(_default_log_path_);
}
inline ::std::string* DetectionCheckParameter::release_log_path() {
  // @@protoc_insertion_point(field_release:caffe.DetectionCheckParameter.log_path)
  clear_has_log_path();
  return log_path_.ReleaseNoArena(_default_log_path_);
}
inline void DetectionCheckParameter::set_allocated_log_path(::std::string* log_path) {
  if (log_path != NULL) {
    set_has_log_path();
  } else {
    clear_has_log_path();
  }
  log_path_.SetAllocatedNoArena(_default_log_path_, log_path);
  // @@protoc_insertion_point(field_set_allocated:caffe.DetectionCheckParameter.log_path)
}

// optional bool detection_only = 6 [default = false];
inline bool DetectionCheckParameter::has_detection_only() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DetectionCheckParameter::set_has_detection_only() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DetectionCheckParameter::clear_has_detection_only() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DetectionCheckParameter::clear_detection_only() {
  detection_only_ = false;
  clear_has_detection_only();
}
inline bool DetectionCheckParameter::detection_only() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionCheckParameter.detection_only)
  return detection_only_;
}
inline void DetectionCheckParameter::set_detection_only(bool value) {
  set_has_detection_only();
  detection_only_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionCheckParameter.detection_only)
}

// optional bool do_nms = 7 [default = true];
inline bool DetectionCheckParameter::has_do_nms() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DetectionCheckParameter::set_has_do_nms() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DetectionCheckParameter::clear_has_do_nms() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DetectionCheckParameter::clear_do_nms() {
  do_nms_ = true;
  clear_has_do_nms();
}
inline bool DetectionCheckParameter::do_nms() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionCheckParameter.do_nms)
  return do_nms_;
}
inline void DetectionCheckParameter::set_do_nms(bool value) {
  set_has_do_nms();
  do_nms_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionCheckParameter.do_nms)
}

// optional float nms_overlap_threshold = 8 [default = 0.5];
inline bool DetectionCheckParameter::has_nms_overlap_threshold() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DetectionCheckParameter::set_has_nms_overlap_threshold() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DetectionCheckParameter::clear_has_nms_overlap_threshold() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DetectionCheckParameter::clear_nms_overlap_threshold() {
  nms_overlap_threshold_ = 0.5f;
  clear_has_nms_overlap_threshold();
}
inline float DetectionCheckParameter::nms_overlap_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionCheckParameter.nms_overlap_threshold)
  return nms_overlap_threshold_;
}
inline void DetectionCheckParameter::set_nms_overlap_threshold(float value) {
  set_has_nms_overlap_threshold();
  nms_overlap_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionCheckParameter.nms_overlap_threshold)
}

inline const DetectionCheckParameter* DetectionCheckParameter::internal_default_instance() {
  return &DetectionCheckParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// SubwinOffsetParameter

// required .caffe.Size2i win_size = 1;
inline bool SubwinOffsetParameter::has_win_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubwinOffsetParameter::set_has_win_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubwinOffsetParameter::clear_has_win_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubwinOffsetParameter::clear_win_size() {
  if (win_size_ != NULL) win_size_->::caffe::Size2i::Clear();
  clear_has_win_size();
}
inline const ::caffe::Size2i& SubwinOffsetParameter::win_size() const {
  // @@protoc_insertion_point(field_get:caffe.SubwinOffsetParameter.win_size)
  return win_size_ != NULL ? *win_size_
                         : *::caffe::Size2i::internal_default_instance();
}
inline ::caffe::Size2i* SubwinOffsetParameter::mutable_win_size() {
  set_has_win_size();
  if (win_size_ == NULL) {
    win_size_ = new ::caffe::Size2i;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SubwinOffsetParameter.win_size)
  return win_size_;
}
inline ::caffe::Size2i* SubwinOffsetParameter::release_win_size() {
  // @@protoc_insertion_point(field_release:caffe.SubwinOffsetParameter.win_size)
  clear_has_win_size();
  ::caffe::Size2i* temp = win_size_;
  win_size_ = NULL;
  return temp;
}
inline void SubwinOffsetParameter::set_allocated_win_size(::caffe::Size2i* win_size) {
  delete win_size_;
  win_size_ = win_size;
  if (win_size) {
    set_has_win_size();
  } else {
    clear_has_win_size();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SubwinOffsetParameter.win_size)
}

// repeated .caffe.Point2i win_offset = 2;
inline int SubwinOffsetParameter::win_offset_size() const {
  return win_offset_.size();
}
inline void SubwinOffsetParameter::clear_win_offset() {
  win_offset_.Clear();
}
inline const ::caffe::Point2i& SubwinOffsetParameter::win_offset(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SubwinOffsetParameter.win_offset)
  return win_offset_.Get(index);
}
inline ::caffe::Point2i* SubwinOffsetParameter::mutable_win_offset(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SubwinOffsetParameter.win_offset)
  return win_offset_.Mutable(index);
}
inline ::caffe::Point2i* SubwinOffsetParameter::add_win_offset() {
  // @@protoc_insertion_point(field_add:caffe.SubwinOffsetParameter.win_offset)
  return win_offset_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::Point2i >*
SubwinOffsetParameter::mutable_win_offset() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SubwinOffsetParameter.win_offset)
  return &win_offset_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::Point2i >&
SubwinOffsetParameter::win_offset() const {
  // @@protoc_insertion_point(field_list:caffe.SubwinOffsetParameter.win_offset)
  return win_offset_;
}

// optional bool global_detection = 3 [default = true];
inline bool SubwinOffsetParameter::has_global_detection() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SubwinOffsetParameter::set_has_global_detection() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SubwinOffsetParameter::clear_has_global_detection() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SubwinOffsetParameter::clear_global_detection() {
  global_detection_ = true;
  clear_has_global_detection();
}
inline bool SubwinOffsetParameter::global_detection() const {
  // @@protoc_insertion_point(field_get:caffe.SubwinOffsetParameter.global_detection)
  return global_detection_;
}
inline void SubwinOffsetParameter::set_global_detection(bool value) {
  set_has_global_detection();
  global_detection_ = value;
  // @@protoc_insertion_point(field_set:caffe.SubwinOffsetParameter.global_detection)
}

inline const SubwinOffsetParameter* SubwinOffsetParameter::internal_default_instance() {
  return &SubwinOffsetParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// SizeRejectionParameter

// optional float w_min = 1;
inline bool SizeRejectionParameter::has_w_min() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SizeRejectionParameter::set_has_w_min() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SizeRejectionParameter::clear_has_w_min() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SizeRejectionParameter::clear_w_min() {
  w_min_ = 0;
  clear_has_w_min();
}
inline float SizeRejectionParameter::w_min() const {
  // @@protoc_insertion_point(field_get:caffe.SizeRejectionParameter.w_min)
  return w_min_;
}
inline void SizeRejectionParameter::set_w_min(float value) {
  set_has_w_min();
  w_min_ = value;
  // @@protoc_insertion_point(field_set:caffe.SizeRejectionParameter.w_min)
}

// optional float w_max = 2;
inline bool SizeRejectionParameter::has_w_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SizeRejectionParameter::set_has_w_max() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SizeRejectionParameter::clear_has_w_max() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SizeRejectionParameter::clear_w_max() {
  w_max_ = 0;
  clear_has_w_max();
}
inline float SizeRejectionParameter::w_max() const {
  // @@protoc_insertion_point(field_get:caffe.SizeRejectionParameter.w_max)
  return w_max_;
}
inline void SizeRejectionParameter::set_w_max(float value) {
  set_has_w_max();
  w_max_ = value;
  // @@protoc_insertion_point(field_set:caffe.SizeRejectionParameter.w_max)
}

// optional float h_min = 3;
inline bool SizeRejectionParameter::has_h_min() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SizeRejectionParameter::set_has_h_min() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SizeRejectionParameter::clear_has_h_min() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SizeRejectionParameter::clear_h_min() {
  h_min_ = 0;
  clear_has_h_min();
}
inline float SizeRejectionParameter::h_min() const {
  // @@protoc_insertion_point(field_get:caffe.SizeRejectionParameter.h_min)
  return h_min_;
}
inline void SizeRejectionParameter::set_h_min(float value) {
  set_has_h_min();
  h_min_ = value;
  // @@protoc_insertion_point(field_set:caffe.SizeRejectionParameter.h_min)
}

// optional float h_max = 4;
inline bool SizeRejectionParameter::has_h_max() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SizeRejectionParameter::set_has_h_max() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SizeRejectionParameter::clear_has_h_max() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SizeRejectionParameter::clear_h_max() {
  h_max_ = 0;
  clear_has_h_max();
}
inline float SizeRejectionParameter::h_max() const {
  // @@protoc_insertion_point(field_get:caffe.SizeRejectionParameter.h_max)
  return h_max_;
}
inline void SizeRejectionParameter::set_h_max(float value) {
  set_has_h_max();
  h_max_ = value;
  // @@protoc_insertion_point(field_set:caffe.SizeRejectionParameter.h_max)
}

inline const SizeRejectionParameter* SizeRejectionParameter::internal_default_instance() {
  return &SizeRejectionParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// ConfCheckParameter

// optional string out_path = 1 [default = "."];
inline bool ConfCheckParameter::has_out_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfCheckParameter::set_has_out_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfCheckParameter::clear_has_out_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfCheckParameter::clear_out_path() {
  out_path_.ClearToDefaultNoArena(_default_out_path_);
  clear_has_out_path();
}
inline const ::std::string& ConfCheckParameter::out_path() const {
  // @@protoc_insertion_point(field_get:caffe.ConfCheckParameter.out_path)
  return out_path_.GetNoArena(_default_out_path_);
}
inline void ConfCheckParameter::set_out_path(const ::std::string& value) {
  set_has_out_path();
  out_path_.SetNoArena(_default_out_path_, value);
  // @@protoc_insertion_point(field_set:caffe.ConfCheckParameter.out_path)
}
inline void ConfCheckParameter::set_out_path(const char* value) {
  set_has_out_path();
  out_path_.SetNoArena(_default_out_path_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ConfCheckParameter.out_path)
}
inline void ConfCheckParameter::set_out_path(const char* value, size_t size) {
  set_has_out_path();
  out_path_.SetNoArena(_default_out_path_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ConfCheckParameter.out_path)
}
inline ::std::string* ConfCheckParameter::mutable_out_path() {
  set_has_out_path();
  // @@protoc_insertion_point(field_mutable:caffe.ConfCheckParameter.out_path)
  return out_path_.MutableNoArena(_default_out_path_);
}
inline ::std::string* ConfCheckParameter::release_out_path() {
  // @@protoc_insertion_point(field_release:caffe.ConfCheckParameter.out_path)
  clear_has_out_path();
  return out_path_.ReleaseNoArena(_default_out_path_);
}
inline void ConfCheckParameter::set_allocated_out_path(::std::string* out_path) {
  if (out_path != NULL) {
    set_has_out_path();
  } else {
    clear_has_out_path();
  }
  out_path_.SetAllocatedNoArena(_default_out_path_, out_path);
  // @@protoc_insertion_point(field_set_allocated:caffe.ConfCheckParameter.out_path)
}

// optional bool draw = 2 [default = false];
inline bool ConfCheckParameter::has_draw() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfCheckParameter::set_has_draw() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfCheckParameter::clear_has_draw() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfCheckParameter::clear_draw() {
  draw_ = false;
  clear_has_draw();
}
inline bool ConfCheckParameter::draw() const {
  // @@protoc_insertion_point(field_get:caffe.ConfCheckParameter.draw)
  return draw_;
}
inline void ConfCheckParameter::set_draw(bool value) {
  set_has_draw();
  draw_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConfCheckParameter.draw)
}

inline const ConfCheckParameter* ConfCheckParameter::internal_default_instance() {
  return &ConfCheckParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// ReorgParameter

// optional uint32 stride = 1;
inline bool ReorgParameter::has_stride() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReorgParameter::set_has_stride() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReorgParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReorgParameter::clear_stride() {
  stride_ = 0u;
  clear_has_stride();
}
inline ::google::protobuf::uint32 ReorgParameter::stride() const {
  // @@protoc_insertion_point(field_get:caffe.ReorgParameter.stride)
  return stride_;
}
inline void ReorgParameter::set_stride(::google::protobuf::uint32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReorgParameter.stride)
}

// optional bool reverse = 2 [default = false];
inline bool ReorgParameter::has_reverse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReorgParameter::set_has_reverse() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReorgParameter::clear_has_reverse() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReorgParameter::clear_reverse() {
  reverse_ = false;
  clear_has_reverse();
}
inline bool ReorgParameter::reverse() const {
  // @@protoc_insertion_point(field_get:caffe.ReorgParameter.reverse)
  return reverse_;
}
inline void ReorgParameter::set_reverse(bool value) {
  set_has_reverse();
  reverse_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReorgParameter.reverse)
}

inline const ReorgParameter* ReorgParameter::internal_default_instance() {
  return &ReorgParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// BatchRejectionParameter

// optional bool rejection_by_threshold = 1 [default = false];
inline bool BatchRejectionParameter::has_rejection_by_threshold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BatchRejectionParameter::set_has_rejection_by_threshold() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BatchRejectionParameter::clear_has_rejection_by_threshold() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BatchRejectionParameter::clear_rejection_by_threshold() {
  rejection_by_threshold_ = false;
  clear_has_rejection_by_threshold();
}
inline bool BatchRejectionParameter::rejection_by_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.BatchRejectionParameter.rejection_by_threshold)
  return rejection_by_threshold_;
}
inline void BatchRejectionParameter::set_rejection_by_threshold(bool value) {
  set_has_rejection_by_threshold();
  rejection_by_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchRejectionParameter.rejection_by_threshold)
}

// optional float threshold = 2;
inline bool BatchRejectionParameter::has_threshold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BatchRejectionParameter::set_has_threshold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BatchRejectionParameter::clear_has_threshold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BatchRejectionParameter::clear_threshold() {
  threshold_ = 0;
  clear_has_threshold();
}
inline float BatchRejectionParameter::threshold() const {
  // @@protoc_insertion_point(field_get:caffe.BatchRejectionParameter.threshold)
  return threshold_;
}
inline void BatchRejectionParameter::set_threshold(float value) {
  set_has_threshold();
  threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchRejectionParameter.threshold)
}

inline const BatchRejectionParameter* BatchRejectionParameter::internal_default_instance() {
  return &BatchRejectionParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// BlobShape

// repeated int64 dim = 1 [packed = true];
inline int BlobShape::dim_size() const {
  return dim_.size();
}
inline void BlobShape::clear_dim() {
  dim_.Clear();
}
inline ::google::protobuf::int64 BlobShape::dim(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobShape.dim)
  return dim_.Get(index);
}
inline void BlobShape::set_dim(int index, ::google::protobuf::int64 value) {
  dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobShape.dim)
}
inline void BlobShape::add_dim(::google::protobuf::int64 value) {
  dim_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobShape.dim)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BlobShape::dim() const {
  // @@protoc_insertion_point(field_list:caffe.BlobShape.dim)
  return dim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BlobShape::mutable_dim() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobShape.dim)
  return &dim_;
}

inline const BlobShape* BlobShape::internal_default_instance() {
  return &BlobShape_default_instance_.get();
}
// -------------------------------------------------------------------

// BlobProto

// optional .caffe.BlobShape shape = 7;
inline bool BlobProto::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobProto::set_has_shape() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobProto::clear_has_shape() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobProto::clear_shape() {
  if (shape_ != NULL) shape_->::caffe::BlobShape::Clear();
  clear_has_shape();
}
inline const ::caffe::BlobShape& BlobProto::shape() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.shape)
  return shape_ != NULL ? *shape_
                         : *::caffe::BlobShape::internal_default_instance();
}
inline ::caffe::BlobShape* BlobProto::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) {
    shape_ = new ::caffe::BlobShape;
  }
  // @@protoc_insertion_point(field_mutable:caffe.BlobProto.shape)
  return shape_;
}
inline ::caffe::BlobShape* BlobProto::release_shape() {
  // @@protoc_insertion_point(field_release:caffe.BlobProto.shape)
  clear_has_shape();
  ::caffe::BlobShape* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline void BlobProto::set_allocated_shape(::caffe::BlobShape* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.BlobProto.shape)
}

// repeated float data = 5 [packed = true];
inline int BlobProto::data_size() const {
  return data_.size();
}
inline void BlobProto::clear_data() {
  data_.Clear();
}
inline float BlobProto::data(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.data)
  return data_.Get(index);
}
inline void BlobProto::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.data)
}
inline void BlobProto::add_data(float value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.data)
}
inline const ::google::protobuf::RepeatedField< float >&
BlobProto::data() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< float >*
BlobProto::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.data)
  return &data_;
}

// repeated float diff = 6 [packed = true];
inline int BlobProto::diff_size() const {
  return diff_.size();
}
inline void BlobProto::clear_diff() {
  diff_.Clear();
}
inline float BlobProto::diff(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.diff)
  return diff_.Get(index);
}
inline void BlobProto::set_diff(int index, float value) {
  diff_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.diff)
}
inline void BlobProto::add_diff(float value) {
  diff_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.diff)
}
inline const ::google::protobuf::RepeatedField< float >&
BlobProto::diff() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.diff)
  return diff_;
}
inline ::google::protobuf::RepeatedField< float >*
BlobProto::mutable_diff() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.diff)
  return &diff_;
}

// repeated double double_data = 8 [packed = true];
inline int BlobProto::double_data_size() const {
  return double_data_.size();
}
inline void BlobProto::clear_double_data() {
  double_data_.Clear();
}
inline double BlobProto::double_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.double_data)
  return double_data_.Get(index);
}
inline void BlobProto::set_double_data(int index, double value) {
  double_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.double_data)
}
inline void BlobProto::add_double_data(double value) {
  double_data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.double_data)
}
inline const ::google::protobuf::RepeatedField< double >&
BlobProto::double_data() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.double_data)
  return double_data_;
}
inline ::google::protobuf::RepeatedField< double >*
BlobProto::mutable_double_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.double_data)
  return &double_data_;
}

// repeated double double_diff = 9 [packed = true];
inline int BlobProto::double_diff_size() const {
  return double_diff_.size();
}
inline void BlobProto::clear_double_diff() {
  double_diff_.Clear();
}
inline double BlobProto::double_diff(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.double_diff)
  return double_diff_.Get(index);
}
inline void BlobProto::set_double_diff(int index, double value) {
  double_diff_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.double_diff)
}
inline void BlobProto::add_double_diff(double value) {
  double_diff_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.double_diff)
}
inline const ::google::protobuf::RepeatedField< double >&
BlobProto::double_diff() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.double_diff)
  return double_diff_;
}
inline ::google::protobuf::RepeatedField< double >*
BlobProto::mutable_double_diff() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.double_diff)
  return &double_diff_;
}

// optional int32 num = 1 [default = 0];
inline bool BlobProto::has_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BlobProto::set_has_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BlobProto::clear_has_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BlobProto::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 BlobProto::num() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.num)
  return num_;
}
inline void BlobProto::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.num)
}

// optional int32 channels = 2 [default = 0];
inline bool BlobProto::has_channels() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BlobProto::set_has_channels() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BlobProto::clear_has_channels() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BlobProto::clear_channels() {
  channels_ = 0;
  clear_has_channels();
}
inline ::google::protobuf::int32 BlobProto::channels() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.channels)
  return channels_;
}
inline void BlobProto::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.channels)
}

// optional int32 height = 3 [default = 0];
inline bool BlobProto::has_height() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BlobProto::set_has_height() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BlobProto::clear_has_height() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BlobProto::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 BlobProto::height() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.height)
  return height_;
}
inline void BlobProto::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.height)
}

// optional int32 width = 4 [default = 0];
inline bool BlobProto::has_width() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BlobProto::set_has_width() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BlobProto::clear_has_width() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BlobProto::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 BlobProto::width() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.width)
  return width_;
}
inline void BlobProto::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.width)
}

inline const BlobProto* BlobProto::internal_default_instance() {
  return &BlobProto_default_instance_.get();
}
// -------------------------------------------------------------------

// BlobProtoVector

// repeated .caffe.BlobProto blobs = 1;
inline int BlobProtoVector::blobs_size() const {
  return blobs_.size();
}
inline void BlobProtoVector::clear_blobs() {
  blobs_.Clear();
}
inline const ::caffe::BlobProto& BlobProtoVector::blobs(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProtoVector.blobs)
  return blobs_.Get(index);
}
inline ::caffe::BlobProto* BlobProtoVector::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.BlobProtoVector.blobs)
  return blobs_.Mutable(index);
}
inline ::caffe::BlobProto* BlobProtoVector::add_blobs() {
  // @@protoc_insertion_point(field_add:caffe.BlobProtoVector.blobs)
  return blobs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
BlobProtoVector::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProtoVector.blobs)
  return &blobs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
BlobProtoVector::blobs() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProtoVector.blobs)
  return blobs_;
}

inline const BlobProtoVector* BlobProtoVector::internal_default_instance() {
  return &BlobProtoVector_default_instance_.get();
}
// -------------------------------------------------------------------

// Datum

// optional int32 channels = 1;
inline bool Datum::has_channels() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Datum::set_has_channels() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Datum::clear_has_channels() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Datum::clear_channels() {
  channels_ = 0;
  clear_has_channels();
}
inline ::google::protobuf::int32 Datum::channels() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.channels)
  return channels_;
}
inline void Datum::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.channels)
}

// optional int32 height = 2;
inline bool Datum::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Datum::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Datum::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Datum::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 Datum::height() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.height)
  return height_;
}
inline void Datum::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.height)
}

// optional int32 width = 3;
inline bool Datum::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Datum::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Datum::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Datum::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 Datum::width() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.width)
  return width_;
}
inline void Datum::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.width)
}

// optional bytes data = 4;
inline bool Datum::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Datum::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Datum::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Datum::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& Datum::data() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Datum::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.Datum.data)
}
inline void Datum::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.Datum.data)
}
inline void Datum::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.Datum.data)
}
inline ::std::string* Datum::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:caffe.Datum.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Datum::release_data() {
  // @@protoc_insertion_point(field_release:caffe.Datum.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Datum::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:caffe.Datum.data)
}

// optional int32 label = 5;
inline bool Datum::has_label() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Datum::set_has_label() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Datum::clear_has_label() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Datum::clear_label() {
  label_ = 0;
  clear_has_label();
}
inline ::google::protobuf::int32 Datum::label() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.label)
  return label_;
}
inline void Datum::set_label(::google::protobuf::int32 value) {
  set_has_label();
  label_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.label)
}

// repeated float float_data = 6;
inline int Datum::float_data_size() const {
  return float_data_.size();
}
inline void Datum::clear_float_data() {
  float_data_.Clear();
}
inline float Datum::float_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe.Datum.float_data)
  return float_data_.Get(index);
}
inline void Datum::set_float_data(int index, float value) {
  float_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.Datum.float_data)
}
inline void Datum::add_float_data(float value) {
  float_data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.Datum.float_data)
}
inline const ::google::protobuf::RepeatedField< float >&
Datum::float_data() const {
  // @@protoc_insertion_point(field_list:caffe.Datum.float_data)
  return float_data_;
}
inline ::google::protobuf::RepeatedField< float >*
Datum::mutable_float_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe.Datum.float_data)
  return &float_data_;
}

// optional bool encoded = 7 [default = false];
inline bool Datum::has_encoded() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Datum::set_has_encoded() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Datum::clear_has_encoded() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Datum::clear_encoded() {
  encoded_ = false;
  clear_has_encoded();
}
inline bool Datum::encoded() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.encoded)
  return encoded_;
}
inline void Datum::set_encoded(bool value) {
  set_has_encoded();
  encoded_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.encoded)
}

inline const Datum* Datum::internal_default_instance() {
  return &Datum_default_instance_.get();
}
// -------------------------------------------------------------------

// FillerParameter

// optional string type = 1 [default = "constant"];
inline bool FillerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FillerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FillerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FillerParameter::clear_type() {
  type_.ClearToDefaultNoArena(_default_type_);
  clear_has_type();
}
inline const ::std::string& FillerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.type)
  return type_.GetNoArena(_default_type_);
}
inline void FillerParameter::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(_default_type_, value);
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.type)
}
inline void FillerParameter::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(_default_type_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.FillerParameter.type)
}
inline void FillerParameter::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(_default_type_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.FillerParameter.type)
}
inline ::std::string* FillerParameter::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe.FillerParameter.type)
  return type_.MutableNoArena(_default_type_);
}
inline ::std::string* FillerParameter::release_type() {
  // @@protoc_insertion_point(field_release:caffe.FillerParameter.type)
  clear_has_type();
  return type_.ReleaseNoArena(_default_type_);
}
inline void FillerParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(_default_type_, type);
  // @@protoc_insertion_point(field_set_allocated:caffe.FillerParameter.type)
}

// optional float value = 2 [default = 0];
inline bool FillerParameter::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FillerParameter::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FillerParameter::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FillerParameter::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline float FillerParameter::value() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.value)
  return value_;
}
inline void FillerParameter::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.value)
}

// optional float min = 3 [default = 0];
inline bool FillerParameter::has_min() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FillerParameter::set_has_min() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FillerParameter::clear_has_min() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FillerParameter::clear_min() {
  min_ = 0;
  clear_has_min();
}
inline float FillerParameter::min() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.min)
  return min_;
}
inline void FillerParameter::set_min(float value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.min)
}

// optional float max = 4 [default = 1];
inline bool FillerParameter::has_max() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FillerParameter::set_has_max() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FillerParameter::clear_has_max() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FillerParameter::clear_max() {
  max_ = 1;
  clear_has_max();
}
inline float FillerParameter::max() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.max)
  return max_;
}
inline void FillerParameter::set_max(float value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.max)
}

// optional float mean = 5 [default = 0];
inline bool FillerParameter::has_mean() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FillerParameter::set_has_mean() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FillerParameter::clear_has_mean() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FillerParameter::clear_mean() {
  mean_ = 0;
  clear_has_mean();
}
inline float FillerParameter::mean() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.mean)
  return mean_;
}
inline void FillerParameter::set_mean(float value) {
  set_has_mean();
  mean_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.mean)
}

// optional float std = 6 [default = 1];
inline bool FillerParameter::has_std() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FillerParameter::set_has_std() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FillerParameter::clear_has_std() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FillerParameter::clear_std() {
  std_ = 1;
  clear_has_std();
}
inline float FillerParameter::std() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.std)
  return std_;
}
inline void FillerParameter::set_std(float value) {
  set_has_std();
  std_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.std)
}

// optional int32 sparse = 7 [default = -1];
inline bool FillerParameter::has_sparse() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FillerParameter::set_has_sparse() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FillerParameter::clear_has_sparse() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FillerParameter::clear_sparse() {
  sparse_ = -1;
  clear_has_sparse();
}
inline ::google::protobuf::int32 FillerParameter::sparse() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.sparse)
  return sparse_;
}
inline void FillerParameter::set_sparse(::google::protobuf::int32 value) {
  set_has_sparse();
  sparse_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.sparse)
}

// optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
inline bool FillerParameter::has_variance_norm() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FillerParameter::set_has_variance_norm() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FillerParameter::clear_has_variance_norm() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FillerParameter::clear_variance_norm() {
  variance_norm_ = 0;
  clear_has_variance_norm();
}
inline ::caffe::FillerParameter_VarianceNorm FillerParameter::variance_norm() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.variance_norm)
  return static_cast< ::caffe::FillerParameter_VarianceNorm >(variance_norm_);
}
inline void FillerParameter::set_variance_norm(::caffe::FillerParameter_VarianceNorm value) {
  assert(::caffe::FillerParameter_VarianceNorm_IsValid(value));
  set_has_variance_norm();
  variance_norm_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.variance_norm)
}

inline const FillerParameter* FillerParameter::internal_default_instance() {
  return &FillerParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// NetParameter

// optional string name = 1;
inline bool NetParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& NetParameter::name() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetParameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.NetParameter.name)
}
inline void NetParameter::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.NetParameter.name)
}
inline void NetParameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.NetParameter.name)
}
inline ::std::string* NetParameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetParameter::release_name() {
  // @@protoc_insertion_point(field_release:caffe.NetParameter.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.NetParameter.name)
}

// repeated string input = 3;
inline int NetParameter::input_size() const {
  return input_.size();
}
inline void NetParameter::clear_input() {
  input_.Clear();
}
inline const ::std::string& NetParameter::input(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.input)
  return input_.Get(index);
}
inline ::std::string* NetParameter::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.input)
  return input_.Mutable(index);
}
inline void NetParameter::set_input(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetParameter.input)
  input_.Mutable(index)->assign(value);
}
inline void NetParameter::set_input(int index, const char* value) {
  input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetParameter.input)
}
inline void NetParameter::set_input(int index, const char* value, size_t size) {
  input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetParameter.input)
}
inline ::std::string* NetParameter::add_input() {
  // @@protoc_insertion_point(field_add_mutable:caffe.NetParameter.input)
  return input_.Add();
}
inline void NetParameter::add_input(const ::std::string& value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetParameter.input)
}
inline void NetParameter::add_input(const char* value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetParameter.input)
}
inline void NetParameter::add_input(const char* value, size_t size) {
  input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetParameter.input)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetParameter::input() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.input)
  return input_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetParameter::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.input)
  return &input_;
}

// repeated .caffe.BlobShape input_shape = 8;
inline int NetParameter::input_shape_size() const {
  return input_shape_.size();
}
inline void NetParameter::clear_input_shape() {
  input_shape_.Clear();
}
inline const ::caffe::BlobShape& NetParameter::input_shape(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.input_shape)
  return input_shape_.Get(index);
}
inline ::caffe::BlobShape* NetParameter::mutable_input_shape(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.input_shape)
  return input_shape_.Mutable(index);
}
inline ::caffe::BlobShape* NetParameter::add_input_shape() {
  // @@protoc_insertion_point(field_add:caffe.NetParameter.input_shape)
  return input_shape_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
NetParameter::mutable_input_shape() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.input_shape)
  return &input_shape_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
NetParameter::input_shape() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.input_shape)
  return input_shape_;
}

// repeated int32 input_dim = 4;
inline int NetParameter::input_dim_size() const {
  return input_dim_.size();
}
inline void NetParameter::clear_input_dim() {
  input_dim_.Clear();
}
inline ::google::protobuf::int32 NetParameter::input_dim(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.input_dim)
  return input_dim_.Get(index);
}
inline void NetParameter::set_input_dim(int index, ::google::protobuf::int32 value) {
  input_dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.NetParameter.input_dim)
}
inline void NetParameter::add_input_dim(::google::protobuf::int32 value) {
  input_dim_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.NetParameter.input_dim)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetParameter::input_dim() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.input_dim)
  return input_dim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetParameter::mutable_input_dim() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.input_dim)
  return &input_dim_;
}

// optional bool force_backward = 5 [default = false];
inline bool NetParameter::has_force_backward() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetParameter::set_has_force_backward() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetParameter::clear_has_force_backward() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetParameter::clear_force_backward() {
  force_backward_ = false;
  clear_has_force_backward();
}
inline bool NetParameter::force_backward() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.force_backward)
  return force_backward_;
}
inline void NetParameter::set_force_backward(bool value) {
  set_has_force_backward();
  force_backward_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetParameter.force_backward)
}

// optional .caffe.NetState state = 6;
inline bool NetParameter::has_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NetParameter::set_has_state() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NetParameter::clear_has_state() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NetParameter::clear_state() {
  if (state_ != NULL) state_->::caffe::NetState::Clear();
  clear_has_state();
}
inline const ::caffe::NetState& NetParameter::state() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.state)
  return state_ != NULL ? *state_
                         : *::caffe::NetState::internal_default_instance();
}
inline ::caffe::NetState* NetParameter::mutable_state() {
  set_has_state();
  if (state_ == NULL) {
    state_ = new ::caffe::NetState;
  }
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.state)
  return state_;
}
inline ::caffe::NetState* NetParameter::release_state() {
  // @@protoc_insertion_point(field_release:caffe.NetParameter.state)
  clear_has_state();
  ::caffe::NetState* temp = state_;
  state_ = NULL;
  return temp;
}
inline void NetParameter::set_allocated_state(::caffe::NetState* state) {
  delete state_;
  state_ = state;
  if (state) {
    set_has_state();
  } else {
    clear_has_state();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.NetParameter.state)
}

// optional bool debug_info = 7 [default = false];
inline bool NetParameter::has_debug_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NetParameter::set_has_debug_info() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NetParameter::clear_has_debug_info() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NetParameter::clear_debug_info() {
  debug_info_ = false;
  clear_has_debug_info();
}
inline bool NetParameter::debug_info() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.debug_info)
  return debug_info_;
}
inline void NetParameter::set_debug_info(bool value) {
  set_has_debug_info();
  debug_info_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetParameter.debug_info)
}

// repeated .caffe.LayerParameter layer = 100;
inline int NetParameter::layer_size() const {
  return layer_.size();
}
inline void NetParameter::clear_layer() {
  layer_.Clear();
}
inline const ::caffe::LayerParameter& NetParameter::layer(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.layer)
  return layer_.Get(index);
}
inline ::caffe::LayerParameter* NetParameter::mutable_layer(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.layer)
  return layer_.Mutable(index);
}
inline ::caffe::LayerParameter* NetParameter::add_layer() {
  // @@protoc_insertion_point(field_add:caffe.NetParameter.layer)
  return layer_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter >*
NetParameter::mutable_layer() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.layer)
  return &layer_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter >&
NetParameter::layer() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.layer)
  return layer_;
}

// repeated .caffe.V1LayerParameter layers = 2;
inline int NetParameter::layers_size() const {
  return layers_.size();
}
inline void NetParameter::clear_layers() {
  layers_.Clear();
}
inline const ::caffe::V1LayerParameter& NetParameter::layers(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.layers)
  return layers_.Get(index);
}
inline ::caffe::V1LayerParameter* NetParameter::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.layers)
  return layers_.Mutable(index);
}
inline ::caffe::V1LayerParameter* NetParameter::add_layers() {
  // @@protoc_insertion_point(field_add:caffe.NetParameter.layers)
  return layers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::V1LayerParameter >*
NetParameter::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.layers)
  return &layers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::V1LayerParameter >&
NetParameter::layers() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.layers)
  return layers_;
}

inline const NetParameter* NetParameter::internal_default_instance() {
  return &NetParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// SolverParameter

// optional string net = 24;
inline bool SolverParameter::has_net() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SolverParameter::set_has_net() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SolverParameter::clear_has_net() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SolverParameter::clear_net() {
  net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_net();
}
inline const ::std::string& SolverParameter::net() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.net)
  return net_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverParameter::set_net(const ::std::string& value) {
  set_has_net();
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.net)
}
inline void SolverParameter::set_net(const char* value) {
  set_has_net();
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.net)
}
inline void SolverParameter::set_net(const char* value, size_t size) {
  set_has_net();
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.net)
}
inline ::std::string* SolverParameter::mutable_net() {
  set_has_net();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.net)
  return net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolverParameter::release_net() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.net)
  clear_has_net();
  return net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverParameter::set_allocated_net(::std::string* net) {
  if (net != NULL) {
    set_has_net();
  } else {
    clear_has_net();
  }
  net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), net);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.net)
}

// optional .caffe.NetParameter net_param = 25;
inline bool SolverParameter::has_net_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SolverParameter::set_has_net_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SolverParameter::clear_has_net_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SolverParameter::clear_net_param() {
  if (net_param_ != NULL) net_param_->::caffe::NetParameter::Clear();
  clear_has_net_param();
}
inline const ::caffe::NetParameter& SolverParameter::net_param() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.net_param)
  return net_param_ != NULL ? *net_param_
                         : *::caffe::NetParameter::internal_default_instance();
}
inline ::caffe::NetParameter* SolverParameter::mutable_net_param() {
  set_has_net_param();
  if (net_param_ == NULL) {
    net_param_ = new ::caffe::NetParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.net_param)
  return net_param_;
}
inline ::caffe::NetParameter* SolverParameter::release_net_param() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.net_param)
  clear_has_net_param();
  ::caffe::NetParameter* temp = net_param_;
  net_param_ = NULL;
  return temp;
}
inline void SolverParameter::set_allocated_net_param(::caffe::NetParameter* net_param) {
  delete net_param_;
  net_param_ = net_param;
  if (net_param) {
    set_has_net_param();
  } else {
    clear_has_net_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.net_param)
}

// optional string train_net = 1;
inline bool SolverParameter::has_train_net() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SolverParameter::set_has_train_net() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SolverParameter::clear_has_train_net() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SolverParameter::clear_train_net() {
  train_net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_train_net();
}
inline const ::std::string& SolverParameter::train_net() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.train_net)
  return train_net_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverParameter::set_train_net(const ::std::string& value) {
  set_has_train_net();
  train_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.train_net)
}
inline void SolverParameter::set_train_net(const char* value) {
  set_has_train_net();
  train_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.train_net)
}
inline void SolverParameter::set_train_net(const char* value, size_t size) {
  set_has_train_net();
  train_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.train_net)
}
inline ::std::string* SolverParameter::mutable_train_net() {
  set_has_train_net();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.train_net)
  return train_net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolverParameter::release_train_net() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.train_net)
  clear_has_train_net();
  return train_net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverParameter::set_allocated_train_net(::std::string* train_net) {
  if (train_net != NULL) {
    set_has_train_net();
  } else {
    clear_has_train_net();
  }
  train_net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), train_net);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.train_net)
}

// repeated string test_net = 2;
inline int SolverParameter::test_net_size() const {
  return test_net_.size();
}
inline void SolverParameter::clear_test_net() {
  test_net_.Clear();
}
inline const ::std::string& SolverParameter::test_net(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_net)
  return test_net_.Get(index);
}
inline ::std::string* SolverParameter::mutable_test_net(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.test_net)
  return test_net_.Mutable(index);
}
inline void SolverParameter::set_test_net(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_net)
  test_net_.Mutable(index)->assign(value);
}
inline void SolverParameter::set_test_net(int index, const char* value) {
  test_net_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.test_net)
}
inline void SolverParameter::set_test_net(int index, const char* value, size_t size) {
  test_net_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.test_net)
}
inline ::std::string* SolverParameter::add_test_net() {
  // @@protoc_insertion_point(field_add_mutable:caffe.SolverParameter.test_net)
  return test_net_.Add();
}
inline void SolverParameter::add_test_net(const ::std::string& value) {
  test_net_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.test_net)
}
inline void SolverParameter::add_test_net(const char* value) {
  test_net_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.SolverParameter.test_net)
}
inline void SolverParameter::add_test_net(const char* value, size_t size) {
  test_net_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.SolverParameter.test_net)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SolverParameter::test_net() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.test_net)
  return test_net_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SolverParameter::mutable_test_net() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.test_net)
  return &test_net_;
}

// optional .caffe.NetParameter train_net_param = 21;
inline bool SolverParameter::has_train_net_param() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SolverParameter::set_has_train_net_param() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SolverParameter::clear_has_train_net_param() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SolverParameter::clear_train_net_param() {
  if (train_net_param_ != NULL) train_net_param_->::caffe::NetParameter::Clear();
  clear_has_train_net_param();
}
inline const ::caffe::NetParameter& SolverParameter::train_net_param() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.train_net_param)
  return train_net_param_ != NULL ? *train_net_param_
                         : *::caffe::NetParameter::internal_default_instance();
}
inline ::caffe::NetParameter* SolverParameter::mutable_train_net_param() {
  set_has_train_net_param();
  if (train_net_param_ == NULL) {
    train_net_param_ = new ::caffe::NetParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.train_net_param)
  return train_net_param_;
}
inline ::caffe::NetParameter* SolverParameter::release_train_net_param() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.train_net_param)
  clear_has_train_net_param();
  ::caffe::NetParameter* temp = train_net_param_;
  train_net_param_ = NULL;
  return temp;
}
inline void SolverParameter::set_allocated_train_net_param(::caffe::NetParameter* train_net_param) {
  delete train_net_param_;
  train_net_param_ = train_net_param;
  if (train_net_param) {
    set_has_train_net_param();
  } else {
    clear_has_train_net_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.train_net_param)
}

// repeated .caffe.NetParameter test_net_param = 22;
inline int SolverParameter::test_net_param_size() const {
  return test_net_param_.size();
}
inline void SolverParameter::clear_test_net_param() {
  test_net_param_.Clear();
}
inline const ::caffe::NetParameter& SolverParameter::test_net_param(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_net_param)
  return test_net_param_.Get(index);
}
inline ::caffe::NetParameter* SolverParameter::mutable_test_net_param(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.test_net_param)
  return test_net_param_.Mutable(index);
}
inline ::caffe::NetParameter* SolverParameter::add_test_net_param() {
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.test_net_param)
  return test_net_param_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::NetParameter >*
SolverParameter::mutable_test_net_param() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.test_net_param)
  return &test_net_param_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetParameter >&
SolverParameter::test_net_param() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.test_net_param)
  return test_net_param_;
}

// optional .caffe.NetState train_state = 26;
inline bool SolverParameter::has_train_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SolverParameter::set_has_train_state() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SolverParameter::clear_has_train_state() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SolverParameter::clear_train_state() {
  if (train_state_ != NULL) train_state_->::caffe::NetState::Clear();
  clear_has_train_state();
}
inline const ::caffe::NetState& SolverParameter::train_state() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.train_state)
  return train_state_ != NULL ? *train_state_
                         : *::caffe::NetState::internal_default_instance();
}
inline ::caffe::NetState* SolverParameter::mutable_train_state() {
  set_has_train_state();
  if (train_state_ == NULL) {
    train_state_ = new ::caffe::NetState;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.train_state)
  return train_state_;
}
inline ::caffe::NetState* SolverParameter::release_train_state() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.train_state)
  clear_has_train_state();
  ::caffe::NetState* temp = train_state_;
  train_state_ = NULL;
  return temp;
}
inline void SolverParameter::set_allocated_train_state(::caffe::NetState* train_state) {
  delete train_state_;
  train_state_ = train_state;
  if (train_state) {
    set_has_train_state();
  } else {
    clear_has_train_state();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.train_state)
}

// repeated .caffe.NetState test_state = 27;
inline int SolverParameter::test_state_size() const {
  return test_state_.size();
}
inline void SolverParameter::clear_test_state() {
  test_state_.Clear();
}
inline const ::caffe::NetState& SolverParameter::test_state(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_state)
  return test_state_.Get(index);
}
inline ::caffe::NetState* SolverParameter::mutable_test_state(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.test_state)
  return test_state_.Mutable(index);
}
inline ::caffe::NetState* SolverParameter::add_test_state() {
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.test_state)
  return test_state_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::NetState >*
SolverParameter::mutable_test_state() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.test_state)
  return &test_state_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetState >&
SolverParameter::test_state() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.test_state)
  return test_state_;
}

// repeated int32 test_iter = 3;
inline int SolverParameter::test_iter_size() const {
  return test_iter_.size();
}
inline void SolverParameter::clear_test_iter() {
  test_iter_.Clear();
}
inline ::google::protobuf::int32 SolverParameter::test_iter(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_iter)
  return test_iter_.Get(index);
}
inline void SolverParameter::set_test_iter(int index, ::google::protobuf::int32 value) {
  test_iter_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_iter)
}
inline void SolverParameter::add_test_iter(::google::protobuf::int32 value) {
  test_iter_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.test_iter)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SolverParameter::test_iter() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.test_iter)
  return test_iter_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SolverParameter::mutable_test_iter() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.test_iter)
  return &test_iter_;
}

// optional int32 test_interval = 4 [default = 0];
inline bool SolverParameter::has_test_interval() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SolverParameter::set_has_test_interval() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SolverParameter::clear_has_test_interval() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SolverParameter::clear_test_interval() {
  test_interval_ = 0;
  clear_has_test_interval();
}
inline ::google::protobuf::int32 SolverParameter::test_interval() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_interval)
  return test_interval_;
}
inline void SolverParameter::set_test_interval(::google::protobuf::int32 value) {
  set_has_test_interval();
  test_interval_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_interval)
}

// optional bool test_compute_loss = 19 [default = false];
inline bool SolverParameter::has_test_compute_loss() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SolverParameter::set_has_test_compute_loss() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SolverParameter::clear_has_test_compute_loss() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SolverParameter::clear_test_compute_loss() {
  test_compute_loss_ = false;
  clear_has_test_compute_loss();
}
inline bool SolverParameter::test_compute_loss() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_compute_loss)
  return test_compute_loss_;
}
inline void SolverParameter::set_test_compute_loss(bool value) {
  set_has_test_compute_loss();
  test_compute_loss_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_compute_loss)
}

// optional bool test_initialization = 32 [default = true];
inline bool SolverParameter::has_test_initialization() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SolverParameter::set_has_test_initialization() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SolverParameter::clear_has_test_initialization() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SolverParameter::clear_test_initialization() {
  test_initialization_ = true;
  clear_has_test_initialization();
}
inline bool SolverParameter::test_initialization() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_initialization)
  return test_initialization_;
}
inline void SolverParameter::set_test_initialization(bool value) {
  set_has_test_initialization();
  test_initialization_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_initialization)
}

// optional float base_lr = 5;
inline bool SolverParameter::has_base_lr() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SolverParameter::set_has_base_lr() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SolverParameter::clear_has_base_lr() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SolverParameter::clear_base_lr() {
  base_lr_ = 0;
  clear_has_base_lr();
}
inline float SolverParameter::base_lr() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.base_lr)
  return base_lr_;
}
inline void SolverParameter::set_base_lr(float value) {
  set_has_base_lr();
  base_lr_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.base_lr)
}

// optional int32 display = 6;
inline bool SolverParameter::has_display() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SolverParameter::set_has_display() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SolverParameter::clear_has_display() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SolverParameter::clear_display() {
  display_ = 0;
  clear_has_display();
}
inline ::google::protobuf::int32 SolverParameter::display() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.display)
  return display_;
}
inline void SolverParameter::set_display(::google::protobuf::int32 value) {
  set_has_display();
  display_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.display)
}

// optional int32 average_loss = 33 [default = 1];
inline bool SolverParameter::has_average_loss() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SolverParameter::set_has_average_loss() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SolverParameter::clear_has_average_loss() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SolverParameter::clear_average_loss() {
  average_loss_ = 1;
  clear_has_average_loss();
}
inline ::google::protobuf::int32 SolverParameter::average_loss() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.average_loss)
  return average_loss_;
}
inline void SolverParameter::set_average_loss(::google::protobuf::int32 value) {
  set_has_average_loss();
  average_loss_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.average_loss)
}

// optional int32 max_iter = 7;
inline bool SolverParameter::has_max_iter() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SolverParameter::set_has_max_iter() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SolverParameter::clear_has_max_iter() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SolverParameter::clear_max_iter() {
  max_iter_ = 0;
  clear_has_max_iter();
}
inline ::google::protobuf::int32 SolverParameter::max_iter() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.max_iter)
  return max_iter_;
}
inline void SolverParameter::set_max_iter(::google::protobuf::int32 value) {
  set_has_max_iter();
  max_iter_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.max_iter)
}

// optional int32 iter_size = 36 [default = 1];
inline bool SolverParameter::has_iter_size() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SolverParameter::set_has_iter_size() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SolverParameter::clear_has_iter_size() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SolverParameter::clear_iter_size() {
  iter_size_ = 1;
  clear_has_iter_size();
}
inline ::google::protobuf::int32 SolverParameter::iter_size() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.iter_size)
  return iter_size_;
}
inline void SolverParameter::set_iter_size(::google::protobuf::int32 value) {
  set_has_iter_size();
  iter_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.iter_size)
}

// optional string lr_policy = 8;
inline bool SolverParameter::has_lr_policy() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SolverParameter::set_has_lr_policy() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SolverParameter::clear_has_lr_policy() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SolverParameter::clear_lr_policy() {
  lr_policy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lr_policy();
}
inline const ::std::string& SolverParameter::lr_policy() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.lr_policy)
  return lr_policy_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverParameter::set_lr_policy(const ::std::string& value) {
  set_has_lr_policy();
  lr_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.lr_policy)
}
inline void SolverParameter::set_lr_policy(const char* value) {
  set_has_lr_policy();
  lr_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.lr_policy)
}
inline void SolverParameter::set_lr_policy(const char* value, size_t size) {
  set_has_lr_policy();
  lr_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.lr_policy)
}
inline ::std::string* SolverParameter::mutable_lr_policy() {
  set_has_lr_policy();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.lr_policy)
  return lr_policy_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolverParameter::release_lr_policy() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.lr_policy)
  clear_has_lr_policy();
  return lr_policy_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverParameter::set_allocated_lr_policy(::std::string* lr_policy) {
  if (lr_policy != NULL) {
    set_has_lr_policy();
  } else {
    clear_has_lr_policy();
  }
  lr_policy_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lr_policy);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.lr_policy)
}

// optional float gamma = 9;
inline bool SolverParameter::has_gamma() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SolverParameter::set_has_gamma() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SolverParameter::clear_has_gamma() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SolverParameter::clear_gamma() {
  gamma_ = 0;
  clear_has_gamma();
}
inline float SolverParameter::gamma() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.gamma)
  return gamma_;
}
inline void SolverParameter::set_gamma(float value) {
  set_has_gamma();
  gamma_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.gamma)
}

// optional float power = 10;
inline bool SolverParameter::has_power() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SolverParameter::set_has_power() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SolverParameter::clear_has_power() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SolverParameter::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline float SolverParameter::power() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.power)
  return power_;
}
inline void SolverParameter::set_power(float value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.power)
}

// optional float momentum = 11;
inline bool SolverParameter::has_momentum() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SolverParameter::set_has_momentum() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SolverParameter::clear_has_momentum() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SolverParameter::clear_momentum() {
  momentum_ = 0;
  clear_has_momentum();
}
inline float SolverParameter::momentum() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.momentum)
  return momentum_;
}
inline void SolverParameter::set_momentum(float value) {
  set_has_momentum();
  momentum_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.momentum)
}

// optional float weight_decay = 12;
inline bool SolverParameter::has_weight_decay() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SolverParameter::set_has_weight_decay() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SolverParameter::clear_has_weight_decay() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SolverParameter::clear_weight_decay() {
  weight_decay_ = 0;
  clear_has_weight_decay();
}
inline float SolverParameter::weight_decay() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.weight_decay)
  return weight_decay_;
}
inline void SolverParameter::set_weight_decay(float value) {
  set_has_weight_decay();
  weight_decay_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.weight_decay)
}

// optional string regularization_type = 29 [default = "L2"];
inline bool SolverParameter::has_regularization_type() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SolverParameter::set_has_regularization_type() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SolverParameter::clear_has_regularization_type() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SolverParameter::clear_regularization_type() {
  regularization_type_.ClearToDefaultNoArena(_default_regularization_type_);
  clear_has_regularization_type();
}
inline const ::std::string& SolverParameter::regularization_type() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.regularization_type)
  return regularization_type_.GetNoArena(_default_regularization_type_);
}
inline void SolverParameter::set_regularization_type(const ::std::string& value) {
  set_has_regularization_type();
  regularization_type_.SetNoArena(_default_regularization_type_, value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.regularization_type)
}
inline void SolverParameter::set_regularization_type(const char* value) {
  set_has_regularization_type();
  regularization_type_.SetNoArena(_default_regularization_type_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.regularization_type)
}
inline void SolverParameter::set_regularization_type(const char* value, size_t size) {
  set_has_regularization_type();
  regularization_type_.SetNoArena(_default_regularization_type_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.regularization_type)
}
inline ::std::string* SolverParameter::mutable_regularization_type() {
  set_has_regularization_type();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.regularization_type)
  return regularization_type_.MutableNoArena(_default_regularization_type_);
}
inline ::std::string* SolverParameter::release_regularization_type() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.regularization_type)
  clear_has_regularization_type();
  return regularization_type_.ReleaseNoArena(_default_regularization_type_);
}
inline void SolverParameter::set_allocated_regularization_type(::std::string* regularization_type) {
  if (regularization_type != NULL) {
    set_has_regularization_type();
  } else {
    clear_has_regularization_type();
  }
  regularization_type_.SetAllocatedNoArena(_default_regularization_type_, regularization_type);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.regularization_type)
}

// optional int32 stepsize = 13;
inline bool SolverParameter::has_stepsize() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SolverParameter::set_has_stepsize() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SolverParameter::clear_has_stepsize() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SolverParameter::clear_stepsize() {
  stepsize_ = 0;
  clear_has_stepsize();
}
inline ::google::protobuf::int32 SolverParameter::stepsize() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.stepsize)
  return stepsize_;
}
inline void SolverParameter::set_stepsize(::google::protobuf::int32 value) {
  set_has_stepsize();
  stepsize_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.stepsize)
}

// repeated int32 stepvalue = 34;
inline int SolverParameter::stepvalue_size() const {
  return stepvalue_.size();
}
inline void SolverParameter::clear_stepvalue() {
  stepvalue_.Clear();
}
inline ::google::protobuf::int32 SolverParameter::stepvalue(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.stepvalue)
  return stepvalue_.Get(index);
}
inline void SolverParameter::set_stepvalue(int index, ::google::protobuf::int32 value) {
  stepvalue_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.stepvalue)
}
inline void SolverParameter::add_stepvalue(::google::protobuf::int32 value) {
  stepvalue_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.stepvalue)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SolverParameter::stepvalue() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.stepvalue)
  return stepvalue_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SolverParameter::mutable_stepvalue() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.stepvalue)
  return &stepvalue_;
}

// optional float clip_gradients = 35 [default = -1];
inline bool SolverParameter::has_clip_gradients() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SolverParameter::set_has_clip_gradients() {
  _has_bits_[0] |= 0x02000000u;
}
inline void SolverParameter::clear_has_clip_gradients() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void SolverParameter::clear_clip_gradients() {
  clip_gradients_ = -1;
  clear_has_clip_gradients();
}
inline float SolverParameter::clip_gradients() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.clip_gradients)
  return clip_gradients_;
}
inline void SolverParameter::set_clip_gradients(float value) {
  set_has_clip_gradients();
  clip_gradients_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.clip_gradients)
}

// optional int32 snapshot = 14 [default = 0];
inline bool SolverParameter::has_snapshot() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void SolverParameter::set_has_snapshot() {
  _has_bits_[0] |= 0x04000000u;
}
inline void SolverParameter::clear_has_snapshot() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void SolverParameter::clear_snapshot() {
  snapshot_ = 0;
  clear_has_snapshot();
}
inline ::google::protobuf::int32 SolverParameter::snapshot() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot)
  return snapshot_;
}
inline void SolverParameter::set_snapshot(::google::protobuf::int32 value) {
  set_has_snapshot();
  snapshot_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot)
}

// optional string snapshot_prefix = 15;
inline bool SolverParameter::has_snapshot_prefix() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void SolverParameter::set_has_snapshot_prefix() {
  _has_bits_[0] |= 0x08000000u;
}
inline void SolverParameter::clear_has_snapshot_prefix() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void SolverParameter::clear_snapshot_prefix() {
  snapshot_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_snapshot_prefix();
}
inline const ::std::string& SolverParameter::snapshot_prefix() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot_prefix)
  return snapshot_prefix_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverParameter::set_snapshot_prefix(const ::std::string& value) {
  set_has_snapshot_prefix();
  snapshot_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot_prefix)
}
inline void SolverParameter::set_snapshot_prefix(const char* value) {
  set_has_snapshot_prefix();
  snapshot_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.snapshot_prefix)
}
inline void SolverParameter::set_snapshot_prefix(const char* value, size_t size) {
  set_has_snapshot_prefix();
  snapshot_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.snapshot_prefix)
}
inline ::std::string* SolverParameter::mutable_snapshot_prefix() {
  set_has_snapshot_prefix();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.snapshot_prefix)
  return snapshot_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolverParameter::release_snapshot_prefix() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.snapshot_prefix)
  clear_has_snapshot_prefix();
  return snapshot_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverParameter::set_allocated_snapshot_prefix(::std::string* snapshot_prefix) {
  if (snapshot_prefix != NULL) {
    set_has_snapshot_prefix();
  } else {
    clear_has_snapshot_prefix();
  }
  snapshot_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snapshot_prefix);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.snapshot_prefix)
}

// optional bool snapshot_diff = 16 [default = false];
inline bool SolverParameter::has_snapshot_diff() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void SolverParameter::set_has_snapshot_diff() {
  _has_bits_[0] |= 0x10000000u;
}
inline void SolverParameter::clear_has_snapshot_diff() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void SolverParameter::clear_snapshot_diff() {
  snapshot_diff_ = false;
  clear_has_snapshot_diff();
}
inline bool SolverParameter::snapshot_diff() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot_diff)
  return snapshot_diff_;
}
inline void SolverParameter::set_snapshot_diff(bool value) {
  set_has_snapshot_diff();
  snapshot_diff_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot_diff)
}

// optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
inline bool SolverParameter::has_snapshot_format() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void SolverParameter::set_has_snapshot_format() {
  _has_bits_[0] |= 0x20000000u;
}
inline void SolverParameter::clear_has_snapshot_format() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void SolverParameter::clear_snapshot_format() {
  snapshot_format_ = 1;
  clear_has_snapshot_format();
}
inline ::caffe::SolverParameter_SnapshotFormat SolverParameter::snapshot_format() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot_format)
  return static_cast< ::caffe::SolverParameter_SnapshotFormat >(snapshot_format_);
}
inline void SolverParameter::set_snapshot_format(::caffe::SolverParameter_SnapshotFormat value) {
  assert(::caffe::SolverParameter_SnapshotFormat_IsValid(value));
  set_has_snapshot_format();
  snapshot_format_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot_format)
}

// optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
inline bool SolverParameter::has_solver_mode() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void SolverParameter::set_has_solver_mode() {
  _has_bits_[0] |= 0x40000000u;
}
inline void SolverParameter::clear_has_solver_mode() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void SolverParameter::clear_solver_mode() {
  solver_mode_ = 1;
  clear_has_solver_mode();
}
inline ::caffe::SolverParameter_SolverMode SolverParameter::solver_mode() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.solver_mode)
  return static_cast< ::caffe::SolverParameter_SolverMode >(solver_mode_);
}
inline void SolverParameter::set_solver_mode(::caffe::SolverParameter_SolverMode value) {
  assert(::caffe::SolverParameter_SolverMode_IsValid(value));
  set_has_solver_mode();
  solver_mode_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.solver_mode)
}

// optional int32 device_id = 18 [default = 0];
inline bool SolverParameter::has_device_id() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void SolverParameter::set_has_device_id() {
  _has_bits_[0] |= 0x80000000u;
}
inline void SolverParameter::clear_has_device_id() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void SolverParameter::clear_device_id() {
  device_id_ = 0;
  clear_has_device_id();
}
inline ::google::protobuf::int32 SolverParameter::device_id() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.device_id)
  return device_id_;
}
inline void SolverParameter::set_device_id(::google::protobuf::int32 value) {
  set_has_device_id();
  device_id_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.device_id)
}

// optional int64 random_seed = 20 [default = -1];
inline bool SolverParameter::has_random_seed() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void SolverParameter::set_has_random_seed() {
  _has_bits_[1] |= 0x00000001u;
}
inline void SolverParameter::clear_has_random_seed() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void SolverParameter::clear_random_seed() {
  random_seed_ = GOOGLE_LONGLONG(-1);
  clear_has_random_seed();
}
inline ::google::protobuf::int64 SolverParameter::random_seed() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.random_seed)
  return random_seed_;
}
inline void SolverParameter::set_random_seed(::google::protobuf::int64 value) {
  set_has_random_seed();
  random_seed_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.random_seed)
}

// optional string type = 40 [default = "SGD"];
inline bool SolverParameter::has_type() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void SolverParameter::set_has_type() {
  _has_bits_[1] |= 0x00000002u;
}
inline void SolverParameter::clear_has_type() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void SolverParameter::clear_type() {
  type_.ClearToDefaultNoArena(_default_type_);
  clear_has_type();
}
inline const ::std::string& SolverParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.type)
  return type_.GetNoArena(_default_type_);
}
inline void SolverParameter::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(_default_type_, value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.type)
}
inline void SolverParameter::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(_default_type_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.type)
}
inline void SolverParameter::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(_default_type_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.type)
}
inline ::std::string* SolverParameter::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.type)
  return type_.MutableNoArena(_default_type_);
}
inline ::std::string* SolverParameter::release_type() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.type)
  clear_has_type();
  return type_.ReleaseNoArena(_default_type_);
}
inline void SolverParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(_default_type_, type);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.type)
}

// optional float delta = 31 [default = 1e-008];
inline bool SolverParameter::has_delta() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void SolverParameter::set_has_delta() {
  _has_bits_[1] |= 0x00000004u;
}
inline void SolverParameter::clear_has_delta() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void SolverParameter::clear_delta() {
  delta_ = 1e-008f;
  clear_has_delta();
}
inline float SolverParameter::delta() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.delta)
  return delta_;
}
inline void SolverParameter::set_delta(float value) {
  set_has_delta();
  delta_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.delta)
}

// optional float momentum2 = 39 [default = 0.999];
inline bool SolverParameter::has_momentum2() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void SolverParameter::set_has_momentum2() {
  _has_bits_[1] |= 0x00000008u;
}
inline void SolverParameter::clear_has_momentum2() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void SolverParameter::clear_momentum2() {
  momentum2_ = 0.999f;
  clear_has_momentum2();
}
inline float SolverParameter::momentum2() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.momentum2)
  return momentum2_;
}
inline void SolverParameter::set_momentum2(float value) {
  set_has_momentum2();
  momentum2_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.momentum2)
}

// optional float rms_decay = 38 [default = 0.99];
inline bool SolverParameter::has_rms_decay() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void SolverParameter::set_has_rms_decay() {
  _has_bits_[1] |= 0x00000010u;
}
inline void SolverParameter::clear_has_rms_decay() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void SolverParameter::clear_rms_decay() {
  rms_decay_ = 0.99f;
  clear_has_rms_decay();
}
inline float SolverParameter::rms_decay() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.rms_decay)
  return rms_decay_;
}
inline void SolverParameter::set_rms_decay(float value) {
  set_has_rms_decay();
  rms_decay_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.rms_decay)
}

// optional bool debug_info = 23 [default = false];
inline bool SolverParameter::has_debug_info() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void SolverParameter::set_has_debug_info() {
  _has_bits_[1] |= 0x00000020u;
}
inline void SolverParameter::clear_has_debug_info() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void SolverParameter::clear_debug_info() {
  debug_info_ = false;
  clear_has_debug_info();
}
inline bool SolverParameter::debug_info() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.debug_info)
  return debug_info_;
}
inline void SolverParameter::set_debug_info(bool value) {
  set_has_debug_info();
  debug_info_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.debug_info)
}

// optional bool snapshot_after_train = 28 [default = true];
inline bool SolverParameter::has_snapshot_after_train() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void SolverParameter::set_has_snapshot_after_train() {
  _has_bits_[1] |= 0x00000040u;
}
inline void SolverParameter::clear_has_snapshot_after_train() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void SolverParameter::clear_snapshot_after_train() {
  snapshot_after_train_ = true;
  clear_has_snapshot_after_train();
}
inline bool SolverParameter::snapshot_after_train() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot_after_train)
  return snapshot_after_train_;
}
inline void SolverParameter::set_snapshot_after_train(bool value) {
  set_has_snapshot_after_train();
  snapshot_after_train_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot_after_train)
}

// optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
inline bool SolverParameter::has_solver_type() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void SolverParameter::set_has_solver_type() {
  _has_bits_[1] |= 0x00000080u;
}
inline void SolverParameter::clear_has_solver_type() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void SolverParameter::clear_solver_type() {
  solver_type_ = 0;
  clear_has_solver_type();
}
inline ::caffe::SolverParameter_SolverType SolverParameter::solver_type() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.solver_type)
  return static_cast< ::caffe::SolverParameter_SolverType >(solver_type_);
}
inline void SolverParameter::set_solver_type(::caffe::SolverParameter_SolverType value) {
  assert(::caffe::SolverParameter_SolverType_IsValid(value));
  set_has_solver_type();
  solver_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.solver_type)
}

// optional bool layer_wise_reduce = 41 [default = true];
inline bool SolverParameter::has_layer_wise_reduce() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void SolverParameter::set_has_layer_wise_reduce() {
  _has_bits_[1] |= 0x00000100u;
}
inline void SolverParameter::clear_has_layer_wise_reduce() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void SolverParameter::clear_layer_wise_reduce() {
  layer_wise_reduce_ = true;
  clear_has_layer_wise_reduce();
}
inline bool SolverParameter::layer_wise_reduce() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.layer_wise_reduce)
  return layer_wise_reduce_;
}
inline void SolverParameter::set_layer_wise_reduce(bool value) {
  set_has_layer_wise_reduce();
  layer_wise_reduce_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.layer_wise_reduce)
}

inline const SolverParameter* SolverParameter::internal_default_instance() {
  return &SolverParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// SolverState

// optional int32 iter = 1;
inline bool SolverState::has_iter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SolverState::set_has_iter() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SolverState::clear_has_iter() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SolverState::clear_iter() {
  iter_ = 0;
  clear_has_iter();
}
inline ::google::protobuf::int32 SolverState::iter() const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.iter)
  return iter_;
}
inline void SolverState::set_iter(::google::protobuf::int32 value) {
  set_has_iter();
  iter_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverState.iter)
}

// optional string learned_net = 2;
inline bool SolverState::has_learned_net() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SolverState::set_has_learned_net() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SolverState::clear_has_learned_net() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SolverState::clear_learned_net() {
  learned_net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_learned_net();
}
inline const ::std::string& SolverState::learned_net() const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.learned_net)
  return learned_net_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverState::set_learned_net(const ::std::string& value) {
  set_has_learned_net();
  learned_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverState.learned_net)
}
inline void SolverState::set_learned_net(const char* value) {
  set_has_learned_net();
  learned_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverState.learned_net)
}
inline void SolverState::set_learned_net(const char* value, size_t size) {
  set_has_learned_net();
  learned_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverState.learned_net)
}
inline ::std::string* SolverState::mutable_learned_net() {
  set_has_learned_net();
  // @@protoc_insertion_point(field_mutable:caffe.SolverState.learned_net)
  return learned_net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolverState::release_learned_net() {
  // @@protoc_insertion_point(field_release:caffe.SolverState.learned_net)
  clear_has_learned_net();
  return learned_net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverState::set_allocated_learned_net(::std::string* learned_net) {
  if (learned_net != NULL) {
    set_has_learned_net();
  } else {
    clear_has_learned_net();
  }
  learned_net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), learned_net);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverState.learned_net)
}

// repeated .caffe.BlobProto history = 3;
inline int SolverState::history_size() const {
  return history_.size();
}
inline void SolverState::clear_history() {
  history_.Clear();
}
inline const ::caffe::BlobProto& SolverState::history(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.history)
  return history_.Get(index);
}
inline ::caffe::BlobProto* SolverState::mutable_history(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverState.history)
  return history_.Mutable(index);
}
inline ::caffe::BlobProto* SolverState::add_history() {
  // @@protoc_insertion_point(field_add:caffe.SolverState.history)
  return history_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
SolverState::mutable_history() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverState.history)
  return &history_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
SolverState::history() const {
  // @@protoc_insertion_point(field_list:caffe.SolverState.history)
  return history_;
}

// optional int32 current_step = 4 [default = 0];
inline bool SolverState::has_current_step() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SolverState::set_has_current_step() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SolverState::clear_has_current_step() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SolverState::clear_current_step() {
  current_step_ = 0;
  clear_has_current_step();
}
inline ::google::protobuf::int32 SolverState::current_step() const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.current_step)
  return current_step_;
}
inline void SolverState::set_current_step(::google::protobuf::int32 value) {
  set_has_current_step();
  current_step_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverState.current_step)
}

inline const SolverState* SolverState::internal_default_instance() {
  return &SolverState_default_instance_.get();
}
// -------------------------------------------------------------------

// NetState

// optional .caffe.Phase phase = 1 [default = TEST];
inline bool NetState::has_phase() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetState::set_has_phase() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetState::clear_has_phase() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetState::clear_phase() {
  phase_ = 1;
  clear_has_phase();
}
inline ::caffe::Phase NetState::phase() const {
  // @@protoc_insertion_point(field_get:caffe.NetState.phase)
  return static_cast< ::caffe::Phase >(phase_);
}
inline void NetState::set_phase(::caffe::Phase value) {
  assert(::caffe::Phase_IsValid(value));
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetState.phase)
}

// optional int32 level = 2 [default = 0];
inline bool NetState::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetState::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetState::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetState::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 NetState::level() const {
  // @@protoc_insertion_point(field_get:caffe.NetState.level)
  return level_;
}
inline void NetState::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetState.level)
}

// repeated string stage = 3;
inline int NetState::stage_size() const {
  return stage_.size();
}
inline void NetState::clear_stage() {
  stage_.Clear();
}
inline const ::std::string& NetState::stage(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetState.stage)
  return stage_.Get(index);
}
inline ::std::string* NetState::mutable_stage(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetState.stage)
  return stage_.Mutable(index);
}
inline void NetState::set_stage(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetState.stage)
  stage_.Mutable(index)->assign(value);
}
inline void NetState::set_stage(int index, const char* value) {
  stage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetState.stage)
}
inline void NetState::set_stage(int index, const char* value, size_t size) {
  stage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetState.stage)
}
inline ::std::string* NetState::add_stage() {
  // @@protoc_insertion_point(field_add_mutable:caffe.NetState.stage)
  return stage_.Add();
}
inline void NetState::add_stage(const ::std::string& value) {
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetState.stage)
}
inline void NetState::add_stage(const char* value) {
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetState.stage)
}
inline void NetState::add_stage(const char* value, size_t size) {
  stage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetState.stage)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetState::stage() const {
  // @@protoc_insertion_point(field_list:caffe.NetState.stage)
  return stage_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetState::mutable_stage() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetState.stage)
  return &stage_;
}

inline const NetState* NetState::internal_default_instance() {
  return &NetState_default_instance_.get();
}
// -------------------------------------------------------------------

// NetStateRule

// optional .caffe.Phase phase = 1;
inline bool NetStateRule::has_phase() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetStateRule::set_has_phase() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetStateRule::clear_has_phase() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetStateRule::clear_phase() {
  phase_ = 0;
  clear_has_phase();
}
inline ::caffe::Phase NetStateRule::phase() const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.phase)
  return static_cast< ::caffe::Phase >(phase_);
}
inline void NetStateRule::set_phase(::caffe::Phase value) {
  assert(::caffe::Phase_IsValid(value));
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.phase)
}

// optional int32 min_level = 2;
inline bool NetStateRule::has_min_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetStateRule::set_has_min_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetStateRule::clear_has_min_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetStateRule::clear_min_level() {
  min_level_ = 0;
  clear_has_min_level();
}
inline ::google::protobuf::int32 NetStateRule::min_level() const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.min_level)
  return min_level_;
}
inline void NetStateRule::set_min_level(::google::protobuf::int32 value) {
  set_has_min_level();
  min_level_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.min_level)
}

// optional int32 max_level = 3;
inline bool NetStateRule::has_max_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetStateRule::set_has_max_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetStateRule::clear_has_max_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetStateRule::clear_max_level() {
  max_level_ = 0;
  clear_has_max_level();
}
inline ::google::protobuf::int32 NetStateRule::max_level() const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.max_level)
  return max_level_;
}
inline void NetStateRule::set_max_level(::google::protobuf::int32 value) {
  set_has_max_level();
  max_level_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.max_level)
}

// repeated string stage = 4;
inline int NetStateRule::stage_size() const {
  return stage_.size();
}
inline void NetStateRule::clear_stage() {
  stage_.Clear();
}
inline const ::std::string& NetStateRule::stage(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.stage)
  return stage_.Get(index);
}
inline ::std::string* NetStateRule::mutable_stage(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetStateRule.stage)
  return stage_.Mutable(index);
}
inline void NetStateRule::set_stage(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.stage)
  stage_.Mutable(index)->assign(value);
}
inline void NetStateRule::set_stage(int index, const char* value) {
  stage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetStateRule.stage)
}
inline void NetStateRule::set_stage(int index, const char* value, size_t size) {
  stage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetStateRule.stage)
}
inline ::std::string* NetStateRule::add_stage() {
  // @@protoc_insertion_point(field_add_mutable:caffe.NetStateRule.stage)
  return stage_.Add();
}
inline void NetStateRule::add_stage(const ::std::string& value) {
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetStateRule.stage)
}
inline void NetStateRule::add_stage(const char* value) {
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetStateRule.stage)
}
inline void NetStateRule::add_stage(const char* value, size_t size) {
  stage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetStateRule.stage)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetStateRule::stage() const {
  // @@protoc_insertion_point(field_list:caffe.NetStateRule.stage)
  return stage_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetStateRule::mutable_stage() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetStateRule.stage)
  return &stage_;
}

// repeated string not_stage = 5;
inline int NetStateRule::not_stage_size() const {
  return not_stage_.size();
}
inline void NetStateRule::clear_not_stage() {
  not_stage_.Clear();
}
inline const ::std::string& NetStateRule::not_stage(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.not_stage)
  return not_stage_.Get(index);
}
inline ::std::string* NetStateRule::mutable_not_stage(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetStateRule.not_stage)
  return not_stage_.Mutable(index);
}
inline void NetStateRule::set_not_stage(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.not_stage)
  not_stage_.Mutable(index)->assign(value);
}
inline void NetStateRule::set_not_stage(int index, const char* value) {
  not_stage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetStateRule.not_stage)
}
inline void NetStateRule::set_not_stage(int index, const char* value, size_t size) {
  not_stage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetStateRule.not_stage)
}
inline ::std::string* NetStateRule::add_not_stage() {
  // @@protoc_insertion_point(field_add_mutable:caffe.NetStateRule.not_stage)
  return not_stage_.Add();
}
inline void NetStateRule::add_not_stage(const ::std::string& value) {
  not_stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetStateRule.not_stage)
}
inline void NetStateRule::add_not_stage(const char* value) {
  not_stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetStateRule.not_stage)
}
inline void NetStateRule::add_not_stage(const char* value, size_t size) {
  not_stage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetStateRule.not_stage)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetStateRule::not_stage() const {
  // @@protoc_insertion_point(field_list:caffe.NetStateRule.not_stage)
  return not_stage_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetStateRule::mutable_not_stage() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetStateRule.not_stage)
  return &not_stage_;
}

inline const NetStateRule* NetStateRule::internal_default_instance() {
  return &NetStateRule_default_instance_.get();
}
// -------------------------------------------------------------------

// ParamSpec

// optional string name = 1;
inline bool ParamSpec::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParamSpec::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParamSpec::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParamSpec::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ParamSpec::name() const {
  // @@protoc_insertion_point(field_get:caffe.ParamSpec.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParamSpec::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ParamSpec.name)
}
inline void ParamSpec::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ParamSpec.name)
}
inline void ParamSpec::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ParamSpec.name)
}
inline ::std::string* ParamSpec::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.ParamSpec.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParamSpec::release_name() {
  // @@protoc_insertion_point(field_release:caffe.ParamSpec.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParamSpec::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.ParamSpec.name)
}

// optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
inline bool ParamSpec::has_share_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParamSpec::set_has_share_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ParamSpec::clear_has_share_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ParamSpec::clear_share_mode() {
  share_mode_ = 0;
  clear_has_share_mode();
}
inline ::caffe::ParamSpec_DimCheckMode ParamSpec::share_mode() const {
  // @@protoc_insertion_point(field_get:caffe.ParamSpec.share_mode)
  return static_cast< ::caffe::ParamSpec_DimCheckMode >(share_mode_);
}
inline void ParamSpec::set_share_mode(::caffe::ParamSpec_DimCheckMode value) {
  assert(::caffe::ParamSpec_DimCheckMode_IsValid(value));
  set_has_share_mode();
  share_mode_ = value;
  // @@protoc_insertion_point(field_set:caffe.ParamSpec.share_mode)
}

// optional float lr_mult = 3 [default = 1];
inline bool ParamSpec::has_lr_mult() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ParamSpec::set_has_lr_mult() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ParamSpec::clear_has_lr_mult() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ParamSpec::clear_lr_mult() {
  lr_mult_ = 1;
  clear_has_lr_mult();
}
inline float ParamSpec::lr_mult() const {
  // @@protoc_insertion_point(field_get:caffe.ParamSpec.lr_mult)
  return lr_mult_;
}
inline void ParamSpec::set_lr_mult(float value) {
  set_has_lr_mult();
  lr_mult_ = value;
  // @@protoc_insertion_point(field_set:caffe.ParamSpec.lr_mult)
}

// optional float decay_mult = 4 [default = 1];
inline bool ParamSpec::has_decay_mult() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ParamSpec::set_has_decay_mult() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ParamSpec::clear_has_decay_mult() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ParamSpec::clear_decay_mult() {
  decay_mult_ = 1;
  clear_has_decay_mult();
}
inline float ParamSpec::decay_mult() const {
  // @@protoc_insertion_point(field_get:caffe.ParamSpec.decay_mult)
  return decay_mult_;
}
inline void ParamSpec::set_decay_mult(float value) {
  set_has_decay_mult();
  decay_mult_ = value;
  // @@protoc_insertion_point(field_set:caffe.ParamSpec.decay_mult)
}

inline const ParamSpec* ParamSpec::internal_default_instance() {
  return &ParamSpec_default_instance_.get();
}
// -------------------------------------------------------------------

// LayerParameter

// optional string name = 1;
inline bool LayerParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LayerParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LayerParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LayerParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LayerParameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.name)
}
inline void LayerParameter::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.name)
}
inline void LayerParameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.name)
}
inline ::std::string* LayerParameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LayerParameter::release_name() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LayerParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.name)
}

// optional string type = 2;
inline bool LayerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LayerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LayerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LayerParameter::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LayerParameter::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.type)
}
inline void LayerParameter::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.type)
}
inline void LayerParameter::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.type)
}
inline ::std::string* LayerParameter::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LayerParameter::release_type() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LayerParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.type)
}

// repeated string bottom = 3;
inline int LayerParameter::bottom_size() const {
  return bottom_.size();
}
inline void LayerParameter::clear_bottom() {
  bottom_.Clear();
}
inline const ::std::string& LayerParameter::bottom(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.bottom)
  return bottom_.Get(index);
}
inline ::std::string* LayerParameter::mutable_bottom(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.bottom)
  return bottom_.Mutable(index);
}
inline void LayerParameter::set_bottom(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.bottom)
  bottom_.Mutable(index)->assign(value);
}
inline void LayerParameter::set_bottom(int index, const char* value) {
  bottom_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.bottom)
}
inline void LayerParameter::set_bottom(int index, const char* value, size_t size) {
  bottom_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.bottom)
}
inline ::std::string* LayerParameter::add_bottom() {
  // @@protoc_insertion_point(field_add_mutable:caffe.LayerParameter.bottom)
  return bottom_.Add();
}
inline void LayerParameter::add_bottom(const ::std::string& value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.bottom)
}
inline void LayerParameter::add_bottom(const char* value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.LayerParameter.bottom)
}
inline void LayerParameter::add_bottom(const char* value, size_t size) {
  bottom_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.LayerParameter.bottom)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerParameter::bottom() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.bottom)
  return bottom_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LayerParameter::mutable_bottom() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.bottom)
  return &bottom_;
}

// repeated string top = 4;
inline int LayerParameter::top_size() const {
  return top_.size();
}
inline void LayerParameter::clear_top() {
  top_.Clear();
}
inline const ::std::string& LayerParameter::top(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.top)
  return top_.Get(index);
}
inline ::std::string* LayerParameter::mutable_top(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.top)
  return top_.Mutable(index);
}
inline void LayerParameter::set_top(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.top)
  top_.Mutable(index)->assign(value);
}
inline void LayerParameter::set_top(int index, const char* value) {
  top_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.top)
}
inline void LayerParameter::set_top(int index, const char* value, size_t size) {
  top_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.top)
}
inline ::std::string* LayerParameter::add_top() {
  // @@protoc_insertion_point(field_add_mutable:caffe.LayerParameter.top)
  return top_.Add();
}
inline void LayerParameter::add_top(const ::std::string& value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.top)
}
inline void LayerParameter::add_top(const char* value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.LayerParameter.top)
}
inline void LayerParameter::add_top(const char* value, size_t size) {
  top_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.LayerParameter.top)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerParameter::top() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.top)
  return top_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LayerParameter::mutable_top() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.top)
  return &top_;
}

// optional .caffe.Phase phase = 10;
inline bool LayerParameter::has_phase() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LayerParameter::set_has_phase() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LayerParameter::clear_has_phase() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LayerParameter::clear_phase() {
  phase_ = 0;
  clear_has_phase();
}
inline ::caffe::Phase LayerParameter::phase() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.phase)
  return static_cast< ::caffe::Phase >(phase_);
}
inline void LayerParameter::set_phase(::caffe::Phase value) {
  assert(::caffe::Phase_IsValid(value));
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.phase)
}

// repeated float loss_weight = 5;
inline int LayerParameter::loss_weight_size() const {
  return loss_weight_.size();
}
inline void LayerParameter::clear_loss_weight() {
  loss_weight_.Clear();
}
inline float LayerParameter::loss_weight(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.loss_weight)
  return loss_weight_.Get(index);
}
inline void LayerParameter::set_loss_weight(int index, float value) {
  loss_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.loss_weight)
}
inline void LayerParameter::add_loss_weight(float value) {
  loss_weight_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.loss_weight)
}
inline const ::google::protobuf::RepeatedField< float >&
LayerParameter::loss_weight() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.loss_weight)
  return loss_weight_;
}
inline ::google::protobuf::RepeatedField< float >*
LayerParameter::mutable_loss_weight() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.loss_weight)
  return &loss_weight_;
}

// repeated .caffe.ParamSpec param = 6;
inline int LayerParameter::param_size() const {
  return param_.size();
}
inline void LayerParameter::clear_param() {
  param_.Clear();
}
inline const ::caffe::ParamSpec& LayerParameter::param(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.param)
  return param_.Get(index);
}
inline ::caffe::ParamSpec* LayerParameter::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.param)
  return param_.Mutable(index);
}
inline ::caffe::ParamSpec* LayerParameter::add_param() {
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.param)
  return param_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec >*
LayerParameter::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.param)
  return &param_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec >&
LayerParameter::param() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.param)
  return param_;
}

// repeated .caffe.BlobProto blobs = 7;
inline int LayerParameter::blobs_size() const {
  return blobs_.size();
}
inline void LayerParameter::clear_blobs() {
  blobs_.Clear();
}
inline const ::caffe::BlobProto& LayerParameter::blobs(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.blobs)
  return blobs_.Get(index);
}
inline ::caffe::BlobProto* LayerParameter::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.blobs)
  return blobs_.Mutable(index);
}
inline ::caffe::BlobProto* LayerParameter::add_blobs() {
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.blobs)
  return blobs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
LayerParameter::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.blobs)
  return &blobs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
LayerParameter::blobs() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.blobs)
  return blobs_;
}

// repeated bool propagate_down = 11;
inline int LayerParameter::propagate_down_size() const {
  return propagate_down_.size();
}
inline void LayerParameter::clear_propagate_down() {
  propagate_down_.Clear();
}
inline bool LayerParameter::propagate_down(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.propagate_down)
  return propagate_down_.Get(index);
}
inline void LayerParameter::set_propagate_down(int index, bool value) {
  propagate_down_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.propagate_down)
}
inline void LayerParameter::add_propagate_down(bool value) {
  propagate_down_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.propagate_down)
}
inline const ::google::protobuf::RepeatedField< bool >&
LayerParameter::propagate_down() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.propagate_down)
  return propagate_down_;
}
inline ::google::protobuf::RepeatedField< bool >*
LayerParameter::mutable_propagate_down() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.propagate_down)
  return &propagate_down_;
}

// repeated .caffe.NetStateRule include = 8;
inline int LayerParameter::include_size() const {
  return include_.size();
}
inline void LayerParameter::clear_include() {
  include_.Clear();
}
inline const ::caffe::NetStateRule& LayerParameter::include(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.include)
  return include_.Get(index);
}
inline ::caffe::NetStateRule* LayerParameter::mutable_include(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.include)
  return include_.Mutable(index);
}
inline ::caffe::NetStateRule* LayerParameter::add_include() {
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.include)
  return include_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
LayerParameter::mutable_include() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.include)
  return &include_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
LayerParameter::include() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.include)
  return include_;
}

// repeated .caffe.NetStateRule exclude = 9;
inline int LayerParameter::exclude_size() const {
  return exclude_.size();
}
inline void LayerParameter::clear_exclude() {
  exclude_.Clear();
}
inline const ::caffe::NetStateRule& LayerParameter::exclude(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.exclude)
  return exclude_.Get(index);
}
inline ::caffe::NetStateRule* LayerParameter::mutable_exclude(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.exclude)
  return exclude_.Mutable(index);
}
inline ::caffe::NetStateRule* LayerParameter::add_exclude() {
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.exclude)
  return exclude_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
LayerParameter::mutable_exclude() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.exclude)
  return &exclude_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
LayerParameter::exclude() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.exclude)
  return exclude_;
}

// optional .caffe.TransformationParameter transform_param = 100;
inline bool LayerParameter::has_transform_param() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LayerParameter::set_has_transform_param() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LayerParameter::clear_has_transform_param() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LayerParameter::clear_transform_param() {
  if (transform_param_ != NULL) transform_param_->::caffe::TransformationParameter::Clear();
  clear_has_transform_param();
}
inline const ::caffe::TransformationParameter& LayerParameter::transform_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.transform_param)
  return transform_param_ != NULL ? *transform_param_
                         : *::caffe::TransformationParameter::internal_default_instance();
}
inline ::caffe::TransformationParameter* LayerParameter::mutable_transform_param() {
  set_has_transform_param();
  if (transform_param_ == NULL) {
    transform_param_ = new ::caffe::TransformationParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.transform_param)
  return transform_param_;
}
inline ::caffe::TransformationParameter* LayerParameter::release_transform_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.transform_param)
  clear_has_transform_param();
  ::caffe::TransformationParameter* temp = transform_param_;
  transform_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_transform_param(::caffe::TransformationParameter* transform_param) {
  delete transform_param_;
  transform_param_ = transform_param;
  if (transform_param) {
    set_has_transform_param();
  } else {
    clear_has_transform_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.transform_param)
}

// optional .caffe.LossParameter loss_param = 101;
inline bool LayerParameter::has_loss_param() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LayerParameter::set_has_loss_param() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LayerParameter::clear_has_loss_param() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LayerParameter::clear_loss_param() {
  if (loss_param_ != NULL) loss_param_->::caffe::LossParameter::Clear();
  clear_has_loss_param();
}
inline const ::caffe::LossParameter& LayerParameter::loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.loss_param)
  return loss_param_ != NULL ? *loss_param_
                         : *::caffe::LossParameter::internal_default_instance();
}
inline ::caffe::LossParameter* LayerParameter::mutable_loss_param() {
  set_has_loss_param();
  if (loss_param_ == NULL) {
    loss_param_ = new ::caffe::LossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.loss_param)
  return loss_param_;
}
inline ::caffe::LossParameter* LayerParameter::release_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.loss_param)
  clear_has_loss_param();
  ::caffe::LossParameter* temp = loss_param_;
  loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_loss_param(::caffe::LossParameter* loss_param) {
  delete loss_param_;
  loss_param_ = loss_param;
  if (loss_param) {
    set_has_loss_param();
  } else {
    clear_has_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.loss_param)
}

// optional .caffe.AccuracyParameter accuracy_param = 102;
inline bool LayerParameter::has_accuracy_param() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LayerParameter::set_has_accuracy_param() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LayerParameter::clear_has_accuracy_param() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LayerParameter::clear_accuracy_param() {
  if (accuracy_param_ != NULL) accuracy_param_->::caffe::AccuracyParameter::Clear();
  clear_has_accuracy_param();
}
inline const ::caffe::AccuracyParameter& LayerParameter::accuracy_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.accuracy_param)
  return accuracy_param_ != NULL ? *accuracy_param_
                         : *::caffe::AccuracyParameter::internal_default_instance();
}
inline ::caffe::AccuracyParameter* LayerParameter::mutable_accuracy_param() {
  set_has_accuracy_param();
  if (accuracy_param_ == NULL) {
    accuracy_param_ = new ::caffe::AccuracyParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.accuracy_param)
  return accuracy_param_;
}
inline ::caffe::AccuracyParameter* LayerParameter::release_accuracy_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.accuracy_param)
  clear_has_accuracy_param();
  ::caffe::AccuracyParameter* temp = accuracy_param_;
  accuracy_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_accuracy_param(::caffe::AccuracyParameter* accuracy_param) {
  delete accuracy_param_;
  accuracy_param_ = accuracy_param;
  if (accuracy_param) {
    set_has_accuracy_param();
  } else {
    clear_has_accuracy_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.accuracy_param)
}

// optional .caffe.ArgMaxParameter argmax_param = 103;
inline bool LayerParameter::has_argmax_param() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void LayerParameter::set_has_argmax_param() {
  _has_bits_[0] |= 0x00004000u;
}
inline void LayerParameter::clear_has_argmax_param() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void LayerParameter::clear_argmax_param() {
  if (argmax_param_ != NULL) argmax_param_->::caffe::ArgMaxParameter::Clear();
  clear_has_argmax_param();
}
inline const ::caffe::ArgMaxParameter& LayerParameter::argmax_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.argmax_param)
  return argmax_param_ != NULL ? *argmax_param_
                         : *::caffe::ArgMaxParameter::internal_default_instance();
}
inline ::caffe::ArgMaxParameter* LayerParameter::mutable_argmax_param() {
  set_has_argmax_param();
  if (argmax_param_ == NULL) {
    argmax_param_ = new ::caffe::ArgMaxParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.argmax_param)
  return argmax_param_;
}
inline ::caffe::ArgMaxParameter* LayerParameter::release_argmax_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.argmax_param)
  clear_has_argmax_param();
  ::caffe::ArgMaxParameter* temp = argmax_param_;
  argmax_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_argmax_param(::caffe::ArgMaxParameter* argmax_param) {
  delete argmax_param_;
  argmax_param_ = argmax_param;
  if (argmax_param) {
    set_has_argmax_param();
  } else {
    clear_has_argmax_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.argmax_param)
}

// optional .caffe.BatchNormParameter batch_norm_param = 139;
inline bool LayerParameter::has_batch_norm_param() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void LayerParameter::set_has_batch_norm_param() {
  _has_bits_[0] |= 0x00008000u;
}
inline void LayerParameter::clear_has_batch_norm_param() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void LayerParameter::clear_batch_norm_param() {
  if (batch_norm_param_ != NULL) batch_norm_param_->::caffe::BatchNormParameter::Clear();
  clear_has_batch_norm_param();
}
inline const ::caffe::BatchNormParameter& LayerParameter::batch_norm_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.batch_norm_param)
  return batch_norm_param_ != NULL ? *batch_norm_param_
                         : *::caffe::BatchNormParameter::internal_default_instance();
}
inline ::caffe::BatchNormParameter* LayerParameter::mutable_batch_norm_param() {
  set_has_batch_norm_param();
  if (batch_norm_param_ == NULL) {
    batch_norm_param_ = new ::caffe::BatchNormParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.batch_norm_param)
  return batch_norm_param_;
}
inline ::caffe::BatchNormParameter* LayerParameter::release_batch_norm_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.batch_norm_param)
  clear_has_batch_norm_param();
  ::caffe::BatchNormParameter* temp = batch_norm_param_;
  batch_norm_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_batch_norm_param(::caffe::BatchNormParameter* batch_norm_param) {
  delete batch_norm_param_;
  batch_norm_param_ = batch_norm_param;
  if (batch_norm_param) {
    set_has_batch_norm_param();
  } else {
    clear_has_batch_norm_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.batch_norm_param)
}

// optional .caffe.BiasParameter bias_param = 141;
inline bool LayerParameter::has_bias_param() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void LayerParameter::set_has_bias_param() {
  _has_bits_[0] |= 0x00010000u;
}
inline void LayerParameter::clear_has_bias_param() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void LayerParameter::clear_bias_param() {
  if (bias_param_ != NULL) bias_param_->::caffe::BiasParameter::Clear();
  clear_has_bias_param();
}
inline const ::caffe::BiasParameter& LayerParameter::bias_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.bias_param)
  return bias_param_ != NULL ? *bias_param_
                         : *::caffe::BiasParameter::internal_default_instance();
}
inline ::caffe::BiasParameter* LayerParameter::mutable_bias_param() {
  set_has_bias_param();
  if (bias_param_ == NULL) {
    bias_param_ = new ::caffe::BiasParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.bias_param)
  return bias_param_;
}
inline ::caffe::BiasParameter* LayerParameter::release_bias_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.bias_param)
  clear_has_bias_param();
  ::caffe::BiasParameter* temp = bias_param_;
  bias_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_bias_param(::caffe::BiasParameter* bias_param) {
  delete bias_param_;
  bias_param_ = bias_param;
  if (bias_param) {
    set_has_bias_param();
  } else {
    clear_has_bias_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.bias_param)
}

// optional .caffe.ConcatParameter concat_param = 104;
inline bool LayerParameter::has_concat_param() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void LayerParameter::set_has_concat_param() {
  _has_bits_[0] |= 0x00020000u;
}
inline void LayerParameter::clear_has_concat_param() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void LayerParameter::clear_concat_param() {
  if (concat_param_ != NULL) concat_param_->::caffe::ConcatParameter::Clear();
  clear_has_concat_param();
}
inline const ::caffe::ConcatParameter& LayerParameter::concat_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.concat_param)
  return concat_param_ != NULL ? *concat_param_
                         : *::caffe::ConcatParameter::internal_default_instance();
}
inline ::caffe::ConcatParameter* LayerParameter::mutable_concat_param() {
  set_has_concat_param();
  if (concat_param_ == NULL) {
    concat_param_ = new ::caffe::ConcatParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.concat_param)
  return concat_param_;
}
inline ::caffe::ConcatParameter* LayerParameter::release_concat_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.concat_param)
  clear_has_concat_param();
  ::caffe::ConcatParameter* temp = concat_param_;
  concat_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_concat_param(::caffe::ConcatParameter* concat_param) {
  delete concat_param_;
  concat_param_ = concat_param;
  if (concat_param) {
    set_has_concat_param();
  } else {
    clear_has_concat_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.concat_param)
}

// optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;
inline bool LayerParameter::has_contrastive_loss_param() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void LayerParameter::set_has_contrastive_loss_param() {
  _has_bits_[0] |= 0x00040000u;
}
inline void LayerParameter::clear_has_contrastive_loss_param() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void LayerParameter::clear_contrastive_loss_param() {
  if (contrastive_loss_param_ != NULL) contrastive_loss_param_->::caffe::ContrastiveLossParameter::Clear();
  clear_has_contrastive_loss_param();
}
inline const ::caffe::ContrastiveLossParameter& LayerParameter::contrastive_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.contrastive_loss_param)
  return contrastive_loss_param_ != NULL ? *contrastive_loss_param_
                         : *::caffe::ContrastiveLossParameter::internal_default_instance();
}
inline ::caffe::ContrastiveLossParameter* LayerParameter::mutable_contrastive_loss_param() {
  set_has_contrastive_loss_param();
  if (contrastive_loss_param_ == NULL) {
    contrastive_loss_param_ = new ::caffe::ContrastiveLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.contrastive_loss_param)
  return contrastive_loss_param_;
}
inline ::caffe::ContrastiveLossParameter* LayerParameter::release_contrastive_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.contrastive_loss_param)
  clear_has_contrastive_loss_param();
  ::caffe::ContrastiveLossParameter* temp = contrastive_loss_param_;
  contrastive_loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_contrastive_loss_param(::caffe::ContrastiveLossParameter* contrastive_loss_param) {
  delete contrastive_loss_param_;
  contrastive_loss_param_ = contrastive_loss_param;
  if (contrastive_loss_param) {
    set_has_contrastive_loss_param();
  } else {
    clear_has_contrastive_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.contrastive_loss_param)
}

// optional .caffe.ConvolutionParameter convolution_param = 106;
inline bool LayerParameter::has_convolution_param() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void LayerParameter::set_has_convolution_param() {
  _has_bits_[0] |= 0x00080000u;
}
inline void LayerParameter::clear_has_convolution_param() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void LayerParameter::clear_convolution_param() {
  if (convolution_param_ != NULL) convolution_param_->::caffe::ConvolutionParameter::Clear();
  clear_has_convolution_param();
}
inline const ::caffe::ConvolutionParameter& LayerParameter::convolution_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.convolution_param)
  return convolution_param_ != NULL ? *convolution_param_
                         : *::caffe::ConvolutionParameter::internal_default_instance();
}
inline ::caffe::ConvolutionParameter* LayerParameter::mutable_convolution_param() {
  set_has_convolution_param();
  if (convolution_param_ == NULL) {
    convolution_param_ = new ::caffe::ConvolutionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.convolution_param)
  return convolution_param_;
}
inline ::caffe::ConvolutionParameter* LayerParameter::release_convolution_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.convolution_param)
  clear_has_convolution_param();
  ::caffe::ConvolutionParameter* temp = convolution_param_;
  convolution_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_convolution_param(::caffe::ConvolutionParameter* convolution_param) {
  delete convolution_param_;
  convolution_param_ = convolution_param;
  if (convolution_param) {
    set_has_convolution_param();
  } else {
    clear_has_convolution_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.convolution_param)
}

// optional .caffe.CropParameter crop_param = 144;
inline bool LayerParameter::has_crop_param() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void LayerParameter::set_has_crop_param() {
  _has_bits_[0] |= 0x00100000u;
}
inline void LayerParameter::clear_has_crop_param() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void LayerParameter::clear_crop_param() {
  if (crop_param_ != NULL) crop_param_->::caffe::CropParameter::Clear();
  clear_has_crop_param();
}
inline const ::caffe::CropParameter& LayerParameter::crop_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.crop_param)
  return crop_param_ != NULL ? *crop_param_
                         : *::caffe::CropParameter::internal_default_instance();
}
inline ::caffe::CropParameter* LayerParameter::mutable_crop_param() {
  set_has_crop_param();
  if (crop_param_ == NULL) {
    crop_param_ = new ::caffe::CropParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.crop_param)
  return crop_param_;
}
inline ::caffe::CropParameter* LayerParameter::release_crop_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.crop_param)
  clear_has_crop_param();
  ::caffe::CropParameter* temp = crop_param_;
  crop_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_crop_param(::caffe::CropParameter* crop_param) {
  delete crop_param_;
  crop_param_ = crop_param;
  if (crop_param) {
    set_has_crop_param();
  } else {
    clear_has_crop_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.crop_param)
}

// optional .caffe.DataParameter data_param = 107;
inline bool LayerParameter::has_data_param() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void LayerParameter::set_has_data_param() {
  _has_bits_[0] |= 0x00200000u;
}
inline void LayerParameter::clear_has_data_param() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void LayerParameter::clear_data_param() {
  if (data_param_ != NULL) data_param_->::caffe::DataParameter::Clear();
  clear_has_data_param();
}
inline const ::caffe::DataParameter& LayerParameter::data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.data_param)
  return data_param_ != NULL ? *data_param_
                         : *::caffe::DataParameter::internal_default_instance();
}
inline ::caffe::DataParameter* LayerParameter::mutable_data_param() {
  set_has_data_param();
  if (data_param_ == NULL) {
    data_param_ = new ::caffe::DataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.data_param)
  return data_param_;
}
inline ::caffe::DataParameter* LayerParameter::release_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.data_param)
  clear_has_data_param();
  ::caffe::DataParameter* temp = data_param_;
  data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_data_param(::caffe::DataParameter* data_param) {
  delete data_param_;
  data_param_ = data_param;
  if (data_param) {
    set_has_data_param();
  } else {
    clear_has_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.data_param)
}

// optional .caffe.DropoutParameter dropout_param = 108;
inline bool LayerParameter::has_dropout_param() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void LayerParameter::set_has_dropout_param() {
  _has_bits_[0] |= 0x00400000u;
}
inline void LayerParameter::clear_has_dropout_param() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void LayerParameter::clear_dropout_param() {
  if (dropout_param_ != NULL) dropout_param_->::caffe::DropoutParameter::Clear();
  clear_has_dropout_param();
}
inline const ::caffe::DropoutParameter& LayerParameter::dropout_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.dropout_param)
  return dropout_param_ != NULL ? *dropout_param_
                         : *::caffe::DropoutParameter::internal_default_instance();
}
inline ::caffe::DropoutParameter* LayerParameter::mutable_dropout_param() {
  set_has_dropout_param();
  if (dropout_param_ == NULL) {
    dropout_param_ = new ::caffe::DropoutParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.dropout_param)
  return dropout_param_;
}
inline ::caffe::DropoutParameter* LayerParameter::release_dropout_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.dropout_param)
  clear_has_dropout_param();
  ::caffe::DropoutParameter* temp = dropout_param_;
  dropout_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_dropout_param(::caffe::DropoutParameter* dropout_param) {
  delete dropout_param_;
  dropout_param_ = dropout_param;
  if (dropout_param) {
    set_has_dropout_param();
  } else {
    clear_has_dropout_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.dropout_param)
}

// optional .caffe.DummyDataParameter dummy_data_param = 109;
inline bool LayerParameter::has_dummy_data_param() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void LayerParameter::set_has_dummy_data_param() {
  _has_bits_[0] |= 0x00800000u;
}
inline void LayerParameter::clear_has_dummy_data_param() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void LayerParameter::clear_dummy_data_param() {
  if (dummy_data_param_ != NULL) dummy_data_param_->::caffe::DummyDataParameter::Clear();
  clear_has_dummy_data_param();
}
inline const ::caffe::DummyDataParameter& LayerParameter::dummy_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.dummy_data_param)
  return dummy_data_param_ != NULL ? *dummy_data_param_
                         : *::caffe::DummyDataParameter::internal_default_instance();
}
inline ::caffe::DummyDataParameter* LayerParameter::mutable_dummy_data_param() {
  set_has_dummy_data_param();
  if (dummy_data_param_ == NULL) {
    dummy_data_param_ = new ::caffe::DummyDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.dummy_data_param)
  return dummy_data_param_;
}
inline ::caffe::DummyDataParameter* LayerParameter::release_dummy_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.dummy_data_param)
  clear_has_dummy_data_param();
  ::caffe::DummyDataParameter* temp = dummy_data_param_;
  dummy_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_dummy_data_param(::caffe::DummyDataParameter* dummy_data_param) {
  delete dummy_data_param_;
  dummy_data_param_ = dummy_data_param;
  if (dummy_data_param) {
    set_has_dummy_data_param();
  } else {
    clear_has_dummy_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.dummy_data_param)
}

// optional .caffe.EltwiseParameter eltwise_param = 110;
inline bool LayerParameter::has_eltwise_param() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void LayerParameter::set_has_eltwise_param() {
  _has_bits_[0] |= 0x01000000u;
}
inline void LayerParameter::clear_has_eltwise_param() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void LayerParameter::clear_eltwise_param() {
  if (eltwise_param_ != NULL) eltwise_param_->::caffe::EltwiseParameter::Clear();
  clear_has_eltwise_param();
}
inline const ::caffe::EltwiseParameter& LayerParameter::eltwise_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.eltwise_param)
  return eltwise_param_ != NULL ? *eltwise_param_
                         : *::caffe::EltwiseParameter::internal_default_instance();
}
inline ::caffe::EltwiseParameter* LayerParameter::mutable_eltwise_param() {
  set_has_eltwise_param();
  if (eltwise_param_ == NULL) {
    eltwise_param_ = new ::caffe::EltwiseParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.eltwise_param)
  return eltwise_param_;
}
inline ::caffe::EltwiseParameter* LayerParameter::release_eltwise_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.eltwise_param)
  clear_has_eltwise_param();
  ::caffe::EltwiseParameter* temp = eltwise_param_;
  eltwise_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_eltwise_param(::caffe::EltwiseParameter* eltwise_param) {
  delete eltwise_param_;
  eltwise_param_ = eltwise_param;
  if (eltwise_param) {
    set_has_eltwise_param();
  } else {
    clear_has_eltwise_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.eltwise_param)
}

// optional .caffe.ELUParameter elu_param = 140;
inline bool LayerParameter::has_elu_param() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void LayerParameter::set_has_elu_param() {
  _has_bits_[0] |= 0x02000000u;
}
inline void LayerParameter::clear_has_elu_param() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void LayerParameter::clear_elu_param() {
  if (elu_param_ != NULL) elu_param_->::caffe::ELUParameter::Clear();
  clear_has_elu_param();
}
inline const ::caffe::ELUParameter& LayerParameter::elu_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.elu_param)
  return elu_param_ != NULL ? *elu_param_
                         : *::caffe::ELUParameter::internal_default_instance();
}
inline ::caffe::ELUParameter* LayerParameter::mutable_elu_param() {
  set_has_elu_param();
  if (elu_param_ == NULL) {
    elu_param_ = new ::caffe::ELUParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.elu_param)
  return elu_param_;
}
inline ::caffe::ELUParameter* LayerParameter::release_elu_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.elu_param)
  clear_has_elu_param();
  ::caffe::ELUParameter* temp = elu_param_;
  elu_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_elu_param(::caffe::ELUParameter* elu_param) {
  delete elu_param_;
  elu_param_ = elu_param;
  if (elu_param) {
    set_has_elu_param();
  } else {
    clear_has_elu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.elu_param)
}

// optional .caffe.EmbedParameter embed_param = 137;
inline bool LayerParameter::has_embed_param() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void LayerParameter::set_has_embed_param() {
  _has_bits_[0] |= 0x04000000u;
}
inline void LayerParameter::clear_has_embed_param() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void LayerParameter::clear_embed_param() {
  if (embed_param_ != NULL) embed_param_->::caffe::EmbedParameter::Clear();
  clear_has_embed_param();
}
inline const ::caffe::EmbedParameter& LayerParameter::embed_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.embed_param)
  return embed_param_ != NULL ? *embed_param_
                         : *::caffe::EmbedParameter::internal_default_instance();
}
inline ::caffe::EmbedParameter* LayerParameter::mutable_embed_param() {
  set_has_embed_param();
  if (embed_param_ == NULL) {
    embed_param_ = new ::caffe::EmbedParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.embed_param)
  return embed_param_;
}
inline ::caffe::EmbedParameter* LayerParameter::release_embed_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.embed_param)
  clear_has_embed_param();
  ::caffe::EmbedParameter* temp = embed_param_;
  embed_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_embed_param(::caffe::EmbedParameter* embed_param) {
  delete embed_param_;
  embed_param_ = embed_param;
  if (embed_param) {
    set_has_embed_param();
  } else {
    clear_has_embed_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.embed_param)
}

// optional .caffe.ExpParameter exp_param = 111;
inline bool LayerParameter::has_exp_param() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void LayerParameter::set_has_exp_param() {
  _has_bits_[0] |= 0x08000000u;
}
inline void LayerParameter::clear_has_exp_param() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void LayerParameter::clear_exp_param() {
  if (exp_param_ != NULL) exp_param_->::caffe::ExpParameter::Clear();
  clear_has_exp_param();
}
inline const ::caffe::ExpParameter& LayerParameter::exp_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.exp_param)
  return exp_param_ != NULL ? *exp_param_
                         : *::caffe::ExpParameter::internal_default_instance();
}
inline ::caffe::ExpParameter* LayerParameter::mutable_exp_param() {
  set_has_exp_param();
  if (exp_param_ == NULL) {
    exp_param_ = new ::caffe::ExpParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.exp_param)
  return exp_param_;
}
inline ::caffe::ExpParameter* LayerParameter::release_exp_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.exp_param)
  clear_has_exp_param();
  ::caffe::ExpParameter* temp = exp_param_;
  exp_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_exp_param(::caffe::ExpParameter* exp_param) {
  delete exp_param_;
  exp_param_ = exp_param;
  if (exp_param) {
    set_has_exp_param();
  } else {
    clear_has_exp_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.exp_param)
}

// optional .caffe.FlattenParameter flatten_param = 135;
inline bool LayerParameter::has_flatten_param() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void LayerParameter::set_has_flatten_param() {
  _has_bits_[0] |= 0x10000000u;
}
inline void LayerParameter::clear_has_flatten_param() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void LayerParameter::clear_flatten_param() {
  if (flatten_param_ != NULL) flatten_param_->::caffe::FlattenParameter::Clear();
  clear_has_flatten_param();
}
inline const ::caffe::FlattenParameter& LayerParameter::flatten_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.flatten_param)
  return flatten_param_ != NULL ? *flatten_param_
                         : *::caffe::FlattenParameter::internal_default_instance();
}
inline ::caffe::FlattenParameter* LayerParameter::mutable_flatten_param() {
  set_has_flatten_param();
  if (flatten_param_ == NULL) {
    flatten_param_ = new ::caffe::FlattenParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.flatten_param)
  return flatten_param_;
}
inline ::caffe::FlattenParameter* LayerParameter::release_flatten_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.flatten_param)
  clear_has_flatten_param();
  ::caffe::FlattenParameter* temp = flatten_param_;
  flatten_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_flatten_param(::caffe::FlattenParameter* flatten_param) {
  delete flatten_param_;
  flatten_param_ = flatten_param;
  if (flatten_param) {
    set_has_flatten_param();
  } else {
    clear_has_flatten_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.flatten_param)
}

// optional .caffe.HDF5DataParameter hdf5_data_param = 112;
inline bool LayerParameter::has_hdf5_data_param() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void LayerParameter::set_has_hdf5_data_param() {
  _has_bits_[0] |= 0x20000000u;
}
inline void LayerParameter::clear_has_hdf5_data_param() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void LayerParameter::clear_hdf5_data_param() {
  if (hdf5_data_param_ != NULL) hdf5_data_param_->::caffe::HDF5DataParameter::Clear();
  clear_has_hdf5_data_param();
}
inline const ::caffe::HDF5DataParameter& LayerParameter::hdf5_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.hdf5_data_param)
  return hdf5_data_param_ != NULL ? *hdf5_data_param_
                         : *::caffe::HDF5DataParameter::internal_default_instance();
}
inline ::caffe::HDF5DataParameter* LayerParameter::mutable_hdf5_data_param() {
  set_has_hdf5_data_param();
  if (hdf5_data_param_ == NULL) {
    hdf5_data_param_ = new ::caffe::HDF5DataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.hdf5_data_param)
  return hdf5_data_param_;
}
inline ::caffe::HDF5DataParameter* LayerParameter::release_hdf5_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.hdf5_data_param)
  clear_has_hdf5_data_param();
  ::caffe::HDF5DataParameter* temp = hdf5_data_param_;
  hdf5_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_hdf5_data_param(::caffe::HDF5DataParameter* hdf5_data_param) {
  delete hdf5_data_param_;
  hdf5_data_param_ = hdf5_data_param;
  if (hdf5_data_param) {
    set_has_hdf5_data_param();
  } else {
    clear_has_hdf5_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.hdf5_data_param)
}

// optional .caffe.HDF5OutputParameter hdf5_output_param = 113;
inline bool LayerParameter::has_hdf5_output_param() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void LayerParameter::set_has_hdf5_output_param() {
  _has_bits_[0] |= 0x40000000u;
}
inline void LayerParameter::clear_has_hdf5_output_param() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void LayerParameter::clear_hdf5_output_param() {
  if (hdf5_output_param_ != NULL) hdf5_output_param_->::caffe::HDF5OutputParameter::Clear();
  clear_has_hdf5_output_param();
}
inline const ::caffe::HDF5OutputParameter& LayerParameter::hdf5_output_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.hdf5_output_param)
  return hdf5_output_param_ != NULL ? *hdf5_output_param_
                         : *::caffe::HDF5OutputParameter::internal_default_instance();
}
inline ::caffe::HDF5OutputParameter* LayerParameter::mutable_hdf5_output_param() {
  set_has_hdf5_output_param();
  if (hdf5_output_param_ == NULL) {
    hdf5_output_param_ = new ::caffe::HDF5OutputParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.hdf5_output_param)
  return hdf5_output_param_;
}
inline ::caffe::HDF5OutputParameter* LayerParameter::release_hdf5_output_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.hdf5_output_param)
  clear_has_hdf5_output_param();
  ::caffe::HDF5OutputParameter* temp = hdf5_output_param_;
  hdf5_output_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param) {
  delete hdf5_output_param_;
  hdf5_output_param_ = hdf5_output_param;
  if (hdf5_output_param) {
    set_has_hdf5_output_param();
  } else {
    clear_has_hdf5_output_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.hdf5_output_param)
}

// optional .caffe.HingeLossParameter hinge_loss_param = 114;
inline bool LayerParameter::has_hinge_loss_param() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void LayerParameter::set_has_hinge_loss_param() {
  _has_bits_[0] |= 0x80000000u;
}
inline void LayerParameter::clear_has_hinge_loss_param() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void LayerParameter::clear_hinge_loss_param() {
  if (hinge_loss_param_ != NULL) hinge_loss_param_->::caffe::HingeLossParameter::Clear();
  clear_has_hinge_loss_param();
}
inline const ::caffe::HingeLossParameter& LayerParameter::hinge_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.hinge_loss_param)
  return hinge_loss_param_ != NULL ? *hinge_loss_param_
                         : *::caffe::HingeLossParameter::internal_default_instance();
}
inline ::caffe::HingeLossParameter* LayerParameter::mutable_hinge_loss_param() {
  set_has_hinge_loss_param();
  if (hinge_loss_param_ == NULL) {
    hinge_loss_param_ = new ::caffe::HingeLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.hinge_loss_param)
  return hinge_loss_param_;
}
inline ::caffe::HingeLossParameter* LayerParameter::release_hinge_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.hinge_loss_param)
  clear_has_hinge_loss_param();
  ::caffe::HingeLossParameter* temp = hinge_loss_param_;
  hinge_loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_hinge_loss_param(::caffe::HingeLossParameter* hinge_loss_param) {
  delete hinge_loss_param_;
  hinge_loss_param_ = hinge_loss_param;
  if (hinge_loss_param) {
    set_has_hinge_loss_param();
  } else {
    clear_has_hinge_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.hinge_loss_param)
}

// optional .caffe.ImageDataParameter image_data_param = 115;
inline bool LayerParameter::has_image_data_param() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void LayerParameter::set_has_image_data_param() {
  _has_bits_[1] |= 0x00000001u;
}
inline void LayerParameter::clear_has_image_data_param() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void LayerParameter::clear_image_data_param() {
  if (image_data_param_ != NULL) image_data_param_->::caffe::ImageDataParameter::Clear();
  clear_has_image_data_param();
}
inline const ::caffe::ImageDataParameter& LayerParameter::image_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.image_data_param)
  return image_data_param_ != NULL ? *image_data_param_
                         : *::caffe::ImageDataParameter::internal_default_instance();
}
inline ::caffe::ImageDataParameter* LayerParameter::mutable_image_data_param() {
  set_has_image_data_param();
  if (image_data_param_ == NULL) {
    image_data_param_ = new ::caffe::ImageDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.image_data_param)
  return image_data_param_;
}
inline ::caffe::ImageDataParameter* LayerParameter::release_image_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.image_data_param)
  clear_has_image_data_param();
  ::caffe::ImageDataParameter* temp = image_data_param_;
  image_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_image_data_param(::caffe::ImageDataParameter* image_data_param) {
  delete image_data_param_;
  image_data_param_ = image_data_param;
  if (image_data_param) {
    set_has_image_data_param();
  } else {
    clear_has_image_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.image_data_param)
}

// optional .caffe.InfogainLossParameter infogain_loss_param = 116;
inline bool LayerParameter::has_infogain_loss_param() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void LayerParameter::set_has_infogain_loss_param() {
  _has_bits_[1] |= 0x00000002u;
}
inline void LayerParameter::clear_has_infogain_loss_param() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void LayerParameter::clear_infogain_loss_param() {
  if (infogain_loss_param_ != NULL) infogain_loss_param_->::caffe::InfogainLossParameter::Clear();
  clear_has_infogain_loss_param();
}
inline const ::caffe::InfogainLossParameter& LayerParameter::infogain_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.infogain_loss_param)
  return infogain_loss_param_ != NULL ? *infogain_loss_param_
                         : *::caffe::InfogainLossParameter::internal_default_instance();
}
inline ::caffe::InfogainLossParameter* LayerParameter::mutable_infogain_loss_param() {
  set_has_infogain_loss_param();
  if (infogain_loss_param_ == NULL) {
    infogain_loss_param_ = new ::caffe::InfogainLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.infogain_loss_param)
  return infogain_loss_param_;
}
inline ::caffe::InfogainLossParameter* LayerParameter::release_infogain_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.infogain_loss_param)
  clear_has_infogain_loss_param();
  ::caffe::InfogainLossParameter* temp = infogain_loss_param_;
  infogain_loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_infogain_loss_param(::caffe::InfogainLossParameter* infogain_loss_param) {
  delete infogain_loss_param_;
  infogain_loss_param_ = infogain_loss_param;
  if (infogain_loss_param) {
    set_has_infogain_loss_param();
  } else {
    clear_has_infogain_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.infogain_loss_param)
}

// optional .caffe.InnerProductParameter inner_product_param = 117;
inline bool LayerParameter::has_inner_product_param() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void LayerParameter::set_has_inner_product_param() {
  _has_bits_[1] |= 0x00000004u;
}
inline void LayerParameter::clear_has_inner_product_param() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void LayerParameter::clear_inner_product_param() {
  if (inner_product_param_ != NULL) inner_product_param_->::caffe::InnerProductParameter::Clear();
  clear_has_inner_product_param();
}
inline const ::caffe::InnerProductParameter& LayerParameter::inner_product_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.inner_product_param)
  return inner_product_param_ != NULL ? *inner_product_param_
                         : *::caffe::InnerProductParameter::internal_default_instance();
}
inline ::caffe::InnerProductParameter* LayerParameter::mutable_inner_product_param() {
  set_has_inner_product_param();
  if (inner_product_param_ == NULL) {
    inner_product_param_ = new ::caffe::InnerProductParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.inner_product_param)
  return inner_product_param_;
}
inline ::caffe::InnerProductParameter* LayerParameter::release_inner_product_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.inner_product_param)
  clear_has_inner_product_param();
  ::caffe::InnerProductParameter* temp = inner_product_param_;
  inner_product_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_inner_product_param(::caffe::InnerProductParameter* inner_product_param) {
  delete inner_product_param_;
  inner_product_param_ = inner_product_param;
  if (inner_product_param) {
    set_has_inner_product_param();
  } else {
    clear_has_inner_product_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.inner_product_param)
}

// optional .caffe.InputParameter input_param = 143;
inline bool LayerParameter::has_input_param() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void LayerParameter::set_has_input_param() {
  _has_bits_[1] |= 0x00000008u;
}
inline void LayerParameter::clear_has_input_param() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void LayerParameter::clear_input_param() {
  if (input_param_ != NULL) input_param_->::caffe::InputParameter::Clear();
  clear_has_input_param();
}
inline const ::caffe::InputParameter& LayerParameter::input_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.input_param)
  return input_param_ != NULL ? *input_param_
                         : *::caffe::InputParameter::internal_default_instance();
}
inline ::caffe::InputParameter* LayerParameter::mutable_input_param() {
  set_has_input_param();
  if (input_param_ == NULL) {
    input_param_ = new ::caffe::InputParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.input_param)
  return input_param_;
}
inline ::caffe::InputParameter* LayerParameter::release_input_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.input_param)
  clear_has_input_param();
  ::caffe::InputParameter* temp = input_param_;
  input_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_input_param(::caffe::InputParameter* input_param) {
  delete input_param_;
  input_param_ = input_param;
  if (input_param) {
    set_has_input_param();
  } else {
    clear_has_input_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.input_param)
}

// optional .caffe.LogParameter log_param = 134;
inline bool LayerParameter::has_log_param() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void LayerParameter::set_has_log_param() {
  _has_bits_[1] |= 0x00000010u;
}
inline void LayerParameter::clear_has_log_param() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void LayerParameter::clear_log_param() {
  if (log_param_ != NULL) log_param_->::caffe::LogParameter::Clear();
  clear_has_log_param();
}
inline const ::caffe::LogParameter& LayerParameter::log_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.log_param)
  return log_param_ != NULL ? *log_param_
                         : *::caffe::LogParameter::internal_default_instance();
}
inline ::caffe::LogParameter* LayerParameter::mutable_log_param() {
  set_has_log_param();
  if (log_param_ == NULL) {
    log_param_ = new ::caffe::LogParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.log_param)
  return log_param_;
}
inline ::caffe::LogParameter* LayerParameter::release_log_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.log_param)
  clear_has_log_param();
  ::caffe::LogParameter* temp = log_param_;
  log_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_log_param(::caffe::LogParameter* log_param) {
  delete log_param_;
  log_param_ = log_param;
  if (log_param) {
    set_has_log_param();
  } else {
    clear_has_log_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.log_param)
}

// optional .caffe.LRNParameter lrn_param = 118;
inline bool LayerParameter::has_lrn_param() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void LayerParameter::set_has_lrn_param() {
  _has_bits_[1] |= 0x00000020u;
}
inline void LayerParameter::clear_has_lrn_param() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void LayerParameter::clear_lrn_param() {
  if (lrn_param_ != NULL) lrn_param_->::caffe::LRNParameter::Clear();
  clear_has_lrn_param();
}
inline const ::caffe::LRNParameter& LayerParameter::lrn_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.lrn_param)
  return lrn_param_ != NULL ? *lrn_param_
                         : *::caffe::LRNParameter::internal_default_instance();
}
inline ::caffe::LRNParameter* LayerParameter::mutable_lrn_param() {
  set_has_lrn_param();
  if (lrn_param_ == NULL) {
    lrn_param_ = new ::caffe::LRNParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.lrn_param)
  return lrn_param_;
}
inline ::caffe::LRNParameter* LayerParameter::release_lrn_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.lrn_param)
  clear_has_lrn_param();
  ::caffe::LRNParameter* temp = lrn_param_;
  lrn_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_lrn_param(::caffe::LRNParameter* lrn_param) {
  delete lrn_param_;
  lrn_param_ = lrn_param;
  if (lrn_param) {
    set_has_lrn_param();
  } else {
    clear_has_lrn_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.lrn_param)
}

// optional .caffe.MemoryDataParameter memory_data_param = 119;
inline bool LayerParameter::has_memory_data_param() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void LayerParameter::set_has_memory_data_param() {
  _has_bits_[1] |= 0x00000040u;
}
inline void LayerParameter::clear_has_memory_data_param() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void LayerParameter::clear_memory_data_param() {
  if (memory_data_param_ != NULL) memory_data_param_->::caffe::MemoryDataParameter::Clear();
  clear_has_memory_data_param();
}
inline const ::caffe::MemoryDataParameter& LayerParameter::memory_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.memory_data_param)
  return memory_data_param_ != NULL ? *memory_data_param_
                         : *::caffe::MemoryDataParameter::internal_default_instance();
}
inline ::caffe::MemoryDataParameter* LayerParameter::mutable_memory_data_param() {
  set_has_memory_data_param();
  if (memory_data_param_ == NULL) {
    memory_data_param_ = new ::caffe::MemoryDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.memory_data_param)
  return memory_data_param_;
}
inline ::caffe::MemoryDataParameter* LayerParameter::release_memory_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.memory_data_param)
  clear_has_memory_data_param();
  ::caffe::MemoryDataParameter* temp = memory_data_param_;
  memory_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_memory_data_param(::caffe::MemoryDataParameter* memory_data_param) {
  delete memory_data_param_;
  memory_data_param_ = memory_data_param;
  if (memory_data_param) {
    set_has_memory_data_param();
  } else {
    clear_has_memory_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.memory_data_param)
}

// optional .caffe.MVNParameter mvn_param = 120;
inline bool LayerParameter::has_mvn_param() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void LayerParameter::set_has_mvn_param() {
  _has_bits_[1] |= 0x00000080u;
}
inline void LayerParameter::clear_has_mvn_param() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void LayerParameter::clear_mvn_param() {
  if (mvn_param_ != NULL) mvn_param_->::caffe::MVNParameter::Clear();
  clear_has_mvn_param();
}
inline const ::caffe::MVNParameter& LayerParameter::mvn_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.mvn_param)
  return mvn_param_ != NULL ? *mvn_param_
                         : *::caffe::MVNParameter::internal_default_instance();
}
inline ::caffe::MVNParameter* LayerParameter::mutable_mvn_param() {
  set_has_mvn_param();
  if (mvn_param_ == NULL) {
    mvn_param_ = new ::caffe::MVNParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.mvn_param)
  return mvn_param_;
}
inline ::caffe::MVNParameter* LayerParameter::release_mvn_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.mvn_param)
  clear_has_mvn_param();
  ::caffe::MVNParameter* temp = mvn_param_;
  mvn_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_mvn_param(::caffe::MVNParameter* mvn_param) {
  delete mvn_param_;
  mvn_param_ = mvn_param;
  if (mvn_param) {
    set_has_mvn_param();
  } else {
    clear_has_mvn_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.mvn_param)
}

// optional .caffe.ParameterParameter parameter_param = 145;
inline bool LayerParameter::has_parameter_param() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void LayerParameter::set_has_parameter_param() {
  _has_bits_[1] |= 0x00000100u;
}
inline void LayerParameter::clear_has_parameter_param() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void LayerParameter::clear_parameter_param() {
  if (parameter_param_ != NULL) parameter_param_->::caffe::ParameterParameter::Clear();
  clear_has_parameter_param();
}
inline const ::caffe::ParameterParameter& LayerParameter::parameter_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.parameter_param)
  return parameter_param_ != NULL ? *parameter_param_
                         : *::caffe::ParameterParameter::internal_default_instance();
}
inline ::caffe::ParameterParameter* LayerParameter::mutable_parameter_param() {
  set_has_parameter_param();
  if (parameter_param_ == NULL) {
    parameter_param_ = new ::caffe::ParameterParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.parameter_param)
  return parameter_param_;
}
inline ::caffe::ParameterParameter* LayerParameter::release_parameter_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.parameter_param)
  clear_has_parameter_param();
  ::caffe::ParameterParameter* temp = parameter_param_;
  parameter_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_parameter_param(::caffe::ParameterParameter* parameter_param) {
  delete parameter_param_;
  parameter_param_ = parameter_param;
  if (parameter_param) {
    set_has_parameter_param();
  } else {
    clear_has_parameter_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.parameter_param)
}

// optional .caffe.PoolingParameter pooling_param = 121;
inline bool LayerParameter::has_pooling_param() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void LayerParameter::set_has_pooling_param() {
  _has_bits_[1] |= 0x00000200u;
}
inline void LayerParameter::clear_has_pooling_param() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void LayerParameter::clear_pooling_param() {
  if (pooling_param_ != NULL) pooling_param_->::caffe::PoolingParameter::Clear();
  clear_has_pooling_param();
}
inline const ::caffe::PoolingParameter& LayerParameter::pooling_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.pooling_param)
  return pooling_param_ != NULL ? *pooling_param_
                         : *::caffe::PoolingParameter::internal_default_instance();
}
inline ::caffe::PoolingParameter* LayerParameter::mutable_pooling_param() {
  set_has_pooling_param();
  if (pooling_param_ == NULL) {
    pooling_param_ = new ::caffe::PoolingParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.pooling_param)
  return pooling_param_;
}
inline ::caffe::PoolingParameter* LayerParameter::release_pooling_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.pooling_param)
  clear_has_pooling_param();
  ::caffe::PoolingParameter* temp = pooling_param_;
  pooling_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_pooling_param(::caffe::PoolingParameter* pooling_param) {
  delete pooling_param_;
  pooling_param_ = pooling_param;
  if (pooling_param) {
    set_has_pooling_param();
  } else {
    clear_has_pooling_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.pooling_param)
}

// optional .caffe.PowerParameter power_param = 122;
inline bool LayerParameter::has_power_param() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void LayerParameter::set_has_power_param() {
  _has_bits_[1] |= 0x00000400u;
}
inline void LayerParameter::clear_has_power_param() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void LayerParameter::clear_power_param() {
  if (power_param_ != NULL) power_param_->::caffe::PowerParameter::Clear();
  clear_has_power_param();
}
inline const ::caffe::PowerParameter& LayerParameter::power_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.power_param)
  return power_param_ != NULL ? *power_param_
                         : *::caffe::PowerParameter::internal_default_instance();
}
inline ::caffe::PowerParameter* LayerParameter::mutable_power_param() {
  set_has_power_param();
  if (power_param_ == NULL) {
    power_param_ = new ::caffe::PowerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.power_param)
  return power_param_;
}
inline ::caffe::PowerParameter* LayerParameter::release_power_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.power_param)
  clear_has_power_param();
  ::caffe::PowerParameter* temp = power_param_;
  power_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_power_param(::caffe::PowerParameter* power_param) {
  delete power_param_;
  power_param_ = power_param;
  if (power_param) {
    set_has_power_param();
  } else {
    clear_has_power_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.power_param)
}

// optional .caffe.PReLUParameter prelu_param = 131;
inline bool LayerParameter::has_prelu_param() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void LayerParameter::set_has_prelu_param() {
  _has_bits_[1] |= 0x00000800u;
}
inline void LayerParameter::clear_has_prelu_param() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void LayerParameter::clear_prelu_param() {
  if (prelu_param_ != NULL) prelu_param_->::caffe::PReLUParameter::Clear();
  clear_has_prelu_param();
}
inline const ::caffe::PReLUParameter& LayerParameter::prelu_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.prelu_param)
  return prelu_param_ != NULL ? *prelu_param_
                         : *::caffe::PReLUParameter::internal_default_instance();
}
inline ::caffe::PReLUParameter* LayerParameter::mutable_prelu_param() {
  set_has_prelu_param();
  if (prelu_param_ == NULL) {
    prelu_param_ = new ::caffe::PReLUParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.prelu_param)
  return prelu_param_;
}
inline ::caffe::PReLUParameter* LayerParameter::release_prelu_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.prelu_param)
  clear_has_prelu_param();
  ::caffe::PReLUParameter* temp = prelu_param_;
  prelu_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_prelu_param(::caffe::PReLUParameter* prelu_param) {
  delete prelu_param_;
  prelu_param_ = prelu_param;
  if (prelu_param) {
    set_has_prelu_param();
  } else {
    clear_has_prelu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.prelu_param)
}

// optional .caffe.PythonParameter python_param = 130;
inline bool LayerParameter::has_python_param() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void LayerParameter::set_has_python_param() {
  _has_bits_[1] |= 0x00001000u;
}
inline void LayerParameter::clear_has_python_param() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void LayerParameter::clear_python_param() {
  if (python_param_ != NULL) python_param_->::caffe::PythonParameter::Clear();
  clear_has_python_param();
}
inline const ::caffe::PythonParameter& LayerParameter::python_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.python_param)
  return python_param_ != NULL ? *python_param_
                         : *::caffe::PythonParameter::internal_default_instance();
}
inline ::caffe::PythonParameter* LayerParameter::mutable_python_param() {
  set_has_python_param();
  if (python_param_ == NULL) {
    python_param_ = new ::caffe::PythonParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.python_param)
  return python_param_;
}
inline ::caffe::PythonParameter* LayerParameter::release_python_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.python_param)
  clear_has_python_param();
  ::caffe::PythonParameter* temp = python_param_;
  python_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_python_param(::caffe::PythonParameter* python_param) {
  delete python_param_;
  python_param_ = python_param;
  if (python_param) {
    set_has_python_param();
  } else {
    clear_has_python_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.python_param)
}

// optional .caffe.RecurrentParameter recurrent_param = 146;
inline bool LayerParameter::has_recurrent_param() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void LayerParameter::set_has_recurrent_param() {
  _has_bits_[1] |= 0x00002000u;
}
inline void LayerParameter::clear_has_recurrent_param() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void LayerParameter::clear_recurrent_param() {
  if (recurrent_param_ != NULL) recurrent_param_->::caffe::RecurrentParameter::Clear();
  clear_has_recurrent_param();
}
inline const ::caffe::RecurrentParameter& LayerParameter::recurrent_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.recurrent_param)
  return recurrent_param_ != NULL ? *recurrent_param_
                         : *::caffe::RecurrentParameter::internal_default_instance();
}
inline ::caffe::RecurrentParameter* LayerParameter::mutable_recurrent_param() {
  set_has_recurrent_param();
  if (recurrent_param_ == NULL) {
    recurrent_param_ = new ::caffe::RecurrentParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.recurrent_param)
  return recurrent_param_;
}
inline ::caffe::RecurrentParameter* LayerParameter::release_recurrent_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.recurrent_param)
  clear_has_recurrent_param();
  ::caffe::RecurrentParameter* temp = recurrent_param_;
  recurrent_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_recurrent_param(::caffe::RecurrentParameter* recurrent_param) {
  delete recurrent_param_;
  recurrent_param_ = recurrent_param;
  if (recurrent_param) {
    set_has_recurrent_param();
  } else {
    clear_has_recurrent_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.recurrent_param)
}

// optional .caffe.ReductionParameter reduction_param = 136;
inline bool LayerParameter::has_reduction_param() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void LayerParameter::set_has_reduction_param() {
  _has_bits_[1] |= 0x00004000u;
}
inline void LayerParameter::clear_has_reduction_param() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void LayerParameter::clear_reduction_param() {
  if (reduction_param_ != NULL) reduction_param_->::caffe::ReductionParameter::Clear();
  clear_has_reduction_param();
}
inline const ::caffe::ReductionParameter& LayerParameter::reduction_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.reduction_param)
  return reduction_param_ != NULL ? *reduction_param_
                         : *::caffe::ReductionParameter::internal_default_instance();
}
inline ::caffe::ReductionParameter* LayerParameter::mutable_reduction_param() {
  set_has_reduction_param();
  if (reduction_param_ == NULL) {
    reduction_param_ = new ::caffe::ReductionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.reduction_param)
  return reduction_param_;
}
inline ::caffe::ReductionParameter* LayerParameter::release_reduction_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.reduction_param)
  clear_has_reduction_param();
  ::caffe::ReductionParameter* temp = reduction_param_;
  reduction_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_reduction_param(::caffe::ReductionParameter* reduction_param) {
  delete reduction_param_;
  reduction_param_ = reduction_param;
  if (reduction_param) {
    set_has_reduction_param();
  } else {
    clear_has_reduction_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.reduction_param)
}

// optional .caffe.ReLUParameter relu_param = 123;
inline bool LayerParameter::has_relu_param() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void LayerParameter::set_has_relu_param() {
  _has_bits_[1] |= 0x00008000u;
}
inline void LayerParameter::clear_has_relu_param() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void LayerParameter::clear_relu_param() {
  if (relu_param_ != NULL) relu_param_->::caffe::ReLUParameter::Clear();
  clear_has_relu_param();
}
inline const ::caffe::ReLUParameter& LayerParameter::relu_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.relu_param)
  return relu_param_ != NULL ? *relu_param_
                         : *::caffe::ReLUParameter::internal_default_instance();
}
inline ::caffe::ReLUParameter* LayerParameter::mutable_relu_param() {
  set_has_relu_param();
  if (relu_param_ == NULL) {
    relu_param_ = new ::caffe::ReLUParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.relu_param)
  return relu_param_;
}
inline ::caffe::ReLUParameter* LayerParameter::release_relu_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.relu_param)
  clear_has_relu_param();
  ::caffe::ReLUParameter* temp = relu_param_;
  relu_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_relu_param(::caffe::ReLUParameter* relu_param) {
  delete relu_param_;
  relu_param_ = relu_param;
  if (relu_param) {
    set_has_relu_param();
  } else {
    clear_has_relu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.relu_param)
}

// optional .caffe.ReshapeParameter reshape_param = 133;
inline bool LayerParameter::has_reshape_param() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void LayerParameter::set_has_reshape_param() {
  _has_bits_[1] |= 0x00010000u;
}
inline void LayerParameter::clear_has_reshape_param() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void LayerParameter::clear_reshape_param() {
  if (reshape_param_ != NULL) reshape_param_->::caffe::ReshapeParameter::Clear();
  clear_has_reshape_param();
}
inline const ::caffe::ReshapeParameter& LayerParameter::reshape_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.reshape_param)
  return reshape_param_ != NULL ? *reshape_param_
                         : *::caffe::ReshapeParameter::internal_default_instance();
}
inline ::caffe::ReshapeParameter* LayerParameter::mutable_reshape_param() {
  set_has_reshape_param();
  if (reshape_param_ == NULL) {
    reshape_param_ = new ::caffe::ReshapeParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.reshape_param)
  return reshape_param_;
}
inline ::caffe::ReshapeParameter* LayerParameter::release_reshape_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.reshape_param)
  clear_has_reshape_param();
  ::caffe::ReshapeParameter* temp = reshape_param_;
  reshape_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_reshape_param(::caffe::ReshapeParameter* reshape_param) {
  delete reshape_param_;
  reshape_param_ = reshape_param;
  if (reshape_param) {
    set_has_reshape_param();
  } else {
    clear_has_reshape_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.reshape_param)
}

// optional .caffe.ScaleParameter scale_param = 142;
inline bool LayerParameter::has_scale_param() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void LayerParameter::set_has_scale_param() {
  _has_bits_[1] |= 0x00020000u;
}
inline void LayerParameter::clear_has_scale_param() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void LayerParameter::clear_scale_param() {
  if (scale_param_ != NULL) scale_param_->::caffe::ScaleParameter::Clear();
  clear_has_scale_param();
}
inline const ::caffe::ScaleParameter& LayerParameter::scale_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.scale_param)
  return scale_param_ != NULL ? *scale_param_
                         : *::caffe::ScaleParameter::internal_default_instance();
}
inline ::caffe::ScaleParameter* LayerParameter::mutable_scale_param() {
  set_has_scale_param();
  if (scale_param_ == NULL) {
    scale_param_ = new ::caffe::ScaleParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.scale_param)
  return scale_param_;
}
inline ::caffe::ScaleParameter* LayerParameter::release_scale_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.scale_param)
  clear_has_scale_param();
  ::caffe::ScaleParameter* temp = scale_param_;
  scale_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_scale_param(::caffe::ScaleParameter* scale_param) {
  delete scale_param_;
  scale_param_ = scale_param;
  if (scale_param) {
    set_has_scale_param();
  } else {
    clear_has_scale_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.scale_param)
}

// optional .caffe.SigmoidParameter sigmoid_param = 124;
inline bool LayerParameter::has_sigmoid_param() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void LayerParameter::set_has_sigmoid_param() {
  _has_bits_[1] |= 0x00040000u;
}
inline void LayerParameter::clear_has_sigmoid_param() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void LayerParameter::clear_sigmoid_param() {
  if (sigmoid_param_ != NULL) sigmoid_param_->::caffe::SigmoidParameter::Clear();
  clear_has_sigmoid_param();
}
inline const ::caffe::SigmoidParameter& LayerParameter::sigmoid_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.sigmoid_param)
  return sigmoid_param_ != NULL ? *sigmoid_param_
                         : *::caffe::SigmoidParameter::internal_default_instance();
}
inline ::caffe::SigmoidParameter* LayerParameter::mutable_sigmoid_param() {
  set_has_sigmoid_param();
  if (sigmoid_param_ == NULL) {
    sigmoid_param_ = new ::caffe::SigmoidParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.sigmoid_param)
  return sigmoid_param_;
}
inline ::caffe::SigmoidParameter* LayerParameter::release_sigmoid_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.sigmoid_param)
  clear_has_sigmoid_param();
  ::caffe::SigmoidParameter* temp = sigmoid_param_;
  sigmoid_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_sigmoid_param(::caffe::SigmoidParameter* sigmoid_param) {
  delete sigmoid_param_;
  sigmoid_param_ = sigmoid_param;
  if (sigmoid_param) {
    set_has_sigmoid_param();
  } else {
    clear_has_sigmoid_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.sigmoid_param)
}

// optional .caffe.SoftmaxParameter softmax_param = 125;
inline bool LayerParameter::has_softmax_param() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void LayerParameter::set_has_softmax_param() {
  _has_bits_[1] |= 0x00080000u;
}
inline void LayerParameter::clear_has_softmax_param() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void LayerParameter::clear_softmax_param() {
  if (softmax_param_ != NULL) softmax_param_->::caffe::SoftmaxParameter::Clear();
  clear_has_softmax_param();
}
inline const ::caffe::SoftmaxParameter& LayerParameter::softmax_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.softmax_param)
  return softmax_param_ != NULL ? *softmax_param_
                         : *::caffe::SoftmaxParameter::internal_default_instance();
}
inline ::caffe::SoftmaxParameter* LayerParameter::mutable_softmax_param() {
  set_has_softmax_param();
  if (softmax_param_ == NULL) {
    softmax_param_ = new ::caffe::SoftmaxParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.softmax_param)
  return softmax_param_;
}
inline ::caffe::SoftmaxParameter* LayerParameter::release_softmax_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.softmax_param)
  clear_has_softmax_param();
  ::caffe::SoftmaxParameter* temp = softmax_param_;
  softmax_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_softmax_param(::caffe::SoftmaxParameter* softmax_param) {
  delete softmax_param_;
  softmax_param_ = softmax_param;
  if (softmax_param) {
    set_has_softmax_param();
  } else {
    clear_has_softmax_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.softmax_param)
}

// optional .caffe.SPPParameter spp_param = 132;
inline bool LayerParameter::has_spp_param() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void LayerParameter::set_has_spp_param() {
  _has_bits_[1] |= 0x00100000u;
}
inline void LayerParameter::clear_has_spp_param() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void LayerParameter::clear_spp_param() {
  if (spp_param_ != NULL) spp_param_->::caffe::SPPParameter::Clear();
  clear_has_spp_param();
}
inline const ::caffe::SPPParameter& LayerParameter::spp_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.spp_param)
  return spp_param_ != NULL ? *spp_param_
                         : *::caffe::SPPParameter::internal_default_instance();
}
inline ::caffe::SPPParameter* LayerParameter::mutable_spp_param() {
  set_has_spp_param();
  if (spp_param_ == NULL) {
    spp_param_ = new ::caffe::SPPParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.spp_param)
  return spp_param_;
}
inline ::caffe::SPPParameter* LayerParameter::release_spp_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.spp_param)
  clear_has_spp_param();
  ::caffe::SPPParameter* temp = spp_param_;
  spp_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_spp_param(::caffe::SPPParameter* spp_param) {
  delete spp_param_;
  spp_param_ = spp_param;
  if (spp_param) {
    set_has_spp_param();
  } else {
    clear_has_spp_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.spp_param)
}

// optional .caffe.SliceParameter slice_param = 126;
inline bool LayerParameter::has_slice_param() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void LayerParameter::set_has_slice_param() {
  _has_bits_[1] |= 0x00200000u;
}
inline void LayerParameter::clear_has_slice_param() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void LayerParameter::clear_slice_param() {
  if (slice_param_ != NULL) slice_param_->::caffe::SliceParameter::Clear();
  clear_has_slice_param();
}
inline const ::caffe::SliceParameter& LayerParameter::slice_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.slice_param)
  return slice_param_ != NULL ? *slice_param_
                         : *::caffe::SliceParameter::internal_default_instance();
}
inline ::caffe::SliceParameter* LayerParameter::mutable_slice_param() {
  set_has_slice_param();
  if (slice_param_ == NULL) {
    slice_param_ = new ::caffe::SliceParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.slice_param)
  return slice_param_;
}
inline ::caffe::SliceParameter* LayerParameter::release_slice_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.slice_param)
  clear_has_slice_param();
  ::caffe::SliceParameter* temp = slice_param_;
  slice_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_slice_param(::caffe::SliceParameter* slice_param) {
  delete slice_param_;
  slice_param_ = slice_param;
  if (slice_param) {
    set_has_slice_param();
  } else {
    clear_has_slice_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.slice_param)
}

// optional .caffe.TanHParameter tanh_param = 127;
inline bool LayerParameter::has_tanh_param() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void LayerParameter::set_has_tanh_param() {
  _has_bits_[1] |= 0x00400000u;
}
inline void LayerParameter::clear_has_tanh_param() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void LayerParameter::clear_tanh_param() {
  if (tanh_param_ != NULL) tanh_param_->::caffe::TanHParameter::Clear();
  clear_has_tanh_param();
}
inline const ::caffe::TanHParameter& LayerParameter::tanh_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.tanh_param)
  return tanh_param_ != NULL ? *tanh_param_
                         : *::caffe::TanHParameter::internal_default_instance();
}
inline ::caffe::TanHParameter* LayerParameter::mutable_tanh_param() {
  set_has_tanh_param();
  if (tanh_param_ == NULL) {
    tanh_param_ = new ::caffe::TanHParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.tanh_param)
  return tanh_param_;
}
inline ::caffe::TanHParameter* LayerParameter::release_tanh_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.tanh_param)
  clear_has_tanh_param();
  ::caffe::TanHParameter* temp = tanh_param_;
  tanh_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tanh_param(::caffe::TanHParameter* tanh_param) {
  delete tanh_param_;
  tanh_param_ = tanh_param;
  if (tanh_param) {
    set_has_tanh_param();
  } else {
    clear_has_tanh_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.tanh_param)
}

// optional .caffe.ThresholdParameter threshold_param = 128;
inline bool LayerParameter::has_threshold_param() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void LayerParameter::set_has_threshold_param() {
  _has_bits_[1] |= 0x00800000u;
}
inline void LayerParameter::clear_has_threshold_param() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void LayerParameter::clear_threshold_param() {
  if (threshold_param_ != NULL) threshold_param_->::caffe::ThresholdParameter::Clear();
  clear_has_threshold_param();
}
inline const ::caffe::ThresholdParameter& LayerParameter::threshold_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.threshold_param)
  return threshold_param_ != NULL ? *threshold_param_
                         : *::caffe::ThresholdParameter::internal_default_instance();
}
inline ::caffe::ThresholdParameter* LayerParameter::mutable_threshold_param() {
  set_has_threshold_param();
  if (threshold_param_ == NULL) {
    threshold_param_ = new ::caffe::ThresholdParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.threshold_param)
  return threshold_param_;
}
inline ::caffe::ThresholdParameter* LayerParameter::release_threshold_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.threshold_param)
  clear_has_threshold_param();
  ::caffe::ThresholdParameter* temp = threshold_param_;
  threshold_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_threshold_param(::caffe::ThresholdParameter* threshold_param) {
  delete threshold_param_;
  threshold_param_ = threshold_param;
  if (threshold_param) {
    set_has_threshold_param();
  } else {
    clear_has_threshold_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.threshold_param)
}

// optional .caffe.TileParameter tile_param = 138;
inline bool LayerParameter::has_tile_param() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void LayerParameter::set_has_tile_param() {
  _has_bits_[1] |= 0x01000000u;
}
inline void LayerParameter::clear_has_tile_param() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void LayerParameter::clear_tile_param() {
  if (tile_param_ != NULL) tile_param_->::caffe::TileParameter::Clear();
  clear_has_tile_param();
}
inline const ::caffe::TileParameter& LayerParameter::tile_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.tile_param)
  return tile_param_ != NULL ? *tile_param_
                         : *::caffe::TileParameter::internal_default_instance();
}
inline ::caffe::TileParameter* LayerParameter::mutable_tile_param() {
  set_has_tile_param();
  if (tile_param_ == NULL) {
    tile_param_ = new ::caffe::TileParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.tile_param)
  return tile_param_;
}
inline ::caffe::TileParameter* LayerParameter::release_tile_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.tile_param)
  clear_has_tile_param();
  ::caffe::TileParameter* temp = tile_param_;
  tile_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tile_param(::caffe::TileParameter* tile_param) {
  delete tile_param_;
  tile_param_ = tile_param;
  if (tile_param) {
    set_has_tile_param();
  } else {
    clear_has_tile_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.tile_param)
}

// optional .caffe.WindowDataParameter window_data_param = 129;
inline bool LayerParameter::has_window_data_param() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void LayerParameter::set_has_window_data_param() {
  _has_bits_[1] |= 0x02000000u;
}
inline void LayerParameter::clear_has_window_data_param() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void LayerParameter::clear_window_data_param() {
  if (window_data_param_ != NULL) window_data_param_->::caffe::WindowDataParameter::Clear();
  clear_has_window_data_param();
}
inline const ::caffe::WindowDataParameter& LayerParameter::window_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.window_data_param)
  return window_data_param_ != NULL ? *window_data_param_
                         : *::caffe::WindowDataParameter::internal_default_instance();
}
inline ::caffe::WindowDataParameter* LayerParameter::mutable_window_data_param() {
  set_has_window_data_param();
  if (window_data_param_ == NULL) {
    window_data_param_ = new ::caffe::WindowDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.window_data_param)
  return window_data_param_;
}
inline ::caffe::WindowDataParameter* LayerParameter::release_window_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.window_data_param)
  clear_has_window_data_param();
  ::caffe::WindowDataParameter* temp = window_data_param_;
  window_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_window_data_param(::caffe::WindowDataParameter* window_data_param) {
  delete window_data_param_;
  window_data_param_ = window_data_param;
  if (window_data_param) {
    set_has_window_data_param();
  } else {
    clear_has_window_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.window_data_param)
}

// optional .caffe.ImgBBoxAnnoParameter img_bbox_anno_param = 1001;
inline bool LayerParameter::has_img_bbox_anno_param() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void LayerParameter::set_has_img_bbox_anno_param() {
  _has_bits_[1] |= 0x04000000u;
}
inline void LayerParameter::clear_has_img_bbox_anno_param() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void LayerParameter::clear_img_bbox_anno_param() {
  if (img_bbox_anno_param_ != NULL) img_bbox_anno_param_->::caffe::ImgBBoxAnnoParameter::Clear();
  clear_has_img_bbox_anno_param();
}
inline const ::caffe::ImgBBoxAnnoParameter& LayerParameter::img_bbox_anno_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.img_bbox_anno_param)
  return img_bbox_anno_param_ != NULL ? *img_bbox_anno_param_
                         : *::caffe::ImgBBoxAnnoParameter::internal_default_instance();
}
inline ::caffe::ImgBBoxAnnoParameter* LayerParameter::mutable_img_bbox_anno_param() {
  set_has_img_bbox_anno_param();
  if (img_bbox_anno_param_ == NULL) {
    img_bbox_anno_param_ = new ::caffe::ImgBBoxAnnoParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.img_bbox_anno_param)
  return img_bbox_anno_param_;
}
inline ::caffe::ImgBBoxAnnoParameter* LayerParameter::release_img_bbox_anno_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.img_bbox_anno_param)
  clear_has_img_bbox_anno_param();
  ::caffe::ImgBBoxAnnoParameter* temp = img_bbox_anno_param_;
  img_bbox_anno_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_img_bbox_anno_param(::caffe::ImgBBoxAnnoParameter* img_bbox_anno_param) {
  delete img_bbox_anno_param_;
  img_bbox_anno_param_ = img_bbox_anno_param;
  if (img_bbox_anno_param) {
    set_has_img_bbox_anno_param();
  } else {
    clear_has_img_bbox_anno_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.img_bbox_anno_param)
}

// optional .caffe.HeatmapConcatParameter heatmap_concat_param = 1002;
inline bool LayerParameter::has_heatmap_concat_param() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void LayerParameter::set_has_heatmap_concat_param() {
  _has_bits_[1] |= 0x08000000u;
}
inline void LayerParameter::clear_has_heatmap_concat_param() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void LayerParameter::clear_heatmap_concat_param() {
  if (heatmap_concat_param_ != NULL) heatmap_concat_param_->::caffe::HeatmapConcatParameter::Clear();
  clear_has_heatmap_concat_param();
}
inline const ::caffe::HeatmapConcatParameter& LayerParameter::heatmap_concat_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.heatmap_concat_param)
  return heatmap_concat_param_ != NULL ? *heatmap_concat_param_
                         : *::caffe::HeatmapConcatParameter::internal_default_instance();
}
inline ::caffe::HeatmapConcatParameter* LayerParameter::mutable_heatmap_concat_param() {
  set_has_heatmap_concat_param();
  if (heatmap_concat_param_ == NULL) {
    heatmap_concat_param_ = new ::caffe::HeatmapConcatParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.heatmap_concat_param)
  return heatmap_concat_param_;
}
inline ::caffe::HeatmapConcatParameter* LayerParameter::release_heatmap_concat_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.heatmap_concat_param)
  clear_has_heatmap_concat_param();
  ::caffe::HeatmapConcatParameter* temp = heatmap_concat_param_;
  heatmap_concat_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_heatmap_concat_param(::caffe::HeatmapConcatParameter* heatmap_concat_param) {
  delete heatmap_concat_param_;
  heatmap_concat_param_ = heatmap_concat_param;
  if (heatmap_concat_param) {
    set_has_heatmap_concat_param();
  } else {
    clear_has_heatmap_concat_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.heatmap_concat_param)
}

// optional .caffe.BBoxAnnoMapParameter bbox_anno_map_param = 1003;
inline bool LayerParameter::has_bbox_anno_map_param() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void LayerParameter::set_has_bbox_anno_map_param() {
  _has_bits_[1] |= 0x10000000u;
}
inline void LayerParameter::clear_has_bbox_anno_map_param() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void LayerParameter::clear_bbox_anno_map_param() {
  if (bbox_anno_map_param_ != NULL) bbox_anno_map_param_->::caffe::BBoxAnnoMapParameter::Clear();
  clear_has_bbox_anno_map_param();
}
inline const ::caffe::BBoxAnnoMapParameter& LayerParameter::bbox_anno_map_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.bbox_anno_map_param)
  return bbox_anno_map_param_ != NULL ? *bbox_anno_map_param_
                         : *::caffe::BBoxAnnoMapParameter::internal_default_instance();
}
inline ::caffe::BBoxAnnoMapParameter* LayerParameter::mutable_bbox_anno_map_param() {
  set_has_bbox_anno_map_param();
  if (bbox_anno_map_param_ == NULL) {
    bbox_anno_map_param_ = new ::caffe::BBoxAnnoMapParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.bbox_anno_map_param)
  return bbox_anno_map_param_;
}
inline ::caffe::BBoxAnnoMapParameter* LayerParameter::release_bbox_anno_map_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.bbox_anno_map_param)
  clear_has_bbox_anno_map_param();
  ::caffe::BBoxAnnoMapParameter* temp = bbox_anno_map_param_;
  bbox_anno_map_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_bbox_anno_map_param(::caffe::BBoxAnnoMapParameter* bbox_anno_map_param) {
  delete bbox_anno_map_param_;
  bbox_anno_map_param_ = bbox_anno_map_param;
  if (bbox_anno_map_param) {
    set_has_bbox_anno_map_param();
  } else {
    clear_has_bbox_anno_map_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.bbox_anno_map_param)
}

// optional .caffe.LabelParameter label_param = 1004;
inline bool LayerParameter::has_label_param() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void LayerParameter::set_has_label_param() {
  _has_bits_[1] |= 0x20000000u;
}
inline void LayerParameter::clear_has_label_param() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void LayerParameter::clear_label_param() {
  if (label_param_ != NULL) label_param_->::caffe::LabelParameter::Clear();
  clear_has_label_param();
}
inline const ::caffe::LabelParameter& LayerParameter::label_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.label_param)
  return label_param_ != NULL ? *label_param_
                         : *::caffe::LabelParameter::internal_default_instance();
}
inline ::caffe::LabelParameter* LayerParameter::mutable_label_param() {
  set_has_label_param();
  if (label_param_ == NULL) {
    label_param_ = new ::caffe::LabelParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.label_param)
  return label_param_;
}
inline ::caffe::LabelParameter* LayerParameter::release_label_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.label_param)
  clear_has_label_param();
  ::caffe::LabelParameter* temp = label_param_;
  label_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_label_param(::caffe::LabelParameter* label_param) {
  delete label_param_;
  label_param_ = label_param;
  if (label_param) {
    set_has_label_param();
  } else {
    clear_has_label_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.label_param)
}

// optional .caffe.PatchDataParameter patch_data_param = 1005;
inline bool LayerParameter::has_patch_data_param() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void LayerParameter::set_has_patch_data_param() {
  _has_bits_[1] |= 0x40000000u;
}
inline void LayerParameter::clear_has_patch_data_param() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void LayerParameter::clear_patch_data_param() {
  if (patch_data_param_ != NULL) patch_data_param_->::caffe::PatchDataParameter::Clear();
  clear_has_patch_data_param();
}
inline const ::caffe::PatchDataParameter& LayerParameter::patch_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.patch_data_param)
  return patch_data_param_ != NULL ? *patch_data_param_
                         : *::caffe::PatchDataParameter::internal_default_instance();
}
inline ::caffe::PatchDataParameter* LayerParameter::mutable_patch_data_param() {
  set_has_patch_data_param();
  if (patch_data_param_ == NULL) {
    patch_data_param_ = new ::caffe::PatchDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.patch_data_param)
  return patch_data_param_;
}
inline ::caffe::PatchDataParameter* LayerParameter::release_patch_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.patch_data_param)
  clear_has_patch_data_param();
  ::caffe::PatchDataParameter* temp = patch_data_param_;
  patch_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_patch_data_param(::caffe::PatchDataParameter* patch_data_param) {
  delete patch_data_param_;
  patch_data_param_ = patch_data_param;
  if (patch_data_param) {
    set_has_patch_data_param();
  } else {
    clear_has_patch_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.patch_data_param)
}

// optional .caffe.LabelRemapParameter label_remap_param = 1006;
inline bool LayerParameter::has_label_remap_param() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void LayerParameter::set_has_label_remap_param() {
  _has_bits_[1] |= 0x80000000u;
}
inline void LayerParameter::clear_has_label_remap_param() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void LayerParameter::clear_label_remap_param() {
  if (label_remap_param_ != NULL) label_remap_param_->::caffe::LabelRemapParameter::Clear();
  clear_has_label_remap_param();
}
inline const ::caffe::LabelRemapParameter& LayerParameter::label_remap_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.label_remap_param)
  return label_remap_param_ != NULL ? *label_remap_param_
                         : *::caffe::LabelRemapParameter::internal_default_instance();
}
inline ::caffe::LabelRemapParameter* LayerParameter::mutable_label_remap_param() {
  set_has_label_remap_param();
  if (label_remap_param_ == NULL) {
    label_remap_param_ = new ::caffe::LabelRemapParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.label_remap_param)
  return label_remap_param_;
}
inline ::caffe::LabelRemapParameter* LayerParameter::release_label_remap_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.label_remap_param)
  clear_has_label_remap_param();
  ::caffe::LabelRemapParameter* temp = label_remap_param_;
  label_remap_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_label_remap_param(::caffe::LabelRemapParameter* label_remap_param) {
  delete label_remap_param_;
  label_remap_param_ = label_remap_param;
  if (label_remap_param) {
    set_has_label_remap_param();
  } else {
    clear_has_label_remap_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.label_remap_param)
}

// optional .caffe.BBoxParameter bbox_param = 1007;
inline bool LayerParameter::has_bbox_param() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void LayerParameter::set_has_bbox_param() {
  _has_bits_[2] |= 0x00000001u;
}
inline void LayerParameter::clear_has_bbox_param() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void LayerParameter::clear_bbox_param() {
  if (bbox_param_ != NULL) bbox_param_->::caffe::BBoxParameter::Clear();
  clear_has_bbox_param();
}
inline const ::caffe::BBoxParameter& LayerParameter::bbox_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.bbox_param)
  return bbox_param_ != NULL ? *bbox_param_
                         : *::caffe::BBoxParameter::internal_default_instance();
}
inline ::caffe::BBoxParameter* LayerParameter::mutable_bbox_param() {
  set_has_bbox_param();
  if (bbox_param_ == NULL) {
    bbox_param_ = new ::caffe::BBoxParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.bbox_param)
  return bbox_param_;
}
inline ::caffe::BBoxParameter* LayerParameter::release_bbox_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.bbox_param)
  clear_has_bbox_param();
  ::caffe::BBoxParameter* temp = bbox_param_;
  bbox_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_bbox_param(::caffe::BBoxParameter* bbox_param) {
  delete bbox_param_;
  bbox_param_ = bbox_param;
  if (bbox_param) {
    set_has_bbox_param();
  } else {
    clear_has_bbox_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.bbox_param)
}

// optional .caffe.SlidingWindowInputParameter sliding_window_param = 1008;
inline bool LayerParameter::has_sliding_window_param() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void LayerParameter::set_has_sliding_window_param() {
  _has_bits_[2] |= 0x00000002u;
}
inline void LayerParameter::clear_has_sliding_window_param() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void LayerParameter::clear_sliding_window_param() {
  if (sliding_window_param_ != NULL) sliding_window_param_->::caffe::SlidingWindowInputParameter::Clear();
  clear_has_sliding_window_param();
}
inline const ::caffe::SlidingWindowInputParameter& LayerParameter::sliding_window_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.sliding_window_param)
  return sliding_window_param_ != NULL ? *sliding_window_param_
                         : *::caffe::SlidingWindowInputParameter::internal_default_instance();
}
inline ::caffe::SlidingWindowInputParameter* LayerParameter::mutable_sliding_window_param() {
  set_has_sliding_window_param();
  if (sliding_window_param_ == NULL) {
    sliding_window_param_ = new ::caffe::SlidingWindowInputParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.sliding_window_param)
  return sliding_window_param_;
}
inline ::caffe::SlidingWindowInputParameter* LayerParameter::release_sliding_window_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.sliding_window_param)
  clear_has_sliding_window_param();
  ::caffe::SlidingWindowInputParameter* temp = sliding_window_param_;
  sliding_window_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_sliding_window_param(::caffe::SlidingWindowInputParameter* sliding_window_param) {
  delete sliding_window_param_;
  sliding_window_param_ = sliding_window_param;
  if (sliding_window_param) {
    set_has_sliding_window_param();
  } else {
    clear_has_sliding_window_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.sliding_window_param)
}

// optional .caffe.BBoxToGridAndSizeParameter bbox_to_grid_and_size_param = 1009;
inline bool LayerParameter::has_bbox_to_grid_and_size_param() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void LayerParameter::set_has_bbox_to_grid_and_size_param() {
  _has_bits_[2] |= 0x00000004u;
}
inline void LayerParameter::clear_has_bbox_to_grid_and_size_param() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void LayerParameter::clear_bbox_to_grid_and_size_param() {
  if (bbox_to_grid_and_size_param_ != NULL) bbox_to_grid_and_size_param_->::caffe::BBoxToGridAndSizeParameter::Clear();
  clear_has_bbox_to_grid_and_size_param();
}
inline const ::caffe::BBoxToGridAndSizeParameter& LayerParameter::bbox_to_grid_and_size_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.bbox_to_grid_and_size_param)
  return bbox_to_grid_and_size_param_ != NULL ? *bbox_to_grid_and_size_param_
                         : *::caffe::BBoxToGridAndSizeParameter::internal_default_instance();
}
inline ::caffe::BBoxToGridAndSizeParameter* LayerParameter::mutable_bbox_to_grid_and_size_param() {
  set_has_bbox_to_grid_and_size_param();
  if (bbox_to_grid_and_size_param_ == NULL) {
    bbox_to_grid_and_size_param_ = new ::caffe::BBoxToGridAndSizeParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.bbox_to_grid_and_size_param)
  return bbox_to_grid_and_size_param_;
}
inline ::caffe::BBoxToGridAndSizeParameter* LayerParameter::release_bbox_to_grid_and_size_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.bbox_to_grid_and_size_param)
  clear_has_bbox_to_grid_and_size_param();
  ::caffe::BBoxToGridAndSizeParameter* temp = bbox_to_grid_and_size_param_;
  bbox_to_grid_and_size_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_bbox_to_grid_and_size_param(::caffe::BBoxToGridAndSizeParameter* bbox_to_grid_and_size_param) {
  delete bbox_to_grid_and_size_param_;
  bbox_to_grid_and_size_param_ = bbox_to_grid_and_size_param;
  if (bbox_to_grid_and_size_param) {
    set_has_bbox_to_grid_and_size_param();
  } else {
    clear_has_bbox_to_grid_and_size_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.bbox_to_grid_and_size_param)
}

// optional .caffe.SizeUnitParameter size_unit_param = 1010;
inline bool LayerParameter::has_size_unit_param() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void LayerParameter::set_has_size_unit_param() {
  _has_bits_[2] |= 0x00000008u;
}
inline void LayerParameter::clear_has_size_unit_param() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void LayerParameter::clear_size_unit_param() {
  if (size_unit_param_ != NULL) size_unit_param_->::caffe::SizeUnitParameter::Clear();
  clear_has_size_unit_param();
}
inline const ::caffe::SizeUnitParameter& LayerParameter::size_unit_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.size_unit_param)
  return size_unit_param_ != NULL ? *size_unit_param_
                         : *::caffe::SizeUnitParameter::internal_default_instance();
}
inline ::caffe::SizeUnitParameter* LayerParameter::mutable_size_unit_param() {
  set_has_size_unit_param();
  if (size_unit_param_ == NULL) {
    size_unit_param_ = new ::caffe::SizeUnitParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.size_unit_param)
  return size_unit_param_;
}
inline ::caffe::SizeUnitParameter* LayerParameter::release_size_unit_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.size_unit_param)
  clear_has_size_unit_param();
  ::caffe::SizeUnitParameter* temp = size_unit_param_;
  size_unit_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_size_unit_param(::caffe::SizeUnitParameter* size_unit_param) {
  delete size_unit_param_;
  size_unit_param_ = size_unit_param;
  if (size_unit_param) {
    set_has_size_unit_param();
  } else {
    clear_has_size_unit_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.size_unit_param)
}

// optional .caffe.PaddingParameter padding_param = 1011;
inline bool LayerParameter::has_padding_param() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void LayerParameter::set_has_padding_param() {
  _has_bits_[2] |= 0x00000010u;
}
inline void LayerParameter::clear_has_padding_param() {
  _has_bits_[2] &= ~0x00000010u;
}
inline void LayerParameter::clear_padding_param() {
  if (padding_param_ != NULL) padding_param_->::caffe::PaddingParameter::Clear();
  clear_has_padding_param();
}
inline const ::caffe::PaddingParameter& LayerParameter::padding_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.padding_param)
  return padding_param_ != NULL ? *padding_param_
                         : *::caffe::PaddingParameter::internal_default_instance();
}
inline ::caffe::PaddingParameter* LayerParameter::mutable_padding_param() {
  set_has_padding_param();
  if (padding_param_ == NULL) {
    padding_param_ = new ::caffe::PaddingParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.padding_param)
  return padding_param_;
}
inline ::caffe::PaddingParameter* LayerParameter::release_padding_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.padding_param)
  clear_has_padding_param();
  ::caffe::PaddingParameter* temp = padding_param_;
  padding_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_padding_param(::caffe::PaddingParameter* padding_param) {
  delete padding_param_;
  padding_param_ = padding_param;
  if (padding_param) {
    set_has_padding_param();
  } else {
    clear_has_padding_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.padding_param)
}

// optional .caffe.GTMapDataParameter gt_map_data_param = 1012;
inline bool LayerParameter::has_gt_map_data_param() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void LayerParameter::set_has_gt_map_data_param() {
  _has_bits_[2] |= 0x00000020u;
}
inline void LayerParameter::clear_has_gt_map_data_param() {
  _has_bits_[2] &= ~0x00000020u;
}
inline void LayerParameter::clear_gt_map_data_param() {
  if (gt_map_data_param_ != NULL) gt_map_data_param_->::caffe::GTMapDataParameter::Clear();
  clear_has_gt_map_data_param();
}
inline const ::caffe::GTMapDataParameter& LayerParameter::gt_map_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.gt_map_data_param)
  return gt_map_data_param_ != NULL ? *gt_map_data_param_
                         : *::caffe::GTMapDataParameter::internal_default_instance();
}
inline ::caffe::GTMapDataParameter* LayerParameter::mutable_gt_map_data_param() {
  set_has_gt_map_data_param();
  if (gt_map_data_param_ == NULL) {
    gt_map_data_param_ = new ::caffe::GTMapDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.gt_map_data_param)
  return gt_map_data_param_;
}
inline ::caffe::GTMapDataParameter* LayerParameter::release_gt_map_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.gt_map_data_param)
  clear_has_gt_map_data_param();
  ::caffe::GTMapDataParameter* temp = gt_map_data_param_;
  gt_map_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_gt_map_data_param(::caffe::GTMapDataParameter* gt_map_data_param) {
  delete gt_map_data_param_;
  gt_map_data_param_ = gt_map_data_param;
  if (gt_map_data_param) {
    set_has_gt_map_data_param();
  } else {
    clear_has_gt_map_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.gt_map_data_param)
}

// optional .caffe.LabelDiffIgnoreParameter label_diff_ignore_param = 1013;
inline bool LayerParameter::has_label_diff_ignore_param() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
inline void LayerParameter::set_has_label_diff_ignore_param() {
  _has_bits_[2] |= 0x00000040u;
}
inline void LayerParameter::clear_has_label_diff_ignore_param() {
  _has_bits_[2] &= ~0x00000040u;
}
inline void LayerParameter::clear_label_diff_ignore_param() {
  if (label_diff_ignore_param_ != NULL) label_diff_ignore_param_->::caffe::LabelDiffIgnoreParameter::Clear();
  clear_has_label_diff_ignore_param();
}
inline const ::caffe::LabelDiffIgnoreParameter& LayerParameter::label_diff_ignore_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.label_diff_ignore_param)
  return label_diff_ignore_param_ != NULL ? *label_diff_ignore_param_
                         : *::caffe::LabelDiffIgnoreParameter::internal_default_instance();
}
inline ::caffe::LabelDiffIgnoreParameter* LayerParameter::mutable_label_diff_ignore_param() {
  set_has_label_diff_ignore_param();
  if (label_diff_ignore_param_ == NULL) {
    label_diff_ignore_param_ = new ::caffe::LabelDiffIgnoreParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.label_diff_ignore_param)
  return label_diff_ignore_param_;
}
inline ::caffe::LabelDiffIgnoreParameter* LayerParameter::release_label_diff_ignore_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.label_diff_ignore_param)
  clear_has_label_diff_ignore_param();
  ::caffe::LabelDiffIgnoreParameter* temp = label_diff_ignore_param_;
  label_diff_ignore_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_label_diff_ignore_param(::caffe::LabelDiffIgnoreParameter* label_diff_ignore_param) {
  delete label_diff_ignore_param_;
  label_diff_ignore_param_ = label_diff_ignore_param;
  if (label_diff_ignore_param) {
    set_has_label_diff_ignore_param();
  } else {
    clear_has_label_diff_ignore_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.label_diff_ignore_param)
}

// optional .caffe.GTSubmapDataParameter gt_submap_data_param = 1014;
inline bool LayerParameter::has_gt_submap_data_param() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
inline void LayerParameter::set_has_gt_submap_data_param() {
  _has_bits_[2] |= 0x00000080u;
}
inline void LayerParameter::clear_has_gt_submap_data_param() {
  _has_bits_[2] &= ~0x00000080u;
}
inline void LayerParameter::clear_gt_submap_data_param() {
  if (gt_submap_data_param_ != NULL) gt_submap_data_param_->::caffe::GTSubmapDataParameter::Clear();
  clear_has_gt_submap_data_param();
}
inline const ::caffe::GTSubmapDataParameter& LayerParameter::gt_submap_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.gt_submap_data_param)
  return gt_submap_data_param_ != NULL ? *gt_submap_data_param_
                         : *::caffe::GTSubmapDataParameter::internal_default_instance();
}
inline ::caffe::GTSubmapDataParameter* LayerParameter::mutable_gt_submap_data_param() {
  set_has_gt_submap_data_param();
  if (gt_submap_data_param_ == NULL) {
    gt_submap_data_param_ = new ::caffe::GTSubmapDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.gt_submap_data_param)
  return gt_submap_data_param_;
}
inline ::caffe::GTSubmapDataParameter* LayerParameter::release_gt_submap_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.gt_submap_data_param)
  clear_has_gt_submap_data_param();
  ::caffe::GTSubmapDataParameter* temp = gt_submap_data_param_;
  gt_submap_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_gt_submap_data_param(::caffe::GTSubmapDataParameter* gt_submap_data_param) {
  delete gt_submap_data_param_;
  gt_submap_data_param_ = gt_submap_data_param;
  if (gt_submap_data_param) {
    set_has_gt_submap_data_param();
  } else {
    clear_has_gt_submap_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.gt_submap_data_param)
}

// optional .caffe.TopSubmapDataParameter top_submap_data_param = 1015;
inline bool LayerParameter::has_top_submap_data_param() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
inline void LayerParameter::set_has_top_submap_data_param() {
  _has_bits_[2] |= 0x00000100u;
}
inline void LayerParameter::clear_has_top_submap_data_param() {
  _has_bits_[2] &= ~0x00000100u;
}
inline void LayerParameter::clear_top_submap_data_param() {
  if (top_submap_data_param_ != NULL) top_submap_data_param_->::caffe::TopSubmapDataParameter::Clear();
  clear_has_top_submap_data_param();
}
inline const ::caffe::TopSubmapDataParameter& LayerParameter::top_submap_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.top_submap_data_param)
  return top_submap_data_param_ != NULL ? *top_submap_data_param_
                         : *::caffe::TopSubmapDataParameter::internal_default_instance();
}
inline ::caffe::TopSubmapDataParameter* LayerParameter::mutable_top_submap_data_param() {
  set_has_top_submap_data_param();
  if (top_submap_data_param_ == NULL) {
    top_submap_data_param_ = new ::caffe::TopSubmapDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.top_submap_data_param)
  return top_submap_data_param_;
}
inline ::caffe::TopSubmapDataParameter* LayerParameter::release_top_submap_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.top_submap_data_param)
  clear_has_top_submap_data_param();
  ::caffe::TopSubmapDataParameter* temp = top_submap_data_param_;
  top_submap_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_top_submap_data_param(::caffe::TopSubmapDataParameter* top_submap_data_param) {
  delete top_submap_data_param_;
  top_submap_data_param_ = top_submap_data_param;
  if (top_submap_data_param) {
    set_has_top_submap_data_param();
  } else {
    clear_has_top_submap_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.top_submap_data_param)
}

// optional .caffe.YOLOLikeLossParameter yololike_loss_param = 1016;
inline bool LayerParameter::has_yololike_loss_param() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
inline void LayerParameter::set_has_yololike_loss_param() {
  _has_bits_[2] |= 0x00000200u;
}
inline void LayerParameter::clear_has_yololike_loss_param() {
  _has_bits_[2] &= ~0x00000200u;
}
inline void LayerParameter::clear_yololike_loss_param() {
  if (yololike_loss_param_ != NULL) yololike_loss_param_->::caffe::YOLOLikeLossParameter::Clear();
  clear_has_yololike_loss_param();
}
inline const ::caffe::YOLOLikeLossParameter& LayerParameter::yololike_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.yololike_loss_param)
  return yololike_loss_param_ != NULL ? *yololike_loss_param_
                         : *::caffe::YOLOLikeLossParameter::internal_default_instance();
}
inline ::caffe::YOLOLikeLossParameter* LayerParameter::mutable_yololike_loss_param() {
  set_has_yololike_loss_param();
  if (yololike_loss_param_ == NULL) {
    yololike_loss_param_ = new ::caffe::YOLOLikeLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.yololike_loss_param)
  return yololike_loss_param_;
}
inline ::caffe::YOLOLikeLossParameter* LayerParameter::release_yololike_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.yololike_loss_param)
  clear_has_yololike_loss_param();
  ::caffe::YOLOLikeLossParameter* temp = yololike_loss_param_;
  yololike_loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_yololike_loss_param(::caffe::YOLOLikeLossParameter* yololike_loss_param) {
  delete yololike_loss_param_;
  yololike_loss_param_ = yololike_loss_param;
  if (yololike_loss_param) {
    set_has_yololike_loss_param();
  } else {
    clear_has_yololike_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.yololike_loss_param)
}

// optional .caffe.WeightedSoftmaxLossParameter weighted_softmax_loss_param = 1017;
inline bool LayerParameter::has_weighted_softmax_loss_param() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
inline void LayerParameter::set_has_weighted_softmax_loss_param() {
  _has_bits_[2] |= 0x00000400u;
}
inline void LayerParameter::clear_has_weighted_softmax_loss_param() {
  _has_bits_[2] &= ~0x00000400u;
}
inline void LayerParameter::clear_weighted_softmax_loss_param() {
  if (weighted_softmax_loss_param_ != NULL) weighted_softmax_loss_param_->::caffe::WeightedSoftmaxLossParameter::Clear();
  clear_has_weighted_softmax_loss_param();
}
inline const ::caffe::WeightedSoftmaxLossParameter& LayerParameter::weighted_softmax_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.weighted_softmax_loss_param)
  return weighted_softmax_loss_param_ != NULL ? *weighted_softmax_loss_param_
                         : *::caffe::WeightedSoftmaxLossParameter::internal_default_instance();
}
inline ::caffe::WeightedSoftmaxLossParameter* LayerParameter::mutable_weighted_softmax_loss_param() {
  set_has_weighted_softmax_loss_param();
  if (weighted_softmax_loss_param_ == NULL) {
    weighted_softmax_loss_param_ = new ::caffe::WeightedSoftmaxLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.weighted_softmax_loss_param)
  return weighted_softmax_loss_param_;
}
inline ::caffe::WeightedSoftmaxLossParameter* LayerParameter::release_weighted_softmax_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.weighted_softmax_loss_param)
  clear_has_weighted_softmax_loss_param();
  ::caffe::WeightedSoftmaxLossParameter* temp = weighted_softmax_loss_param_;
  weighted_softmax_loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_weighted_softmax_loss_param(::caffe::WeightedSoftmaxLossParameter* weighted_softmax_loss_param) {
  delete weighted_softmax_loss_param_;
  weighted_softmax_loss_param_ = weighted_softmax_loss_param;
  if (weighted_softmax_loss_param) {
    set_has_weighted_softmax_loss_param();
  } else {
    clear_has_weighted_softmax_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.weighted_softmax_loss_param)
}

// optional .caffe.GridProposalLossParameter grid_proposal_loss_param = 1018;
inline bool LayerParameter::has_grid_proposal_loss_param() const {
  return (_has_bits_[2] & 0x00000800u) != 0;
}
inline void LayerParameter::set_has_grid_proposal_loss_param() {
  _has_bits_[2] |= 0x00000800u;
}
inline void LayerParameter::clear_has_grid_proposal_loss_param() {
  _has_bits_[2] &= ~0x00000800u;
}
inline void LayerParameter::clear_grid_proposal_loss_param() {
  if (grid_proposal_loss_param_ != NULL) grid_proposal_loss_param_->::caffe::GridProposalLossParameter::Clear();
  clear_has_grid_proposal_loss_param();
}
inline const ::caffe::GridProposalLossParameter& LayerParameter::grid_proposal_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.grid_proposal_loss_param)
  return grid_proposal_loss_param_ != NULL ? *grid_proposal_loss_param_
                         : *::caffe::GridProposalLossParameter::internal_default_instance();
}
inline ::caffe::GridProposalLossParameter* LayerParameter::mutable_grid_proposal_loss_param() {
  set_has_grid_proposal_loss_param();
  if (grid_proposal_loss_param_ == NULL) {
    grid_proposal_loss_param_ = new ::caffe::GridProposalLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.grid_proposal_loss_param)
  return grid_proposal_loss_param_;
}
inline ::caffe::GridProposalLossParameter* LayerParameter::release_grid_proposal_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.grid_proposal_loss_param)
  clear_has_grid_proposal_loss_param();
  ::caffe::GridProposalLossParameter* temp = grid_proposal_loss_param_;
  grid_proposal_loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_grid_proposal_loss_param(::caffe::GridProposalLossParameter* grid_proposal_loss_param) {
  delete grid_proposal_loss_param_;
  grid_proposal_loss_param_ = grid_proposal_loss_param;
  if (grid_proposal_loss_param) {
    set_has_grid_proposal_loss_param();
  } else {
    clear_has_grid_proposal_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.grid_proposal_loss_param)
}

// optional .caffe.BGSynthesisDataParameter bg_synthesis_data_param = 1019;
inline bool LayerParameter::has_bg_synthesis_data_param() const {
  return (_has_bits_[2] & 0x00001000u) != 0;
}
inline void LayerParameter::set_has_bg_synthesis_data_param() {
  _has_bits_[2] |= 0x00001000u;
}
inline void LayerParameter::clear_has_bg_synthesis_data_param() {
  _has_bits_[2] &= ~0x00001000u;
}
inline void LayerParameter::clear_bg_synthesis_data_param() {
  if (bg_synthesis_data_param_ != NULL) bg_synthesis_data_param_->::caffe::BGSynthesisDataParameter::Clear();
  clear_has_bg_synthesis_data_param();
}
inline const ::caffe::BGSynthesisDataParameter& LayerParameter::bg_synthesis_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.bg_synthesis_data_param)
  return bg_synthesis_data_param_ != NULL ? *bg_synthesis_data_param_
                         : *::caffe::BGSynthesisDataParameter::internal_default_instance();
}
inline ::caffe::BGSynthesisDataParameter* LayerParameter::mutable_bg_synthesis_data_param() {
  set_has_bg_synthesis_data_param();
  if (bg_synthesis_data_param_ == NULL) {
    bg_synthesis_data_param_ = new ::caffe::BGSynthesisDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.bg_synthesis_data_param)
  return bg_synthesis_data_param_;
}
inline ::caffe::BGSynthesisDataParameter* LayerParameter::release_bg_synthesis_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.bg_synthesis_data_param)
  clear_has_bg_synthesis_data_param();
  ::caffe::BGSynthesisDataParameter* temp = bg_synthesis_data_param_;
  bg_synthesis_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_bg_synthesis_data_param(::caffe::BGSynthesisDataParameter* bg_synthesis_data_param) {
  delete bg_synthesis_data_param_;
  bg_synthesis_data_param_ = bg_synthesis_data_param;
  if (bg_synthesis_data_param) {
    set_has_bg_synthesis_data_param();
  } else {
    clear_has_bg_synthesis_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.bg_synthesis_data_param)
}

// optional .caffe.SizeFilterParameter size_filter_param = 1020;
inline bool LayerParameter::has_size_filter_param() const {
  return (_has_bits_[2] & 0x00002000u) != 0;
}
inline void LayerParameter::set_has_size_filter_param() {
  _has_bits_[2] |= 0x00002000u;
}
inline void LayerParameter::clear_has_size_filter_param() {
  _has_bits_[2] &= ~0x00002000u;
}
inline void LayerParameter::clear_size_filter_param() {
  if (size_filter_param_ != NULL) size_filter_param_->::caffe::SizeFilterParameter::Clear();
  clear_has_size_filter_param();
}
inline const ::caffe::SizeFilterParameter& LayerParameter::size_filter_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.size_filter_param)
  return size_filter_param_ != NULL ? *size_filter_param_
                         : *::caffe::SizeFilterParameter::internal_default_instance();
}
inline ::caffe::SizeFilterParameter* LayerParameter::mutable_size_filter_param() {
  set_has_size_filter_param();
  if (size_filter_param_ == NULL) {
    size_filter_param_ = new ::caffe::SizeFilterParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.size_filter_param)
  return size_filter_param_;
}
inline ::caffe::SizeFilterParameter* LayerParameter::release_size_filter_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.size_filter_param)
  clear_has_size_filter_param();
  ::caffe::SizeFilterParameter* temp = size_filter_param_;
  size_filter_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_size_filter_param(::caffe::SizeFilterParameter* size_filter_param) {
  delete size_filter_param_;
  size_filter_param_ = size_filter_param;
  if (size_filter_param) {
    set_has_size_filter_param();
  } else {
    clear_has_size_filter_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.size_filter_param)
}

// optional .caffe.AugmentationParameter augmentation_param = 1021;
inline bool LayerParameter::has_augmentation_param() const {
  return (_has_bits_[2] & 0x00004000u) != 0;
}
inline void LayerParameter::set_has_augmentation_param() {
  _has_bits_[2] |= 0x00004000u;
}
inline void LayerParameter::clear_has_augmentation_param() {
  _has_bits_[2] &= ~0x00004000u;
}
inline void LayerParameter::clear_augmentation_param() {
  if (augmentation_param_ != NULL) augmentation_param_->::caffe::AugmentationParameter::Clear();
  clear_has_augmentation_param();
}
inline const ::caffe::AugmentationParameter& LayerParameter::augmentation_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.augmentation_param)
  return augmentation_param_ != NULL ? *augmentation_param_
                         : *::caffe::AugmentationParameter::internal_default_instance();
}
inline ::caffe::AugmentationParameter* LayerParameter::mutable_augmentation_param() {
  set_has_augmentation_param();
  if (augmentation_param_ == NULL) {
    augmentation_param_ = new ::caffe::AugmentationParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.augmentation_param)
  return augmentation_param_;
}
inline ::caffe::AugmentationParameter* LayerParameter::release_augmentation_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.augmentation_param)
  clear_has_augmentation_param();
  ::caffe::AugmentationParameter* temp = augmentation_param_;
  augmentation_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_augmentation_param(::caffe::AugmentationParameter* augmentation_param) {
  delete augmentation_param_;
  augmentation_param_ = augmentation_param;
  if (augmentation_param) {
    set_has_augmentation_param();
  } else {
    clear_has_augmentation_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.augmentation_param)
}

// optional .caffe.HeatmapParameter heatmap_param = 1022;
inline bool LayerParameter::has_heatmap_param() const {
  return (_has_bits_[2] & 0x00008000u) != 0;
}
inline void LayerParameter::set_has_heatmap_param() {
  _has_bits_[2] |= 0x00008000u;
}
inline void LayerParameter::clear_has_heatmap_param() {
  _has_bits_[2] &= ~0x00008000u;
}
inline void LayerParameter::clear_heatmap_param() {
  if (heatmap_param_ != NULL) heatmap_param_->::caffe::HeatmapParameter::Clear();
  clear_has_heatmap_param();
}
inline const ::caffe::HeatmapParameter& LayerParameter::heatmap_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.heatmap_param)
  return heatmap_param_ != NULL ? *heatmap_param_
                         : *::caffe::HeatmapParameter::internal_default_instance();
}
inline ::caffe::HeatmapParameter* LayerParameter::mutable_heatmap_param() {
  set_has_heatmap_param();
  if (heatmap_param_ == NULL) {
    heatmap_param_ = new ::caffe::HeatmapParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.heatmap_param)
  return heatmap_param_;
}
inline ::caffe::HeatmapParameter* LayerParameter::release_heatmap_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.heatmap_param)
  clear_has_heatmap_param();
  ::caffe::HeatmapParameter* temp = heatmap_param_;
  heatmap_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_heatmap_param(::caffe::HeatmapParameter* heatmap_param) {
  delete heatmap_param_;
  heatmap_param_ = heatmap_param;
  if (heatmap_param) {
    set_has_heatmap_param();
  } else {
    clear_has_heatmap_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.heatmap_param)
}

// optional .caffe.CheckParameter check_param = 1023;
inline bool LayerParameter::has_check_param() const {
  return (_has_bits_[2] & 0x00010000u) != 0;
}
inline void LayerParameter::set_has_check_param() {
  _has_bits_[2] |= 0x00010000u;
}
inline void LayerParameter::clear_has_check_param() {
  _has_bits_[2] &= ~0x00010000u;
}
inline void LayerParameter::clear_check_param() {
  if (check_param_ != NULL) check_param_->::caffe::CheckParameter::Clear();
  clear_has_check_param();
}
inline const ::caffe::CheckParameter& LayerParameter::check_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.check_param)
  return check_param_ != NULL ? *check_param_
                         : *::caffe::CheckParameter::internal_default_instance();
}
inline ::caffe::CheckParameter* LayerParameter::mutable_check_param() {
  set_has_check_param();
  if (check_param_ == NULL) {
    check_param_ = new ::caffe::CheckParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.check_param)
  return check_param_;
}
inline ::caffe::CheckParameter* LayerParameter::release_check_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.check_param)
  clear_has_check_param();
  ::caffe::CheckParameter* temp = check_param_;
  check_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_check_param(::caffe::CheckParameter* check_param) {
  delete check_param_;
  check_param_ = check_param;
  if (check_param) {
    set_has_check_param();
  } else {
    clear_has_check_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.check_param)
}

// optional .caffe.MeanSubParameter mean_sub_param = 1024;
inline bool LayerParameter::has_mean_sub_param() const {
  return (_has_bits_[2] & 0x00020000u) != 0;
}
inline void LayerParameter::set_has_mean_sub_param() {
  _has_bits_[2] |= 0x00020000u;
}
inline void LayerParameter::clear_has_mean_sub_param() {
  _has_bits_[2] &= ~0x00020000u;
}
inline void LayerParameter::clear_mean_sub_param() {
  if (mean_sub_param_ != NULL) mean_sub_param_->::caffe::MeanSubParameter::Clear();
  clear_has_mean_sub_param();
}
inline const ::caffe::MeanSubParameter& LayerParameter::mean_sub_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.mean_sub_param)
  return mean_sub_param_ != NULL ? *mean_sub_param_
                         : *::caffe::MeanSubParameter::internal_default_instance();
}
inline ::caffe::MeanSubParameter* LayerParameter::mutable_mean_sub_param() {
  set_has_mean_sub_param();
  if (mean_sub_param_ == NULL) {
    mean_sub_param_ = new ::caffe::MeanSubParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.mean_sub_param)
  return mean_sub_param_;
}
inline ::caffe::MeanSubParameter* LayerParameter::release_mean_sub_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.mean_sub_param)
  clear_has_mean_sub_param();
  ::caffe::MeanSubParameter* temp = mean_sub_param_;
  mean_sub_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_mean_sub_param(::caffe::MeanSubParameter* mean_sub_param) {
  delete mean_sub_param_;
  mean_sub_param_ = mean_sub_param;
  if (mean_sub_param) {
    set_has_mean_sub_param();
  } else {
    clear_has_mean_sub_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.mean_sub_param)
}

// optional .caffe.MinibatchDataParameter minibatch_data_param = 1025;
inline bool LayerParameter::has_minibatch_data_param() const {
  return (_has_bits_[2] & 0x00040000u) != 0;
}
inline void LayerParameter::set_has_minibatch_data_param() {
  _has_bits_[2] |= 0x00040000u;
}
inline void LayerParameter::clear_has_minibatch_data_param() {
  _has_bits_[2] &= ~0x00040000u;
}
inline void LayerParameter::clear_minibatch_data_param() {
  if (minibatch_data_param_ != NULL) minibatch_data_param_->::caffe::MinibatchDataParameter::Clear();
  clear_has_minibatch_data_param();
}
inline const ::caffe::MinibatchDataParameter& LayerParameter::minibatch_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.minibatch_data_param)
  return minibatch_data_param_ != NULL ? *minibatch_data_param_
                         : *::caffe::MinibatchDataParameter::internal_default_instance();
}
inline ::caffe::MinibatchDataParameter* LayerParameter::mutable_minibatch_data_param() {
  set_has_minibatch_data_param();
  if (minibatch_data_param_ == NULL) {
    minibatch_data_param_ = new ::caffe::MinibatchDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.minibatch_data_param)
  return minibatch_data_param_;
}
inline ::caffe::MinibatchDataParameter* LayerParameter::release_minibatch_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.minibatch_data_param)
  clear_has_minibatch_data_param();
  ::caffe::MinibatchDataParameter* temp = minibatch_data_param_;
  minibatch_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_minibatch_data_param(::caffe::MinibatchDataParameter* minibatch_data_param) {
  delete minibatch_data_param_;
  minibatch_data_param_ = minibatch_data_param;
  if (minibatch_data_param) {
    set_has_minibatch_data_param();
  } else {
    clear_has_minibatch_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.minibatch_data_param)
}

// optional .caffe.RowColProposalTransformParameter rcp_transform_param = 1026;
inline bool LayerParameter::has_rcp_transform_param() const {
  return (_has_bits_[2] & 0x00080000u) != 0;
}
inline void LayerParameter::set_has_rcp_transform_param() {
  _has_bits_[2] |= 0x00080000u;
}
inline void LayerParameter::clear_has_rcp_transform_param() {
  _has_bits_[2] &= ~0x00080000u;
}
inline void LayerParameter::clear_rcp_transform_param() {
  if (rcp_transform_param_ != NULL) rcp_transform_param_->::caffe::RowColProposalTransformParameter::Clear();
  clear_has_rcp_transform_param();
}
inline const ::caffe::RowColProposalTransformParameter& LayerParameter::rcp_transform_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.rcp_transform_param)
  return rcp_transform_param_ != NULL ? *rcp_transform_param_
                         : *::caffe::RowColProposalTransformParameter::internal_default_instance();
}
inline ::caffe::RowColProposalTransformParameter* LayerParameter::mutable_rcp_transform_param() {
  set_has_rcp_transform_param();
  if (rcp_transform_param_ == NULL) {
    rcp_transform_param_ = new ::caffe::RowColProposalTransformParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.rcp_transform_param)
  return rcp_transform_param_;
}
inline ::caffe::RowColProposalTransformParameter* LayerParameter::release_rcp_transform_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.rcp_transform_param)
  clear_has_rcp_transform_param();
  ::caffe::RowColProposalTransformParameter* temp = rcp_transform_param_;
  rcp_transform_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_rcp_transform_param(::caffe::RowColProposalTransformParameter* rcp_transform_param) {
  delete rcp_transform_param_;
  rcp_transform_param_ = rcp_transform_param;
  if (rcp_transform_param) {
    set_has_rcp_transform_param();
  } else {
    clear_has_rcp_transform_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.rcp_transform_param)
}

// optional .caffe.AnnoToSegParameter anno_to_seg_param = 1027;
inline bool LayerParameter::has_anno_to_seg_param() const {
  return (_has_bits_[2] & 0x00100000u) != 0;
}
inline void LayerParameter::set_has_anno_to_seg_param() {
  _has_bits_[2] |= 0x00100000u;
}
inline void LayerParameter::clear_has_anno_to_seg_param() {
  _has_bits_[2] &= ~0x00100000u;
}
inline void LayerParameter::clear_anno_to_seg_param() {
  if (anno_to_seg_param_ != NULL) anno_to_seg_param_->::caffe::AnnoToSegParameter::Clear();
  clear_has_anno_to_seg_param();
}
inline const ::caffe::AnnoToSegParameter& LayerParameter::anno_to_seg_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.anno_to_seg_param)
  return anno_to_seg_param_ != NULL ? *anno_to_seg_param_
                         : *::caffe::AnnoToSegParameter::internal_default_instance();
}
inline ::caffe::AnnoToSegParameter* LayerParameter::mutable_anno_to_seg_param() {
  set_has_anno_to_seg_param();
  if (anno_to_seg_param_ == NULL) {
    anno_to_seg_param_ = new ::caffe::AnnoToSegParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.anno_to_seg_param)
  return anno_to_seg_param_;
}
inline ::caffe::AnnoToSegParameter* LayerParameter::release_anno_to_seg_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.anno_to_seg_param)
  clear_has_anno_to_seg_param();
  ::caffe::AnnoToSegParameter* temp = anno_to_seg_param_;
  anno_to_seg_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_anno_to_seg_param(::caffe::AnnoToSegParameter* anno_to_seg_param) {
  delete anno_to_seg_param_;
  anno_to_seg_param_ = anno_to_seg_param;
  if (anno_to_seg_param) {
    set_has_anno_to_seg_param();
  } else {
    clear_has_anno_to_seg_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.anno_to_seg_param)
}

// optional .caffe.TrainROIParameter train_roi_param = 1028;
inline bool LayerParameter::has_train_roi_param() const {
  return (_has_bits_[2] & 0x00200000u) != 0;
}
inline void LayerParameter::set_has_train_roi_param() {
  _has_bits_[2] |= 0x00200000u;
}
inline void LayerParameter::clear_has_train_roi_param() {
  _has_bits_[2] &= ~0x00200000u;
}
inline void LayerParameter::clear_train_roi_param() {
  if (train_roi_param_ != NULL) train_roi_param_->::caffe::TrainROIParameter::Clear();
  clear_has_train_roi_param();
}
inline const ::caffe::TrainROIParameter& LayerParameter::train_roi_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.train_roi_param)
  return train_roi_param_ != NULL ? *train_roi_param_
                         : *::caffe::TrainROIParameter::internal_default_instance();
}
inline ::caffe::TrainROIParameter* LayerParameter::mutable_train_roi_param() {
  set_has_train_roi_param();
  if (train_roi_param_ == NULL) {
    train_roi_param_ = new ::caffe::TrainROIParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.train_roi_param)
  return train_roi_param_;
}
inline ::caffe::TrainROIParameter* LayerParameter::release_train_roi_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.train_roi_param)
  clear_has_train_roi_param();
  ::caffe::TrainROIParameter* temp = train_roi_param_;
  train_roi_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_train_roi_param(::caffe::TrainROIParameter* train_roi_param) {
  delete train_roi_param_;
  train_roi_param_ = train_roi_param;
  if (train_roi_param) {
    set_has_train_roi_param();
  } else {
    clear_has_train_roi_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.train_roi_param)
}

// optional .caffe.YOLOV2LossParameter yolo_v2_loss_param = 1029;
inline bool LayerParameter::has_yolo_v2_loss_param() const {
  return (_has_bits_[2] & 0x00400000u) != 0;
}
inline void LayerParameter::set_has_yolo_v2_loss_param() {
  _has_bits_[2] |= 0x00400000u;
}
inline void LayerParameter::clear_has_yolo_v2_loss_param() {
  _has_bits_[2] &= ~0x00400000u;
}
inline void LayerParameter::clear_yolo_v2_loss_param() {
  if (yolo_v2_loss_param_ != NULL) yolo_v2_loss_param_->::caffe::YOLOV2LossParameter::Clear();
  clear_has_yolo_v2_loss_param();
}
inline const ::caffe::YOLOV2LossParameter& LayerParameter::yolo_v2_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.yolo_v2_loss_param)
  return yolo_v2_loss_param_ != NULL ? *yolo_v2_loss_param_
                         : *::caffe::YOLOV2LossParameter::internal_default_instance();
}
inline ::caffe::YOLOV2LossParameter* LayerParameter::mutable_yolo_v2_loss_param() {
  set_has_yolo_v2_loss_param();
  if (yolo_v2_loss_param_ == NULL) {
    yolo_v2_loss_param_ = new ::caffe::YOLOV2LossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.yolo_v2_loss_param)
  return yolo_v2_loss_param_;
}
inline ::caffe::YOLOV2LossParameter* LayerParameter::release_yolo_v2_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.yolo_v2_loss_param)
  clear_has_yolo_v2_loss_param();
  ::caffe::YOLOV2LossParameter* temp = yolo_v2_loss_param_;
  yolo_v2_loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_yolo_v2_loss_param(::caffe::YOLOV2LossParameter* yolo_v2_loss_param) {
  delete yolo_v2_loss_param_;
  yolo_v2_loss_param_ = yolo_v2_loss_param;
  if (yolo_v2_loss_param) {
    set_has_yolo_v2_loss_param();
  } else {
    clear_has_yolo_v2_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.yolo_v2_loss_param)
}

// optional .caffe.YOLOV2ResultParameter yolo_v2_result_param = 1030;
inline bool LayerParameter::has_yolo_v2_result_param() const {
  return (_has_bits_[2] & 0x00800000u) != 0;
}
inline void LayerParameter::set_has_yolo_v2_result_param() {
  _has_bits_[2] |= 0x00800000u;
}
inline void LayerParameter::clear_has_yolo_v2_result_param() {
  _has_bits_[2] &= ~0x00800000u;
}
inline void LayerParameter::clear_yolo_v2_result_param() {
  if (yolo_v2_result_param_ != NULL) yolo_v2_result_param_->::caffe::YOLOV2ResultParameter::Clear();
  clear_has_yolo_v2_result_param();
}
inline const ::caffe::YOLOV2ResultParameter& LayerParameter::yolo_v2_result_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.yolo_v2_result_param)
  return yolo_v2_result_param_ != NULL ? *yolo_v2_result_param_
                         : *::caffe::YOLOV2ResultParameter::internal_default_instance();
}
inline ::caffe::YOLOV2ResultParameter* LayerParameter::mutable_yolo_v2_result_param() {
  set_has_yolo_v2_result_param();
  if (yolo_v2_result_param_ == NULL) {
    yolo_v2_result_param_ = new ::caffe::YOLOV2ResultParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.yolo_v2_result_param)
  return yolo_v2_result_param_;
}
inline ::caffe::YOLOV2ResultParameter* LayerParameter::release_yolo_v2_result_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.yolo_v2_result_param)
  clear_has_yolo_v2_result_param();
  ::caffe::YOLOV2ResultParameter* temp = yolo_v2_result_param_;
  yolo_v2_result_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_yolo_v2_result_param(::caffe::YOLOV2ResultParameter* yolo_v2_result_param) {
  delete yolo_v2_result_param_;
  yolo_v2_result_param_ = yolo_v2_result_param;
  if (yolo_v2_result_param) {
    set_has_yolo_v2_result_param();
  } else {
    clear_has_yolo_v2_result_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.yolo_v2_result_param)
}

// optional .caffe.DetectionCheckParameter detection_check_param = 1031;
inline bool LayerParameter::has_detection_check_param() const {
  return (_has_bits_[2] & 0x01000000u) != 0;
}
inline void LayerParameter::set_has_detection_check_param() {
  _has_bits_[2] |= 0x01000000u;
}
inline void LayerParameter::clear_has_detection_check_param() {
  _has_bits_[2] &= ~0x01000000u;
}
inline void LayerParameter::clear_detection_check_param() {
  if (detection_check_param_ != NULL) detection_check_param_->::caffe::DetectionCheckParameter::Clear();
  clear_has_detection_check_param();
}
inline const ::caffe::DetectionCheckParameter& LayerParameter::detection_check_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.detection_check_param)
  return detection_check_param_ != NULL ? *detection_check_param_
                         : *::caffe::DetectionCheckParameter::internal_default_instance();
}
inline ::caffe::DetectionCheckParameter* LayerParameter::mutable_detection_check_param() {
  set_has_detection_check_param();
  if (detection_check_param_ == NULL) {
    detection_check_param_ = new ::caffe::DetectionCheckParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.detection_check_param)
  return detection_check_param_;
}
inline ::caffe::DetectionCheckParameter* LayerParameter::release_detection_check_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.detection_check_param)
  clear_has_detection_check_param();
  ::caffe::DetectionCheckParameter* temp = detection_check_param_;
  detection_check_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_detection_check_param(::caffe::DetectionCheckParameter* detection_check_param) {
  delete detection_check_param_;
  detection_check_param_ = detection_check_param;
  if (detection_check_param) {
    set_has_detection_check_param();
  } else {
    clear_has_detection_check_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.detection_check_param)
}

// optional .caffe.SubwinOffsetParameter subwin_offset_param = 1032;
inline bool LayerParameter::has_subwin_offset_param() const {
  return (_has_bits_[2] & 0x02000000u) != 0;
}
inline void LayerParameter::set_has_subwin_offset_param() {
  _has_bits_[2] |= 0x02000000u;
}
inline void LayerParameter::clear_has_subwin_offset_param() {
  _has_bits_[2] &= ~0x02000000u;
}
inline void LayerParameter::clear_subwin_offset_param() {
  if (subwin_offset_param_ != NULL) subwin_offset_param_->::caffe::SubwinOffsetParameter::Clear();
  clear_has_subwin_offset_param();
}
inline const ::caffe::SubwinOffsetParameter& LayerParameter::subwin_offset_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.subwin_offset_param)
  return subwin_offset_param_ != NULL ? *subwin_offset_param_
                         : *::caffe::SubwinOffsetParameter::internal_default_instance();
}
inline ::caffe::SubwinOffsetParameter* LayerParameter::mutable_subwin_offset_param() {
  set_has_subwin_offset_param();
  if (subwin_offset_param_ == NULL) {
    subwin_offset_param_ = new ::caffe::SubwinOffsetParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.subwin_offset_param)
  return subwin_offset_param_;
}
inline ::caffe::SubwinOffsetParameter* LayerParameter::release_subwin_offset_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.subwin_offset_param)
  clear_has_subwin_offset_param();
  ::caffe::SubwinOffsetParameter* temp = subwin_offset_param_;
  subwin_offset_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_subwin_offset_param(::caffe::SubwinOffsetParameter* subwin_offset_param) {
  delete subwin_offset_param_;
  subwin_offset_param_ = subwin_offset_param;
  if (subwin_offset_param) {
    set_has_subwin_offset_param();
  } else {
    clear_has_subwin_offset_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.subwin_offset_param)
}

// optional .caffe.SizeRejectionParameter size_rejection_param = 1033;
inline bool LayerParameter::has_size_rejection_param() const {
  return (_has_bits_[2] & 0x04000000u) != 0;
}
inline void LayerParameter::set_has_size_rejection_param() {
  _has_bits_[2] |= 0x04000000u;
}
inline void LayerParameter::clear_has_size_rejection_param() {
  _has_bits_[2] &= ~0x04000000u;
}
inline void LayerParameter::clear_size_rejection_param() {
  if (size_rejection_param_ != NULL) size_rejection_param_->::caffe::SizeRejectionParameter::Clear();
  clear_has_size_rejection_param();
}
inline const ::caffe::SizeRejectionParameter& LayerParameter::size_rejection_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.size_rejection_param)
  return size_rejection_param_ != NULL ? *size_rejection_param_
                         : *::caffe::SizeRejectionParameter::internal_default_instance();
}
inline ::caffe::SizeRejectionParameter* LayerParameter::mutable_size_rejection_param() {
  set_has_size_rejection_param();
  if (size_rejection_param_ == NULL) {
    size_rejection_param_ = new ::caffe::SizeRejectionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.size_rejection_param)
  return size_rejection_param_;
}
inline ::caffe::SizeRejectionParameter* LayerParameter::release_size_rejection_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.size_rejection_param)
  clear_has_size_rejection_param();
  ::caffe::SizeRejectionParameter* temp = size_rejection_param_;
  size_rejection_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_size_rejection_param(::caffe::SizeRejectionParameter* size_rejection_param) {
  delete size_rejection_param_;
  size_rejection_param_ = size_rejection_param;
  if (size_rejection_param) {
    set_has_size_rejection_param();
  } else {
    clear_has_size_rejection_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.size_rejection_param)
}

// optional .caffe.ConfCheckParameter conf_check_param = 1034;
inline bool LayerParameter::has_conf_check_param() const {
  return (_has_bits_[2] & 0x08000000u) != 0;
}
inline void LayerParameter::set_has_conf_check_param() {
  _has_bits_[2] |= 0x08000000u;
}
inline void LayerParameter::clear_has_conf_check_param() {
  _has_bits_[2] &= ~0x08000000u;
}
inline void LayerParameter::clear_conf_check_param() {
  if (conf_check_param_ != NULL) conf_check_param_->::caffe::ConfCheckParameter::Clear();
  clear_has_conf_check_param();
}
inline const ::caffe::ConfCheckParameter& LayerParameter::conf_check_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.conf_check_param)
  return conf_check_param_ != NULL ? *conf_check_param_
                         : *::caffe::ConfCheckParameter::internal_default_instance();
}
inline ::caffe::ConfCheckParameter* LayerParameter::mutable_conf_check_param() {
  set_has_conf_check_param();
  if (conf_check_param_ == NULL) {
    conf_check_param_ = new ::caffe::ConfCheckParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.conf_check_param)
  return conf_check_param_;
}
inline ::caffe::ConfCheckParameter* LayerParameter::release_conf_check_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.conf_check_param)
  clear_has_conf_check_param();
  ::caffe::ConfCheckParameter* temp = conf_check_param_;
  conf_check_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_conf_check_param(::caffe::ConfCheckParameter* conf_check_param) {
  delete conf_check_param_;
  conf_check_param_ = conf_check_param;
  if (conf_check_param) {
    set_has_conf_check_param();
  } else {
    clear_has_conf_check_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.conf_check_param)
}

// optional .caffe.ReorgParameter reorg_param = 1035;
inline bool LayerParameter::has_reorg_param() const {
  return (_has_bits_[2] & 0x10000000u) != 0;
}
inline void LayerParameter::set_has_reorg_param() {
  _has_bits_[2] |= 0x10000000u;
}
inline void LayerParameter::clear_has_reorg_param() {
  _has_bits_[2] &= ~0x10000000u;
}
inline void LayerParameter::clear_reorg_param() {
  if (reorg_param_ != NULL) reorg_param_->::caffe::ReorgParameter::Clear();
  clear_has_reorg_param();
}
inline const ::caffe::ReorgParameter& LayerParameter::reorg_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.reorg_param)
  return reorg_param_ != NULL ? *reorg_param_
                         : *::caffe::ReorgParameter::internal_default_instance();
}
inline ::caffe::ReorgParameter* LayerParameter::mutable_reorg_param() {
  set_has_reorg_param();
  if (reorg_param_ == NULL) {
    reorg_param_ = new ::caffe::ReorgParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.reorg_param)
  return reorg_param_;
}
inline ::caffe::ReorgParameter* LayerParameter::release_reorg_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.reorg_param)
  clear_has_reorg_param();
  ::caffe::ReorgParameter* temp = reorg_param_;
  reorg_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_reorg_param(::caffe::ReorgParameter* reorg_param) {
  delete reorg_param_;
  reorg_param_ = reorg_param;
  if (reorg_param) {
    set_has_reorg_param();
  } else {
    clear_has_reorg_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.reorg_param)
}

// optional .caffe.BatchRejectionParameter batch_rejection_param = 1036;
inline bool LayerParameter::has_batch_rejection_param() const {
  return (_has_bits_[2] & 0x20000000u) != 0;
}
inline void LayerParameter::set_has_batch_rejection_param() {
  _has_bits_[2] |= 0x20000000u;
}
inline void LayerParameter::clear_has_batch_rejection_param() {
  _has_bits_[2] &= ~0x20000000u;
}
inline void LayerParameter::clear_batch_rejection_param() {
  if (batch_rejection_param_ != NULL) batch_rejection_param_->::caffe::BatchRejectionParameter::Clear();
  clear_has_batch_rejection_param();
}
inline const ::caffe::BatchRejectionParameter& LayerParameter::batch_rejection_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.batch_rejection_param)
  return batch_rejection_param_ != NULL ? *batch_rejection_param_
                         : *::caffe::BatchRejectionParameter::internal_default_instance();
}
inline ::caffe::BatchRejectionParameter* LayerParameter::mutable_batch_rejection_param() {
  set_has_batch_rejection_param();
  if (batch_rejection_param_ == NULL) {
    batch_rejection_param_ = new ::caffe::BatchRejectionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.batch_rejection_param)
  return batch_rejection_param_;
}
inline ::caffe::BatchRejectionParameter* LayerParameter::release_batch_rejection_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.batch_rejection_param)
  clear_has_batch_rejection_param();
  ::caffe::BatchRejectionParameter* temp = batch_rejection_param_;
  batch_rejection_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_batch_rejection_param(::caffe::BatchRejectionParameter* batch_rejection_param) {
  delete batch_rejection_param_;
  batch_rejection_param_ = batch_rejection_param;
  if (batch_rejection_param) {
    set_has_batch_rejection_param();
  } else {
    clear_has_batch_rejection_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.batch_rejection_param)
}

inline const LayerParameter* LayerParameter::internal_default_instance() {
  return &LayerParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// TransformationParameter

// optional float scale = 1 [default = 1];
inline bool TransformationParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransformationParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransformationParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransformationParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float TransformationParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.scale)
  return scale_;
}
inline void TransformationParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.scale)
}

// optional bool mirror = 2 [default = false];
inline bool TransformationParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransformationParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransformationParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransformationParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool TransformationParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.mirror)
  return mirror_;
}
inline void TransformationParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.mirror)
}

// optional uint32 crop_size = 3 [default = 0];
inline bool TransformationParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TransformationParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TransformationParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TransformationParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
inline ::google::protobuf::uint32 TransformationParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.crop_size)
  return crop_size_;
}
inline void TransformationParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.crop_size)
}

// optional string mean_file = 4;
inline bool TransformationParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TransformationParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TransformationParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TransformationParameter::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mean_file();
}
inline const ::std::string& TransformationParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.mean_file)
  return mean_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransformationParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.mean_file)
}
inline void TransformationParameter::set_mean_file(const char* value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.TransformationParameter.mean_file)
}
inline void TransformationParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.TransformationParameter.mean_file)
}
inline ::std::string* TransformationParameter::mutable_mean_file() {
  set_has_mean_file();
  // @@protoc_insertion_point(field_mutable:caffe.TransformationParameter.mean_file)
  return mean_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransformationParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:caffe.TransformationParameter.mean_file)
  clear_has_mean_file();
  return mean_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransformationParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file != NULL) {
    set_has_mean_file();
  } else {
    clear_has_mean_file();
  }
  mean_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.TransformationParameter.mean_file)
}

// repeated float mean_value = 5;
inline int TransformationParameter::mean_value_size() const {
  return mean_value_.size();
}
inline void TransformationParameter::clear_mean_value() {
  mean_value_.Clear();
}
inline float TransformationParameter::mean_value(int index) const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.mean_value)
  return mean_value_.Get(index);
}
inline void TransformationParameter::set_mean_value(int index, float value) {
  mean_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.mean_value)
}
inline void TransformationParameter::add_mean_value(float value) {
  mean_value_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.TransformationParameter.mean_value)
}
inline const ::google::protobuf::RepeatedField< float >&
TransformationParameter::mean_value() const {
  // @@protoc_insertion_point(field_list:caffe.TransformationParameter.mean_value)
  return mean_value_;
}
inline ::google::protobuf::RepeatedField< float >*
TransformationParameter::mutable_mean_value() {
  // @@protoc_insertion_point(field_mutable_list:caffe.TransformationParameter.mean_value)
  return &mean_value_;
}

// optional bool force_color = 6 [default = false];
inline bool TransformationParameter::has_force_color() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TransformationParameter::set_has_force_color() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TransformationParameter::clear_has_force_color() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TransformationParameter::clear_force_color() {
  force_color_ = false;
  clear_has_force_color();
}
inline bool TransformationParameter::force_color() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.force_color)
  return force_color_;
}
inline void TransformationParameter::set_force_color(bool value) {
  set_has_force_color();
  force_color_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.force_color)
}

// optional bool force_gray = 7 [default = false];
inline bool TransformationParameter::has_force_gray() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TransformationParameter::set_has_force_gray() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TransformationParameter::clear_has_force_gray() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TransformationParameter::clear_force_gray() {
  force_gray_ = false;
  clear_has_force_gray();
}
inline bool TransformationParameter::force_gray() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.force_gray)
  return force_gray_;
}
inline void TransformationParameter::set_force_gray(bool value) {
  set_has_force_gray();
  force_gray_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.force_gray)
}

inline const TransformationParameter* TransformationParameter::internal_default_instance() {
  return &TransformationParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// LossParameter

// optional int32 ignore_label = 1;
inline bool LossParameter::has_ignore_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LossParameter::set_has_ignore_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LossParameter::clear_has_ignore_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LossParameter::clear_ignore_label() {
  ignore_label_ = 0;
  clear_has_ignore_label();
}
inline ::google::protobuf::int32 LossParameter::ignore_label() const {
  // @@protoc_insertion_point(field_get:caffe.LossParameter.ignore_label)
  return ignore_label_;
}
inline void LossParameter::set_ignore_label(::google::protobuf::int32 value) {
  set_has_ignore_label();
  ignore_label_ = value;
  // @@protoc_insertion_point(field_set:caffe.LossParameter.ignore_label)
}

// optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
inline bool LossParameter::has_normalization() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LossParameter::set_has_normalization() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LossParameter::clear_has_normalization() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LossParameter::clear_normalization() {
  normalization_ = 1;
  clear_has_normalization();
}
inline ::caffe::LossParameter_NormalizationMode LossParameter::normalization() const {
  // @@protoc_insertion_point(field_get:caffe.LossParameter.normalization)
  return static_cast< ::caffe::LossParameter_NormalizationMode >(normalization_);
}
inline void LossParameter::set_normalization(::caffe::LossParameter_NormalizationMode value) {
  assert(::caffe::LossParameter_NormalizationMode_IsValid(value));
  set_has_normalization();
  normalization_ = value;
  // @@protoc_insertion_point(field_set:caffe.LossParameter.normalization)
}

// optional bool normalize = 2;
inline bool LossParameter::has_normalize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LossParameter::set_has_normalize() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LossParameter::clear_has_normalize() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LossParameter::clear_normalize() {
  normalize_ = false;
  clear_has_normalize();
}
inline bool LossParameter::normalize() const {
  // @@protoc_insertion_point(field_get:caffe.LossParameter.normalize)
  return normalize_;
}
inline void LossParameter::set_normalize(bool value) {
  set_has_normalize();
  normalize_ = value;
  // @@protoc_insertion_point(field_set:caffe.LossParameter.normalize)
}

inline const LossParameter* LossParameter::internal_default_instance() {
  return &LossParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// AccuracyParameter

// optional uint32 top_k = 1 [default = 1];
inline bool AccuracyParameter::has_top_k() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccuracyParameter::set_has_top_k() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccuracyParameter::clear_has_top_k() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccuracyParameter::clear_top_k() {
  top_k_ = 1u;
  clear_has_top_k();
}
inline ::google::protobuf::uint32 AccuracyParameter::top_k() const {
  // @@protoc_insertion_point(field_get:caffe.AccuracyParameter.top_k)
  return top_k_;
}
inline void AccuracyParameter::set_top_k(::google::protobuf::uint32 value) {
  set_has_top_k();
  top_k_ = value;
  // @@protoc_insertion_point(field_set:caffe.AccuracyParameter.top_k)
}

// optional int32 axis = 2 [default = 1];
inline bool AccuracyParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccuracyParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccuracyParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccuracyParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 AccuracyParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.AccuracyParameter.axis)
  return axis_;
}
inline void AccuracyParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.AccuracyParameter.axis)
}

// optional int32 ignore_label = 3;
inline bool AccuracyParameter::has_ignore_label() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccuracyParameter::set_has_ignore_label() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AccuracyParameter::clear_has_ignore_label() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AccuracyParameter::clear_ignore_label() {
  ignore_label_ = 0;
  clear_has_ignore_label();
}
inline ::google::protobuf::int32 AccuracyParameter::ignore_label() const {
  // @@protoc_insertion_point(field_get:caffe.AccuracyParameter.ignore_label)
  return ignore_label_;
}
inline void AccuracyParameter::set_ignore_label(::google::protobuf::int32 value) {
  set_has_ignore_label();
  ignore_label_ = value;
  // @@protoc_insertion_point(field_set:caffe.AccuracyParameter.ignore_label)
}

inline const AccuracyParameter* AccuracyParameter::internal_default_instance() {
  return &AccuracyParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// ArgMaxParameter

// optional bool out_max_val = 1 [default = false];
inline bool ArgMaxParameter::has_out_max_val() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArgMaxParameter::set_has_out_max_val() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArgMaxParameter::clear_has_out_max_val() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArgMaxParameter::clear_out_max_val() {
  out_max_val_ = false;
  clear_has_out_max_val();
}
inline bool ArgMaxParameter::out_max_val() const {
  // @@protoc_insertion_point(field_get:caffe.ArgMaxParameter.out_max_val)
  return out_max_val_;
}
inline void ArgMaxParameter::set_out_max_val(bool value) {
  set_has_out_max_val();
  out_max_val_ = value;
  // @@protoc_insertion_point(field_set:caffe.ArgMaxParameter.out_max_val)
}

// optional uint32 top_k = 2 [default = 1];
inline bool ArgMaxParameter::has_top_k() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArgMaxParameter::set_has_top_k() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArgMaxParameter::clear_has_top_k() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArgMaxParameter::clear_top_k() {
  top_k_ = 1u;
  clear_has_top_k();
}
inline ::google::protobuf::uint32 ArgMaxParameter::top_k() const {
  // @@protoc_insertion_point(field_get:caffe.ArgMaxParameter.top_k)
  return top_k_;
}
inline void ArgMaxParameter::set_top_k(::google::protobuf::uint32 value) {
  set_has_top_k();
  top_k_ = value;
  // @@protoc_insertion_point(field_set:caffe.ArgMaxParameter.top_k)
}

// optional int32 axis = 3;
inline bool ArgMaxParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ArgMaxParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ArgMaxParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ArgMaxParameter::clear_axis() {
  axis_ = 0;
  clear_has_axis();
}
inline ::google::protobuf::int32 ArgMaxParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ArgMaxParameter.axis)
  return axis_;
}
inline void ArgMaxParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ArgMaxParameter.axis)
}

inline const ArgMaxParameter* ArgMaxParameter::internal_default_instance() {
  return &ArgMaxParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// ConcatParameter

// optional int32 axis = 2 [default = 1];
inline bool ConcatParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConcatParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConcatParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConcatParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 ConcatParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ConcatParameter.axis)
  return axis_;
}
inline void ConcatParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConcatParameter.axis)
}

// optional uint32 concat_dim = 1 [default = 1];
inline bool ConcatParameter::has_concat_dim() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConcatParameter::set_has_concat_dim() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConcatParameter::clear_has_concat_dim() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConcatParameter::clear_concat_dim() {
  concat_dim_ = 1u;
  clear_has_concat_dim();
}
inline ::google::protobuf::uint32 ConcatParameter::concat_dim() const {
  // @@protoc_insertion_point(field_get:caffe.ConcatParameter.concat_dim)
  return concat_dim_;
}
inline void ConcatParameter::set_concat_dim(::google::protobuf::uint32 value) {
  set_has_concat_dim();
  concat_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConcatParameter.concat_dim)
}

inline const ConcatParameter* ConcatParameter::internal_default_instance() {
  return &ConcatParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// BatchNormParameter

// optional bool use_global_stats = 1;
inline bool BatchNormParameter::has_use_global_stats() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BatchNormParameter::set_has_use_global_stats() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BatchNormParameter::clear_has_use_global_stats() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BatchNormParameter::clear_use_global_stats() {
  use_global_stats_ = false;
  clear_has_use_global_stats();
}
inline bool BatchNormParameter::use_global_stats() const {
  // @@protoc_insertion_point(field_get:caffe.BatchNormParameter.use_global_stats)
  return use_global_stats_;
}
inline void BatchNormParameter::set_use_global_stats(bool value) {
  set_has_use_global_stats();
  use_global_stats_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchNormParameter.use_global_stats)
}

// optional float moving_average_fraction = 2 [default = 0.999];
inline bool BatchNormParameter::has_moving_average_fraction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BatchNormParameter::set_has_moving_average_fraction() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BatchNormParameter::clear_has_moving_average_fraction() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BatchNormParameter::clear_moving_average_fraction() {
  moving_average_fraction_ = 0.999f;
  clear_has_moving_average_fraction();
}
inline float BatchNormParameter::moving_average_fraction() const {
  // @@protoc_insertion_point(field_get:caffe.BatchNormParameter.moving_average_fraction)
  return moving_average_fraction_;
}
inline void BatchNormParameter::set_moving_average_fraction(float value) {
  set_has_moving_average_fraction();
  moving_average_fraction_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchNormParameter.moving_average_fraction)
}

// optional float eps = 3 [default = 1e-005];
inline bool BatchNormParameter::has_eps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BatchNormParameter::set_has_eps() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BatchNormParameter::clear_has_eps() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BatchNormParameter::clear_eps() {
  eps_ = 1e-005f;
  clear_has_eps();
}
inline float BatchNormParameter::eps() const {
  // @@protoc_insertion_point(field_get:caffe.BatchNormParameter.eps)
  return eps_;
}
inline void BatchNormParameter::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchNormParameter.eps)
}

inline const BatchNormParameter* BatchNormParameter::internal_default_instance() {
  return &BatchNormParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// BiasParameter

// optional int32 axis = 1 [default = 1];
inline bool BiasParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BiasParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BiasParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BiasParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 BiasParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.BiasParameter.axis)
  return axis_;
}
inline void BiasParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.BiasParameter.axis)
}

// optional int32 num_axes = 2 [default = 1];
inline bool BiasParameter::has_num_axes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BiasParameter::set_has_num_axes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BiasParameter::clear_has_num_axes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BiasParameter::clear_num_axes() {
  num_axes_ = 1;
  clear_has_num_axes();
}
inline ::google::protobuf::int32 BiasParameter::num_axes() const {
  // @@protoc_insertion_point(field_get:caffe.BiasParameter.num_axes)
  return num_axes_;
}
inline void BiasParameter::set_num_axes(::google::protobuf::int32 value) {
  set_has_num_axes();
  num_axes_ = value;
  // @@protoc_insertion_point(field_set:caffe.BiasParameter.num_axes)
}

// optional .caffe.FillerParameter filler = 3;
inline bool BiasParameter::has_filler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BiasParameter::set_has_filler() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BiasParameter::clear_has_filler() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BiasParameter::clear_filler() {
  if (filler_ != NULL) filler_->::caffe::FillerParameter::Clear();
  clear_has_filler();
}
inline const ::caffe::FillerParameter& BiasParameter::filler() const {
  // @@protoc_insertion_point(field_get:caffe.BiasParameter.filler)
  return filler_ != NULL ? *filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
inline ::caffe::FillerParameter* BiasParameter::mutable_filler() {
  set_has_filler();
  if (filler_ == NULL) {
    filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.BiasParameter.filler)
  return filler_;
}
inline ::caffe::FillerParameter* BiasParameter::release_filler() {
  // @@protoc_insertion_point(field_release:caffe.BiasParameter.filler)
  clear_has_filler();
  ::caffe::FillerParameter* temp = filler_;
  filler_ = NULL;
  return temp;
}
inline void BiasParameter::set_allocated_filler(::caffe::FillerParameter* filler) {
  delete filler_;
  filler_ = filler;
  if (filler) {
    set_has_filler();
  } else {
    clear_has_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.BiasParameter.filler)
}

inline const BiasParameter* BiasParameter::internal_default_instance() {
  return &BiasParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// ContrastiveLossParameter

// optional float margin = 1 [default = 1];
inline bool ContrastiveLossParameter::has_margin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContrastiveLossParameter::set_has_margin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContrastiveLossParameter::clear_has_margin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContrastiveLossParameter::clear_margin() {
  margin_ = 1;
  clear_has_margin();
}
inline float ContrastiveLossParameter::margin() const {
  // @@protoc_insertion_point(field_get:caffe.ContrastiveLossParameter.margin)
  return margin_;
}
inline void ContrastiveLossParameter::set_margin(float value) {
  set_has_margin();
  margin_ = value;
  // @@protoc_insertion_point(field_set:caffe.ContrastiveLossParameter.margin)
}

// optional bool legacy_version = 2 [default = false];
inline bool ContrastiveLossParameter::has_legacy_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContrastiveLossParameter::set_has_legacy_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContrastiveLossParameter::clear_has_legacy_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContrastiveLossParameter::clear_legacy_version() {
  legacy_version_ = false;
  clear_has_legacy_version();
}
inline bool ContrastiveLossParameter::legacy_version() const {
  // @@protoc_insertion_point(field_get:caffe.ContrastiveLossParameter.legacy_version)
  return legacy_version_;
}
inline void ContrastiveLossParameter::set_legacy_version(bool value) {
  set_has_legacy_version();
  legacy_version_ = value;
  // @@protoc_insertion_point(field_set:caffe.ContrastiveLossParameter.legacy_version)
}

inline const ContrastiveLossParameter* ContrastiveLossParameter::internal_default_instance() {
  return &ContrastiveLossParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// ConvolutionParameter

// optional uint32 num_output = 1;
inline bool ConvolutionParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConvolutionParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConvolutionParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConvolutionParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 ConvolutionParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.num_output)
  return num_output_;
}
inline void ConvolutionParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.num_output)
}

// optional bool bias_term = 2 [default = true];
inline bool ConvolutionParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConvolutionParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConvolutionParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConvolutionParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
inline bool ConvolutionParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.bias_term)
  return bias_term_;
}
inline void ConvolutionParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.bias_term)
}

// repeated uint32 pad = 3;
inline int ConvolutionParameter::pad_size() const {
  return pad_.size();
}
inline void ConvolutionParameter::clear_pad() {
  pad_.Clear();
}
inline ::google::protobuf::uint32 ConvolutionParameter::pad(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.pad)
  return pad_.Get(index);
}
inline void ConvolutionParameter::set_pad(int index, ::google::protobuf::uint32 value) {
  pad_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.pad)
}
inline void ConvolutionParameter::add_pad(::google::protobuf::uint32 value) {
  pad_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ConvolutionParameter.pad)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::pad() const {
  // @@protoc_insertion_point(field_list:caffe.ConvolutionParameter.pad)
  return pad_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_pad() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ConvolutionParameter.pad)
  return &pad_;
}

// repeated uint32 kernel_size = 4;
inline int ConvolutionParameter::kernel_size_size() const {
  return kernel_size_.size();
}
inline void ConvolutionParameter::clear_kernel_size() {
  kernel_size_.Clear();
}
inline ::google::protobuf::uint32 ConvolutionParameter::kernel_size(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.kernel_size)
  return kernel_size_.Get(index);
}
inline void ConvolutionParameter::set_kernel_size(int index, ::google::protobuf::uint32 value) {
  kernel_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.kernel_size)
}
inline void ConvolutionParameter::add_kernel_size(::google::protobuf::uint32 value) {
  kernel_size_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ConvolutionParameter.kernel_size)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::kernel_size() const {
  // @@protoc_insertion_point(field_list:caffe.ConvolutionParameter.kernel_size)
  return kernel_size_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_kernel_size() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ConvolutionParameter.kernel_size)
  return &kernel_size_;
}

// repeated uint32 stride = 6;
inline int ConvolutionParameter::stride_size() const {
  return stride_.size();
}
inline void ConvolutionParameter::clear_stride() {
  stride_.Clear();
}
inline ::google::protobuf::uint32 ConvolutionParameter::stride(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.stride)
  return stride_.Get(index);
}
inline void ConvolutionParameter::set_stride(int index, ::google::protobuf::uint32 value) {
  stride_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.stride)
}
inline void ConvolutionParameter::add_stride(::google::protobuf::uint32 value) {
  stride_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ConvolutionParameter.stride)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::stride() const {
  // @@protoc_insertion_point(field_list:caffe.ConvolutionParameter.stride)
  return stride_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_stride() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ConvolutionParameter.stride)
  return &stride_;
}

// repeated uint32 dilation = 18;
inline int ConvolutionParameter::dilation_size() const {
  return dilation_.size();
}
inline void ConvolutionParameter::clear_dilation() {
  dilation_.Clear();
}
inline ::google::protobuf::uint32 ConvolutionParameter::dilation(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.dilation)
  return dilation_.Get(index);
}
inline void ConvolutionParameter::set_dilation(int index, ::google::protobuf::uint32 value) {
  dilation_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.dilation)
}
inline void ConvolutionParameter::add_dilation(::google::protobuf::uint32 value) {
  dilation_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ConvolutionParameter.dilation)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::dilation() const {
  // @@protoc_insertion_point(field_list:caffe.ConvolutionParameter.dilation)
  return dilation_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_dilation() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ConvolutionParameter.dilation)
  return &dilation_;
}

// optional uint32 pad_h = 9 [default = 0];
inline bool ConvolutionParameter::has_pad_h() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConvolutionParameter::set_has_pad_h() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConvolutionParameter::clear_has_pad_h() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConvolutionParameter::clear_pad_h() {
  pad_h_ = 0u;
  clear_has_pad_h();
}
inline ::google::protobuf::uint32 ConvolutionParameter::pad_h() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.pad_h)
  return pad_h_;
}
inline void ConvolutionParameter::set_pad_h(::google::protobuf::uint32 value) {
  set_has_pad_h();
  pad_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.pad_h)
}

// optional uint32 pad_w = 10 [default = 0];
inline bool ConvolutionParameter::has_pad_w() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConvolutionParameter::set_has_pad_w() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConvolutionParameter::clear_has_pad_w() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConvolutionParameter::clear_pad_w() {
  pad_w_ = 0u;
  clear_has_pad_w();
}
inline ::google::protobuf::uint32 ConvolutionParameter::pad_w() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.pad_w)
  return pad_w_;
}
inline void ConvolutionParameter::set_pad_w(::google::protobuf::uint32 value) {
  set_has_pad_w();
  pad_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.pad_w)
}

// optional uint32 kernel_h = 11;
inline bool ConvolutionParameter::has_kernel_h() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConvolutionParameter::set_has_kernel_h() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConvolutionParameter::clear_has_kernel_h() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConvolutionParameter::clear_kernel_h() {
  kernel_h_ = 0u;
  clear_has_kernel_h();
}
inline ::google::protobuf::uint32 ConvolutionParameter::kernel_h() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.kernel_h)
  return kernel_h_;
}
inline void ConvolutionParameter::set_kernel_h(::google::protobuf::uint32 value) {
  set_has_kernel_h();
  kernel_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.kernel_h)
}

// optional uint32 kernel_w = 12;
inline bool ConvolutionParameter::has_kernel_w() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConvolutionParameter::set_has_kernel_w() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConvolutionParameter::clear_has_kernel_w() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConvolutionParameter::clear_kernel_w() {
  kernel_w_ = 0u;
  clear_has_kernel_w();
}
inline ::google::protobuf::uint32 ConvolutionParameter::kernel_w() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.kernel_w)
  return kernel_w_;
}
inline void ConvolutionParameter::set_kernel_w(::google::protobuf::uint32 value) {
  set_has_kernel_w();
  kernel_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.kernel_w)
}

// optional uint32 stride_h = 13;
inline bool ConvolutionParameter::has_stride_h() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ConvolutionParameter::set_has_stride_h() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ConvolutionParameter::clear_has_stride_h() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ConvolutionParameter::clear_stride_h() {
  stride_h_ = 0u;
  clear_has_stride_h();
}
inline ::google::protobuf::uint32 ConvolutionParameter::stride_h() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.stride_h)
  return stride_h_;
}
inline void ConvolutionParameter::set_stride_h(::google::protobuf::uint32 value) {
  set_has_stride_h();
  stride_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.stride_h)
}

// optional uint32 stride_w = 14;
inline bool ConvolutionParameter::has_stride_w() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ConvolutionParameter::set_has_stride_w() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ConvolutionParameter::clear_has_stride_w() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ConvolutionParameter::clear_stride_w() {
  stride_w_ = 0u;
  clear_has_stride_w();
}
inline ::google::protobuf::uint32 ConvolutionParameter::stride_w() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.stride_w)
  return stride_w_;
}
inline void ConvolutionParameter::set_stride_w(::google::protobuf::uint32 value) {
  set_has_stride_w();
  stride_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.stride_w)
}

// optional uint32 group = 5 [default = 1];
inline bool ConvolutionParameter::has_group() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ConvolutionParameter::set_has_group() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ConvolutionParameter::clear_has_group() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ConvolutionParameter::clear_group() {
  group_ = 1u;
  clear_has_group();
}
inline ::google::protobuf::uint32 ConvolutionParameter::group() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.group)
  return group_;
}
inline void ConvolutionParameter::set_group(::google::protobuf::uint32 value) {
  set_has_group();
  group_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.group)
}

// optional .caffe.FillerParameter weight_filler = 7;
inline bool ConvolutionParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ConvolutionParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ConvolutionParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ConvolutionParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
inline const ::caffe::FillerParameter& ConvolutionParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
inline ::caffe::FillerParameter* ConvolutionParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ConvolutionParameter.weight_filler)
  return weight_filler_;
}
inline ::caffe::FillerParameter* ConvolutionParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.ConvolutionParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline void ConvolutionParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ConvolutionParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 8;
inline bool ConvolutionParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ConvolutionParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ConvolutionParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ConvolutionParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& ConvolutionParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
inline ::caffe::FillerParameter* ConvolutionParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ConvolutionParameter.bias_filler)
  return bias_filler_;
}
inline ::caffe::FillerParameter* ConvolutionParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.ConvolutionParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void ConvolutionParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ConvolutionParameter.bias_filler)
}

// optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
inline bool ConvolutionParameter::has_engine() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ConvolutionParameter::set_has_engine() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ConvolutionParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ConvolutionParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::ConvolutionParameter_Engine ConvolutionParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.engine)
  return static_cast< ::caffe::ConvolutionParameter_Engine >(engine_);
}
inline void ConvolutionParameter::set_engine(::caffe::ConvolutionParameter_Engine value) {
  assert(::caffe::ConvolutionParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.engine)
}

// optional int32 axis = 16 [default = 1];
inline bool ConvolutionParameter::has_axis() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ConvolutionParameter::set_has_axis() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ConvolutionParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ConvolutionParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 ConvolutionParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.axis)
  return axis_;
}
inline void ConvolutionParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.axis)
}

// optional bool force_nd_im2col = 17 [default = false];
inline bool ConvolutionParameter::has_force_nd_im2col() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ConvolutionParameter::set_has_force_nd_im2col() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ConvolutionParameter::clear_has_force_nd_im2col() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ConvolutionParameter::clear_force_nd_im2col() {
  force_nd_im2col_ = false;
  clear_has_force_nd_im2col();
}
inline bool ConvolutionParameter::force_nd_im2col() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.force_nd_im2col)
  return force_nd_im2col_;
}
inline void ConvolutionParameter::set_force_nd_im2col(bool value) {
  set_has_force_nd_im2col();
  force_nd_im2col_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.force_nd_im2col)
}

inline const ConvolutionParameter* ConvolutionParameter::internal_default_instance() {
  return &ConvolutionParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// CropParameter

// optional int32 axis = 1 [default = 2];
inline bool CropParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CropParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CropParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CropParameter::clear_axis() {
  axis_ = 2;
  clear_has_axis();
}
inline ::google::protobuf::int32 CropParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.CropParameter.axis)
  return axis_;
}
inline void CropParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.CropParameter.axis)
}

// repeated uint32 offset = 2;
inline int CropParameter::offset_size() const {
  return offset_.size();
}
inline void CropParameter::clear_offset() {
  offset_.Clear();
}
inline ::google::protobuf::uint32 CropParameter::offset(int index) const {
  // @@protoc_insertion_point(field_get:caffe.CropParameter.offset)
  return offset_.Get(index);
}
inline void CropParameter::set_offset(int index, ::google::protobuf::uint32 value) {
  offset_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.CropParameter.offset)
}
inline void CropParameter::add_offset(::google::protobuf::uint32 value) {
  offset_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.CropParameter.offset)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CropParameter::offset() const {
  // @@protoc_insertion_point(field_list:caffe.CropParameter.offset)
  return offset_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CropParameter::mutable_offset() {
  // @@protoc_insertion_point(field_mutable_list:caffe.CropParameter.offset)
  return &offset_;
}

inline const CropParameter* CropParameter::internal_default_instance() {
  return &CropParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// DataParameter

// optional string source = 1;
inline bool DataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
inline const ::std::string& DataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.source)
  return source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.DataParameter.source)
}
inline void DataParameter::set_source(const char* value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.DataParameter.source)
}
inline void DataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.DataParameter.source)
}
inline ::std::string* DataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.DataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.DataParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.DataParameter.source)
}

// optional uint32 batch_size = 4;
inline bool DataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 DataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.batch_size)
  return batch_size_;
}
inline void DataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.batch_size)
}

// optional uint32 rand_skip = 7 [default = 0];
inline bool DataParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
inline ::google::protobuf::uint32 DataParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.rand_skip)
  return rand_skip_;
}
inline void DataParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.rand_skip)
}

// optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];
inline bool DataParameter::has_backend() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DataParameter::set_has_backend() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DataParameter::clear_has_backend() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DataParameter::clear_backend() {
  backend_ = 0;
  clear_has_backend();
}
inline ::caffe::DataParameter_DB DataParameter::backend() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.backend)
  return static_cast< ::caffe::DataParameter_DB >(backend_);
}
inline void DataParameter::set_backend(::caffe::DataParameter_DB value) {
  assert(::caffe::DataParameter_DB_IsValid(value));
  set_has_backend();
  backend_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.backend)
}

// optional float scale = 2 [default = 1];
inline bool DataParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DataParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DataParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DataParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float DataParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.scale)
  return scale_;
}
inline void DataParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.scale)
}

// optional string mean_file = 3;
inline bool DataParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DataParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DataParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DataParameter::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mean_file();
}
inline const ::std::string& DataParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.mean_file)
  return mean_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.DataParameter.mean_file)
}
inline void DataParameter::set_mean_file(const char* value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.DataParameter.mean_file)
}
inline void DataParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.DataParameter.mean_file)
}
inline ::std::string* DataParameter::mutable_mean_file() {
  set_has_mean_file();
  // @@protoc_insertion_point(field_mutable:caffe.DataParameter.mean_file)
  return mean_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:caffe.DataParameter.mean_file)
  clear_has_mean_file();
  return mean_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file != NULL) {
    set_has_mean_file();
  } else {
    clear_has_mean_file();
  }
  mean_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.DataParameter.mean_file)
}

// optional uint32 crop_size = 5 [default = 0];
inline bool DataParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DataParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DataParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DataParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
inline ::google::protobuf::uint32 DataParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.crop_size)
  return crop_size_;
}
inline void DataParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.crop_size)
}

// optional bool mirror = 6 [default = false];
inline bool DataParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DataParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DataParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DataParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool DataParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.mirror)
  return mirror_;
}
inline void DataParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.mirror)
}

// optional bool force_encoded_color = 9 [default = false];
inline bool DataParameter::has_force_encoded_color() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DataParameter::set_has_force_encoded_color() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DataParameter::clear_has_force_encoded_color() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DataParameter::clear_force_encoded_color() {
  force_encoded_color_ = false;
  clear_has_force_encoded_color();
}
inline bool DataParameter::force_encoded_color() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.force_encoded_color)
  return force_encoded_color_;
}
inline void DataParameter::set_force_encoded_color(bool value) {
  set_has_force_encoded_color();
  force_encoded_color_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.force_encoded_color)
}

// optional uint32 prefetch = 10 [default = 4];
inline bool DataParameter::has_prefetch() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DataParameter::set_has_prefetch() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DataParameter::clear_has_prefetch() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DataParameter::clear_prefetch() {
  prefetch_ = 4u;
  clear_has_prefetch();
}
inline ::google::protobuf::uint32 DataParameter::prefetch() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.prefetch)
  return prefetch_;
}
inline void DataParameter::set_prefetch(::google::protobuf::uint32 value) {
  set_has_prefetch();
  prefetch_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.prefetch)
}

inline const DataParameter* DataParameter::internal_default_instance() {
  return &DataParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// DropoutParameter

// optional float dropout_ratio = 1 [default = 0.5];
inline bool DropoutParameter::has_dropout_ratio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DropoutParameter::set_has_dropout_ratio() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DropoutParameter::clear_has_dropout_ratio() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DropoutParameter::clear_dropout_ratio() {
  dropout_ratio_ = 0.5f;
  clear_has_dropout_ratio();
}
inline float DropoutParameter::dropout_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.DropoutParameter.dropout_ratio)
  return dropout_ratio_;
}
inline void DropoutParameter::set_dropout_ratio(float value) {
  set_has_dropout_ratio();
  dropout_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.DropoutParameter.dropout_ratio)
}

inline const DropoutParameter* DropoutParameter::internal_default_instance() {
  return &DropoutParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// DummyDataParameter

// repeated .caffe.FillerParameter data_filler = 1;
inline int DummyDataParameter::data_filler_size() const {
  return data_filler_.size();
}
inline void DummyDataParameter::clear_data_filler() {
  data_filler_.Clear();
}
inline const ::caffe::FillerParameter& DummyDataParameter::data_filler(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.data_filler)
  return data_filler_.Get(index);
}
inline ::caffe::FillerParameter* DummyDataParameter::mutable_data_filler(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.DummyDataParameter.data_filler)
  return data_filler_.Mutable(index);
}
inline ::caffe::FillerParameter* DummyDataParameter::add_data_filler() {
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.data_filler)
  return data_filler_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::FillerParameter >*
DummyDataParameter::mutable_data_filler() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.data_filler)
  return &data_filler_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::FillerParameter >&
DummyDataParameter::data_filler() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.data_filler)
  return data_filler_;
}

// repeated .caffe.BlobShape shape = 6;
inline int DummyDataParameter::shape_size() const {
  return shape_.size();
}
inline void DummyDataParameter::clear_shape() {
  shape_.Clear();
}
inline const ::caffe::BlobShape& DummyDataParameter::shape(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.shape)
  return shape_.Get(index);
}
inline ::caffe::BlobShape* DummyDataParameter::mutable_shape(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.DummyDataParameter.shape)
  return shape_.Mutable(index);
}
inline ::caffe::BlobShape* DummyDataParameter::add_shape() {
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.shape)
  return shape_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
DummyDataParameter::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.shape)
  return &shape_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
DummyDataParameter::shape() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.shape)
  return shape_;
}

// repeated uint32 num = 2;
inline int DummyDataParameter::num_size() const {
  return num_.size();
}
inline void DummyDataParameter::clear_num() {
  num_.Clear();
}
inline ::google::protobuf::uint32 DummyDataParameter::num(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.num)
  return num_.Get(index);
}
inline void DummyDataParameter::set_num(int index, ::google::protobuf::uint32 value) {
  num_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DummyDataParameter.num)
}
inline void DummyDataParameter::add_num(::google::protobuf::uint32 value) {
  num_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.num)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DummyDataParameter::num() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.num)
  return num_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DummyDataParameter::mutable_num() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.num)
  return &num_;
}

// repeated uint32 channels = 3;
inline int DummyDataParameter::channels_size() const {
  return channels_.size();
}
inline void DummyDataParameter::clear_channels() {
  channels_.Clear();
}
inline ::google::protobuf::uint32 DummyDataParameter::channels(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.channels)
  return channels_.Get(index);
}
inline void DummyDataParameter::set_channels(int index, ::google::protobuf::uint32 value) {
  channels_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DummyDataParameter.channels)
}
inline void DummyDataParameter::add_channels(::google::protobuf::uint32 value) {
  channels_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.channels)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DummyDataParameter::channels() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.channels)
  return channels_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DummyDataParameter::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.channels)
  return &channels_;
}

// repeated uint32 height = 4;
inline int DummyDataParameter::height_size() const {
  return height_.size();
}
inline void DummyDataParameter::clear_height() {
  height_.Clear();
}
inline ::google::protobuf::uint32 DummyDataParameter::height(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.height)
  return height_.Get(index);
}
inline void DummyDataParameter::set_height(int index, ::google::protobuf::uint32 value) {
  height_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DummyDataParameter.height)
}
inline void DummyDataParameter::add_height(::google::protobuf::uint32 value) {
  height_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.height)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DummyDataParameter::height() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.height)
  return height_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DummyDataParameter::mutable_height() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.height)
  return &height_;
}

// repeated uint32 width = 5;
inline int DummyDataParameter::width_size() const {
  return width_.size();
}
inline void DummyDataParameter::clear_width() {
  width_.Clear();
}
inline ::google::protobuf::uint32 DummyDataParameter::width(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.width)
  return width_.Get(index);
}
inline void DummyDataParameter::set_width(int index, ::google::protobuf::uint32 value) {
  width_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DummyDataParameter.width)
}
inline void DummyDataParameter::add_width(::google::protobuf::uint32 value) {
  width_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.width)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DummyDataParameter::width() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.width)
  return width_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DummyDataParameter::mutable_width() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.width)
  return &width_;
}

inline const DummyDataParameter* DummyDataParameter::internal_default_instance() {
  return &DummyDataParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// EltwiseParameter

// optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
inline bool EltwiseParameter::has_operation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EltwiseParameter::set_has_operation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EltwiseParameter::clear_has_operation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EltwiseParameter::clear_operation() {
  operation_ = 1;
  clear_has_operation();
}
inline ::caffe::EltwiseParameter_EltwiseOp EltwiseParameter::operation() const {
  // @@protoc_insertion_point(field_get:caffe.EltwiseParameter.operation)
  return static_cast< ::caffe::EltwiseParameter_EltwiseOp >(operation_);
}
inline void EltwiseParameter::set_operation(::caffe::EltwiseParameter_EltwiseOp value) {
  assert(::caffe::EltwiseParameter_EltwiseOp_IsValid(value));
  set_has_operation();
  operation_ = value;
  // @@protoc_insertion_point(field_set:caffe.EltwiseParameter.operation)
}

// repeated float coeff = 2;
inline int EltwiseParameter::coeff_size() const {
  return coeff_.size();
}
inline void EltwiseParameter::clear_coeff() {
  coeff_.Clear();
}
inline float EltwiseParameter::coeff(int index) const {
  // @@protoc_insertion_point(field_get:caffe.EltwiseParameter.coeff)
  return coeff_.Get(index);
}
inline void EltwiseParameter::set_coeff(int index, float value) {
  coeff_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.EltwiseParameter.coeff)
}
inline void EltwiseParameter::add_coeff(float value) {
  coeff_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.EltwiseParameter.coeff)
}
inline const ::google::protobuf::RepeatedField< float >&
EltwiseParameter::coeff() const {
  // @@protoc_insertion_point(field_list:caffe.EltwiseParameter.coeff)
  return coeff_;
}
inline ::google::protobuf::RepeatedField< float >*
EltwiseParameter::mutable_coeff() {
  // @@protoc_insertion_point(field_mutable_list:caffe.EltwiseParameter.coeff)
  return &coeff_;
}

// optional bool stable_prod_grad = 3 [default = true];
inline bool EltwiseParameter::has_stable_prod_grad() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EltwiseParameter::set_has_stable_prod_grad() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EltwiseParameter::clear_has_stable_prod_grad() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EltwiseParameter::clear_stable_prod_grad() {
  stable_prod_grad_ = true;
  clear_has_stable_prod_grad();
}
inline bool EltwiseParameter::stable_prod_grad() const {
  // @@protoc_insertion_point(field_get:caffe.EltwiseParameter.stable_prod_grad)
  return stable_prod_grad_;
}
inline void EltwiseParameter::set_stable_prod_grad(bool value) {
  set_has_stable_prod_grad();
  stable_prod_grad_ = value;
  // @@protoc_insertion_point(field_set:caffe.EltwiseParameter.stable_prod_grad)
}

inline const EltwiseParameter* EltwiseParameter::internal_default_instance() {
  return &EltwiseParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// ELUParameter

// optional float alpha = 1 [default = 1];
inline bool ELUParameter::has_alpha() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ELUParameter::set_has_alpha() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ELUParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ELUParameter::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
inline float ELUParameter::alpha() const {
  // @@protoc_insertion_point(field_get:caffe.ELUParameter.alpha)
  return alpha_;
}
inline void ELUParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:caffe.ELUParameter.alpha)
}

inline const ELUParameter* ELUParameter::internal_default_instance() {
  return &ELUParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// EmbedParameter

// optional uint32 num_output = 1;
inline bool EmbedParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EmbedParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EmbedParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EmbedParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 EmbedParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.EmbedParameter.num_output)
  return num_output_;
}
inline void EmbedParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.EmbedParameter.num_output)
}

// optional uint32 input_dim = 2;
inline bool EmbedParameter::has_input_dim() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EmbedParameter::set_has_input_dim() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EmbedParameter::clear_has_input_dim() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EmbedParameter::clear_input_dim() {
  input_dim_ = 0u;
  clear_has_input_dim();
}
inline ::google::protobuf::uint32 EmbedParameter::input_dim() const {
  // @@protoc_insertion_point(field_get:caffe.EmbedParameter.input_dim)
  return input_dim_;
}
inline void EmbedParameter::set_input_dim(::google::protobuf::uint32 value) {
  set_has_input_dim();
  input_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.EmbedParameter.input_dim)
}

// optional bool bias_term = 3 [default = true];
inline bool EmbedParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EmbedParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EmbedParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EmbedParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
inline bool EmbedParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.EmbedParameter.bias_term)
  return bias_term_;
}
inline void EmbedParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.EmbedParameter.bias_term)
}

// optional .caffe.FillerParameter weight_filler = 4;
inline bool EmbedParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EmbedParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EmbedParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EmbedParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
inline const ::caffe::FillerParameter& EmbedParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.EmbedParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
inline ::caffe::FillerParameter* EmbedParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.EmbedParameter.weight_filler)
  return weight_filler_;
}
inline ::caffe::FillerParameter* EmbedParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.EmbedParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline void EmbedParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.EmbedParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 5;
inline bool EmbedParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EmbedParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EmbedParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EmbedParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& EmbedParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.EmbedParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
inline ::caffe::FillerParameter* EmbedParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.EmbedParameter.bias_filler)
  return bias_filler_;
}
inline ::caffe::FillerParameter* EmbedParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.EmbedParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void EmbedParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.EmbedParameter.bias_filler)
}

inline const EmbedParameter* EmbedParameter::internal_default_instance() {
  return &EmbedParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// ExpParameter

// optional float base = 1 [default = -1];
inline bool ExpParameter::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExpParameter::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExpParameter::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExpParameter::clear_base() {
  base_ = -1;
  clear_has_base();
}
inline float ExpParameter::base() const {
  // @@protoc_insertion_point(field_get:caffe.ExpParameter.base)
  return base_;
}
inline void ExpParameter::set_base(float value) {
  set_has_base();
  base_ = value;
  // @@protoc_insertion_point(field_set:caffe.ExpParameter.base)
}

// optional float scale = 2 [default = 1];
inline bool ExpParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExpParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExpParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExpParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float ExpParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.ExpParameter.scale)
  return scale_;
}
inline void ExpParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ExpParameter.scale)
}

// optional float shift = 3 [default = 0];
inline bool ExpParameter::has_shift() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExpParameter::set_has_shift() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExpParameter::clear_has_shift() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExpParameter::clear_shift() {
  shift_ = 0;
  clear_has_shift();
}
inline float ExpParameter::shift() const {
  // @@protoc_insertion_point(field_get:caffe.ExpParameter.shift)
  return shift_;
}
inline void ExpParameter::set_shift(float value) {
  set_has_shift();
  shift_ = value;
  // @@protoc_insertion_point(field_set:caffe.ExpParameter.shift)
}

inline const ExpParameter* ExpParameter::internal_default_instance() {
  return &ExpParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// FlattenParameter

// optional int32 axis = 1 [default = 1];
inline bool FlattenParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FlattenParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FlattenParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FlattenParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 FlattenParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.FlattenParameter.axis)
  return axis_;
}
inline void FlattenParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.FlattenParameter.axis)
}

// optional int32 end_axis = 2 [default = -1];
inline bool FlattenParameter::has_end_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FlattenParameter::set_has_end_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FlattenParameter::clear_has_end_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FlattenParameter::clear_end_axis() {
  end_axis_ = -1;
  clear_has_end_axis();
}
inline ::google::protobuf::int32 FlattenParameter::end_axis() const {
  // @@protoc_insertion_point(field_get:caffe.FlattenParameter.end_axis)
  return end_axis_;
}
inline void FlattenParameter::set_end_axis(::google::protobuf::int32 value) {
  set_has_end_axis();
  end_axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.FlattenParameter.end_axis)
}

inline const FlattenParameter* FlattenParameter::internal_default_instance() {
  return &FlattenParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// HDF5DataParameter

// optional string source = 1;
inline bool HDF5DataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HDF5DataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HDF5DataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HDF5DataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
inline const ::std::string& HDF5DataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.HDF5DataParameter.source)
  return source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDF5DataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.HDF5DataParameter.source)
}
inline void HDF5DataParameter::set_source(const char* value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.HDF5DataParameter.source)
}
inline void HDF5DataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.HDF5DataParameter.source)
}
inline ::std::string* HDF5DataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.HDF5DataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDF5DataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.HDF5DataParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDF5DataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.HDF5DataParameter.source)
}

// optional uint32 batch_size = 2;
inline bool HDF5DataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HDF5DataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HDF5DataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HDF5DataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 HDF5DataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.HDF5DataParameter.batch_size)
  return batch_size_;
}
inline void HDF5DataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.HDF5DataParameter.batch_size)
}

// optional bool shuffle = 3 [default = false];
inline bool HDF5DataParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HDF5DataParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HDF5DataParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HDF5DataParameter::clear_shuffle() {
  shuffle_ = false;
  clear_has_shuffle();
}
inline bool HDF5DataParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:caffe.HDF5DataParameter.shuffle)
  return shuffle_;
}
inline void HDF5DataParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:caffe.HDF5DataParameter.shuffle)
}

inline const HDF5DataParameter* HDF5DataParameter::internal_default_instance() {
  return &HDF5DataParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// HDF5OutputParameter

// optional string file_name = 1;
inline bool HDF5OutputParameter::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HDF5OutputParameter::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HDF5OutputParameter::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HDF5OutputParameter::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
inline const ::std::string& HDF5OutputParameter::file_name() const {
  // @@protoc_insertion_point(field_get:caffe.HDF5OutputParameter.file_name)
  return file_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDF5OutputParameter::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.HDF5OutputParameter.file_name)
}
inline void HDF5OutputParameter::set_file_name(const char* value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.HDF5OutputParameter.file_name)
}
inline void HDF5OutputParameter::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.HDF5OutputParameter.file_name)
}
inline ::std::string* HDF5OutputParameter::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:caffe.HDF5OutputParameter.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDF5OutputParameter::release_file_name() {
  // @@protoc_insertion_point(field_release:caffe.HDF5OutputParameter.file_name)
  clear_has_file_name();
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDF5OutputParameter::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:caffe.HDF5OutputParameter.file_name)
}

inline const HDF5OutputParameter* HDF5OutputParameter::internal_default_instance() {
  return &HDF5OutputParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// HingeLossParameter

// optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];
inline bool HingeLossParameter::has_norm() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HingeLossParameter::set_has_norm() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HingeLossParameter::clear_has_norm() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HingeLossParameter::clear_norm() {
  norm_ = 1;
  clear_has_norm();
}
inline ::caffe::HingeLossParameter_Norm HingeLossParameter::norm() const {
  // @@protoc_insertion_point(field_get:caffe.HingeLossParameter.norm)
  return static_cast< ::caffe::HingeLossParameter_Norm >(norm_);
}
inline void HingeLossParameter::set_norm(::caffe::HingeLossParameter_Norm value) {
  assert(::caffe::HingeLossParameter_Norm_IsValid(value));
  set_has_norm();
  norm_ = value;
  // @@protoc_insertion_point(field_set:caffe.HingeLossParameter.norm)
}

inline const HingeLossParameter* HingeLossParameter::internal_default_instance() {
  return &HingeLossParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// ImageDataParameter

// optional string source = 1;
inline bool ImageDataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageDataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImageDataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImageDataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
inline const ::std::string& ImageDataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.source)
  return source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageDataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.source)
}
inline void ImageDataParameter::set_source(const char* value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataParameter.source)
}
inline void ImageDataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataParameter.source)
}
inline ::std::string* ImageDataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageDataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.ImageDataParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageDataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDataParameter.source)
}

// optional uint32 batch_size = 4 [default = 1];
inline bool ImageDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImageDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImageDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImageDataParameter::clear_batch_size() {
  batch_size_ = 1u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 ImageDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.batch_size)
  return batch_size_;
}
inline void ImageDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.batch_size)
}

// optional uint32 rand_skip = 7 [default = 0];
inline bool ImageDataParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImageDataParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImageDataParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImageDataParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
inline ::google::protobuf::uint32 ImageDataParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.rand_skip)
  return rand_skip_;
}
inline void ImageDataParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.rand_skip)
}

// optional bool shuffle = 8 [default = false];
inline bool ImageDataParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ImageDataParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ImageDataParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ImageDataParameter::clear_shuffle() {
  shuffle_ = false;
  clear_has_shuffle();
}
inline bool ImageDataParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.shuffle)
  return shuffle_;
}
inline void ImageDataParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.shuffle)
}

// optional uint32 new_height = 9 [default = 0];
inline bool ImageDataParameter::has_new_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ImageDataParameter::set_has_new_height() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ImageDataParameter::clear_has_new_height() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ImageDataParameter::clear_new_height() {
  new_height_ = 0u;
  clear_has_new_height();
}
inline ::google::protobuf::uint32 ImageDataParameter::new_height() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.new_height)
  return new_height_;
}
inline void ImageDataParameter::set_new_height(::google::protobuf::uint32 value) {
  set_has_new_height();
  new_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.new_height)
}

// optional uint32 new_width = 10 [default = 0];
inline bool ImageDataParameter::has_new_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ImageDataParameter::set_has_new_width() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ImageDataParameter::clear_has_new_width() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ImageDataParameter::clear_new_width() {
  new_width_ = 0u;
  clear_has_new_width();
}
inline ::google::protobuf::uint32 ImageDataParameter::new_width() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.new_width)
  return new_width_;
}
inline void ImageDataParameter::set_new_width(::google::protobuf::uint32 value) {
  set_has_new_width();
  new_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.new_width)
}

// optional bool is_color = 11 [default = true];
inline bool ImageDataParameter::has_is_color() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ImageDataParameter::set_has_is_color() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ImageDataParameter::clear_has_is_color() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ImageDataParameter::clear_is_color() {
  is_color_ = true;
  clear_has_is_color();
}
inline bool ImageDataParameter::is_color() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.is_color)
  return is_color_;
}
inline void ImageDataParameter::set_is_color(bool value) {
  set_has_is_color();
  is_color_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.is_color)
}

// optional float scale = 2 [default = 1];
inline bool ImageDataParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ImageDataParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ImageDataParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ImageDataParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float ImageDataParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.scale)
  return scale_;
}
inline void ImageDataParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.scale)
}

// optional string mean_file = 3;
inline bool ImageDataParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ImageDataParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ImageDataParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ImageDataParameter::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mean_file();
}
inline const ::std::string& ImageDataParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.mean_file)
  return mean_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageDataParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.mean_file)
}
inline void ImageDataParameter::set_mean_file(const char* value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataParameter.mean_file)
}
inline void ImageDataParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataParameter.mean_file)
}
inline ::std::string* ImageDataParameter::mutable_mean_file() {
  set_has_mean_file();
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataParameter.mean_file)
  return mean_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageDataParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:caffe.ImageDataParameter.mean_file)
  clear_has_mean_file();
  return mean_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageDataParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file != NULL) {
    set_has_mean_file();
  } else {
    clear_has_mean_file();
  }
  mean_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDataParameter.mean_file)
}

// optional uint32 crop_size = 5 [default = 0];
inline bool ImageDataParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ImageDataParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ImageDataParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ImageDataParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
inline ::google::protobuf::uint32 ImageDataParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.crop_size)
  return crop_size_;
}
inline void ImageDataParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.crop_size)
}

// optional bool mirror = 6 [default = false];
inline bool ImageDataParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ImageDataParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ImageDataParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ImageDataParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool ImageDataParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.mirror)
  return mirror_;
}
inline void ImageDataParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.mirror)
}

// optional string root_folder = 12 [default = ""];
inline bool ImageDataParameter::has_root_folder() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ImageDataParameter::set_has_root_folder() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ImageDataParameter::clear_has_root_folder() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ImageDataParameter::clear_root_folder() {
  root_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_root_folder();
}
inline const ::std::string& ImageDataParameter::root_folder() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.root_folder)
  return root_folder_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageDataParameter::set_root_folder(const ::std::string& value) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.root_folder)
}
inline void ImageDataParameter::set_root_folder(const char* value) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataParameter.root_folder)
}
inline void ImageDataParameter::set_root_folder(const char* value, size_t size) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataParameter.root_folder)
}
inline ::std::string* ImageDataParameter::mutable_root_folder() {
  set_has_root_folder();
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataParameter.root_folder)
  return root_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageDataParameter::release_root_folder() {
  // @@protoc_insertion_point(field_release:caffe.ImageDataParameter.root_folder)
  clear_has_root_folder();
  return root_folder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageDataParameter::set_allocated_root_folder(::std::string* root_folder) {
  if (root_folder != NULL) {
    set_has_root_folder();
  } else {
    clear_has_root_folder();
  }
  root_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), root_folder);
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDataParameter.root_folder)
}

inline const ImageDataParameter* ImageDataParameter::internal_default_instance() {
  return &ImageDataParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// InfogainLossParameter

// optional string source = 1;
inline bool InfogainLossParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InfogainLossParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InfogainLossParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InfogainLossParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
inline const ::std::string& InfogainLossParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.InfogainLossParameter.source)
  return source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfogainLossParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.InfogainLossParameter.source)
}
inline void InfogainLossParameter::set_source(const char* value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.InfogainLossParameter.source)
}
inline void InfogainLossParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.InfogainLossParameter.source)
}
inline ::std::string* InfogainLossParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.InfogainLossParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InfogainLossParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.InfogainLossParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfogainLossParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.InfogainLossParameter.source)
}

// optional int32 axis = 2 [default = 1];
inline bool InfogainLossParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InfogainLossParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InfogainLossParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InfogainLossParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 InfogainLossParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.InfogainLossParameter.axis)
  return axis_;
}
inline void InfogainLossParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.InfogainLossParameter.axis)
}

inline const InfogainLossParameter* InfogainLossParameter::internal_default_instance() {
  return &InfogainLossParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// InnerProductParameter

// optional uint32 num_output = 1;
inline bool InnerProductParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InnerProductParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InnerProductParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InnerProductParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 InnerProductParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.num_output)
  return num_output_;
}
inline void InnerProductParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerProductParameter.num_output)
}

// optional bool bias_term = 2 [default = true];
inline bool InnerProductParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InnerProductParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InnerProductParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InnerProductParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
inline bool InnerProductParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.bias_term)
  return bias_term_;
}
inline void InnerProductParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerProductParameter.bias_term)
}

// optional .caffe.FillerParameter weight_filler = 3;
inline bool InnerProductParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InnerProductParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InnerProductParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InnerProductParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
inline const ::caffe::FillerParameter& InnerProductParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
inline ::caffe::FillerParameter* InnerProductParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.InnerProductParameter.weight_filler)
  return weight_filler_;
}
inline ::caffe::FillerParameter* InnerProductParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.InnerProductParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline void InnerProductParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.InnerProductParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 4;
inline bool InnerProductParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InnerProductParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InnerProductParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InnerProductParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& InnerProductParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
inline ::caffe::FillerParameter* InnerProductParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.InnerProductParameter.bias_filler)
  return bias_filler_;
}
inline ::caffe::FillerParameter* InnerProductParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.InnerProductParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void InnerProductParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.InnerProductParameter.bias_filler)
}

// optional int32 axis = 5 [default = 1];
inline bool InnerProductParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InnerProductParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InnerProductParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InnerProductParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 InnerProductParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.axis)
  return axis_;
}
inline void InnerProductParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerProductParameter.axis)
}

// optional bool transpose = 6 [default = false];
inline bool InnerProductParameter::has_transpose() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void InnerProductParameter::set_has_transpose() {
  _has_bits_[0] |= 0x00000020u;
}
inline void InnerProductParameter::clear_has_transpose() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void InnerProductParameter::clear_transpose() {
  transpose_ = false;
  clear_has_transpose();
}
inline bool InnerProductParameter::transpose() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.transpose)
  return transpose_;
}
inline void InnerProductParameter::set_transpose(bool value) {
  set_has_transpose();
  transpose_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerProductParameter.transpose)
}

inline const InnerProductParameter* InnerProductParameter::internal_default_instance() {
  return &InnerProductParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// InputParameter

// repeated .caffe.BlobShape shape = 1;
inline int InputParameter::shape_size() const {
  return shape_.size();
}
inline void InputParameter::clear_shape() {
  shape_.Clear();
}
inline const ::caffe::BlobShape& InputParameter::shape(int index) const {
  // @@protoc_insertion_point(field_get:caffe.InputParameter.shape)
  return shape_.Get(index);
}
inline ::caffe::BlobShape* InputParameter::mutable_shape(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.InputParameter.shape)
  return shape_.Mutable(index);
}
inline ::caffe::BlobShape* InputParameter::add_shape() {
  // @@protoc_insertion_point(field_add:caffe.InputParameter.shape)
  return shape_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
InputParameter::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:caffe.InputParameter.shape)
  return &shape_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
InputParameter::shape() const {
  // @@protoc_insertion_point(field_list:caffe.InputParameter.shape)
  return shape_;
}

inline const InputParameter* InputParameter::internal_default_instance() {
  return &InputParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// LogParameter

// optional float base = 1 [default = -1];
inline bool LogParameter::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogParameter::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogParameter::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogParameter::clear_base() {
  base_ = -1;
  clear_has_base();
}
inline float LogParameter::base() const {
  // @@protoc_insertion_point(field_get:caffe.LogParameter.base)
  return base_;
}
inline void LogParameter::set_base(float value) {
  set_has_base();
  base_ = value;
  // @@protoc_insertion_point(field_set:caffe.LogParameter.base)
}

// optional float scale = 2 [default = 1];
inline bool LogParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float LogParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.LogParameter.scale)
  return scale_;
}
inline void LogParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.LogParameter.scale)
}

// optional float shift = 3 [default = 0];
inline bool LogParameter::has_shift() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogParameter::set_has_shift() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogParameter::clear_has_shift() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogParameter::clear_shift() {
  shift_ = 0;
  clear_has_shift();
}
inline float LogParameter::shift() const {
  // @@protoc_insertion_point(field_get:caffe.LogParameter.shift)
  return shift_;
}
inline void LogParameter::set_shift(float value) {
  set_has_shift();
  shift_ = value;
  // @@protoc_insertion_point(field_set:caffe.LogParameter.shift)
}

inline const LogParameter* LogParameter::internal_default_instance() {
  return &LogParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// LRNParameter

// optional uint32 local_size = 1 [default = 5];
inline bool LRNParameter::has_local_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LRNParameter::set_has_local_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LRNParameter::clear_has_local_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LRNParameter::clear_local_size() {
  local_size_ = 5u;
  clear_has_local_size();
}
inline ::google::protobuf::uint32 LRNParameter::local_size() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.local_size)
  return local_size_;
}
inline void LRNParameter::set_local_size(::google::protobuf::uint32 value) {
  set_has_local_size();
  local_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.local_size)
}

// optional float alpha = 2 [default = 1];
inline bool LRNParameter::has_alpha() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LRNParameter::set_has_alpha() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LRNParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LRNParameter::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
inline float LRNParameter::alpha() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.alpha)
  return alpha_;
}
inline void LRNParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.alpha)
}

// optional float beta = 3 [default = 0.75];
inline bool LRNParameter::has_beta() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LRNParameter::set_has_beta() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LRNParameter::clear_has_beta() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LRNParameter::clear_beta() {
  beta_ = 0.75f;
  clear_has_beta();
}
inline float LRNParameter::beta() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.beta)
  return beta_;
}
inline void LRNParameter::set_beta(float value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.beta)
}

// optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
inline bool LRNParameter::has_norm_region() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LRNParameter::set_has_norm_region() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LRNParameter::clear_has_norm_region() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LRNParameter::clear_norm_region() {
  norm_region_ = 0;
  clear_has_norm_region();
}
inline ::caffe::LRNParameter_NormRegion LRNParameter::norm_region() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.norm_region)
  return static_cast< ::caffe::LRNParameter_NormRegion >(norm_region_);
}
inline void LRNParameter::set_norm_region(::caffe::LRNParameter_NormRegion value) {
  assert(::caffe::LRNParameter_NormRegion_IsValid(value));
  set_has_norm_region();
  norm_region_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.norm_region)
}

// optional float k = 5 [default = 1];
inline bool LRNParameter::has_k() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LRNParameter::set_has_k() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LRNParameter::clear_has_k() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LRNParameter::clear_k() {
  k_ = 1;
  clear_has_k();
}
inline float LRNParameter::k() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.k)
  return k_;
}
inline void LRNParameter::set_k(float value) {
  set_has_k();
  k_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.k)
}

// optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
inline bool LRNParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LRNParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LRNParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LRNParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::LRNParameter_Engine LRNParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.engine)
  return static_cast< ::caffe::LRNParameter_Engine >(engine_);
}
inline void LRNParameter::set_engine(::caffe::LRNParameter_Engine value) {
  assert(::caffe::LRNParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.engine)
}

inline const LRNParameter* LRNParameter::internal_default_instance() {
  return &LRNParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// MemoryDataParameter

// optional uint32 batch_size = 1;
inline bool MemoryDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemoryDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MemoryDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MemoryDataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 MemoryDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.MemoryDataParameter.batch_size)
  return batch_size_;
}
inline void MemoryDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.MemoryDataParameter.batch_size)
}

// optional uint32 channels = 2;
inline bool MemoryDataParameter::has_channels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MemoryDataParameter::set_has_channels() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MemoryDataParameter::clear_has_channels() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MemoryDataParameter::clear_channels() {
  channels_ = 0u;
  clear_has_channels();
}
inline ::google::protobuf::uint32 MemoryDataParameter::channels() const {
  // @@protoc_insertion_point(field_get:caffe.MemoryDataParameter.channels)
  return channels_;
}
inline void MemoryDataParameter::set_channels(::google::protobuf::uint32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.MemoryDataParameter.channels)
}

// optional uint32 height = 3;
inline bool MemoryDataParameter::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MemoryDataParameter::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MemoryDataParameter::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MemoryDataParameter::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 MemoryDataParameter::height() const {
  // @@protoc_insertion_point(field_get:caffe.MemoryDataParameter.height)
  return height_;
}
inline void MemoryDataParameter::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.MemoryDataParameter.height)
}

// optional uint32 width = 4;
inline bool MemoryDataParameter::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MemoryDataParameter::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MemoryDataParameter::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MemoryDataParameter::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 MemoryDataParameter::width() const {
  // @@protoc_insertion_point(field_get:caffe.MemoryDataParameter.width)
  return width_;
}
inline void MemoryDataParameter::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.MemoryDataParameter.width)
}

inline const MemoryDataParameter* MemoryDataParameter::internal_default_instance() {
  return &MemoryDataParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// MVNParameter

// optional bool normalize_variance = 1 [default = true];
inline bool MVNParameter::has_normalize_variance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MVNParameter::set_has_normalize_variance() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MVNParameter::clear_has_normalize_variance() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MVNParameter::clear_normalize_variance() {
  normalize_variance_ = true;
  clear_has_normalize_variance();
}
inline bool MVNParameter::normalize_variance() const {
  // @@protoc_insertion_point(field_get:caffe.MVNParameter.normalize_variance)
  return normalize_variance_;
}
inline void MVNParameter::set_normalize_variance(bool value) {
  set_has_normalize_variance();
  normalize_variance_ = value;
  // @@protoc_insertion_point(field_set:caffe.MVNParameter.normalize_variance)
}

// optional bool across_channels = 2 [default = false];
inline bool MVNParameter::has_across_channels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MVNParameter::set_has_across_channels() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MVNParameter::clear_has_across_channels() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MVNParameter::clear_across_channels() {
  across_channels_ = false;
  clear_has_across_channels();
}
inline bool MVNParameter::across_channels() const {
  // @@protoc_insertion_point(field_get:caffe.MVNParameter.across_channels)
  return across_channels_;
}
inline void MVNParameter::set_across_channels(bool value) {
  set_has_across_channels();
  across_channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.MVNParameter.across_channels)
}

// optional float eps = 3 [default = 1e-009];
inline bool MVNParameter::has_eps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MVNParameter::set_has_eps() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MVNParameter::clear_has_eps() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MVNParameter::clear_eps() {
  eps_ = 1e-009f;
  clear_has_eps();
}
inline float MVNParameter::eps() const {
  // @@protoc_insertion_point(field_get:caffe.MVNParameter.eps)
  return eps_;
}
inline void MVNParameter::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:caffe.MVNParameter.eps)
}

inline const MVNParameter* MVNParameter::internal_default_instance() {
  return &MVNParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// ParameterParameter

// optional .caffe.BlobShape shape = 1;
inline bool ParameterParameter::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParameterParameter::set_has_shape() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParameterParameter::clear_has_shape() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParameterParameter::clear_shape() {
  if (shape_ != NULL) shape_->::caffe::BlobShape::Clear();
  clear_has_shape();
}
inline const ::caffe::BlobShape& ParameterParameter::shape() const {
  // @@protoc_insertion_point(field_get:caffe.ParameterParameter.shape)
  return shape_ != NULL ? *shape_
                         : *::caffe::BlobShape::internal_default_instance();
}
inline ::caffe::BlobShape* ParameterParameter::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) {
    shape_ = new ::caffe::BlobShape;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ParameterParameter.shape)
  return shape_;
}
inline ::caffe::BlobShape* ParameterParameter::release_shape() {
  // @@protoc_insertion_point(field_release:caffe.ParameterParameter.shape)
  clear_has_shape();
  ::caffe::BlobShape* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline void ParameterParameter::set_allocated_shape(::caffe::BlobShape* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ParameterParameter.shape)
}

inline const ParameterParameter* ParameterParameter::internal_default_instance() {
  return &ParameterParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// PoolingParameter

// optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
inline bool PoolingParameter::has_pool() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PoolingParameter::set_has_pool() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PoolingParameter::clear_has_pool() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PoolingParameter::clear_pool() {
  pool_ = 0;
  clear_has_pool();
}
inline ::caffe::PoolingParameter_PoolMethod PoolingParameter::pool() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.pool)
  return static_cast< ::caffe::PoolingParameter_PoolMethod >(pool_);
}
inline void PoolingParameter::set_pool(::caffe::PoolingParameter_PoolMethod value) {
  assert(::caffe::PoolingParameter_PoolMethod_IsValid(value));
  set_has_pool();
  pool_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.pool)
}

// optional uint32 pad = 4 [default = 0];
inline bool PoolingParameter::has_pad() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PoolingParameter::set_has_pad() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PoolingParameter::clear_has_pad() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PoolingParameter::clear_pad() {
  pad_ = 0u;
  clear_has_pad();
}
inline ::google::protobuf::uint32 PoolingParameter::pad() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.pad)
  return pad_;
}
inline void PoolingParameter::set_pad(::google::protobuf::uint32 value) {
  set_has_pad();
  pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.pad)
}

// optional uint32 pad_h = 9 [default = 0];
inline bool PoolingParameter::has_pad_h() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PoolingParameter::set_has_pad_h() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PoolingParameter::clear_has_pad_h() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PoolingParameter::clear_pad_h() {
  pad_h_ = 0u;
  clear_has_pad_h();
}
inline ::google::protobuf::uint32 PoolingParameter::pad_h() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.pad_h)
  return pad_h_;
}
inline void PoolingParameter::set_pad_h(::google::protobuf::uint32 value) {
  set_has_pad_h();
  pad_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.pad_h)
}

// optional uint32 pad_w = 10 [default = 0];
inline bool PoolingParameter::has_pad_w() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PoolingParameter::set_has_pad_w() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PoolingParameter::clear_has_pad_w() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PoolingParameter::clear_pad_w() {
  pad_w_ = 0u;
  clear_has_pad_w();
}
inline ::google::protobuf::uint32 PoolingParameter::pad_w() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.pad_w)
  return pad_w_;
}
inline void PoolingParameter::set_pad_w(::google::protobuf::uint32 value) {
  set_has_pad_w();
  pad_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.pad_w)
}

// optional uint32 kernel_size = 2;
inline bool PoolingParameter::has_kernel_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PoolingParameter::set_has_kernel_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PoolingParameter::clear_has_kernel_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PoolingParameter::clear_kernel_size() {
  kernel_size_ = 0u;
  clear_has_kernel_size();
}
inline ::google::protobuf::uint32 PoolingParameter::kernel_size() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.kernel_size)
  return kernel_size_;
}
inline void PoolingParameter::set_kernel_size(::google::protobuf::uint32 value) {
  set_has_kernel_size();
  kernel_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.kernel_size)
}

// optional uint32 kernel_h = 5;
inline bool PoolingParameter::has_kernel_h() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PoolingParameter::set_has_kernel_h() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PoolingParameter::clear_has_kernel_h() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PoolingParameter::clear_kernel_h() {
  kernel_h_ = 0u;
  clear_has_kernel_h();
}
inline ::google::protobuf::uint32 PoolingParameter::kernel_h() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.kernel_h)
  return kernel_h_;
}
inline void PoolingParameter::set_kernel_h(::google::protobuf::uint32 value) {
  set_has_kernel_h();
  kernel_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.kernel_h)
}

// optional uint32 kernel_w = 6;
inline bool PoolingParameter::has_kernel_w() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PoolingParameter::set_has_kernel_w() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PoolingParameter::clear_has_kernel_w() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PoolingParameter::clear_kernel_w() {
  kernel_w_ = 0u;
  clear_has_kernel_w();
}
inline ::google::protobuf::uint32 PoolingParameter::kernel_w() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.kernel_w)
  return kernel_w_;
}
inline void PoolingParameter::set_kernel_w(::google::protobuf::uint32 value) {
  set_has_kernel_w();
  kernel_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.kernel_w)
}

// optional uint32 stride = 3 [default = 1];
inline bool PoolingParameter::has_stride() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PoolingParameter::set_has_stride() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PoolingParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PoolingParameter::clear_stride() {
  stride_ = 1u;
  clear_has_stride();
}
inline ::google::protobuf::uint32 PoolingParameter::stride() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.stride)
  return stride_;
}
inline void PoolingParameter::set_stride(::google::protobuf::uint32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.stride)
}

// optional uint32 stride_h = 7;
inline bool PoolingParameter::has_stride_h() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PoolingParameter::set_has_stride_h() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PoolingParameter::clear_has_stride_h() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PoolingParameter::clear_stride_h() {
  stride_h_ = 0u;
  clear_has_stride_h();
}
inline ::google::protobuf::uint32 PoolingParameter::stride_h() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.stride_h)
  return stride_h_;
}
inline void PoolingParameter::set_stride_h(::google::protobuf::uint32 value) {
  set_has_stride_h();
  stride_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.stride_h)
}

// optional uint32 stride_w = 8;
inline bool PoolingParameter::has_stride_w() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PoolingParameter::set_has_stride_w() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PoolingParameter::clear_has_stride_w() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PoolingParameter::clear_stride_w() {
  stride_w_ = 0u;
  clear_has_stride_w();
}
inline ::google::protobuf::uint32 PoolingParameter::stride_w() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.stride_w)
  return stride_w_;
}
inline void PoolingParameter::set_stride_w(::google::protobuf::uint32 value) {
  set_has_stride_w();
  stride_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.stride_w)
}

// optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
inline bool PoolingParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PoolingParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PoolingParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PoolingParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::PoolingParameter_Engine PoolingParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.engine)
  return static_cast< ::caffe::PoolingParameter_Engine >(engine_);
}
inline void PoolingParameter::set_engine(::caffe::PoolingParameter_Engine value) {
  assert(::caffe::PoolingParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.engine)
}

// optional bool global_pooling = 12 [default = false];
inline bool PoolingParameter::has_global_pooling() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PoolingParameter::set_has_global_pooling() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PoolingParameter::clear_has_global_pooling() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PoolingParameter::clear_global_pooling() {
  global_pooling_ = false;
  clear_has_global_pooling();
}
inline bool PoolingParameter::global_pooling() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.global_pooling)
  return global_pooling_;
}
inline void PoolingParameter::set_global_pooling(bool value) {
  set_has_global_pooling();
  global_pooling_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.global_pooling)
}

inline const PoolingParameter* PoolingParameter::internal_default_instance() {
  return &PoolingParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// PowerParameter

// optional float power = 1 [default = 1];
inline bool PowerParameter::has_power() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PowerParameter::set_has_power() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PowerParameter::clear_has_power() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PowerParameter::clear_power() {
  power_ = 1;
  clear_has_power();
}
inline float PowerParameter::power() const {
  // @@protoc_insertion_point(field_get:caffe.PowerParameter.power)
  return power_;
}
inline void PowerParameter::set_power(float value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:caffe.PowerParameter.power)
}

// optional float scale = 2 [default = 1];
inline bool PowerParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PowerParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PowerParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PowerParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float PowerParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.PowerParameter.scale)
  return scale_;
}
inline void PowerParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.PowerParameter.scale)
}

// optional float shift = 3 [default = 0];
inline bool PowerParameter::has_shift() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PowerParameter::set_has_shift() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PowerParameter::clear_has_shift() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PowerParameter::clear_shift() {
  shift_ = 0;
  clear_has_shift();
}
inline float PowerParameter::shift() const {
  // @@protoc_insertion_point(field_get:caffe.PowerParameter.shift)
  return shift_;
}
inline void PowerParameter::set_shift(float value) {
  set_has_shift();
  shift_ = value;
  // @@protoc_insertion_point(field_set:caffe.PowerParameter.shift)
}

inline const PowerParameter* PowerParameter::internal_default_instance() {
  return &PowerParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// PythonParameter

// optional string module = 1;
inline bool PythonParameter::has_module() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PythonParameter::set_has_module() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PythonParameter::clear_has_module() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PythonParameter::clear_module() {
  module_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_module();
}
inline const ::std::string& PythonParameter::module() const {
  // @@protoc_insertion_point(field_get:caffe.PythonParameter.module)
  return module_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PythonParameter::set_module(const ::std::string& value) {
  set_has_module();
  module_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PythonParameter.module)
}
inline void PythonParameter::set_module(const char* value) {
  set_has_module();
  module_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PythonParameter.module)
}
inline void PythonParameter::set_module(const char* value, size_t size) {
  set_has_module();
  module_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PythonParameter.module)
}
inline ::std::string* PythonParameter::mutable_module() {
  set_has_module();
  // @@protoc_insertion_point(field_mutable:caffe.PythonParameter.module)
  return module_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PythonParameter::release_module() {
  // @@protoc_insertion_point(field_release:caffe.PythonParameter.module)
  clear_has_module();
  return module_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PythonParameter::set_allocated_module(::std::string* module) {
  if (module != NULL) {
    set_has_module();
  } else {
    clear_has_module();
  }
  module_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), module);
  // @@protoc_insertion_point(field_set_allocated:caffe.PythonParameter.module)
}

// optional string layer = 2;
inline bool PythonParameter::has_layer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PythonParameter::set_has_layer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PythonParameter::clear_has_layer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PythonParameter::clear_layer() {
  layer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_layer();
}
inline const ::std::string& PythonParameter::layer() const {
  // @@protoc_insertion_point(field_get:caffe.PythonParameter.layer)
  return layer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PythonParameter::set_layer(const ::std::string& value) {
  set_has_layer();
  layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PythonParameter.layer)
}
inline void PythonParameter::set_layer(const char* value) {
  set_has_layer();
  layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PythonParameter.layer)
}
inline void PythonParameter::set_layer(const char* value, size_t size) {
  set_has_layer();
  layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PythonParameter.layer)
}
inline ::std::string* PythonParameter::mutable_layer() {
  set_has_layer();
  // @@protoc_insertion_point(field_mutable:caffe.PythonParameter.layer)
  return layer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PythonParameter::release_layer() {
  // @@protoc_insertion_point(field_release:caffe.PythonParameter.layer)
  clear_has_layer();
  return layer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PythonParameter::set_allocated_layer(::std::string* layer) {
  if (layer != NULL) {
    set_has_layer();
  } else {
    clear_has_layer();
  }
  layer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), layer);
  // @@protoc_insertion_point(field_set_allocated:caffe.PythonParameter.layer)
}

// optional string param_str = 3 [default = ""];
inline bool PythonParameter::has_param_str() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PythonParameter::set_has_param_str() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PythonParameter::clear_has_param_str() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PythonParameter::clear_param_str() {
  param_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_param_str();
}
inline const ::std::string& PythonParameter::param_str() const {
  // @@protoc_insertion_point(field_get:caffe.PythonParameter.param_str)
  return param_str_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PythonParameter::set_param_str(const ::std::string& value) {
  set_has_param_str();
  param_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PythonParameter.param_str)
}
inline void PythonParameter::set_param_str(const char* value) {
  set_has_param_str();
  param_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PythonParameter.param_str)
}
inline void PythonParameter::set_param_str(const char* value, size_t size) {
  set_has_param_str();
  param_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PythonParameter.param_str)
}
inline ::std::string* PythonParameter::mutable_param_str() {
  set_has_param_str();
  // @@protoc_insertion_point(field_mutable:caffe.PythonParameter.param_str)
  return param_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PythonParameter::release_param_str() {
  // @@protoc_insertion_point(field_release:caffe.PythonParameter.param_str)
  clear_has_param_str();
  return param_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PythonParameter::set_allocated_param_str(::std::string* param_str) {
  if (param_str != NULL) {
    set_has_param_str();
  } else {
    clear_has_param_str();
  }
  param_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), param_str);
  // @@protoc_insertion_point(field_set_allocated:caffe.PythonParameter.param_str)
}

// optional bool share_in_parallel = 4 [default = false];
inline bool PythonParameter::has_share_in_parallel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PythonParameter::set_has_share_in_parallel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PythonParameter::clear_has_share_in_parallel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PythonParameter::clear_share_in_parallel() {
  share_in_parallel_ = false;
  clear_has_share_in_parallel();
}
inline bool PythonParameter::share_in_parallel() const {
  // @@protoc_insertion_point(field_get:caffe.PythonParameter.share_in_parallel)
  return share_in_parallel_;
}
inline void PythonParameter::set_share_in_parallel(bool value) {
  set_has_share_in_parallel();
  share_in_parallel_ = value;
  // @@protoc_insertion_point(field_set:caffe.PythonParameter.share_in_parallel)
}

inline const PythonParameter* PythonParameter::internal_default_instance() {
  return &PythonParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// RecurrentParameter

// optional uint32 num_output = 1 [default = 0];
inline bool RecurrentParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecurrentParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecurrentParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecurrentParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 RecurrentParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.RecurrentParameter.num_output)
  return num_output_;
}
inline void RecurrentParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.RecurrentParameter.num_output)
}

// optional .caffe.FillerParameter weight_filler = 2;
inline bool RecurrentParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecurrentParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecurrentParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecurrentParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
inline const ::caffe::FillerParameter& RecurrentParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.RecurrentParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
inline ::caffe::FillerParameter* RecurrentParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.RecurrentParameter.weight_filler)
  return weight_filler_;
}
inline ::caffe::FillerParameter* RecurrentParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.RecurrentParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline void RecurrentParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.RecurrentParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 3;
inline bool RecurrentParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecurrentParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecurrentParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecurrentParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& RecurrentParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.RecurrentParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
inline ::caffe::FillerParameter* RecurrentParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.RecurrentParameter.bias_filler)
  return bias_filler_;
}
inline ::caffe::FillerParameter* RecurrentParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.RecurrentParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void RecurrentParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.RecurrentParameter.bias_filler)
}

// optional bool debug_info = 4 [default = false];
inline bool RecurrentParameter::has_debug_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RecurrentParameter::set_has_debug_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RecurrentParameter::clear_has_debug_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RecurrentParameter::clear_debug_info() {
  debug_info_ = false;
  clear_has_debug_info();
}
inline bool RecurrentParameter::debug_info() const {
  // @@protoc_insertion_point(field_get:caffe.RecurrentParameter.debug_info)
  return debug_info_;
}
inline void RecurrentParameter::set_debug_info(bool value) {
  set_has_debug_info();
  debug_info_ = value;
  // @@protoc_insertion_point(field_set:caffe.RecurrentParameter.debug_info)
}

// optional bool expose_hidden = 5 [default = false];
inline bool RecurrentParameter::has_expose_hidden() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RecurrentParameter::set_has_expose_hidden() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RecurrentParameter::clear_has_expose_hidden() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RecurrentParameter::clear_expose_hidden() {
  expose_hidden_ = false;
  clear_has_expose_hidden();
}
inline bool RecurrentParameter::expose_hidden() const {
  // @@protoc_insertion_point(field_get:caffe.RecurrentParameter.expose_hidden)
  return expose_hidden_;
}
inline void RecurrentParameter::set_expose_hidden(bool value) {
  set_has_expose_hidden();
  expose_hidden_ = value;
  // @@protoc_insertion_point(field_set:caffe.RecurrentParameter.expose_hidden)
}

inline const RecurrentParameter* RecurrentParameter::internal_default_instance() {
  return &RecurrentParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// ReductionParameter

// optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
inline bool ReductionParameter::has_operation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReductionParameter::set_has_operation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReductionParameter::clear_has_operation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReductionParameter::clear_operation() {
  operation_ = 1;
  clear_has_operation();
}
inline ::caffe::ReductionParameter_ReductionOp ReductionParameter::operation() const {
  // @@protoc_insertion_point(field_get:caffe.ReductionParameter.operation)
  return static_cast< ::caffe::ReductionParameter_ReductionOp >(operation_);
}
inline void ReductionParameter::set_operation(::caffe::ReductionParameter_ReductionOp value) {
  assert(::caffe::ReductionParameter_ReductionOp_IsValid(value));
  set_has_operation();
  operation_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReductionParameter.operation)
}

// optional int32 axis = 2 [default = 0];
inline bool ReductionParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReductionParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReductionParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReductionParameter::clear_axis() {
  axis_ = 0;
  clear_has_axis();
}
inline ::google::protobuf::int32 ReductionParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ReductionParameter.axis)
  return axis_;
}
inline void ReductionParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReductionParameter.axis)
}

// optional float coeff = 3 [default = 1];
inline bool ReductionParameter::has_coeff() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReductionParameter::set_has_coeff() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReductionParameter::clear_has_coeff() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReductionParameter::clear_coeff() {
  coeff_ = 1;
  clear_has_coeff();
}
inline float ReductionParameter::coeff() const {
  // @@protoc_insertion_point(field_get:caffe.ReductionParameter.coeff)
  return coeff_;
}
inline void ReductionParameter::set_coeff(float value) {
  set_has_coeff();
  coeff_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReductionParameter.coeff)
}

inline const ReductionParameter* ReductionParameter::internal_default_instance() {
  return &ReductionParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// ReLUParameter

// optional float negative_slope = 1 [default = 0];
inline bool ReLUParameter::has_negative_slope() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReLUParameter::set_has_negative_slope() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReLUParameter::clear_has_negative_slope() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReLUParameter::clear_negative_slope() {
  negative_slope_ = 0;
  clear_has_negative_slope();
}
inline float ReLUParameter::negative_slope() const {
  // @@protoc_insertion_point(field_get:caffe.ReLUParameter.negative_slope)
  return negative_slope_;
}
inline void ReLUParameter::set_negative_slope(float value) {
  set_has_negative_slope();
  negative_slope_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReLUParameter.negative_slope)
}

// optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
inline bool ReLUParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReLUParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReLUParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReLUParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::ReLUParameter_Engine ReLUParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.ReLUParameter.engine)
  return static_cast< ::caffe::ReLUParameter_Engine >(engine_);
}
inline void ReLUParameter::set_engine(::caffe::ReLUParameter_Engine value) {
  assert(::caffe::ReLUParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReLUParameter.engine)
}

inline const ReLUParameter* ReLUParameter::internal_default_instance() {
  return &ReLUParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// ReshapeParameter

// optional .caffe.BlobShape shape = 1;
inline bool ReshapeParameter::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReshapeParameter::set_has_shape() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReshapeParameter::clear_has_shape() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReshapeParameter::clear_shape() {
  if (shape_ != NULL) shape_->::caffe::BlobShape::Clear();
  clear_has_shape();
}
inline const ::caffe::BlobShape& ReshapeParameter::shape() const {
  // @@protoc_insertion_point(field_get:caffe.ReshapeParameter.shape)
  return shape_ != NULL ? *shape_
                         : *::caffe::BlobShape::internal_default_instance();
}
inline ::caffe::BlobShape* ReshapeParameter::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) {
    shape_ = new ::caffe::BlobShape;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ReshapeParameter.shape)
  return shape_;
}
inline ::caffe::BlobShape* ReshapeParameter::release_shape() {
  // @@protoc_insertion_point(field_release:caffe.ReshapeParameter.shape)
  clear_has_shape();
  ::caffe::BlobShape* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline void ReshapeParameter::set_allocated_shape(::caffe::BlobShape* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ReshapeParameter.shape)
}

// optional int32 axis = 2 [default = 0];
inline bool ReshapeParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReshapeParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReshapeParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReshapeParameter::clear_axis() {
  axis_ = 0;
  clear_has_axis();
}
inline ::google::protobuf::int32 ReshapeParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ReshapeParameter.axis)
  return axis_;
}
inline void ReshapeParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReshapeParameter.axis)
}

// optional int32 num_axes = 3 [default = -1];
inline bool ReshapeParameter::has_num_axes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReshapeParameter::set_has_num_axes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReshapeParameter::clear_has_num_axes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReshapeParameter::clear_num_axes() {
  num_axes_ = -1;
  clear_has_num_axes();
}
inline ::google::protobuf::int32 ReshapeParameter::num_axes() const {
  // @@protoc_insertion_point(field_get:caffe.ReshapeParameter.num_axes)
  return num_axes_;
}
inline void ReshapeParameter::set_num_axes(::google::protobuf::int32 value) {
  set_has_num_axes();
  num_axes_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReshapeParameter.num_axes)
}

inline const ReshapeParameter* ReshapeParameter::internal_default_instance() {
  return &ReshapeParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// ScaleParameter

// optional int32 axis = 1 [default = 1];
inline bool ScaleParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScaleParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScaleParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScaleParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 ScaleParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.axis)
  return axis_;
}
inline void ScaleParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ScaleParameter.axis)
}

// optional int32 num_axes = 2 [default = 1];
inline bool ScaleParameter::has_num_axes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScaleParameter::set_has_num_axes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScaleParameter::clear_has_num_axes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScaleParameter::clear_num_axes() {
  num_axes_ = 1;
  clear_has_num_axes();
}
inline ::google::protobuf::int32 ScaleParameter::num_axes() const {
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.num_axes)
  return num_axes_;
}
inline void ScaleParameter::set_num_axes(::google::protobuf::int32 value) {
  set_has_num_axes();
  num_axes_ = value;
  // @@protoc_insertion_point(field_set:caffe.ScaleParameter.num_axes)
}

// optional .caffe.FillerParameter filler = 3;
inline bool ScaleParameter::has_filler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ScaleParameter::set_has_filler() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ScaleParameter::clear_has_filler() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ScaleParameter::clear_filler() {
  if (filler_ != NULL) filler_->::caffe::FillerParameter::Clear();
  clear_has_filler();
}
inline const ::caffe::FillerParameter& ScaleParameter::filler() const {
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.filler)
  return filler_ != NULL ? *filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
inline ::caffe::FillerParameter* ScaleParameter::mutable_filler() {
  set_has_filler();
  if (filler_ == NULL) {
    filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ScaleParameter.filler)
  return filler_;
}
inline ::caffe::FillerParameter* ScaleParameter::release_filler() {
  // @@protoc_insertion_point(field_release:caffe.ScaleParameter.filler)
  clear_has_filler();
  ::caffe::FillerParameter* temp = filler_;
  filler_ = NULL;
  return temp;
}
inline void ScaleParameter::set_allocated_filler(::caffe::FillerParameter* filler) {
  delete filler_;
  filler_ = filler;
  if (filler) {
    set_has_filler();
  } else {
    clear_has_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ScaleParameter.filler)
}

// optional bool bias_term = 4 [default = false];
inline bool ScaleParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ScaleParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ScaleParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ScaleParameter::clear_bias_term() {
  bias_term_ = false;
  clear_has_bias_term();
}
inline bool ScaleParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.bias_term)
  return bias_term_;
}
inline void ScaleParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.ScaleParameter.bias_term)
}

// optional .caffe.FillerParameter bias_filler = 5;
inline bool ScaleParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ScaleParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ScaleParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ScaleParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& ScaleParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
inline ::caffe::FillerParameter* ScaleParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ScaleParameter.bias_filler)
  return bias_filler_;
}
inline ::caffe::FillerParameter* ScaleParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.ScaleParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void ScaleParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ScaleParameter.bias_filler)
}

inline const ScaleParameter* ScaleParameter::internal_default_instance() {
  return &ScaleParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// SigmoidParameter

// optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
inline bool SigmoidParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SigmoidParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SigmoidParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SigmoidParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::SigmoidParameter_Engine SigmoidParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.SigmoidParameter.engine)
  return static_cast< ::caffe::SigmoidParameter_Engine >(engine_);
}
inline void SigmoidParameter::set_engine(::caffe::SigmoidParameter_Engine value) {
  assert(::caffe::SigmoidParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.SigmoidParameter.engine)
}

inline const SigmoidParameter* SigmoidParameter::internal_default_instance() {
  return &SigmoidParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// SliceParameter

// optional int32 axis = 3 [default = 1];
inline bool SliceParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SliceParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SliceParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SliceParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 SliceParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.SliceParameter.axis)
  return axis_;
}
inline void SliceParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.SliceParameter.axis)
}

// repeated uint32 slice_point = 2;
inline int SliceParameter::slice_point_size() const {
  return slice_point_.size();
}
inline void SliceParameter::clear_slice_point() {
  slice_point_.Clear();
}
inline ::google::protobuf::uint32 SliceParameter::slice_point(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SliceParameter.slice_point)
  return slice_point_.Get(index);
}
inline void SliceParameter::set_slice_point(int index, ::google::protobuf::uint32 value) {
  slice_point_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SliceParameter.slice_point)
}
inline void SliceParameter::add_slice_point(::google::protobuf::uint32 value) {
  slice_point_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SliceParameter.slice_point)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SliceParameter::slice_point() const {
  // @@protoc_insertion_point(field_list:caffe.SliceParameter.slice_point)
  return slice_point_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SliceParameter::mutable_slice_point() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SliceParameter.slice_point)
  return &slice_point_;
}

// optional uint32 slice_dim = 1 [default = 1];
inline bool SliceParameter::has_slice_dim() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SliceParameter::set_has_slice_dim() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SliceParameter::clear_has_slice_dim() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SliceParameter::clear_slice_dim() {
  slice_dim_ = 1u;
  clear_has_slice_dim();
}
inline ::google::protobuf::uint32 SliceParameter::slice_dim() const {
  // @@protoc_insertion_point(field_get:caffe.SliceParameter.slice_dim)
  return slice_dim_;
}
inline void SliceParameter::set_slice_dim(::google::protobuf::uint32 value) {
  set_has_slice_dim();
  slice_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.SliceParameter.slice_dim)
}

inline const SliceParameter* SliceParameter::internal_default_instance() {
  return &SliceParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// SoftmaxParameter

// optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
inline bool SoftmaxParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SoftmaxParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SoftmaxParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SoftmaxParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::SoftmaxParameter_Engine SoftmaxParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.SoftmaxParameter.engine)
  return static_cast< ::caffe::SoftmaxParameter_Engine >(engine_);
}
inline void SoftmaxParameter::set_engine(::caffe::SoftmaxParameter_Engine value) {
  assert(::caffe::SoftmaxParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.SoftmaxParameter.engine)
}

// optional int32 axis = 2 [default = 1];
inline bool SoftmaxParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SoftmaxParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SoftmaxParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SoftmaxParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 SoftmaxParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.SoftmaxParameter.axis)
  return axis_;
}
inline void SoftmaxParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.SoftmaxParameter.axis)
}

inline const SoftmaxParameter* SoftmaxParameter::internal_default_instance() {
  return &SoftmaxParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// TanHParameter

// optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
inline bool TanHParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TanHParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TanHParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TanHParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::TanHParameter_Engine TanHParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.TanHParameter.engine)
  return static_cast< ::caffe::TanHParameter_Engine >(engine_);
}
inline void TanHParameter::set_engine(::caffe::TanHParameter_Engine value) {
  assert(::caffe::TanHParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.TanHParameter.engine)
}

inline const TanHParameter* TanHParameter::internal_default_instance() {
  return &TanHParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// TileParameter

// optional int32 axis = 1 [default = 1];
inline bool TileParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TileParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TileParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TileParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 TileParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.TileParameter.axis)
  return axis_;
}
inline void TileParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.TileParameter.axis)
}

// optional int32 tiles = 2;
inline bool TileParameter::has_tiles() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TileParameter::set_has_tiles() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TileParameter::clear_has_tiles() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TileParameter::clear_tiles() {
  tiles_ = 0;
  clear_has_tiles();
}
inline ::google::protobuf::int32 TileParameter::tiles() const {
  // @@protoc_insertion_point(field_get:caffe.TileParameter.tiles)
  return tiles_;
}
inline void TileParameter::set_tiles(::google::protobuf::int32 value) {
  set_has_tiles();
  tiles_ = value;
  // @@protoc_insertion_point(field_set:caffe.TileParameter.tiles)
}

inline const TileParameter* TileParameter::internal_default_instance() {
  return &TileParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// ThresholdParameter

// optional float threshold = 1 [default = 0];
inline bool ThresholdParameter::has_threshold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ThresholdParameter::set_has_threshold() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ThresholdParameter::clear_has_threshold() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ThresholdParameter::clear_threshold() {
  threshold_ = 0;
  clear_has_threshold();
}
inline float ThresholdParameter::threshold() const {
  // @@protoc_insertion_point(field_get:caffe.ThresholdParameter.threshold)
  return threshold_;
}
inline void ThresholdParameter::set_threshold(float value) {
  set_has_threshold();
  threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.ThresholdParameter.threshold)
}

inline const ThresholdParameter* ThresholdParameter::internal_default_instance() {
  return &ThresholdParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// WindowDataParameter

// optional string source = 1;
inline bool WindowDataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WindowDataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WindowDataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WindowDataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
inline const ::std::string& WindowDataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.source)
  return source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WindowDataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.source)
}
inline void WindowDataParameter::set_source(const char* value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.WindowDataParameter.source)
}
inline void WindowDataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.WindowDataParameter.source)
}
inline ::std::string* WindowDataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.WindowDataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WindowDataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.WindowDataParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WindowDataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.WindowDataParameter.source)
}

// optional float scale = 2 [default = 1];
inline bool WindowDataParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WindowDataParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WindowDataParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WindowDataParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float WindowDataParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.scale)
  return scale_;
}
inline void WindowDataParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.scale)
}

// optional string mean_file = 3;
inline bool WindowDataParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WindowDataParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WindowDataParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WindowDataParameter::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mean_file();
}
inline const ::std::string& WindowDataParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.mean_file)
  return mean_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WindowDataParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.mean_file)
}
inline void WindowDataParameter::set_mean_file(const char* value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.WindowDataParameter.mean_file)
}
inline void WindowDataParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.WindowDataParameter.mean_file)
}
inline ::std::string* WindowDataParameter::mutable_mean_file() {
  set_has_mean_file();
  // @@protoc_insertion_point(field_mutable:caffe.WindowDataParameter.mean_file)
  return mean_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WindowDataParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:caffe.WindowDataParameter.mean_file)
  clear_has_mean_file();
  return mean_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WindowDataParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file != NULL) {
    set_has_mean_file();
  } else {
    clear_has_mean_file();
  }
  mean_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.WindowDataParameter.mean_file)
}

// optional uint32 batch_size = 4;
inline bool WindowDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WindowDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WindowDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WindowDataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 WindowDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.batch_size)
  return batch_size_;
}
inline void WindowDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.batch_size)
}

// optional uint32 crop_size = 5 [default = 0];
inline bool WindowDataParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WindowDataParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WindowDataParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WindowDataParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
inline ::google::protobuf::uint32 WindowDataParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.crop_size)
  return crop_size_;
}
inline void WindowDataParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.crop_size)
}

// optional bool mirror = 6 [default = false];
inline bool WindowDataParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WindowDataParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WindowDataParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WindowDataParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool WindowDataParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.mirror)
  return mirror_;
}
inline void WindowDataParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.mirror)
}

// optional float fg_threshold = 7 [default = 0.5];
inline bool WindowDataParameter::has_fg_threshold() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WindowDataParameter::set_has_fg_threshold() {
  _has_bits_[0] |= 0x00000040u;
}
inline void WindowDataParameter::clear_has_fg_threshold() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void WindowDataParameter::clear_fg_threshold() {
  fg_threshold_ = 0.5f;
  clear_has_fg_threshold();
}
inline float WindowDataParameter::fg_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.fg_threshold)
  return fg_threshold_;
}
inline void WindowDataParameter::set_fg_threshold(float value) {
  set_has_fg_threshold();
  fg_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.fg_threshold)
}

// optional float bg_threshold = 8 [default = 0.5];
inline bool WindowDataParameter::has_bg_threshold() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void WindowDataParameter::set_has_bg_threshold() {
  _has_bits_[0] |= 0x00000080u;
}
inline void WindowDataParameter::clear_has_bg_threshold() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void WindowDataParameter::clear_bg_threshold() {
  bg_threshold_ = 0.5f;
  clear_has_bg_threshold();
}
inline float WindowDataParameter::bg_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.bg_threshold)
  return bg_threshold_;
}
inline void WindowDataParameter::set_bg_threshold(float value) {
  set_has_bg_threshold();
  bg_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.bg_threshold)
}

// optional float fg_fraction = 9 [default = 0.25];
inline bool WindowDataParameter::has_fg_fraction() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void WindowDataParameter::set_has_fg_fraction() {
  _has_bits_[0] |= 0x00000100u;
}
inline void WindowDataParameter::clear_has_fg_fraction() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void WindowDataParameter::clear_fg_fraction() {
  fg_fraction_ = 0.25f;
  clear_has_fg_fraction();
}
inline float WindowDataParameter::fg_fraction() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.fg_fraction)
  return fg_fraction_;
}
inline void WindowDataParameter::set_fg_fraction(float value) {
  set_has_fg_fraction();
  fg_fraction_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.fg_fraction)
}

// optional uint32 context_pad = 10 [default = 0];
inline bool WindowDataParameter::has_context_pad() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void WindowDataParameter::set_has_context_pad() {
  _has_bits_[0] |= 0x00000200u;
}
inline void WindowDataParameter::clear_has_context_pad() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void WindowDataParameter::clear_context_pad() {
  context_pad_ = 0u;
  clear_has_context_pad();
}
inline ::google::protobuf::uint32 WindowDataParameter::context_pad() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.context_pad)
  return context_pad_;
}
inline void WindowDataParameter::set_context_pad(::google::protobuf::uint32 value) {
  set_has_context_pad();
  context_pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.context_pad)
}

// optional string crop_mode = 11 [default = "warp"];
inline bool WindowDataParameter::has_crop_mode() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void WindowDataParameter::set_has_crop_mode() {
  _has_bits_[0] |= 0x00000400u;
}
inline void WindowDataParameter::clear_has_crop_mode() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void WindowDataParameter::clear_crop_mode() {
  crop_mode_.ClearToDefaultNoArena(_default_crop_mode_);
  clear_has_crop_mode();
}
inline const ::std::string& WindowDataParameter::crop_mode() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.crop_mode)
  return crop_mode_.GetNoArena(_default_crop_mode_);
}
inline void WindowDataParameter::set_crop_mode(const ::std::string& value) {
  set_has_crop_mode();
  crop_mode_.SetNoArena(_default_crop_mode_, value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.crop_mode)
}
inline void WindowDataParameter::set_crop_mode(const char* value) {
  set_has_crop_mode();
  crop_mode_.SetNoArena(_default_crop_mode_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.WindowDataParameter.crop_mode)
}
inline void WindowDataParameter::set_crop_mode(const char* value, size_t size) {
  set_has_crop_mode();
  crop_mode_.SetNoArena(_default_crop_mode_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.WindowDataParameter.crop_mode)
}
inline ::std::string* WindowDataParameter::mutable_crop_mode() {
  set_has_crop_mode();
  // @@protoc_insertion_point(field_mutable:caffe.WindowDataParameter.crop_mode)
  return crop_mode_.MutableNoArena(_default_crop_mode_);
}
inline ::std::string* WindowDataParameter::release_crop_mode() {
  // @@protoc_insertion_point(field_release:caffe.WindowDataParameter.crop_mode)
  clear_has_crop_mode();
  return crop_mode_.ReleaseNoArena(_default_crop_mode_);
}
inline void WindowDataParameter::set_allocated_crop_mode(::std::string* crop_mode) {
  if (crop_mode != NULL) {
    set_has_crop_mode();
  } else {
    clear_has_crop_mode();
  }
  crop_mode_.SetAllocatedNoArena(_default_crop_mode_, crop_mode);
  // @@protoc_insertion_point(field_set_allocated:caffe.WindowDataParameter.crop_mode)
}

// optional bool cache_images = 12 [default = false];
inline bool WindowDataParameter::has_cache_images() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void WindowDataParameter::set_has_cache_images() {
  _has_bits_[0] |= 0x00000800u;
}
inline void WindowDataParameter::clear_has_cache_images() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void WindowDataParameter::clear_cache_images() {
  cache_images_ = false;
  clear_has_cache_images();
}
inline bool WindowDataParameter::cache_images() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.cache_images)
  return cache_images_;
}
inline void WindowDataParameter::set_cache_images(bool value) {
  set_has_cache_images();
  cache_images_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.cache_images)
}

// optional string root_folder = 13 [default = ""];
inline bool WindowDataParameter::has_root_folder() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void WindowDataParameter::set_has_root_folder() {
  _has_bits_[0] |= 0x00001000u;
}
inline void WindowDataParameter::clear_has_root_folder() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void WindowDataParameter::clear_root_folder() {
  root_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_root_folder();
}
inline const ::std::string& WindowDataParameter::root_folder() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.root_folder)
  return root_folder_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WindowDataParameter::set_root_folder(const ::std::string& value) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.root_folder)
}
inline void WindowDataParameter::set_root_folder(const char* value) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.WindowDataParameter.root_folder)
}
inline void WindowDataParameter::set_root_folder(const char* value, size_t size) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.WindowDataParameter.root_folder)
}
inline ::std::string* WindowDataParameter::mutable_root_folder() {
  set_has_root_folder();
  // @@protoc_insertion_point(field_mutable:caffe.WindowDataParameter.root_folder)
  return root_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WindowDataParameter::release_root_folder() {
  // @@protoc_insertion_point(field_release:caffe.WindowDataParameter.root_folder)
  clear_has_root_folder();
  return root_folder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WindowDataParameter::set_allocated_root_folder(::std::string* root_folder) {
  if (root_folder != NULL) {
    set_has_root_folder();
  } else {
    clear_has_root_folder();
  }
  root_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), root_folder);
  // @@protoc_insertion_point(field_set_allocated:caffe.WindowDataParameter.root_folder)
}

inline const WindowDataParameter* WindowDataParameter::internal_default_instance() {
  return &WindowDataParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// SPPParameter

// optional uint32 pyramid_height = 1;
inline bool SPPParameter::has_pyramid_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SPPParameter::set_has_pyramid_height() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SPPParameter::clear_has_pyramid_height() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SPPParameter::clear_pyramid_height() {
  pyramid_height_ = 0u;
  clear_has_pyramid_height();
}
inline ::google::protobuf::uint32 SPPParameter::pyramid_height() const {
  // @@protoc_insertion_point(field_get:caffe.SPPParameter.pyramid_height)
  return pyramid_height_;
}
inline void SPPParameter::set_pyramid_height(::google::protobuf::uint32 value) {
  set_has_pyramid_height();
  pyramid_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.SPPParameter.pyramid_height)
}

// optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
inline bool SPPParameter::has_pool() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SPPParameter::set_has_pool() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SPPParameter::clear_has_pool() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SPPParameter::clear_pool() {
  pool_ = 0;
  clear_has_pool();
}
inline ::caffe::SPPParameter_PoolMethod SPPParameter::pool() const {
  // @@protoc_insertion_point(field_get:caffe.SPPParameter.pool)
  return static_cast< ::caffe::SPPParameter_PoolMethod >(pool_);
}
inline void SPPParameter::set_pool(::caffe::SPPParameter_PoolMethod value) {
  assert(::caffe::SPPParameter_PoolMethod_IsValid(value));
  set_has_pool();
  pool_ = value;
  // @@protoc_insertion_point(field_set:caffe.SPPParameter.pool)
}

// optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
inline bool SPPParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SPPParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SPPParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SPPParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::SPPParameter_Engine SPPParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.SPPParameter.engine)
  return static_cast< ::caffe::SPPParameter_Engine >(engine_);
}
inline void SPPParameter::set_engine(::caffe::SPPParameter_Engine value) {
  assert(::caffe::SPPParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.SPPParameter.engine)
}

inline const SPPParameter* SPPParameter::internal_default_instance() {
  return &SPPParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// V1LayerParameter

// repeated string bottom = 2;
inline int V1LayerParameter::bottom_size() const {
  return bottom_.size();
}
inline void V1LayerParameter::clear_bottom() {
  bottom_.Clear();
}
inline const ::std::string& V1LayerParameter::bottom(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.bottom)
  return bottom_.Get(index);
}
inline ::std::string* V1LayerParameter::mutable_bottom(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.bottom)
  return bottom_.Mutable(index);
}
inline void V1LayerParameter::set_bottom(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.bottom)
  bottom_.Mutable(index)->assign(value);
}
inline void V1LayerParameter::set_bottom(int index, const char* value) {
  bottom_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.V1LayerParameter.bottom)
}
inline void V1LayerParameter::set_bottom(int index, const char* value, size_t size) {
  bottom_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.V1LayerParameter.bottom)
}
inline ::std::string* V1LayerParameter::add_bottom() {
  // @@protoc_insertion_point(field_add_mutable:caffe.V1LayerParameter.bottom)
  return bottom_.Add();
}
inline void V1LayerParameter::add_bottom(const ::std::string& value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.bottom)
}
inline void V1LayerParameter::add_bottom(const char* value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.V1LayerParameter.bottom)
}
inline void V1LayerParameter::add_bottom(const char* value, size_t size) {
  bottom_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.V1LayerParameter.bottom)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
V1LayerParameter::bottom() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.bottom)
  return bottom_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
V1LayerParameter::mutable_bottom() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.bottom)
  return &bottom_;
}

// repeated string top = 3;
inline int V1LayerParameter::top_size() const {
  return top_.size();
}
inline void V1LayerParameter::clear_top() {
  top_.Clear();
}
inline const ::std::string& V1LayerParameter::top(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.top)
  return top_.Get(index);
}
inline ::std::string* V1LayerParameter::mutable_top(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.top)
  return top_.Mutable(index);
}
inline void V1LayerParameter::set_top(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.top)
  top_.Mutable(index)->assign(value);
}
inline void V1LayerParameter::set_top(int index, const char* value) {
  top_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.V1LayerParameter.top)
}
inline void V1LayerParameter::set_top(int index, const char* value, size_t size) {
  top_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.V1LayerParameter.top)
}
inline ::std::string* V1LayerParameter::add_top() {
  // @@protoc_insertion_point(field_add_mutable:caffe.V1LayerParameter.top)
  return top_.Add();
}
inline void V1LayerParameter::add_top(const ::std::string& value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.top)
}
inline void V1LayerParameter::add_top(const char* value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.V1LayerParameter.top)
}
inline void V1LayerParameter::add_top(const char* value, size_t size) {
  top_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.V1LayerParameter.top)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
V1LayerParameter::top() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.top)
  return top_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
V1LayerParameter::mutable_top() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.top)
  return &top_;
}

// optional string name = 4;
inline bool V1LayerParameter::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void V1LayerParameter::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void V1LayerParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void V1LayerParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& V1LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void V1LayerParameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.name)
}
inline void V1LayerParameter::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V1LayerParameter.name)
}
inline void V1LayerParameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V1LayerParameter.name)
}
inline ::std::string* V1LayerParameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* V1LayerParameter::release_name() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void V1LayerParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.name)
}

// repeated .caffe.NetStateRule include = 32;
inline int V1LayerParameter::include_size() const {
  return include_.size();
}
inline void V1LayerParameter::clear_include() {
  include_.Clear();
}
inline const ::caffe::NetStateRule& V1LayerParameter::include(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.include)
  return include_.Get(index);
}
inline ::caffe::NetStateRule* V1LayerParameter::mutable_include(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.include)
  return include_.Mutable(index);
}
inline ::caffe::NetStateRule* V1LayerParameter::add_include() {
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.include)
  return include_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
V1LayerParameter::mutable_include() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.include)
  return &include_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
V1LayerParameter::include() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.include)
  return include_;
}

// repeated .caffe.NetStateRule exclude = 33;
inline int V1LayerParameter::exclude_size() const {
  return exclude_.size();
}
inline void V1LayerParameter::clear_exclude() {
  exclude_.Clear();
}
inline const ::caffe::NetStateRule& V1LayerParameter::exclude(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.exclude)
  return exclude_.Get(index);
}
inline ::caffe::NetStateRule* V1LayerParameter::mutable_exclude(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.exclude)
  return exclude_.Mutable(index);
}
inline ::caffe::NetStateRule* V1LayerParameter::add_exclude() {
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.exclude)
  return exclude_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
V1LayerParameter::mutable_exclude() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.exclude)
  return &exclude_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
V1LayerParameter::exclude() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.exclude)
  return exclude_;
}

// optional .caffe.V1LayerParameter.LayerType type = 5;
inline bool V1LayerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void V1LayerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void V1LayerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void V1LayerParameter::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::caffe::V1LayerParameter_LayerType V1LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.type)
  return static_cast< ::caffe::V1LayerParameter_LayerType >(type_);
}
inline void V1LayerParameter::set_type(::caffe::V1LayerParameter_LayerType value) {
  assert(::caffe::V1LayerParameter_LayerType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.type)
}

// repeated .caffe.BlobProto blobs = 6;
inline int V1LayerParameter::blobs_size() const {
  return blobs_.size();
}
inline void V1LayerParameter::clear_blobs() {
  blobs_.Clear();
}
inline const ::caffe::BlobProto& V1LayerParameter::blobs(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.blobs)
  return blobs_.Get(index);
}
inline ::caffe::BlobProto* V1LayerParameter::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.blobs)
  return blobs_.Mutable(index);
}
inline ::caffe::BlobProto* V1LayerParameter::add_blobs() {
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.blobs)
  return blobs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
V1LayerParameter::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.blobs)
  return &blobs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
V1LayerParameter::blobs() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.blobs)
  return blobs_;
}

// repeated string param = 1001;
inline int V1LayerParameter::param_size() const {
  return param_.size();
}
inline void V1LayerParameter::clear_param() {
  param_.Clear();
}
inline const ::std::string& V1LayerParameter::param(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.param)
  return param_.Get(index);
}
inline ::std::string* V1LayerParameter::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.param)
  return param_.Mutable(index);
}
inline void V1LayerParameter::set_param(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.param)
  param_.Mutable(index)->assign(value);
}
inline void V1LayerParameter::set_param(int index, const char* value) {
  param_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.V1LayerParameter.param)
}
inline void V1LayerParameter::set_param(int index, const char* value, size_t size) {
  param_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.V1LayerParameter.param)
}
inline ::std::string* V1LayerParameter::add_param() {
  // @@protoc_insertion_point(field_add_mutable:caffe.V1LayerParameter.param)
  return param_.Add();
}
inline void V1LayerParameter::add_param(const ::std::string& value) {
  param_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.param)
}
inline void V1LayerParameter::add_param(const char* value) {
  param_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.V1LayerParameter.param)
}
inline void V1LayerParameter::add_param(const char* value, size_t size) {
  param_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.V1LayerParameter.param)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
V1LayerParameter::param() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.param)
  return param_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
V1LayerParameter::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.param)
  return &param_;
}

// repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
inline int V1LayerParameter::blob_share_mode_size() const {
  return blob_share_mode_.size();
}
inline void V1LayerParameter::clear_blob_share_mode() {
  blob_share_mode_.Clear();
}
inline ::caffe::V1LayerParameter_DimCheckMode V1LayerParameter::blob_share_mode(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.blob_share_mode)
  return static_cast< ::caffe::V1LayerParameter_DimCheckMode >(blob_share_mode_.Get(index));
}
inline void V1LayerParameter::set_blob_share_mode(int index, ::caffe::V1LayerParameter_DimCheckMode value) {
  assert(::caffe::V1LayerParameter_DimCheckMode_IsValid(value));
  blob_share_mode_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.blob_share_mode)
}
inline void V1LayerParameter::add_blob_share_mode(::caffe::V1LayerParameter_DimCheckMode value) {
  assert(::caffe::V1LayerParameter_DimCheckMode_IsValid(value));
  blob_share_mode_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.blob_share_mode)
}
inline const ::google::protobuf::RepeatedField<int>&
V1LayerParameter::blob_share_mode() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.blob_share_mode)
  return blob_share_mode_;
}
inline ::google::protobuf::RepeatedField<int>*
V1LayerParameter::mutable_blob_share_mode() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.blob_share_mode)
  return &blob_share_mode_;
}

// repeated float blobs_lr = 7;
inline int V1LayerParameter::blobs_lr_size() const {
  return blobs_lr_.size();
}
inline void V1LayerParameter::clear_blobs_lr() {
  blobs_lr_.Clear();
}
inline float V1LayerParameter::blobs_lr(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.blobs_lr)
  return blobs_lr_.Get(index);
}
inline void V1LayerParameter::set_blobs_lr(int index, float value) {
  blobs_lr_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.blobs_lr)
}
inline void V1LayerParameter::add_blobs_lr(float value) {
  blobs_lr_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.blobs_lr)
}
inline const ::google::protobuf::RepeatedField< float >&
V1LayerParameter::blobs_lr() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.blobs_lr)
  return blobs_lr_;
}
inline ::google::protobuf::RepeatedField< float >*
V1LayerParameter::mutable_blobs_lr() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.blobs_lr)
  return &blobs_lr_;
}

// repeated float weight_decay = 8;
inline int V1LayerParameter::weight_decay_size() const {
  return weight_decay_.size();
}
inline void V1LayerParameter::clear_weight_decay() {
  weight_decay_.Clear();
}
inline float V1LayerParameter::weight_decay(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.weight_decay)
  return weight_decay_.Get(index);
}
inline void V1LayerParameter::set_weight_decay(int index, float value) {
  weight_decay_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.weight_decay)
}
inline void V1LayerParameter::add_weight_decay(float value) {
  weight_decay_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.weight_decay)
}
inline const ::google::protobuf::RepeatedField< float >&
V1LayerParameter::weight_decay() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.weight_decay)
  return weight_decay_;
}
inline ::google::protobuf::RepeatedField< float >*
V1LayerParameter::mutable_weight_decay() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.weight_decay)
  return &weight_decay_;
}

// repeated float loss_weight = 35;
inline int V1LayerParameter::loss_weight_size() const {
  return loss_weight_.size();
}
inline void V1LayerParameter::clear_loss_weight() {
  loss_weight_.Clear();
}
inline float V1LayerParameter::loss_weight(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.loss_weight)
  return loss_weight_.Get(index);
}
inline void V1LayerParameter::set_loss_weight(int index, float value) {
  loss_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.loss_weight)
}
inline void V1LayerParameter::add_loss_weight(float value) {
  loss_weight_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.loss_weight)
}
inline const ::google::protobuf::RepeatedField< float >&
V1LayerParameter::loss_weight() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.loss_weight)
  return loss_weight_;
}
inline ::google::protobuf::RepeatedField< float >*
V1LayerParameter::mutable_loss_weight() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.loss_weight)
  return &loss_weight_;
}

// optional .caffe.AccuracyParameter accuracy_param = 27;
inline bool V1LayerParameter::has_accuracy_param() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void V1LayerParameter::set_has_accuracy_param() {
  _has_bits_[0] |= 0x00001000u;
}
inline void V1LayerParameter::clear_has_accuracy_param() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void V1LayerParameter::clear_accuracy_param() {
  if (accuracy_param_ != NULL) accuracy_param_->::caffe::AccuracyParameter::Clear();
  clear_has_accuracy_param();
}
inline const ::caffe::AccuracyParameter& V1LayerParameter::accuracy_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.accuracy_param)
  return accuracy_param_ != NULL ? *accuracy_param_
                         : *::caffe::AccuracyParameter::internal_default_instance();
}
inline ::caffe::AccuracyParameter* V1LayerParameter::mutable_accuracy_param() {
  set_has_accuracy_param();
  if (accuracy_param_ == NULL) {
    accuracy_param_ = new ::caffe::AccuracyParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.accuracy_param)
  return accuracy_param_;
}
inline ::caffe::AccuracyParameter* V1LayerParameter::release_accuracy_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.accuracy_param)
  clear_has_accuracy_param();
  ::caffe::AccuracyParameter* temp = accuracy_param_;
  accuracy_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_accuracy_param(::caffe::AccuracyParameter* accuracy_param) {
  delete accuracy_param_;
  accuracy_param_ = accuracy_param;
  if (accuracy_param) {
    set_has_accuracy_param();
  } else {
    clear_has_accuracy_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.accuracy_param)
}

// optional .caffe.ArgMaxParameter argmax_param = 23;
inline bool V1LayerParameter::has_argmax_param() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void V1LayerParameter::set_has_argmax_param() {
  _has_bits_[0] |= 0x00002000u;
}
inline void V1LayerParameter::clear_has_argmax_param() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void V1LayerParameter::clear_argmax_param() {
  if (argmax_param_ != NULL) argmax_param_->::caffe::ArgMaxParameter::Clear();
  clear_has_argmax_param();
}
inline const ::caffe::ArgMaxParameter& V1LayerParameter::argmax_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.argmax_param)
  return argmax_param_ != NULL ? *argmax_param_
                         : *::caffe::ArgMaxParameter::internal_default_instance();
}
inline ::caffe::ArgMaxParameter* V1LayerParameter::mutable_argmax_param() {
  set_has_argmax_param();
  if (argmax_param_ == NULL) {
    argmax_param_ = new ::caffe::ArgMaxParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.argmax_param)
  return argmax_param_;
}
inline ::caffe::ArgMaxParameter* V1LayerParameter::release_argmax_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.argmax_param)
  clear_has_argmax_param();
  ::caffe::ArgMaxParameter* temp = argmax_param_;
  argmax_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_argmax_param(::caffe::ArgMaxParameter* argmax_param) {
  delete argmax_param_;
  argmax_param_ = argmax_param;
  if (argmax_param) {
    set_has_argmax_param();
  } else {
    clear_has_argmax_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.argmax_param)
}

// optional .caffe.ConcatParameter concat_param = 9;
inline bool V1LayerParameter::has_concat_param() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void V1LayerParameter::set_has_concat_param() {
  _has_bits_[0] |= 0x00004000u;
}
inline void V1LayerParameter::clear_has_concat_param() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void V1LayerParameter::clear_concat_param() {
  if (concat_param_ != NULL) concat_param_->::caffe::ConcatParameter::Clear();
  clear_has_concat_param();
}
inline const ::caffe::ConcatParameter& V1LayerParameter::concat_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.concat_param)
  return concat_param_ != NULL ? *concat_param_
                         : *::caffe::ConcatParameter::internal_default_instance();
}
inline ::caffe::ConcatParameter* V1LayerParameter::mutable_concat_param() {
  set_has_concat_param();
  if (concat_param_ == NULL) {
    concat_param_ = new ::caffe::ConcatParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.concat_param)
  return concat_param_;
}
inline ::caffe::ConcatParameter* V1LayerParameter::release_concat_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.concat_param)
  clear_has_concat_param();
  ::caffe::ConcatParameter* temp = concat_param_;
  concat_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_concat_param(::caffe::ConcatParameter* concat_param) {
  delete concat_param_;
  concat_param_ = concat_param;
  if (concat_param) {
    set_has_concat_param();
  } else {
    clear_has_concat_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.concat_param)
}

// optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;
inline bool V1LayerParameter::has_contrastive_loss_param() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void V1LayerParameter::set_has_contrastive_loss_param() {
  _has_bits_[0] |= 0x00008000u;
}
inline void V1LayerParameter::clear_has_contrastive_loss_param() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void V1LayerParameter::clear_contrastive_loss_param() {
  if (contrastive_loss_param_ != NULL) contrastive_loss_param_->::caffe::ContrastiveLossParameter::Clear();
  clear_has_contrastive_loss_param();
}
inline const ::caffe::ContrastiveLossParameter& V1LayerParameter::contrastive_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.contrastive_loss_param)
  return contrastive_loss_param_ != NULL ? *contrastive_loss_param_
                         : *::caffe::ContrastiveLossParameter::internal_default_instance();
}
inline ::caffe::ContrastiveLossParameter* V1LayerParameter::mutable_contrastive_loss_param() {
  set_has_contrastive_loss_param();
  if (contrastive_loss_param_ == NULL) {
    contrastive_loss_param_ = new ::caffe::ContrastiveLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.contrastive_loss_param)
  return contrastive_loss_param_;
}
inline ::caffe::ContrastiveLossParameter* V1LayerParameter::release_contrastive_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.contrastive_loss_param)
  clear_has_contrastive_loss_param();
  ::caffe::ContrastiveLossParameter* temp = contrastive_loss_param_;
  contrastive_loss_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_contrastive_loss_param(::caffe::ContrastiveLossParameter* contrastive_loss_param) {
  delete contrastive_loss_param_;
  contrastive_loss_param_ = contrastive_loss_param;
  if (contrastive_loss_param) {
    set_has_contrastive_loss_param();
  } else {
    clear_has_contrastive_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.contrastive_loss_param)
}

// optional .caffe.ConvolutionParameter convolution_param = 10;
inline bool V1LayerParameter::has_convolution_param() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void V1LayerParameter::set_has_convolution_param() {
  _has_bits_[0] |= 0x00010000u;
}
inline void V1LayerParameter::clear_has_convolution_param() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void V1LayerParameter::clear_convolution_param() {
  if (convolution_param_ != NULL) convolution_param_->::caffe::ConvolutionParameter::Clear();
  clear_has_convolution_param();
}
inline const ::caffe::ConvolutionParameter& V1LayerParameter::convolution_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.convolution_param)
  return convolution_param_ != NULL ? *convolution_param_
                         : *::caffe::ConvolutionParameter::internal_default_instance();
}
inline ::caffe::ConvolutionParameter* V1LayerParameter::mutable_convolution_param() {
  set_has_convolution_param();
  if (convolution_param_ == NULL) {
    convolution_param_ = new ::caffe::ConvolutionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.convolution_param)
  return convolution_param_;
}
inline ::caffe::ConvolutionParameter* V1LayerParameter::release_convolution_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.convolution_param)
  clear_has_convolution_param();
  ::caffe::ConvolutionParameter* temp = convolution_param_;
  convolution_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_convolution_param(::caffe::ConvolutionParameter* convolution_param) {
  delete convolution_param_;
  convolution_param_ = convolution_param;
  if (convolution_param) {
    set_has_convolution_param();
  } else {
    clear_has_convolution_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.convolution_param)
}

// optional .caffe.DataParameter data_param = 11;
inline bool V1LayerParameter::has_data_param() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void V1LayerParameter::set_has_data_param() {
  _has_bits_[0] |= 0x00020000u;
}
inline void V1LayerParameter::clear_has_data_param() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void V1LayerParameter::clear_data_param() {
  if (data_param_ != NULL) data_param_->::caffe::DataParameter::Clear();
  clear_has_data_param();
}
inline const ::caffe::DataParameter& V1LayerParameter::data_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.data_param)
  return data_param_ != NULL ? *data_param_
                         : *::caffe::DataParameter::internal_default_instance();
}
inline ::caffe::DataParameter* V1LayerParameter::mutable_data_param() {
  set_has_data_param();
  if (data_param_ == NULL) {
    data_param_ = new ::caffe::DataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.data_param)
  return data_param_;
}
inline ::caffe::DataParameter* V1LayerParameter::release_data_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.data_param)
  clear_has_data_param();
  ::caffe::DataParameter* temp = data_param_;
  data_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_data_param(::caffe::DataParameter* data_param) {
  delete data_param_;
  data_param_ = data_param;
  if (data_param) {
    set_has_data_param();
  } else {
    clear_has_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.data_param)
}

// optional .caffe.DropoutParameter dropout_param = 12;
inline bool V1LayerParameter::has_dropout_param() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void V1LayerParameter::set_has_dropout_param() {
  _has_bits_[0] |= 0x00040000u;
}
inline void V1LayerParameter::clear_has_dropout_param() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void V1LayerParameter::clear_dropout_param() {
  if (dropout_param_ != NULL) dropout_param_->::caffe::DropoutParameter::Clear();
  clear_has_dropout_param();
}
inline const ::caffe::DropoutParameter& V1LayerParameter::dropout_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.dropout_param)
  return dropout_param_ != NULL ? *dropout_param_
                         : *::caffe::DropoutParameter::internal_default_instance();
}
inline ::caffe::DropoutParameter* V1LayerParameter::mutable_dropout_param() {
  set_has_dropout_param();
  if (dropout_param_ == NULL) {
    dropout_param_ = new ::caffe::DropoutParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.dropout_param)
  return dropout_param_;
}
inline ::caffe::DropoutParameter* V1LayerParameter::release_dropout_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.dropout_param)
  clear_has_dropout_param();
  ::caffe::DropoutParameter* temp = dropout_param_;
  dropout_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_dropout_param(::caffe::DropoutParameter* dropout_param) {
  delete dropout_param_;
  dropout_param_ = dropout_param;
  if (dropout_param) {
    set_has_dropout_param();
  } else {
    clear_has_dropout_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.dropout_param)
}

// optional .caffe.DummyDataParameter dummy_data_param = 26;
inline bool V1LayerParameter::has_dummy_data_param() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void V1LayerParameter::set_has_dummy_data_param() {
  _has_bits_[0] |= 0x00080000u;
}
inline void V1LayerParameter::clear_has_dummy_data_param() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void V1LayerParameter::clear_dummy_data_param() {
  if (dummy_data_param_ != NULL) dummy_data_param_->::caffe::DummyDataParameter::Clear();
  clear_has_dummy_data_param();
}
inline const ::caffe::DummyDataParameter& V1LayerParameter::dummy_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.dummy_data_param)
  return dummy_data_param_ != NULL ? *dummy_data_param_
                         : *::caffe::DummyDataParameter::internal_default_instance();
}
inline ::caffe::DummyDataParameter* V1LayerParameter::mutable_dummy_data_param() {
  set_has_dummy_data_param();
  if (dummy_data_param_ == NULL) {
    dummy_data_param_ = new ::caffe::DummyDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.dummy_data_param)
  return dummy_data_param_;
}
inline ::caffe::DummyDataParameter* V1LayerParameter::release_dummy_data_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.dummy_data_param)
  clear_has_dummy_data_param();
  ::caffe::DummyDataParameter* temp = dummy_data_param_;
  dummy_data_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_dummy_data_param(::caffe::DummyDataParameter* dummy_data_param) {
  delete dummy_data_param_;
  dummy_data_param_ = dummy_data_param;
  if (dummy_data_param) {
    set_has_dummy_data_param();
  } else {
    clear_has_dummy_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.dummy_data_param)
}

// optional .caffe.EltwiseParameter eltwise_param = 24;
inline bool V1LayerParameter::has_eltwise_param() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void V1LayerParameter::set_has_eltwise_param() {
  _has_bits_[0] |= 0x00100000u;
}
inline void V1LayerParameter::clear_has_eltwise_param() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void V1LayerParameter::clear_eltwise_param() {
  if (eltwise_param_ != NULL) eltwise_param_->::caffe::EltwiseParameter::Clear();
  clear_has_eltwise_param();
}
inline const ::caffe::EltwiseParameter& V1LayerParameter::eltwise_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.eltwise_param)
  return eltwise_param_ != NULL ? *eltwise_param_
                         : *::caffe::EltwiseParameter::internal_default_instance();
}
inline ::caffe::EltwiseParameter* V1LayerParameter::mutable_eltwise_param() {
  set_has_eltwise_param();
  if (eltwise_param_ == NULL) {
    eltwise_param_ = new ::caffe::EltwiseParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.eltwise_param)
  return eltwise_param_;
}
inline ::caffe::EltwiseParameter* V1LayerParameter::release_eltwise_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.eltwise_param)
  clear_has_eltwise_param();
  ::caffe::EltwiseParameter* temp = eltwise_param_;
  eltwise_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_eltwise_param(::caffe::EltwiseParameter* eltwise_param) {
  delete eltwise_param_;
  eltwise_param_ = eltwise_param;
  if (eltwise_param) {
    set_has_eltwise_param();
  } else {
    clear_has_eltwise_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.eltwise_param)
}

// optional .caffe.ExpParameter exp_param = 41;
inline bool V1LayerParameter::has_exp_param() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void V1LayerParameter::set_has_exp_param() {
  _has_bits_[0] |= 0x00200000u;
}
inline void V1LayerParameter::clear_has_exp_param() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void V1LayerParameter::clear_exp_param() {
  if (exp_param_ != NULL) exp_param_->::caffe::ExpParameter::Clear();
  clear_has_exp_param();
}
inline const ::caffe::ExpParameter& V1LayerParameter::exp_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.exp_param)
  return exp_param_ != NULL ? *exp_param_
                         : *::caffe::ExpParameter::internal_default_instance();
}
inline ::caffe::ExpParameter* V1LayerParameter::mutable_exp_param() {
  set_has_exp_param();
  if (exp_param_ == NULL) {
    exp_param_ = new ::caffe::ExpParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.exp_param)
  return exp_param_;
}
inline ::caffe::ExpParameter* V1LayerParameter::release_exp_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.exp_param)
  clear_has_exp_param();
  ::caffe::ExpParameter* temp = exp_param_;
  exp_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_exp_param(::caffe::ExpParameter* exp_param) {
  delete exp_param_;
  exp_param_ = exp_param;
  if (exp_param) {
    set_has_exp_param();
  } else {
    clear_has_exp_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.exp_param)
}

// optional .caffe.HDF5DataParameter hdf5_data_param = 13;
inline bool V1LayerParameter::has_hdf5_data_param() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void V1LayerParameter::set_has_hdf5_data_param() {
  _has_bits_[0] |= 0x00400000u;
}
inline void V1LayerParameter::clear_has_hdf5_data_param() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void V1LayerParameter::clear_hdf5_data_param() {
  if (hdf5_data_param_ != NULL) hdf5_data_param_->::caffe::HDF5DataParameter::Clear();
  clear_has_hdf5_data_param();
}
inline const ::caffe::HDF5DataParameter& V1LayerParameter::hdf5_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.hdf5_data_param)
  return hdf5_data_param_ != NULL ? *hdf5_data_param_
                         : *::caffe::HDF5DataParameter::internal_default_instance();
}
inline ::caffe::HDF5DataParameter* V1LayerParameter::mutable_hdf5_data_param() {
  set_has_hdf5_data_param();
  if (hdf5_data_param_ == NULL) {
    hdf5_data_param_ = new ::caffe::HDF5DataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.hdf5_data_param)
  return hdf5_data_param_;
}
inline ::caffe::HDF5DataParameter* V1LayerParameter::release_hdf5_data_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.hdf5_data_param)
  clear_has_hdf5_data_param();
  ::caffe::HDF5DataParameter* temp = hdf5_data_param_;
  hdf5_data_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_hdf5_data_param(::caffe::HDF5DataParameter* hdf5_data_param) {
  delete hdf5_data_param_;
  hdf5_data_param_ = hdf5_data_param;
  if (hdf5_data_param) {
    set_has_hdf5_data_param();
  } else {
    clear_has_hdf5_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.hdf5_data_param)
}

// optional .caffe.HDF5OutputParameter hdf5_output_param = 14;
inline bool V1LayerParameter::has_hdf5_output_param() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void V1LayerParameter::set_has_hdf5_output_param() {
  _has_bits_[0] |= 0x00800000u;
}
inline void V1LayerParameter::clear_has_hdf5_output_param() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void V1LayerParameter::clear_hdf5_output_param() {
  if (hdf5_output_param_ != NULL) hdf5_output_param_->::caffe::HDF5OutputParameter::Clear();
  clear_has_hdf5_output_param();
}
inline const ::caffe::HDF5OutputParameter& V1LayerParameter::hdf5_output_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.hdf5_output_param)
  return hdf5_output_param_ != NULL ? *hdf5_output_param_
                         : *::caffe::HDF5OutputParameter::internal_default_instance();
}
inline ::caffe::HDF5OutputParameter* V1LayerParameter::mutable_hdf5_output_param() {
  set_has_hdf5_output_param();
  if (hdf5_output_param_ == NULL) {
    hdf5_output_param_ = new ::caffe::HDF5OutputParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.hdf5_output_param)
  return hdf5_output_param_;
}
inline ::caffe::HDF5OutputParameter* V1LayerParameter::release_hdf5_output_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.hdf5_output_param)
  clear_has_hdf5_output_param();
  ::caffe::HDF5OutputParameter* temp = hdf5_output_param_;
  hdf5_output_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param) {
  delete hdf5_output_param_;
  hdf5_output_param_ = hdf5_output_param;
  if (hdf5_output_param) {
    set_has_hdf5_output_param();
  } else {
    clear_has_hdf5_output_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.hdf5_output_param)
}

// optional .caffe.HingeLossParameter hinge_loss_param = 29;
inline bool V1LayerParameter::has_hinge_loss_param() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void V1LayerParameter::set_has_hinge_loss_param() {
  _has_bits_[0] |= 0x01000000u;
}
inline void V1LayerParameter::clear_has_hinge_loss_param() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void V1LayerParameter::clear_hinge_loss_param() {
  if (hinge_loss_param_ != NULL) hinge_loss_param_->::caffe::HingeLossParameter::Clear();
  clear_has_hinge_loss_param();
}
inline const ::caffe::HingeLossParameter& V1LayerParameter::hinge_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.hinge_loss_param)
  return hinge_loss_param_ != NULL ? *hinge_loss_param_
                         : *::caffe::HingeLossParameter::internal_default_instance();
}
inline ::caffe::HingeLossParameter* V1LayerParameter::mutable_hinge_loss_param() {
  set_has_hinge_loss_param();
  if (hinge_loss_param_ == NULL) {
    hinge_loss_param_ = new ::caffe::HingeLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.hinge_loss_param)
  return hinge_loss_param_;
}
inline ::caffe::HingeLossParameter* V1LayerParameter::release_hinge_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.hinge_loss_param)
  clear_has_hinge_loss_param();
  ::caffe::HingeLossParameter* temp = hinge_loss_param_;
  hinge_loss_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_hinge_loss_param(::caffe::HingeLossParameter* hinge_loss_param) {
  delete hinge_loss_param_;
  hinge_loss_param_ = hinge_loss_param;
  if (hinge_loss_param) {
    set_has_hinge_loss_param();
  } else {
    clear_has_hinge_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.hinge_loss_param)
}

// optional .caffe.ImageDataParameter image_data_param = 15;
inline bool V1LayerParameter::has_image_data_param() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void V1LayerParameter::set_has_image_data_param() {
  _has_bits_[0] |= 0x02000000u;
}
inline void V1LayerParameter::clear_has_image_data_param() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void V1LayerParameter::clear_image_data_param() {
  if (image_data_param_ != NULL) image_data_param_->::caffe::ImageDataParameter::Clear();
  clear_has_image_data_param();
}
inline const ::caffe::ImageDataParameter& V1LayerParameter::image_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.image_data_param)
  return image_data_param_ != NULL ? *image_data_param_
                         : *::caffe::ImageDataParameter::internal_default_instance();
}
inline ::caffe::ImageDataParameter* V1LayerParameter::mutable_image_data_param() {
  set_has_image_data_param();
  if (image_data_param_ == NULL) {
    image_data_param_ = new ::caffe::ImageDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.image_data_param)
  return image_data_param_;
}
inline ::caffe::ImageDataParameter* V1LayerParameter::release_image_data_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.image_data_param)
  clear_has_image_data_param();
  ::caffe::ImageDataParameter* temp = image_data_param_;
  image_data_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_image_data_param(::caffe::ImageDataParameter* image_data_param) {
  delete image_data_param_;
  image_data_param_ = image_data_param;
  if (image_data_param) {
    set_has_image_data_param();
  } else {
    clear_has_image_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.image_data_param)
}

// optional .caffe.InfogainLossParameter infogain_loss_param = 16;
inline bool V1LayerParameter::has_infogain_loss_param() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void V1LayerParameter::set_has_infogain_loss_param() {
  _has_bits_[0] |= 0x04000000u;
}
inline void V1LayerParameter::clear_has_infogain_loss_param() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void V1LayerParameter::clear_infogain_loss_param() {
  if (infogain_loss_param_ != NULL) infogain_loss_param_->::caffe::InfogainLossParameter::Clear();
  clear_has_infogain_loss_param();
}
inline const ::caffe::InfogainLossParameter& V1LayerParameter::infogain_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.infogain_loss_param)
  return infogain_loss_param_ != NULL ? *infogain_loss_param_
                         : *::caffe::InfogainLossParameter::internal_default_instance();
}
inline ::caffe::InfogainLossParameter* V1LayerParameter::mutable_infogain_loss_param() {
  set_has_infogain_loss_param();
  if (infogain_loss_param_ == NULL) {
    infogain_loss_param_ = new ::caffe::InfogainLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.infogain_loss_param)
  return infogain_loss_param_;
}
inline ::caffe::InfogainLossParameter* V1LayerParameter::release_infogain_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.infogain_loss_param)
  clear_has_infogain_loss_param();
  ::caffe::InfogainLossParameter* temp = infogain_loss_param_;
  infogain_loss_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_infogain_loss_param(::caffe::InfogainLossParameter* infogain_loss_param) {
  delete infogain_loss_param_;
  infogain_loss_param_ = infogain_loss_param;
  if (infogain_loss_param) {
    set_has_infogain_loss_param();
  } else {
    clear_has_infogain_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.infogain_loss_param)
}

// optional .caffe.InnerProductParameter inner_product_param = 17;
inline bool V1LayerParameter::has_inner_product_param() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void V1LayerParameter::set_has_inner_product_param() {
  _has_bits_[0] |= 0x08000000u;
}
inline void V1LayerParameter::clear_has_inner_product_param() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void V1LayerParameter::clear_inner_product_param() {
  if (inner_product_param_ != NULL) inner_product_param_->::caffe::InnerProductParameter::Clear();
  clear_has_inner_product_param();
}
inline const ::caffe::InnerProductParameter& V1LayerParameter::inner_product_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.inner_product_param)
  return inner_product_param_ != NULL ? *inner_product_param_
                         : *::caffe::InnerProductParameter::internal_default_instance();
}
inline ::caffe::InnerProductParameter* V1LayerParameter::mutable_inner_product_param() {
  set_has_inner_product_param();
  if (inner_product_param_ == NULL) {
    inner_product_param_ = new ::caffe::InnerProductParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.inner_product_param)
  return inner_product_param_;
}
inline ::caffe::InnerProductParameter* V1LayerParameter::release_inner_product_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.inner_product_param)
  clear_has_inner_product_param();
  ::caffe::InnerProductParameter* temp = inner_product_param_;
  inner_product_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_inner_product_param(::caffe::InnerProductParameter* inner_product_param) {
  delete inner_product_param_;
  inner_product_param_ = inner_product_param;
  if (inner_product_param) {
    set_has_inner_product_param();
  } else {
    clear_has_inner_product_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.inner_product_param)
}

// optional .caffe.LRNParameter lrn_param = 18;
inline bool V1LayerParameter::has_lrn_param() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void V1LayerParameter::set_has_lrn_param() {
  _has_bits_[0] |= 0x10000000u;
}
inline void V1LayerParameter::clear_has_lrn_param() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void V1LayerParameter::clear_lrn_param() {
  if (lrn_param_ != NULL) lrn_param_->::caffe::LRNParameter::Clear();
  clear_has_lrn_param();
}
inline const ::caffe::LRNParameter& V1LayerParameter::lrn_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.lrn_param)
  return lrn_param_ != NULL ? *lrn_param_
                         : *::caffe::LRNParameter::internal_default_instance();
}
inline ::caffe::LRNParameter* V1LayerParameter::mutable_lrn_param() {
  set_has_lrn_param();
  if (lrn_param_ == NULL) {
    lrn_param_ = new ::caffe::LRNParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.lrn_param)
  return lrn_param_;
}
inline ::caffe::LRNParameter* V1LayerParameter::release_lrn_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.lrn_param)
  clear_has_lrn_param();
  ::caffe::LRNParameter* temp = lrn_param_;
  lrn_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_lrn_param(::caffe::LRNParameter* lrn_param) {
  delete lrn_param_;
  lrn_param_ = lrn_param;
  if (lrn_param) {
    set_has_lrn_param();
  } else {
    clear_has_lrn_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.lrn_param)
}

// optional .caffe.MemoryDataParameter memory_data_param = 22;
inline bool V1LayerParameter::has_memory_data_param() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void V1LayerParameter::set_has_memory_data_param() {
  _has_bits_[0] |= 0x20000000u;
}
inline void V1LayerParameter::clear_has_memory_data_param() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void V1LayerParameter::clear_memory_data_param() {
  if (memory_data_param_ != NULL) memory_data_param_->::caffe::MemoryDataParameter::Clear();
  clear_has_memory_data_param();
}
inline const ::caffe::MemoryDataParameter& V1LayerParameter::memory_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.memory_data_param)
  return memory_data_param_ != NULL ? *memory_data_param_
                         : *::caffe::MemoryDataParameter::internal_default_instance();
}
inline ::caffe::MemoryDataParameter* V1LayerParameter::mutable_memory_data_param() {
  set_has_memory_data_param();
  if (memory_data_param_ == NULL) {
    memory_data_param_ = new ::caffe::MemoryDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.memory_data_param)
  return memory_data_param_;
}
inline ::caffe::MemoryDataParameter* V1LayerParameter::release_memory_data_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.memory_data_param)
  clear_has_memory_data_param();
  ::caffe::MemoryDataParameter* temp = memory_data_param_;
  memory_data_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_memory_data_param(::caffe::MemoryDataParameter* memory_data_param) {
  delete memory_data_param_;
  memory_data_param_ = memory_data_param;
  if (memory_data_param) {
    set_has_memory_data_param();
  } else {
    clear_has_memory_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.memory_data_param)
}

// optional .caffe.MVNParameter mvn_param = 34;
inline bool V1LayerParameter::has_mvn_param() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void V1LayerParameter::set_has_mvn_param() {
  _has_bits_[0] |= 0x40000000u;
}
inline void V1LayerParameter::clear_has_mvn_param() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void V1LayerParameter::clear_mvn_param() {
  if (mvn_param_ != NULL) mvn_param_->::caffe::MVNParameter::Clear();
  clear_has_mvn_param();
}
inline const ::caffe::MVNParameter& V1LayerParameter::mvn_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.mvn_param)
  return mvn_param_ != NULL ? *mvn_param_
                         : *::caffe::MVNParameter::internal_default_instance();
}
inline ::caffe::MVNParameter* V1LayerParameter::mutable_mvn_param() {
  set_has_mvn_param();
  if (mvn_param_ == NULL) {
    mvn_param_ = new ::caffe::MVNParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.mvn_param)
  return mvn_param_;
}
inline ::caffe::MVNParameter* V1LayerParameter::release_mvn_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.mvn_param)
  clear_has_mvn_param();
  ::caffe::MVNParameter* temp = mvn_param_;
  mvn_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_mvn_param(::caffe::MVNParameter* mvn_param) {
  delete mvn_param_;
  mvn_param_ = mvn_param;
  if (mvn_param) {
    set_has_mvn_param();
  } else {
    clear_has_mvn_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.mvn_param)
}

// optional .caffe.PoolingParameter pooling_param = 19;
inline bool V1LayerParameter::has_pooling_param() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void V1LayerParameter::set_has_pooling_param() {
  _has_bits_[0] |= 0x80000000u;
}
inline void V1LayerParameter::clear_has_pooling_param() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void V1LayerParameter::clear_pooling_param() {
  if (pooling_param_ != NULL) pooling_param_->::caffe::PoolingParameter::Clear();
  clear_has_pooling_param();
}
inline const ::caffe::PoolingParameter& V1LayerParameter::pooling_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.pooling_param)
  return pooling_param_ != NULL ? *pooling_param_
                         : *::caffe::PoolingParameter::internal_default_instance();
}
inline ::caffe::PoolingParameter* V1LayerParameter::mutable_pooling_param() {
  set_has_pooling_param();
  if (pooling_param_ == NULL) {
    pooling_param_ = new ::caffe::PoolingParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.pooling_param)
  return pooling_param_;
}
inline ::caffe::PoolingParameter* V1LayerParameter::release_pooling_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.pooling_param)
  clear_has_pooling_param();
  ::caffe::PoolingParameter* temp = pooling_param_;
  pooling_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_pooling_param(::caffe::PoolingParameter* pooling_param) {
  delete pooling_param_;
  pooling_param_ = pooling_param;
  if (pooling_param) {
    set_has_pooling_param();
  } else {
    clear_has_pooling_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.pooling_param)
}

// optional .caffe.PowerParameter power_param = 21;
inline bool V1LayerParameter::has_power_param() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void V1LayerParameter::set_has_power_param() {
  _has_bits_[1] |= 0x00000001u;
}
inline void V1LayerParameter::clear_has_power_param() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void V1LayerParameter::clear_power_param() {
  if (power_param_ != NULL) power_param_->::caffe::PowerParameter::Clear();
  clear_has_power_param();
}
inline const ::caffe::PowerParameter& V1LayerParameter::power_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.power_param)
  return power_param_ != NULL ? *power_param_
                         : *::caffe::PowerParameter::internal_default_instance();
}
inline ::caffe::PowerParameter* V1LayerParameter::mutable_power_param() {
  set_has_power_param();
  if (power_param_ == NULL) {
    power_param_ = new ::caffe::PowerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.power_param)
  return power_param_;
}
inline ::caffe::PowerParameter* V1LayerParameter::release_power_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.power_param)
  clear_has_power_param();
  ::caffe::PowerParameter* temp = power_param_;
  power_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_power_param(::caffe::PowerParameter* power_param) {
  delete power_param_;
  power_param_ = power_param;
  if (power_param) {
    set_has_power_param();
  } else {
    clear_has_power_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.power_param)
}

// optional .caffe.ReLUParameter relu_param = 30;
inline bool V1LayerParameter::has_relu_param() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void V1LayerParameter::set_has_relu_param() {
  _has_bits_[1] |= 0x00000002u;
}
inline void V1LayerParameter::clear_has_relu_param() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void V1LayerParameter::clear_relu_param() {
  if (relu_param_ != NULL) relu_param_->::caffe::ReLUParameter::Clear();
  clear_has_relu_param();
}
inline const ::caffe::ReLUParameter& V1LayerParameter::relu_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.relu_param)
  return relu_param_ != NULL ? *relu_param_
                         : *::caffe::ReLUParameter::internal_default_instance();
}
inline ::caffe::ReLUParameter* V1LayerParameter::mutable_relu_param() {
  set_has_relu_param();
  if (relu_param_ == NULL) {
    relu_param_ = new ::caffe::ReLUParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.relu_param)
  return relu_param_;
}
inline ::caffe::ReLUParameter* V1LayerParameter::release_relu_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.relu_param)
  clear_has_relu_param();
  ::caffe::ReLUParameter* temp = relu_param_;
  relu_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_relu_param(::caffe::ReLUParameter* relu_param) {
  delete relu_param_;
  relu_param_ = relu_param;
  if (relu_param) {
    set_has_relu_param();
  } else {
    clear_has_relu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.relu_param)
}

// optional .caffe.SigmoidParameter sigmoid_param = 38;
inline bool V1LayerParameter::has_sigmoid_param() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void V1LayerParameter::set_has_sigmoid_param() {
  _has_bits_[1] |= 0x00000004u;
}
inline void V1LayerParameter::clear_has_sigmoid_param() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void V1LayerParameter::clear_sigmoid_param() {
  if (sigmoid_param_ != NULL) sigmoid_param_->::caffe::SigmoidParameter::Clear();
  clear_has_sigmoid_param();
}
inline const ::caffe::SigmoidParameter& V1LayerParameter::sigmoid_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.sigmoid_param)
  return sigmoid_param_ != NULL ? *sigmoid_param_
                         : *::caffe::SigmoidParameter::internal_default_instance();
}
inline ::caffe::SigmoidParameter* V1LayerParameter::mutable_sigmoid_param() {
  set_has_sigmoid_param();
  if (sigmoid_param_ == NULL) {
    sigmoid_param_ = new ::caffe::SigmoidParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.sigmoid_param)
  return sigmoid_param_;
}
inline ::caffe::SigmoidParameter* V1LayerParameter::release_sigmoid_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.sigmoid_param)
  clear_has_sigmoid_param();
  ::caffe::SigmoidParameter* temp = sigmoid_param_;
  sigmoid_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_sigmoid_param(::caffe::SigmoidParameter* sigmoid_param) {
  delete sigmoid_param_;
  sigmoid_param_ = sigmoid_param;
  if (sigmoid_param) {
    set_has_sigmoid_param();
  } else {
    clear_has_sigmoid_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.sigmoid_param)
}

// optional .caffe.SoftmaxParameter softmax_param = 39;
inline bool V1LayerParameter::has_softmax_param() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void V1LayerParameter::set_has_softmax_param() {
  _has_bits_[1] |= 0x00000008u;
}
inline void V1LayerParameter::clear_has_softmax_param() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void V1LayerParameter::clear_softmax_param() {
  if (softmax_param_ != NULL) softmax_param_->::caffe::SoftmaxParameter::Clear();
  clear_has_softmax_param();
}
inline const ::caffe::SoftmaxParameter& V1LayerParameter::softmax_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.softmax_param)
  return softmax_param_ != NULL ? *softmax_param_
                         : *::caffe::SoftmaxParameter::internal_default_instance();
}
inline ::caffe::SoftmaxParameter* V1LayerParameter::mutable_softmax_param() {
  set_has_softmax_param();
  if (softmax_param_ == NULL) {
    softmax_param_ = new ::caffe::SoftmaxParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.softmax_param)
  return softmax_param_;
}
inline ::caffe::SoftmaxParameter* V1LayerParameter::release_softmax_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.softmax_param)
  clear_has_softmax_param();
  ::caffe::SoftmaxParameter* temp = softmax_param_;
  softmax_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_softmax_param(::caffe::SoftmaxParameter* softmax_param) {
  delete softmax_param_;
  softmax_param_ = softmax_param;
  if (softmax_param) {
    set_has_softmax_param();
  } else {
    clear_has_softmax_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.softmax_param)
}

// optional .caffe.SliceParameter slice_param = 31;
inline bool V1LayerParameter::has_slice_param() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void V1LayerParameter::set_has_slice_param() {
  _has_bits_[1] |= 0x00000010u;
}
inline void V1LayerParameter::clear_has_slice_param() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void V1LayerParameter::clear_slice_param() {
  if (slice_param_ != NULL) slice_param_->::caffe::SliceParameter::Clear();
  clear_has_slice_param();
}
inline const ::caffe::SliceParameter& V1LayerParameter::slice_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.slice_param)
  return slice_param_ != NULL ? *slice_param_
                         : *::caffe::SliceParameter::internal_default_instance();
}
inline ::caffe::SliceParameter* V1LayerParameter::mutable_slice_param() {
  set_has_slice_param();
  if (slice_param_ == NULL) {
    slice_param_ = new ::caffe::SliceParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.slice_param)
  return slice_param_;
}
inline ::caffe::SliceParameter* V1LayerParameter::release_slice_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.slice_param)
  clear_has_slice_param();
  ::caffe::SliceParameter* temp = slice_param_;
  slice_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_slice_param(::caffe::SliceParameter* slice_param) {
  delete slice_param_;
  slice_param_ = slice_param;
  if (slice_param) {
    set_has_slice_param();
  } else {
    clear_has_slice_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.slice_param)
}

// optional .caffe.TanHParameter tanh_param = 37;
inline bool V1LayerParameter::has_tanh_param() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void V1LayerParameter::set_has_tanh_param() {
  _has_bits_[1] |= 0x00000020u;
}
inline void V1LayerParameter::clear_has_tanh_param() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void V1LayerParameter::clear_tanh_param() {
  if (tanh_param_ != NULL) tanh_param_->::caffe::TanHParameter::Clear();
  clear_has_tanh_param();
}
inline const ::caffe::TanHParameter& V1LayerParameter::tanh_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.tanh_param)
  return tanh_param_ != NULL ? *tanh_param_
                         : *::caffe::TanHParameter::internal_default_instance();
}
inline ::caffe::TanHParameter* V1LayerParameter::mutable_tanh_param() {
  set_has_tanh_param();
  if (tanh_param_ == NULL) {
    tanh_param_ = new ::caffe::TanHParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.tanh_param)
  return tanh_param_;
}
inline ::caffe::TanHParameter* V1LayerParameter::release_tanh_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.tanh_param)
  clear_has_tanh_param();
  ::caffe::TanHParameter* temp = tanh_param_;
  tanh_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_tanh_param(::caffe::TanHParameter* tanh_param) {
  delete tanh_param_;
  tanh_param_ = tanh_param;
  if (tanh_param) {
    set_has_tanh_param();
  } else {
    clear_has_tanh_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.tanh_param)
}

// optional .caffe.ThresholdParameter threshold_param = 25;
inline bool V1LayerParameter::has_threshold_param() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void V1LayerParameter::set_has_threshold_param() {
  _has_bits_[1] |= 0x00000040u;
}
inline void V1LayerParameter::clear_has_threshold_param() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void V1LayerParameter::clear_threshold_param() {
  if (threshold_param_ != NULL) threshold_param_->::caffe::ThresholdParameter::Clear();
  clear_has_threshold_param();
}
inline const ::caffe::ThresholdParameter& V1LayerParameter::threshold_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.threshold_param)
  return threshold_param_ != NULL ? *threshold_param_
                         : *::caffe::ThresholdParameter::internal_default_instance();
}
inline ::caffe::ThresholdParameter* V1LayerParameter::mutable_threshold_param() {
  set_has_threshold_param();
  if (threshold_param_ == NULL) {
    threshold_param_ = new ::caffe::ThresholdParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.threshold_param)
  return threshold_param_;
}
inline ::caffe::ThresholdParameter* V1LayerParameter::release_threshold_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.threshold_param)
  clear_has_threshold_param();
  ::caffe::ThresholdParameter* temp = threshold_param_;
  threshold_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_threshold_param(::caffe::ThresholdParameter* threshold_param) {
  delete threshold_param_;
  threshold_param_ = threshold_param;
  if (threshold_param) {
    set_has_threshold_param();
  } else {
    clear_has_threshold_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.threshold_param)
}

// optional .caffe.WindowDataParameter window_data_param = 20;
inline bool V1LayerParameter::has_window_data_param() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void V1LayerParameter::set_has_window_data_param() {
  _has_bits_[1] |= 0x00000080u;
}
inline void V1LayerParameter::clear_has_window_data_param() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void V1LayerParameter::clear_window_data_param() {
  if (window_data_param_ != NULL) window_data_param_->::caffe::WindowDataParameter::Clear();
  clear_has_window_data_param();
}
inline const ::caffe::WindowDataParameter& V1LayerParameter::window_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.window_data_param)
  return window_data_param_ != NULL ? *window_data_param_
                         : *::caffe::WindowDataParameter::internal_default_instance();
}
inline ::caffe::WindowDataParameter* V1LayerParameter::mutable_window_data_param() {
  set_has_window_data_param();
  if (window_data_param_ == NULL) {
    window_data_param_ = new ::caffe::WindowDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.window_data_param)
  return window_data_param_;
}
inline ::caffe::WindowDataParameter* V1LayerParameter::release_window_data_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.window_data_param)
  clear_has_window_data_param();
  ::caffe::WindowDataParameter* temp = window_data_param_;
  window_data_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_window_data_param(::caffe::WindowDataParameter* window_data_param) {
  delete window_data_param_;
  window_data_param_ = window_data_param;
  if (window_data_param) {
    set_has_window_data_param();
  } else {
    clear_has_window_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.window_data_param)
}

// optional .caffe.TransformationParameter transform_param = 36;
inline bool V1LayerParameter::has_transform_param() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void V1LayerParameter::set_has_transform_param() {
  _has_bits_[1] |= 0x00000100u;
}
inline void V1LayerParameter::clear_has_transform_param() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void V1LayerParameter::clear_transform_param() {
  if (transform_param_ != NULL) transform_param_->::caffe::TransformationParameter::Clear();
  clear_has_transform_param();
}
inline const ::caffe::TransformationParameter& V1LayerParameter::transform_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.transform_param)
  return transform_param_ != NULL ? *transform_param_
                         : *::caffe::TransformationParameter::internal_default_instance();
}
inline ::caffe::TransformationParameter* V1LayerParameter::mutable_transform_param() {
  set_has_transform_param();
  if (transform_param_ == NULL) {
    transform_param_ = new ::caffe::TransformationParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.transform_param)
  return transform_param_;
}
inline ::caffe::TransformationParameter* V1LayerParameter::release_transform_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.transform_param)
  clear_has_transform_param();
  ::caffe::TransformationParameter* temp = transform_param_;
  transform_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_transform_param(::caffe::TransformationParameter* transform_param) {
  delete transform_param_;
  transform_param_ = transform_param;
  if (transform_param) {
    set_has_transform_param();
  } else {
    clear_has_transform_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.transform_param)
}

// optional .caffe.LossParameter loss_param = 42;
inline bool V1LayerParameter::has_loss_param() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void V1LayerParameter::set_has_loss_param() {
  _has_bits_[1] |= 0x00000200u;
}
inline void V1LayerParameter::clear_has_loss_param() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void V1LayerParameter::clear_loss_param() {
  if (loss_param_ != NULL) loss_param_->::caffe::LossParameter::Clear();
  clear_has_loss_param();
}
inline const ::caffe::LossParameter& V1LayerParameter::loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.loss_param)
  return loss_param_ != NULL ? *loss_param_
                         : *::caffe::LossParameter::internal_default_instance();
}
inline ::caffe::LossParameter* V1LayerParameter::mutable_loss_param() {
  set_has_loss_param();
  if (loss_param_ == NULL) {
    loss_param_ = new ::caffe::LossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.loss_param)
  return loss_param_;
}
inline ::caffe::LossParameter* V1LayerParameter::release_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.loss_param)
  clear_has_loss_param();
  ::caffe::LossParameter* temp = loss_param_;
  loss_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_loss_param(::caffe::LossParameter* loss_param) {
  delete loss_param_;
  loss_param_ = loss_param;
  if (loss_param) {
    set_has_loss_param();
  } else {
    clear_has_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.loss_param)
}

// optional .caffe.V0LayerParameter layer = 1;
inline bool V1LayerParameter::has_layer() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void V1LayerParameter::set_has_layer() {
  _has_bits_[1] |= 0x00000400u;
}
inline void V1LayerParameter::clear_has_layer() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void V1LayerParameter::clear_layer() {
  if (layer_ != NULL) layer_->::caffe::V0LayerParameter::Clear();
  clear_has_layer();
}
inline const ::caffe::V0LayerParameter& V1LayerParameter::layer() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.layer)
  return layer_ != NULL ? *layer_
                         : *::caffe::V0LayerParameter::internal_default_instance();
}
inline ::caffe::V0LayerParameter* V1LayerParameter::mutable_layer() {
  set_has_layer();
  if (layer_ == NULL) {
    layer_ = new ::caffe::V0LayerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.layer)
  return layer_;
}
inline ::caffe::V0LayerParameter* V1LayerParameter::release_layer() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.layer)
  clear_has_layer();
  ::caffe::V0LayerParameter* temp = layer_;
  layer_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_layer(::caffe::V0LayerParameter* layer) {
  delete layer_;
  layer_ = layer;
  if (layer) {
    set_has_layer();
  } else {
    clear_has_layer();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.layer)
}

inline const V1LayerParameter* V1LayerParameter::internal_default_instance() {
  return &V1LayerParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// V0LayerParameter

// optional string name = 1;
inline bool V0LayerParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void V0LayerParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void V0LayerParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void V0LayerParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& V0LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void V0LayerParameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.name)
}
inline void V0LayerParameter::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.name)
}
inline void V0LayerParameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.name)
}
inline ::std::string* V0LayerParameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* V0LayerParameter::release_name() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void V0LayerParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.name)
}

// optional string type = 2;
inline bool V0LayerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void V0LayerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void V0LayerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void V0LayerParameter::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& V0LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void V0LayerParameter::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.type)
}
inline void V0LayerParameter::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.type)
}
inline void V0LayerParameter::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.type)
}
inline ::std::string* V0LayerParameter::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* V0LayerParameter::release_type() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void V0LayerParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.type)
}

// optional uint32 num_output = 3;
inline bool V0LayerParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void V0LayerParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000004u;
}
inline void V0LayerParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void V0LayerParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 V0LayerParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.num_output)
  return num_output_;
}
inline void V0LayerParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.num_output)
}

// optional bool biasterm = 4 [default = true];
inline bool V0LayerParameter::has_biasterm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void V0LayerParameter::set_has_biasterm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void V0LayerParameter::clear_has_biasterm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void V0LayerParameter::clear_biasterm() {
  biasterm_ = true;
  clear_has_biasterm();
}
inline bool V0LayerParameter::biasterm() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.biasterm)
  return biasterm_;
}
inline void V0LayerParameter::set_biasterm(bool value) {
  set_has_biasterm();
  biasterm_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.biasterm)
}

// optional .caffe.FillerParameter weight_filler = 5;
inline bool V0LayerParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void V0LayerParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000010u;
}
inline void V0LayerParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void V0LayerParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
inline const ::caffe::FillerParameter& V0LayerParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
inline ::caffe::FillerParameter* V0LayerParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.weight_filler)
  return weight_filler_;
}
inline ::caffe::FillerParameter* V0LayerParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline void V0LayerParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 6;
inline bool V0LayerParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void V0LayerParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000020u;
}
inline void V0LayerParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void V0LayerParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& V0LayerParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
inline ::caffe::FillerParameter* V0LayerParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.bias_filler)
  return bias_filler_;
}
inline ::caffe::FillerParameter* V0LayerParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void V0LayerParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.bias_filler)
}

// optional uint32 pad = 7 [default = 0];
inline bool V0LayerParameter::has_pad() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void V0LayerParameter::set_has_pad() {
  _has_bits_[0] |= 0x00000040u;
}
inline void V0LayerParameter::clear_has_pad() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void V0LayerParameter::clear_pad() {
  pad_ = 0u;
  clear_has_pad();
}
inline ::google::protobuf::uint32 V0LayerParameter::pad() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.pad)
  return pad_;
}
inline void V0LayerParameter::set_pad(::google::protobuf::uint32 value) {
  set_has_pad();
  pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.pad)
}

// optional uint32 kernelsize = 8;
inline bool V0LayerParameter::has_kernelsize() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void V0LayerParameter::set_has_kernelsize() {
  _has_bits_[0] |= 0x00000080u;
}
inline void V0LayerParameter::clear_has_kernelsize() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void V0LayerParameter::clear_kernelsize() {
  kernelsize_ = 0u;
  clear_has_kernelsize();
}
inline ::google::protobuf::uint32 V0LayerParameter::kernelsize() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.kernelsize)
  return kernelsize_;
}
inline void V0LayerParameter::set_kernelsize(::google::protobuf::uint32 value) {
  set_has_kernelsize();
  kernelsize_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.kernelsize)
}

// optional uint32 group = 9 [default = 1];
inline bool V0LayerParameter::has_group() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void V0LayerParameter::set_has_group() {
  _has_bits_[0] |= 0x00000100u;
}
inline void V0LayerParameter::clear_has_group() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void V0LayerParameter::clear_group() {
  group_ = 1u;
  clear_has_group();
}
inline ::google::protobuf::uint32 V0LayerParameter::group() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.group)
  return group_;
}
inline void V0LayerParameter::set_group(::google::protobuf::uint32 value) {
  set_has_group();
  group_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.group)
}

// optional uint32 stride = 10 [default = 1];
inline bool V0LayerParameter::has_stride() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void V0LayerParameter::set_has_stride() {
  _has_bits_[0] |= 0x00000200u;
}
inline void V0LayerParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void V0LayerParameter::clear_stride() {
  stride_ = 1u;
  clear_has_stride();
}
inline ::google::protobuf::uint32 V0LayerParameter::stride() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.stride)
  return stride_;
}
inline void V0LayerParameter::set_stride(::google::protobuf::uint32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.stride)
}

// optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
inline bool V0LayerParameter::has_pool() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void V0LayerParameter::set_has_pool() {
  _has_bits_[0] |= 0x00000400u;
}
inline void V0LayerParameter::clear_has_pool() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void V0LayerParameter::clear_pool() {
  pool_ = 0;
  clear_has_pool();
}
inline ::caffe::V0LayerParameter_PoolMethod V0LayerParameter::pool() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.pool)
  return static_cast< ::caffe::V0LayerParameter_PoolMethod >(pool_);
}
inline void V0LayerParameter::set_pool(::caffe::V0LayerParameter_PoolMethod value) {
  assert(::caffe::V0LayerParameter_PoolMethod_IsValid(value));
  set_has_pool();
  pool_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.pool)
}

// optional float dropout_ratio = 12 [default = 0.5];
inline bool V0LayerParameter::has_dropout_ratio() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void V0LayerParameter::set_has_dropout_ratio() {
  _has_bits_[0] |= 0x00000800u;
}
inline void V0LayerParameter::clear_has_dropout_ratio() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void V0LayerParameter::clear_dropout_ratio() {
  dropout_ratio_ = 0.5f;
  clear_has_dropout_ratio();
}
inline float V0LayerParameter::dropout_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.dropout_ratio)
  return dropout_ratio_;
}
inline void V0LayerParameter::set_dropout_ratio(float value) {
  set_has_dropout_ratio();
  dropout_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.dropout_ratio)
}

// optional uint32 local_size = 13 [default = 5];
inline bool V0LayerParameter::has_local_size() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void V0LayerParameter::set_has_local_size() {
  _has_bits_[0] |= 0x00001000u;
}
inline void V0LayerParameter::clear_has_local_size() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void V0LayerParameter::clear_local_size() {
  local_size_ = 5u;
  clear_has_local_size();
}
inline ::google::protobuf::uint32 V0LayerParameter::local_size() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.local_size)
  return local_size_;
}
inline void V0LayerParameter::set_local_size(::google::protobuf::uint32 value) {
  set_has_local_size();
  local_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.local_size)
}

// optional float alpha = 14 [default = 1];
inline bool V0LayerParameter::has_alpha() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void V0LayerParameter::set_has_alpha() {
  _has_bits_[0] |= 0x00002000u;
}
inline void V0LayerParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void V0LayerParameter::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
inline float V0LayerParameter::alpha() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.alpha)
  return alpha_;
}
inline void V0LayerParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.alpha)
}

// optional float beta = 15 [default = 0.75];
inline bool V0LayerParameter::has_beta() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void V0LayerParameter::set_has_beta() {
  _has_bits_[0] |= 0x00004000u;
}
inline void V0LayerParameter::clear_has_beta() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void V0LayerParameter::clear_beta() {
  beta_ = 0.75f;
  clear_has_beta();
}
inline float V0LayerParameter::beta() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.beta)
  return beta_;
}
inline void V0LayerParameter::set_beta(float value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.beta)
}

// optional float k = 22 [default = 1];
inline bool V0LayerParameter::has_k() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void V0LayerParameter::set_has_k() {
  _has_bits_[0] |= 0x00008000u;
}
inline void V0LayerParameter::clear_has_k() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void V0LayerParameter::clear_k() {
  k_ = 1;
  clear_has_k();
}
inline float V0LayerParameter::k() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.k)
  return k_;
}
inline void V0LayerParameter::set_k(float value) {
  set_has_k();
  k_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.k)
}

// optional string source = 16;
inline bool V0LayerParameter::has_source() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void V0LayerParameter::set_has_source() {
  _has_bits_[0] |= 0x00010000u;
}
inline void V0LayerParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void V0LayerParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
inline const ::std::string& V0LayerParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.source)
  return source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void V0LayerParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.source)
}
inline void V0LayerParameter::set_source(const char* value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.source)
}
inline void V0LayerParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.source)
}
inline ::std::string* V0LayerParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* V0LayerParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void V0LayerParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.source)
}

// optional float scale = 17 [default = 1];
inline bool V0LayerParameter::has_scale() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void V0LayerParameter::set_has_scale() {
  _has_bits_[0] |= 0x00020000u;
}
inline void V0LayerParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void V0LayerParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float V0LayerParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.scale)
  return scale_;
}
inline void V0LayerParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.scale)
}

// optional string meanfile = 18;
inline bool V0LayerParameter::has_meanfile() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void V0LayerParameter::set_has_meanfile() {
  _has_bits_[0] |= 0x00040000u;
}
inline void V0LayerParameter::clear_has_meanfile() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void V0LayerParameter::clear_meanfile() {
  meanfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_meanfile();
}
inline const ::std::string& V0LayerParameter::meanfile() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.meanfile)
  return meanfile_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void V0LayerParameter::set_meanfile(const ::std::string& value) {
  set_has_meanfile();
  meanfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.meanfile)
}
inline void V0LayerParameter::set_meanfile(const char* value) {
  set_has_meanfile();
  meanfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.meanfile)
}
inline void V0LayerParameter::set_meanfile(const char* value, size_t size) {
  set_has_meanfile();
  meanfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.meanfile)
}
inline ::std::string* V0LayerParameter::mutable_meanfile() {
  set_has_meanfile();
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.meanfile)
  return meanfile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* V0LayerParameter::release_meanfile() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.meanfile)
  clear_has_meanfile();
  return meanfile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void V0LayerParameter::set_allocated_meanfile(::std::string* meanfile) {
  if (meanfile != NULL) {
    set_has_meanfile();
  } else {
    clear_has_meanfile();
  }
  meanfile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), meanfile);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.meanfile)
}

// optional uint32 batchsize = 19;
inline bool V0LayerParameter::has_batchsize() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void V0LayerParameter::set_has_batchsize() {
  _has_bits_[0] |= 0x00080000u;
}
inline void V0LayerParameter::clear_has_batchsize() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void V0LayerParameter::clear_batchsize() {
  batchsize_ = 0u;
  clear_has_batchsize();
}
inline ::google::protobuf::uint32 V0LayerParameter::batchsize() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.batchsize)
  return batchsize_;
}
inline void V0LayerParameter::set_batchsize(::google::protobuf::uint32 value) {
  set_has_batchsize();
  batchsize_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.batchsize)
}

// optional uint32 cropsize = 20 [default = 0];
inline bool V0LayerParameter::has_cropsize() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void V0LayerParameter::set_has_cropsize() {
  _has_bits_[0] |= 0x00100000u;
}
inline void V0LayerParameter::clear_has_cropsize() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void V0LayerParameter::clear_cropsize() {
  cropsize_ = 0u;
  clear_has_cropsize();
}
inline ::google::protobuf::uint32 V0LayerParameter::cropsize() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.cropsize)
  return cropsize_;
}
inline void V0LayerParameter::set_cropsize(::google::protobuf::uint32 value) {
  set_has_cropsize();
  cropsize_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.cropsize)
}

// optional bool mirror = 21 [default = false];
inline bool V0LayerParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void V0LayerParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00200000u;
}
inline void V0LayerParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void V0LayerParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool V0LayerParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.mirror)
  return mirror_;
}
inline void V0LayerParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.mirror)
}

// repeated .caffe.BlobProto blobs = 50;
inline int V0LayerParameter::blobs_size() const {
  return blobs_.size();
}
inline void V0LayerParameter::clear_blobs() {
  blobs_.Clear();
}
inline const ::caffe::BlobProto& V0LayerParameter::blobs(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.blobs)
  return blobs_.Get(index);
}
inline ::caffe::BlobProto* V0LayerParameter::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.blobs)
  return blobs_.Mutable(index);
}
inline ::caffe::BlobProto* V0LayerParameter::add_blobs() {
  // @@protoc_insertion_point(field_add:caffe.V0LayerParameter.blobs)
  return blobs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
V0LayerParameter::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V0LayerParameter.blobs)
  return &blobs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
V0LayerParameter::blobs() const {
  // @@protoc_insertion_point(field_list:caffe.V0LayerParameter.blobs)
  return blobs_;
}

// repeated float blobs_lr = 51;
inline int V0LayerParameter::blobs_lr_size() const {
  return blobs_lr_.size();
}
inline void V0LayerParameter::clear_blobs_lr() {
  blobs_lr_.Clear();
}
inline float V0LayerParameter::blobs_lr(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.blobs_lr)
  return blobs_lr_.Get(index);
}
inline void V0LayerParameter::set_blobs_lr(int index, float value) {
  blobs_lr_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.blobs_lr)
}
inline void V0LayerParameter::add_blobs_lr(float value) {
  blobs_lr_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V0LayerParameter.blobs_lr)
}
inline const ::google::protobuf::RepeatedField< float >&
V0LayerParameter::blobs_lr() const {
  // @@protoc_insertion_point(field_list:caffe.V0LayerParameter.blobs_lr)
  return blobs_lr_;
}
inline ::google::protobuf::RepeatedField< float >*
V0LayerParameter::mutable_blobs_lr() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V0LayerParameter.blobs_lr)
  return &blobs_lr_;
}

// repeated float weight_decay = 52;
inline int V0LayerParameter::weight_decay_size() const {
  return weight_decay_.size();
}
inline void V0LayerParameter::clear_weight_decay() {
  weight_decay_.Clear();
}
inline float V0LayerParameter::weight_decay(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.weight_decay)
  return weight_decay_.Get(index);
}
inline void V0LayerParameter::set_weight_decay(int index, float value) {
  weight_decay_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.weight_decay)
}
inline void V0LayerParameter::add_weight_decay(float value) {
  weight_decay_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V0LayerParameter.weight_decay)
}
inline const ::google::protobuf::RepeatedField< float >&
V0LayerParameter::weight_decay() const {
  // @@protoc_insertion_point(field_list:caffe.V0LayerParameter.weight_decay)
  return weight_decay_;
}
inline ::google::protobuf::RepeatedField< float >*
V0LayerParameter::mutable_weight_decay() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V0LayerParameter.weight_decay)
  return &weight_decay_;
}

// optional uint32 rand_skip = 53 [default = 0];
inline bool V0LayerParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void V0LayerParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x02000000u;
}
inline void V0LayerParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void V0LayerParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
inline ::google::protobuf::uint32 V0LayerParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.rand_skip)
  return rand_skip_;
}
inline void V0LayerParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.rand_skip)
}

// optional float det_fg_threshold = 54 [default = 0.5];
inline bool V0LayerParameter::has_det_fg_threshold() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void V0LayerParameter::set_has_det_fg_threshold() {
  _has_bits_[0] |= 0x04000000u;
}
inline void V0LayerParameter::clear_has_det_fg_threshold() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void V0LayerParameter::clear_det_fg_threshold() {
  det_fg_threshold_ = 0.5f;
  clear_has_det_fg_threshold();
}
inline float V0LayerParameter::det_fg_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_fg_threshold)
  return det_fg_threshold_;
}
inline void V0LayerParameter::set_det_fg_threshold(float value) {
  set_has_det_fg_threshold();
  det_fg_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_fg_threshold)
}

// optional float det_bg_threshold = 55 [default = 0.5];
inline bool V0LayerParameter::has_det_bg_threshold() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void V0LayerParameter::set_has_det_bg_threshold() {
  _has_bits_[0] |= 0x08000000u;
}
inline void V0LayerParameter::clear_has_det_bg_threshold() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void V0LayerParameter::clear_det_bg_threshold() {
  det_bg_threshold_ = 0.5f;
  clear_has_det_bg_threshold();
}
inline float V0LayerParameter::det_bg_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_bg_threshold)
  return det_bg_threshold_;
}
inline void V0LayerParameter::set_det_bg_threshold(float value) {
  set_has_det_bg_threshold();
  det_bg_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_bg_threshold)
}

// optional float det_fg_fraction = 56 [default = 0.25];
inline bool V0LayerParameter::has_det_fg_fraction() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void V0LayerParameter::set_has_det_fg_fraction() {
  _has_bits_[0] |= 0x10000000u;
}
inline void V0LayerParameter::clear_has_det_fg_fraction() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void V0LayerParameter::clear_det_fg_fraction() {
  det_fg_fraction_ = 0.25f;
  clear_has_det_fg_fraction();
}
inline float V0LayerParameter::det_fg_fraction() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_fg_fraction)
  return det_fg_fraction_;
}
inline void V0LayerParameter::set_det_fg_fraction(float value) {
  set_has_det_fg_fraction();
  det_fg_fraction_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_fg_fraction)
}

// optional uint32 det_context_pad = 58 [default = 0];
inline bool V0LayerParameter::has_det_context_pad() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void V0LayerParameter::set_has_det_context_pad() {
  _has_bits_[0] |= 0x20000000u;
}
inline void V0LayerParameter::clear_has_det_context_pad() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void V0LayerParameter::clear_det_context_pad() {
  det_context_pad_ = 0u;
  clear_has_det_context_pad();
}
inline ::google::protobuf::uint32 V0LayerParameter::det_context_pad() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_context_pad)
  return det_context_pad_;
}
inline void V0LayerParameter::set_det_context_pad(::google::protobuf::uint32 value) {
  set_has_det_context_pad();
  det_context_pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_context_pad)
}

// optional string det_crop_mode = 59 [default = "warp"];
inline bool V0LayerParameter::has_det_crop_mode() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void V0LayerParameter::set_has_det_crop_mode() {
  _has_bits_[0] |= 0x40000000u;
}
inline void V0LayerParameter::clear_has_det_crop_mode() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void V0LayerParameter::clear_det_crop_mode() {
  det_crop_mode_.ClearToDefaultNoArena(_default_det_crop_mode_);
  clear_has_det_crop_mode();
}
inline const ::std::string& V0LayerParameter::det_crop_mode() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_crop_mode)
  return det_crop_mode_.GetNoArena(_default_det_crop_mode_);
}
inline void V0LayerParameter::set_det_crop_mode(const ::std::string& value) {
  set_has_det_crop_mode();
  det_crop_mode_.SetNoArena(_default_det_crop_mode_, value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_crop_mode)
}
inline void V0LayerParameter::set_det_crop_mode(const char* value) {
  set_has_det_crop_mode();
  det_crop_mode_.SetNoArena(_default_det_crop_mode_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.det_crop_mode)
}
inline void V0LayerParameter::set_det_crop_mode(const char* value, size_t size) {
  set_has_det_crop_mode();
  det_crop_mode_.SetNoArena(_default_det_crop_mode_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.det_crop_mode)
}
inline ::std::string* V0LayerParameter::mutable_det_crop_mode() {
  set_has_det_crop_mode();
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.det_crop_mode)
  return det_crop_mode_.MutableNoArena(_default_det_crop_mode_);
}
inline ::std::string* V0LayerParameter::release_det_crop_mode() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.det_crop_mode)
  clear_has_det_crop_mode();
  return det_crop_mode_.ReleaseNoArena(_default_det_crop_mode_);
}
inline void V0LayerParameter::set_allocated_det_crop_mode(::std::string* det_crop_mode) {
  if (det_crop_mode != NULL) {
    set_has_det_crop_mode();
  } else {
    clear_has_det_crop_mode();
  }
  det_crop_mode_.SetAllocatedNoArena(_default_det_crop_mode_, det_crop_mode);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.det_crop_mode)
}

// optional int32 new_num = 60 [default = 0];
inline bool V0LayerParameter::has_new_num() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void V0LayerParameter::set_has_new_num() {
  _has_bits_[0] |= 0x80000000u;
}
inline void V0LayerParameter::clear_has_new_num() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void V0LayerParameter::clear_new_num() {
  new_num_ = 0;
  clear_has_new_num();
}
inline ::google::protobuf::int32 V0LayerParameter::new_num() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.new_num)
  return new_num_;
}
inline void V0LayerParameter::set_new_num(::google::protobuf::int32 value) {
  set_has_new_num();
  new_num_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.new_num)
}

// optional int32 new_channels = 61 [default = 0];
inline bool V0LayerParameter::has_new_channels() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void V0LayerParameter::set_has_new_channels() {
  _has_bits_[1] |= 0x00000001u;
}
inline void V0LayerParameter::clear_has_new_channels() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void V0LayerParameter::clear_new_channels() {
  new_channels_ = 0;
  clear_has_new_channels();
}
inline ::google::protobuf::int32 V0LayerParameter::new_channels() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.new_channels)
  return new_channels_;
}
inline void V0LayerParameter::set_new_channels(::google::protobuf::int32 value) {
  set_has_new_channels();
  new_channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.new_channels)
}

// optional int32 new_height = 62 [default = 0];
inline bool V0LayerParameter::has_new_height() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void V0LayerParameter::set_has_new_height() {
  _has_bits_[1] |= 0x00000002u;
}
inline void V0LayerParameter::clear_has_new_height() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void V0LayerParameter::clear_new_height() {
  new_height_ = 0;
  clear_has_new_height();
}
inline ::google::protobuf::int32 V0LayerParameter::new_height() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.new_height)
  return new_height_;
}
inline void V0LayerParameter::set_new_height(::google::protobuf::int32 value) {
  set_has_new_height();
  new_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.new_height)
}

// optional int32 new_width = 63 [default = 0];
inline bool V0LayerParameter::has_new_width() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void V0LayerParameter::set_has_new_width() {
  _has_bits_[1] |= 0x00000004u;
}
inline void V0LayerParameter::clear_has_new_width() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void V0LayerParameter::clear_new_width() {
  new_width_ = 0;
  clear_has_new_width();
}
inline ::google::protobuf::int32 V0LayerParameter::new_width() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.new_width)
  return new_width_;
}
inline void V0LayerParameter::set_new_width(::google::protobuf::int32 value) {
  set_has_new_width();
  new_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.new_width)
}

// optional bool shuffle_images = 64 [default = false];
inline bool V0LayerParameter::has_shuffle_images() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void V0LayerParameter::set_has_shuffle_images() {
  _has_bits_[1] |= 0x00000008u;
}
inline void V0LayerParameter::clear_has_shuffle_images() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void V0LayerParameter::clear_shuffle_images() {
  shuffle_images_ = false;
  clear_has_shuffle_images();
}
inline bool V0LayerParameter::shuffle_images() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.shuffle_images)
  return shuffle_images_;
}
inline void V0LayerParameter::set_shuffle_images(bool value) {
  set_has_shuffle_images();
  shuffle_images_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.shuffle_images)
}

// optional uint32 concat_dim = 65 [default = 1];
inline bool V0LayerParameter::has_concat_dim() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void V0LayerParameter::set_has_concat_dim() {
  _has_bits_[1] |= 0x00000010u;
}
inline void V0LayerParameter::clear_has_concat_dim() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void V0LayerParameter::clear_concat_dim() {
  concat_dim_ = 1u;
  clear_has_concat_dim();
}
inline ::google::protobuf::uint32 V0LayerParameter::concat_dim() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.concat_dim)
  return concat_dim_;
}
inline void V0LayerParameter::set_concat_dim(::google::protobuf::uint32 value) {
  set_has_concat_dim();
  concat_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.concat_dim)
}

// optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;
inline bool V0LayerParameter::has_hdf5_output_param() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void V0LayerParameter::set_has_hdf5_output_param() {
  _has_bits_[1] |= 0x00000020u;
}
inline void V0LayerParameter::clear_has_hdf5_output_param() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void V0LayerParameter::clear_hdf5_output_param() {
  if (hdf5_output_param_ != NULL) hdf5_output_param_->::caffe::HDF5OutputParameter::Clear();
  clear_has_hdf5_output_param();
}
inline const ::caffe::HDF5OutputParameter& V0LayerParameter::hdf5_output_param() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.hdf5_output_param)
  return hdf5_output_param_ != NULL ? *hdf5_output_param_
                         : *::caffe::HDF5OutputParameter::internal_default_instance();
}
inline ::caffe::HDF5OutputParameter* V0LayerParameter::mutable_hdf5_output_param() {
  set_has_hdf5_output_param();
  if (hdf5_output_param_ == NULL) {
    hdf5_output_param_ = new ::caffe::HDF5OutputParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.hdf5_output_param)
  return hdf5_output_param_;
}
inline ::caffe::HDF5OutputParameter* V0LayerParameter::release_hdf5_output_param() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.hdf5_output_param)
  clear_has_hdf5_output_param();
  ::caffe::HDF5OutputParameter* temp = hdf5_output_param_;
  hdf5_output_param_ = NULL;
  return temp;
}
inline void V0LayerParameter::set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param) {
  delete hdf5_output_param_;
  hdf5_output_param_ = hdf5_output_param;
  if (hdf5_output_param) {
    set_has_hdf5_output_param();
  } else {
    clear_has_hdf5_output_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.hdf5_output_param)
}

inline const V0LayerParameter* V0LayerParameter::internal_default_instance() {
  return &V0LayerParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// PReLUParameter

// optional .caffe.FillerParameter filler = 1;
inline bool PReLUParameter::has_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PReLUParameter::set_has_filler() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PReLUParameter::clear_has_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PReLUParameter::clear_filler() {
  if (filler_ != NULL) filler_->::caffe::FillerParameter::Clear();
  clear_has_filler();
}
inline const ::caffe::FillerParameter& PReLUParameter::filler() const {
  // @@protoc_insertion_point(field_get:caffe.PReLUParameter.filler)
  return filler_ != NULL ? *filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
inline ::caffe::FillerParameter* PReLUParameter::mutable_filler() {
  set_has_filler();
  if (filler_ == NULL) {
    filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.PReLUParameter.filler)
  return filler_;
}
inline ::caffe::FillerParameter* PReLUParameter::release_filler() {
  // @@protoc_insertion_point(field_release:caffe.PReLUParameter.filler)
  clear_has_filler();
  ::caffe::FillerParameter* temp = filler_;
  filler_ = NULL;
  return temp;
}
inline void PReLUParameter::set_allocated_filler(::caffe::FillerParameter* filler) {
  delete filler_;
  filler_ = filler;
  if (filler) {
    set_has_filler();
  } else {
    clear_has_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.PReLUParameter.filler)
}

// optional bool channel_shared = 2 [default = false];
inline bool PReLUParameter::has_channel_shared() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PReLUParameter::set_has_channel_shared() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PReLUParameter::clear_has_channel_shared() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PReLUParameter::clear_channel_shared() {
  channel_shared_ = false;
  clear_has_channel_shared();
}
inline bool PReLUParameter::channel_shared() const {
  // @@protoc_insertion_point(field_get:caffe.PReLUParameter.channel_shared)
  return channel_shared_;
}
inline void PReLUParameter::set_channel_shared(bool value) {
  set_has_channel_shared();
  channel_shared_ = value;
  // @@protoc_insertion_point(field_set:caffe.PReLUParameter.channel_shared)
}

inline const PReLUParameter* PReLUParameter::internal_default_instance() {
  return &PReLUParameter_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace caffe

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::caffe::LabelParameter_LabelParamConstant> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::LabelParameter_LabelParamConstant>() {
  return ::caffe::LabelParameter_LabelParamConstant_descriptor();
}
template <> struct is_proto_enum< ::caffe::BBoxParameter_BBoxType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::BBoxParameter_BBoxType>() {
  return ::caffe::BBoxParameter_BBoxType_descriptor();
}
template <> struct is_proto_enum< ::caffe::BBoxParameter_BBoxAnchor> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::BBoxParameter_BBoxAnchor>() {
  return ::caffe::BBoxParameter_BBoxAnchor_descriptor();
}
template <> struct is_proto_enum< ::caffe::BBoxParameter_BBoxConstant> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::BBoxParameter_BBoxConstant>() {
  return ::caffe::BBoxParameter_BBoxConstant_descriptor();
}
template <> struct is_proto_enum< ::caffe::PaddingParameter_PaddingType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::PaddingParameter_PaddingType>() {
  return ::caffe::PaddingParameter_PaddingType_descriptor();
}
template <> struct is_proto_enum< ::caffe::ActivationRegionParameter_ActivationMethod> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ActivationRegionParameter_ActivationMethod>() {
  return ::caffe::ActivationRegionParameter_ActivationMethod_descriptor();
}
template <> struct is_proto_enum< ::caffe::OffsetParameter_Anchor> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::OffsetParameter_Anchor>() {
  return ::caffe::OffsetParameter_Anchor_descriptor();
}
template <> struct is_proto_enum< ::caffe::FillerParameter_VarianceNorm> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::FillerParameter_VarianceNorm>() {
  return ::caffe::FillerParameter_VarianceNorm_descriptor();
}
template <> struct is_proto_enum< ::caffe::SolverParameter_SnapshotFormat> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SolverParameter_SnapshotFormat>() {
  return ::caffe::SolverParameter_SnapshotFormat_descriptor();
}
template <> struct is_proto_enum< ::caffe::SolverParameter_SolverMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SolverParameter_SolverMode>() {
  return ::caffe::SolverParameter_SolverMode_descriptor();
}
template <> struct is_proto_enum< ::caffe::SolverParameter_SolverType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SolverParameter_SolverType>() {
  return ::caffe::SolverParameter_SolverType_descriptor();
}
template <> struct is_proto_enum< ::caffe::ParamSpec_DimCheckMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ParamSpec_DimCheckMode>() {
  return ::caffe::ParamSpec_DimCheckMode_descriptor();
}
template <> struct is_proto_enum< ::caffe::LossParameter_NormalizationMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::LossParameter_NormalizationMode>() {
  return ::caffe::LossParameter_NormalizationMode_descriptor();
}
template <> struct is_proto_enum< ::caffe::ConvolutionParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ConvolutionParameter_Engine>() {
  return ::caffe::ConvolutionParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::DataParameter_DB> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::DataParameter_DB>() {
  return ::caffe::DataParameter_DB_descriptor();
}
template <> struct is_proto_enum< ::caffe::EltwiseParameter_EltwiseOp> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::EltwiseParameter_EltwiseOp>() {
  return ::caffe::EltwiseParameter_EltwiseOp_descriptor();
}
template <> struct is_proto_enum< ::caffe::HingeLossParameter_Norm> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::HingeLossParameter_Norm>() {
  return ::caffe::HingeLossParameter_Norm_descriptor();
}
template <> struct is_proto_enum< ::caffe::LRNParameter_NormRegion> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::LRNParameter_NormRegion>() {
  return ::caffe::LRNParameter_NormRegion_descriptor();
}
template <> struct is_proto_enum< ::caffe::LRNParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::LRNParameter_Engine>() {
  return ::caffe::LRNParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::PoolingParameter_PoolMethod> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::PoolingParameter_PoolMethod>() {
  return ::caffe::PoolingParameter_PoolMethod_descriptor();
}
template <> struct is_proto_enum< ::caffe::PoolingParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::PoolingParameter_Engine>() {
  return ::caffe::PoolingParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::ReductionParameter_ReductionOp> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ReductionParameter_ReductionOp>() {
  return ::caffe::ReductionParameter_ReductionOp_descriptor();
}
template <> struct is_proto_enum< ::caffe::ReLUParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ReLUParameter_Engine>() {
  return ::caffe::ReLUParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::SigmoidParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SigmoidParameter_Engine>() {
  return ::caffe::SigmoidParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::SoftmaxParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SoftmaxParameter_Engine>() {
  return ::caffe::SoftmaxParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::TanHParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::TanHParameter_Engine>() {
  return ::caffe::TanHParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::SPPParameter_PoolMethod> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SPPParameter_PoolMethod>() {
  return ::caffe::SPPParameter_PoolMethod_descriptor();
}
template <> struct is_proto_enum< ::caffe::SPPParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SPPParameter_Engine>() {
  return ::caffe::SPPParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::V1LayerParameter_LayerType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::V1LayerParameter_LayerType>() {
  return ::caffe::V1LayerParameter_LayerType_descriptor();
}
template <> struct is_proto_enum< ::caffe::V1LayerParameter_DimCheckMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::V1LayerParameter_DimCheckMode>() {
  return ::caffe::V1LayerParameter_DimCheckMode_descriptor();
}
template <> struct is_proto_enum< ::caffe::V0LayerParameter_PoolMethod> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::V0LayerParameter_PoolMethod>() {
  return ::caffe::V0LayerParameter_PoolMethod_descriptor();
}
template <> struct is_proto_enum< ::caffe::Phase> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::Phase>() {
  return ::caffe::Phase_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_caffe_2eproto__INCLUDED
