// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffe.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "caffe.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace caffe {

namespace {

const ::google::protobuf::Descriptor* ImgBBoxAnnoDatum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImgBBoxAnnoDatum_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImgBBoxAnnoParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImgBBoxAnnoParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeatmapConcatParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeatmapConcatParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* BBoxAnnoMapParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BBoxAnnoMapParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* LabelParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LabelParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LabelParameter_LabelParamConstant_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PatchDatum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PatchDatum_reflection_ = NULL;
const ::google::protobuf::Descriptor* PatchDataParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PatchDataParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* LabelRemapParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LabelRemapParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* BBoxParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BBoxParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BBoxParameter_BBoxType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BBoxParameter_BBoxAnchor_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BBoxParameter_BBoxConstant_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SlidingWindowInputParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlidingWindowInputParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* BBoxToGridAndSizeParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BBoxToGridAndSizeParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* SizeUnitParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SizeUnitParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* PaddingParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PaddingParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PaddingParameter_PaddingType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Point2i_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point2i_reflection_ = NULL;
const ::google::protobuf::Descriptor* Point2f_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point2f_reflection_ = NULL;
const ::google::protobuf::Descriptor* Size2i_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Size2i_reflection_ = NULL;
const ::google::protobuf::Descriptor* Size2f_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Size2f_reflection_ = NULL;
const ::google::protobuf::Descriptor* Rect2f_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rect2f_reflection_ = NULL;
const ::google::protobuf::Descriptor* Rect2i_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rect2i_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivationRegionParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivationRegionParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ActivationRegionParameter_ActivationMethod_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GTMapDataParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GTMapDataParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* LabelDiffIgnoreParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LabelDiffIgnoreParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* OffsetParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OffsetParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OffsetParameter_Anchor_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GTSubmapDataParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GTSubmapDataParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* TopSubmapDataParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopSubmapDataParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* YOLOLikeLossParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YOLOLikeLossParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeightedSoftmaxLossParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeightedSoftmaxLossParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* GridProposalLossParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GridProposalLossParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* BGSynthesisDataParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BGSynthesisDataParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* SizeFilterParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SizeFilterParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* RandomResizeParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RandomResizeParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* GaussianNoiseParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GaussianNoiseParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* MirrorParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MirrorParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlurParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlurParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* AugmentationParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AugmentationParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeatmapParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeatmapParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* MinibatchDataParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MinibatchDataParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* RowColProposalTransformParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RowColProposalTransformParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* MeanSubParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MeanSubParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnnoToSegParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnnoToSegParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrainROIParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrainROIParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* YOLOV2LossParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YOLOV2LossParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* YOLOV2ResultParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YOLOV2ResultParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* DetectionCheckParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetectionCheckParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubwinOffsetParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubwinOffsetParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* SizeRejectionParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SizeRejectionParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConfCheckParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfCheckParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReorgParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReorgParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchRejectionParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchRejectionParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobShape_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobShape_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobProtoVector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobProtoVector_reflection_ = NULL;
const ::google::protobuf::Descriptor* Datum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Datum_reflection_ = NULL;
const ::google::protobuf::Descriptor* FillerParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FillerParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FillerParameter_VarianceNorm_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* SolverParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SolverParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SolverParameter_SnapshotFormat_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SolverParameter_SolverMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SolverParameter_SolverType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SolverState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SolverState_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetState_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetStateRule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetStateRule_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParamSpec_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParamSpec_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ParamSpec_DimCheckMode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LayerParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LayerParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransformationParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransformationParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* LossParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LossParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LossParameter_NormalizationMode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AccuracyParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccuracyParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArgMaxParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArgMaxParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConcatParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConcatParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchNormParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchNormParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* BiasParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BiasParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContrastiveLossParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContrastiveLossParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConvolutionParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConvolutionParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ConvolutionParameter_Engine_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CropParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CropParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DataParameter_DB_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DropoutParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DropoutParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* DummyDataParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DummyDataParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* EltwiseParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EltwiseParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EltwiseParameter_EltwiseOp_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ELUParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ELUParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* EmbedParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmbedParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExpParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExpParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlattenParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlattenParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* HDF5DataParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HDF5DataParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* HDF5OutputParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HDF5OutputParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* HingeLossParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HingeLossParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* HingeLossParameter_Norm_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ImageDataParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageDataParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* InfogainLossParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InfogainLossParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* InnerProductParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InnerProductParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* InputParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InputParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* LRNParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LRNParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LRNParameter_NormRegion_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LRNParameter_Engine_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MemoryDataParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemoryDataParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* MVNParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MVNParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParameterParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParameterParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* PoolingParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PoolingParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PoolingParameter_PoolMethod_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PoolingParameter_Engine_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PowerParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PowerParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* PythonParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PythonParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecurrentParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecurrentParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReductionParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReductionParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReductionParameter_ReductionOp_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReLUParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReLUParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReLUParameter_Engine_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReshapeParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReshapeParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScaleParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScaleParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* SigmoidParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SigmoidParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SigmoidParameter_Engine_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SliceParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SliceParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* SoftmaxParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SoftmaxParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SoftmaxParameter_Engine_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TanHParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TanHParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TanHParameter_Engine_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TileParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TileParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ThresholdParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThresholdParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* WindowDataParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WindowDataParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* SPPParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SPPParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SPPParameter_PoolMethod_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SPPParameter_Engine_descriptor_ = NULL;
const ::google::protobuf::Descriptor* V1LayerParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  V1LayerParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* V1LayerParameter_LayerType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* V1LayerParameter_DimCheckMode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* V0LayerParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  V0LayerParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* V0LayerParameter_PoolMethod_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PReLUParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PReLUParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Phase_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_caffe_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_caffe_2eproto() {
  protobuf_AddDesc_caffe_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "caffe.proto");
  GOOGLE_CHECK(file != NULL);
  ImgBBoxAnnoDatum_descriptor_ = file->message_type(0);
  static const int ImgBBoxAnnoDatum_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgBBoxAnnoDatum, img_datum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgBBoxAnnoDatum, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgBBoxAnnoDatum, x_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgBBoxAnnoDatum, y_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgBBoxAnnoDatum, x_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgBBoxAnnoDatum, y_max_),
  };
  ImgBBoxAnnoDatum_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ImgBBoxAnnoDatum_descriptor_,
      ImgBBoxAnnoDatum::internal_default_instance(),
      ImgBBoxAnnoDatum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgBBoxAnnoDatum, _has_bits_),
      -1,
      -1,
      sizeof(ImgBBoxAnnoDatum),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgBBoxAnnoDatum, _internal_metadata_));
  ImgBBoxAnnoParameter_descriptor_ = file->message_type(1);
  static const int ImgBBoxAnnoParameter_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgBBoxAnnoParameter, img_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgBBoxAnnoParameter, img_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgBBoxAnnoParameter, max_bbox_per_img_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgBBoxAnnoParameter, colored_),
  };
  ImgBBoxAnnoParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ImgBBoxAnnoParameter_descriptor_,
      ImgBBoxAnnoParameter::internal_default_instance(),
      ImgBBoxAnnoParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgBBoxAnnoParameter, _has_bits_),
      -1,
      -1,
      sizeof(ImgBBoxAnnoParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgBBoxAnnoParameter, _internal_metadata_));
  HeatmapConcatParameter_descriptor_ = file->message_type(2);
  static const int HeatmapConcatParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeatmapConcatParameter, heatmap_file_),
  };
  HeatmapConcatParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HeatmapConcatParameter_descriptor_,
      HeatmapConcatParameter::internal_default_instance(),
      HeatmapConcatParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeatmapConcatParameter, _has_bits_),
      -1,
      -1,
      sizeof(HeatmapConcatParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeatmapConcatParameter, _internal_metadata_));
  BBoxAnnoMapParameter_descriptor_ = file->message_type(3);
  static const int BBoxAnnoMapParameter_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBoxAnnoMapParameter, img_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBoxAnnoMapParameter, img_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBoxAnnoMapParameter, receptive_field_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBoxAnnoMapParameter, receptive_field_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBoxAnnoMapParameter, vertical_stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBoxAnnoMapParameter, horizontal_stride_),
  };
  BBoxAnnoMapParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BBoxAnnoMapParameter_descriptor_,
      BBoxAnnoMapParameter::internal_default_instance(),
      BBoxAnnoMapParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBoxAnnoMapParameter, _has_bits_),
      -1,
      -1,
      sizeof(BBoxAnnoMapParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBoxAnnoMapParameter, _internal_metadata_));
  LabelParameter_descriptor_ = file->message_type(4);
  static const int LabelParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelParameter, num_label_),
  };
  LabelParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LabelParameter_descriptor_,
      LabelParameter::internal_default_instance(),
      LabelParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelParameter, _has_bits_),
      -1,
      -1,
      sizeof(LabelParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelParameter, _internal_metadata_));
  LabelParameter_LabelParamConstant_descriptor_ = LabelParameter_descriptor_->enum_type(0);
  PatchDatum_descriptor_ = file->message_type(5);
  static const int PatchDatum_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatchDatum, patch_img_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatchDatum, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatchDatum, bbox_xmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatchDatum, bbox_ymin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatchDatum, bbox_xmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatchDatum, bbox_ymax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatchDatum, whole_img_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatchDatum, whole_img_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatchDatum, patch_offset_xmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatchDatum, patch_offset_ymin_),
  };
  PatchDatum_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PatchDatum_descriptor_,
      PatchDatum::internal_default_instance(),
      PatchDatum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatchDatum, _has_bits_),
      -1,
      -1,
      sizeof(PatchDatum),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatchDatum, _internal_metadata_));
  PatchDataParameter_descriptor_ = file->message_type(6);
  static const int PatchDataParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatchDataParameter, positive_only_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatchDataParameter, patch_offset_normalization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatchDataParameter, bbox_normalization_),
  };
  PatchDataParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PatchDataParameter_descriptor_,
      PatchDataParameter::internal_default_instance(),
      PatchDataParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatchDataParameter, _has_bits_),
      -1,
      -1,
      sizeof(PatchDataParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatchDataParameter, _internal_metadata_));
  LabelRemapParameter_descriptor_ = file->message_type(7);
  static const int LabelRemapParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelRemapParameter, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelRemapParameter, dst_),
  };
  LabelRemapParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LabelRemapParameter_descriptor_,
      LabelRemapParameter::internal_default_instance(),
      LabelRemapParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelRemapParameter, _has_bits_),
      -1,
      -1,
      sizeof(LabelRemapParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelRemapParameter, _internal_metadata_));
  BBoxParameter_descriptor_ = file->message_type(8);
  static const int BBoxParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBoxParameter, bbox_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBoxParameter, anchor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBoxParameter, normalize_),
  };
  BBoxParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BBoxParameter_descriptor_,
      BBoxParameter::internal_default_instance(),
      BBoxParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBoxParameter, _has_bits_),
      -1,
      -1,
      sizeof(BBoxParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBoxParameter, _internal_metadata_));
  BBoxParameter_BBoxType_descriptor_ = BBoxParameter_descriptor_->enum_type(0);
  BBoxParameter_BBoxAnchor_descriptor_ = BBoxParameter_descriptor_->enum_type(1);
  BBoxParameter_BBoxConstant_descriptor_ = BBoxParameter_descriptor_->enum_type(2);
  SlidingWindowInputParameter_descriptor_ = file->message_type(9);
  static const int SlidingWindowInputParameter_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlidingWindowInputParameter, window_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlidingWindowInputParameter, window_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlidingWindowInputParameter, horizontal_stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlidingWindowInputParameter, vertical_stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlidingWindowInputParameter, window_normalization_),
  };
  SlidingWindowInputParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SlidingWindowInputParameter_descriptor_,
      SlidingWindowInputParameter::internal_default_instance(),
      SlidingWindowInputParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlidingWindowInputParameter, _has_bits_),
      -1,
      -1,
      sizeof(SlidingWindowInputParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlidingWindowInputParameter, _internal_metadata_));
  BBoxToGridAndSizeParameter_descriptor_ = file->message_type(10);
  static const int BBoxToGridAndSizeParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBoxToGridAndSizeParameter, x_grid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBoxToGridAndSizeParameter, y_grid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBoxToGridAndSizeParameter, size_grid_),
  };
  BBoxToGridAndSizeParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BBoxToGridAndSizeParameter_descriptor_,
      BBoxToGridAndSizeParameter::internal_default_instance(),
      BBoxToGridAndSizeParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBoxToGridAndSizeParameter, _has_bits_),
      -1,
      -1,
      sizeof(BBoxToGridAndSizeParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBoxToGridAndSizeParameter, _internal_metadata_));
  SizeUnitParameter_descriptor_ = file->message_type(11);
  static const int SizeUnitParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SizeUnitParameter, unit_),
  };
  SizeUnitParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SizeUnitParameter_descriptor_,
      SizeUnitParameter::internal_default_instance(),
      SizeUnitParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SizeUnitParameter, _has_bits_),
      -1,
      -1,
      sizeof(SizeUnitParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SizeUnitParameter, _internal_metadata_));
  PaddingParameter_descriptor_ = file->message_type(12);
  static const int PaddingParameter_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaddingParameter, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaddingParameter, pad_up_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaddingParameter, pad_down_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaddingParameter, pad_left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaddingParameter, pad_right_),
  };
  PaddingParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PaddingParameter_descriptor_,
      PaddingParameter::internal_default_instance(),
      PaddingParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaddingParameter, _has_bits_),
      -1,
      -1,
      sizeof(PaddingParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaddingParameter, _internal_metadata_));
  PaddingParameter_PaddingType_descriptor_ = PaddingParameter_descriptor_->enum_type(0);
  Point2i_descriptor_ = file->message_type(13);
  static const int Point2i_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point2i, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point2i, y_),
  };
  Point2i_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Point2i_descriptor_,
      Point2i::internal_default_instance(),
      Point2i_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point2i, _has_bits_),
      -1,
      -1,
      sizeof(Point2i),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point2i, _internal_metadata_));
  Point2f_descriptor_ = file->message_type(14);
  static const int Point2f_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point2f, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point2f, y_),
  };
  Point2f_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Point2f_descriptor_,
      Point2f::internal_default_instance(),
      Point2f_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point2f, _has_bits_),
      -1,
      -1,
      sizeof(Point2f),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point2f, _internal_metadata_));
  Size2i_descriptor_ = file->message_type(15);
  static const int Size2i_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Size2i, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Size2i, height_),
  };
  Size2i_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Size2i_descriptor_,
      Size2i::internal_default_instance(),
      Size2i_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Size2i, _has_bits_),
      -1,
      -1,
      sizeof(Size2i),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Size2i, _internal_metadata_));
  Size2f_descriptor_ = file->message_type(16);
  static const int Size2f_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Size2f, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Size2f, height_),
  };
  Size2f_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Size2f_descriptor_,
      Size2f::internal_default_instance(),
      Size2f_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Size2f, _has_bits_),
      -1,
      -1,
      sizeof(Size2f),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Size2f, _internal_metadata_));
  Rect2f_descriptor_ = file->message_type(17);
  static const int Rect2f_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect2f, top_left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect2f, size_),
  };
  Rect2f_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Rect2f_descriptor_,
      Rect2f::internal_default_instance(),
      Rect2f_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect2f, _has_bits_),
      -1,
      -1,
      sizeof(Rect2f),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect2f, _internal_metadata_));
  Rect2i_descriptor_ = file->message_type(18);
  static const int Rect2i_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect2i, top_left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect2i, size_),
  };
  Rect2i_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Rect2i_descriptor_,
      Rect2i::internal_default_instance(),
      Rect2i_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect2i, _has_bits_),
      -1,
      -1,
      sizeof(Rect2i),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect2i, _internal_metadata_));
  ActivationRegionParameter_descriptor_ = file->message_type(19);
  static const int ActivationRegionParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivationRegionParameter, method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivationRegionParameter, region_),
  };
  ActivationRegionParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActivationRegionParameter_descriptor_,
      ActivationRegionParameter::internal_default_instance(),
      ActivationRegionParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivationRegionParameter, _has_bits_),
      -1,
      -1,
      sizeof(ActivationRegionParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivationRegionParameter, _internal_metadata_));
  ActivationRegionParameter_ActivationMethod_descriptor_ = ActivationRegionParameter_descriptor_->enum_type(0);
  GTMapDataParameter_descriptor_ = file->message_type(20);
  static const int GTMapDataParameter_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTMapDataParameter, receptive_field_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTMapDataParameter, horizontal_stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTMapDataParameter, vertical_stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTMapDataParameter, activation_region_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTMapDataParameter, patch_offset_normalization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTMapDataParameter, bbox_normalization_),
  };
  GTMapDataParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GTMapDataParameter_descriptor_,
      GTMapDataParameter::internal_default_instance(),
      GTMapDataParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTMapDataParameter, _has_bits_),
      -1,
      -1,
      sizeof(GTMapDataParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTMapDataParameter, _internal_metadata_));
  LabelDiffIgnoreParameter_descriptor_ = file->message_type(21);
  static const int LabelDiffIgnoreParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelDiffIgnoreParameter, ignore_label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelDiffIgnoreParameter, ignore_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelDiffIgnoreParameter, elem_wise_),
  };
  LabelDiffIgnoreParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LabelDiffIgnoreParameter_descriptor_,
      LabelDiffIgnoreParameter::internal_default_instance(),
      LabelDiffIgnoreParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelDiffIgnoreParameter, _has_bits_),
      -1,
      -1,
      sizeof(LabelDiffIgnoreParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelDiffIgnoreParameter, _internal_metadata_));
  OffsetParameter_descriptor_ = file->message_type(22);
  static const int OffsetParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffsetParameter, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffsetParameter, anchor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffsetParameter, normalize_),
  };
  OffsetParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OffsetParameter_descriptor_,
      OffsetParameter::internal_default_instance(),
      OffsetParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffsetParameter, _has_bits_),
      -1,
      -1,
      sizeof(OffsetParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffsetParameter, _internal_metadata_));
  OffsetParameter_Anchor_descriptor_ = OffsetParameter_descriptor_->enum_type(0);
  GTSubmapDataParameter_descriptor_ = file->message_type(23);
  static const int GTSubmapDataParameter_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTSubmapDataParameter, submap_batch_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTSubmapDataParameter, submap_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTSubmapDataParameter, receptive_field_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTSubmapDataParameter, horizontal_stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTSubmapDataParameter, vertical_stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTSubmapDataParameter, activation_region_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTSubmapDataParameter, num_jitter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTSubmapDataParameter, bbox_normalization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTSubmapDataParameter, offset_param_),
  };
  GTSubmapDataParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GTSubmapDataParameter_descriptor_,
      GTSubmapDataParameter::internal_default_instance(),
      GTSubmapDataParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTSubmapDataParameter, _has_bits_),
      -1,
      -1,
      sizeof(GTSubmapDataParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTSubmapDataParameter, _internal_metadata_));
  TopSubmapDataParameter_descriptor_ = file->message_type(24);
  static const int TopSubmapDataParameter_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopSubmapDataParameter, img_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopSubmapDataParameter, submap_batch_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopSubmapDataParameter, win_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopSubmapDataParameter, win_horizontal_stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopSubmapDataParameter, win_vertical_stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopSubmapDataParameter, num_win_rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopSubmapDataParameter, num_win_cols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopSubmapDataParameter, offset_unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopSubmapDataParameter, offset_horizontal_stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopSubmapDataParameter, offset_vertical_stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopSubmapDataParameter, gt_unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopSubmapDataParameter, gt_horizontal_stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopSubmapDataParameter, gt_vertical_stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopSubmapDataParameter, bbox_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopSubmapDataParameter, offset_normalize_),
  };
  TopSubmapDataParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TopSubmapDataParameter_descriptor_,
      TopSubmapDataParameter::internal_default_instance(),
      TopSubmapDataParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopSubmapDataParameter, _has_bits_),
      -1,
      -1,
      sizeof(TopSubmapDataParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopSubmapDataParameter, _internal_metadata_));
  YOLOLikeLossParameter_descriptor_ = file->message_type(25);
  static const int YOLOLikeLossParameter_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YOLOLikeLossParameter, num_bbox_per_cell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YOLOLikeLossParameter, num_class_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YOLOLikeLossParameter, noobj_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YOLOLikeLossParameter, obj_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YOLOLikeLossParameter, class_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YOLOLikeLossParameter, coord_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YOLOLikeLossParameter, bbox_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YOLOLikeLossParameter, class_weight_),
  };
  YOLOLikeLossParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      YOLOLikeLossParameter_descriptor_,
      YOLOLikeLossParameter::internal_default_instance(),
      YOLOLikeLossParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YOLOLikeLossParameter, _has_bits_),
      -1,
      -1,
      sizeof(YOLOLikeLossParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YOLOLikeLossParameter, _internal_metadata_));
  WeightedSoftmaxLossParameter_descriptor_ = file->message_type(26);
  static const int WeightedSoftmaxLossParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightedSoftmaxLossParameter, class_weight_),
  };
  WeightedSoftmaxLossParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WeightedSoftmaxLossParameter_descriptor_,
      WeightedSoftmaxLossParameter::internal_default_instance(),
      WeightedSoftmaxLossParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightedSoftmaxLossParameter, _has_bits_),
      -1,
      -1,
      sizeof(WeightedSoftmaxLossParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightedSoftmaxLossParameter, _internal_metadata_));
  GridProposalLossParameter_descriptor_ = file->message_type(27);
  static const int GridProposalLossParameter_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridProposalLossParameter, noobj_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridProposalLossParameter, obj_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridProposalLossParameter, num_class_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridProposalLossParameter, general_obj_proposal_),
  };
  GridProposalLossParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GridProposalLossParameter_descriptor_,
      GridProposalLossParameter::internal_default_instance(),
      GridProposalLossParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridProposalLossParameter, _has_bits_),
      -1,
      -1,
      sizeof(GridProposalLossParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridProposalLossParameter, _internal_metadata_));
  BGSynthesisDataParameter_descriptor_ = file->message_type(28);
  static const int BGSynthesisDataParameter_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BGSynthesisDataParameter, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BGSynthesisDataParameter, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BGSynthesisDataParameter, obj_data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BGSynthesisDataParameter, bg_data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BGSynthesisDataParameter, max_obj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BGSynthesisDataParameter, min_obj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BGSynthesisDataParameter, active_region_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BGSynthesisDataParameter, batch_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BGSynthesisDataParameter, num_neg_),
  };
  BGSynthesisDataParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BGSynthesisDataParameter_descriptor_,
      BGSynthesisDataParameter::internal_default_instance(),
      BGSynthesisDataParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BGSynthesisDataParameter, _has_bits_),
      -1,
      -1,
      sizeof(BGSynthesisDataParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BGSynthesisDataParameter, _internal_metadata_));
  SizeFilterParameter_descriptor_ = file->message_type(29);
  static const int SizeFilterParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SizeFilterParameter, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SizeFilterParameter, min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SizeFilterParameter, max_),
  };
  SizeFilterParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SizeFilterParameter_descriptor_,
      SizeFilterParameter::internal_default_instance(),
      SizeFilterParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SizeFilterParameter, _has_bits_),
      -1,
      -1,
      sizeof(SizeFilterParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SizeFilterParameter, _internal_metadata_));
  RandomResizeParameter_descriptor_ = file->message_type(30);
  static const int RandomResizeParameter_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomResizeParameter, p_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomResizeParameter, w_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomResizeParameter, w_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomResizeParameter, h_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomResizeParameter, h_max_),
  };
  RandomResizeParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RandomResizeParameter_descriptor_,
      RandomResizeParameter::internal_default_instance(),
      RandomResizeParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomResizeParameter, _has_bits_),
      -1,
      -1,
      sizeof(RandomResizeParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomResizeParameter, _internal_metadata_));
  GaussianNoiseParameter_descriptor_ = file->message_type(31);
  static const int GaussianNoiseParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GaussianNoiseParameter, p_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GaussianNoiseParameter, mean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GaussianNoiseParameter, stddev_),
  };
  GaussianNoiseParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GaussianNoiseParameter_descriptor_,
      GaussianNoiseParameter::internal_default_instance(),
      GaussianNoiseParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GaussianNoiseParameter, _has_bits_),
      -1,
      -1,
      sizeof(GaussianNoiseParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GaussianNoiseParameter, _internal_metadata_));
  MirrorParameter_descriptor_ = file->message_type(32);
  static const int MirrorParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MirrorParameter, p_),
  };
  MirrorParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MirrorParameter_descriptor_,
      MirrorParameter::internal_default_instance(),
      MirrorParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MirrorParameter, _has_bits_),
      -1,
      -1,
      sizeof(MirrorParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MirrorParameter, _internal_metadata_));
  BlurParameter_descriptor_ = file->message_type(33);
  static const int BlurParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlurParameter, p_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlurParameter, kernel_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlurParameter, sigma_),
  };
  BlurParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BlurParameter_descriptor_,
      BlurParameter::internal_default_instance(),
      BlurParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlurParameter, _has_bits_),
      -1,
      -1,
      sizeof(BlurParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlurParameter, _internal_metadata_));
  AugmentationParameter_descriptor_ = file->message_type(34);
  static const int AugmentationParameter_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AugmentationParameter, pad_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AugmentationParameter, rand_resize_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AugmentationParameter, gauss_noise_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AugmentationParameter, mirror_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AugmentationParameter, blur_param_),
  };
  AugmentationParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AugmentationParameter_descriptor_,
      AugmentationParameter::internal_default_instance(),
      AugmentationParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AugmentationParameter, _has_bits_),
      -1,
      -1,
      sizeof(AugmentationParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AugmentationParameter, _internal_metadata_));
  HeatmapParameter_descriptor_ = file->message_type(35);
  static const int HeatmapParameter_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeatmapParameter, num_label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeatmapParameter, bbox_normalized_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeatmapParameter, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeatmapParameter, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeatmapParameter, rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeatmapParameter, cols_),
  };
  HeatmapParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HeatmapParameter_descriptor_,
      HeatmapParameter::internal_default_instance(),
      HeatmapParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeatmapParameter, _has_bits_),
      -1,
      -1,
      sizeof(HeatmapParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeatmapParameter, _internal_metadata_));
  MinibatchDataParameter_descriptor_ = file->message_type(36);
  static const int MinibatchDataParameter_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MinibatchDataParameter, num_batch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MinibatchDataParameter, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MinibatchDataParameter, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MinibatchDataParameter, num_gt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MinibatchDataParameter, max_num_patch_),
  };
  MinibatchDataParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MinibatchDataParameter_descriptor_,
      MinibatchDataParameter::internal_default_instance(),
      MinibatchDataParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MinibatchDataParameter, _has_bits_),
      -1,
      -1,
      sizeof(MinibatchDataParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MinibatchDataParameter, _internal_metadata_));
  RowColProposalTransformParameter_descriptor_ = file->message_type(37);
  static const int RowColProposalTransformParameter_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowColProposalTransformParameter, row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowColProposalTransformParameter, col_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowColProposalTransformParameter, in_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowColProposalTransformParameter, in_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowColProposalTransformParameter, out_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowColProposalTransformParameter, out_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowColProposalTransformParameter, objectness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowColProposalTransformParameter, num_label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowColProposalTransformParameter, ignore_label_),
  };
  RowColProposalTransformParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RowColProposalTransformParameter_descriptor_,
      RowColProposalTransformParameter::internal_default_instance(),
      RowColProposalTransformParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowColProposalTransformParameter, _has_bits_),
      -1,
      -1,
      sizeof(RowColProposalTransformParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowColProposalTransformParameter, _internal_metadata_));
  CheckParameter_descriptor_ = file->message_type(38);
  static const int CheckParameter_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckParameter, dst_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckParameter, bbox_norm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckParameter, w_divider_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckParameter, h_divider_),
  };
  CheckParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CheckParameter_descriptor_,
      CheckParameter::internal_default_instance(),
      CheckParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckParameter, _has_bits_),
      -1,
      -1,
      sizeof(CheckParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckParameter, _internal_metadata_));
  MeanSubParameter_descriptor_ = file->message_type(39);
  static const int MeanSubParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeanSubParameter, mean_file_),
  };
  MeanSubParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MeanSubParameter_descriptor_,
      MeanSubParameter::internal_default_instance(),
      MeanSubParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeanSubParameter, _has_bits_),
      -1,
      -1,
      sizeof(MeanSubParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeanSubParameter, _internal_metadata_));
  AnnoToSegParameter_descriptor_ = file->message_type(40);
  static const int AnnoToSegParameter_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnoToSegParameter, objectness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnoToSegParameter, num_label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnoToSegParameter, bbox_normalized_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnoToSegParameter, in_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnoToSegParameter, in_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnoToSegParameter, out_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnoToSegParameter, out_height_),
  };
  AnnoToSegParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AnnoToSegParameter_descriptor_,
      AnnoToSegParameter::internal_default_instance(),
      AnnoToSegParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnoToSegParameter, _has_bits_),
      -1,
      -1,
      sizeof(AnnoToSegParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnoToSegParameter, _internal_metadata_));
  TrainROIParameter_descriptor_ = file->message_type(41);
  static const int TrainROIParameter_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainROIParameter, img_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainROIParameter, img_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainROIParameter, roi_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainROIParameter, roi_height_),
  };
  TrainROIParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrainROIParameter_descriptor_,
      TrainROIParameter::internal_default_instance(),
      TrainROIParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainROIParameter, _has_bits_),
      -1,
      -1,
      sizeof(TrainROIParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainROIParameter, _internal_metadata_));
  YOLOV2LossParameter_descriptor_ = file->message_type(42);
  static const int YOLOV2LossParameter_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YOLOV2LossParameter, anchor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YOLOV2LossParameter, num_class_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YOLOV2LossParameter, img_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YOLOV2LossParameter, yolo_map_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YOLOV2LossParameter, overlap_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YOLOV2LossParameter, noobj_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YOLOV2LossParameter, obj_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YOLOV2LossParameter, cls_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YOLOV2LossParameter, coord_scale_),
  };
  YOLOV2LossParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      YOLOV2LossParameter_descriptor_,
      YOLOV2LossParameter::internal_default_instance(),
      YOLOV2LossParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YOLOV2LossParameter, _has_bits_),
      -1,
      -1,
      sizeof(YOLOV2LossParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YOLOV2LossParameter, _internal_metadata_));
  YOLOV2ResultParameter_descriptor_ = file->message_type(43);
  static const int YOLOV2ResultParameter_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YOLOV2ResultParameter, cell_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YOLOV2ResultParameter, num_class_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YOLOV2ResultParameter, anchor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YOLOV2ResultParameter, num_detection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YOLOV2ResultParameter, do_nms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YOLOV2ResultParameter, nms_overlap_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YOLOV2ResultParameter, conf_threshold_),
  };
  YOLOV2ResultParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      YOLOV2ResultParameter_descriptor_,
      YOLOV2ResultParameter::internal_default_instance(),
      YOLOV2ResultParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YOLOV2ResultParameter, _has_bits_),
      -1,
      -1,
      sizeof(YOLOV2ResultParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YOLOV2ResultParameter, _internal_metadata_));
  DetectionCheckParameter_descriptor_ = file->message_type(44);
  static const int DetectionCheckParameter_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionCheckParameter, eval_performance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionCheckParameter, draw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionCheckParameter, detection_conf_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionCheckParameter, iou_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionCheckParameter, log_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionCheckParameter, detection_only_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionCheckParameter, do_nms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionCheckParameter, nms_overlap_threshold_),
  };
  DetectionCheckParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DetectionCheckParameter_descriptor_,
      DetectionCheckParameter::internal_default_instance(),
      DetectionCheckParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionCheckParameter, _has_bits_),
      -1,
      -1,
      sizeof(DetectionCheckParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionCheckParameter, _internal_metadata_));
  SubwinOffsetParameter_descriptor_ = file->message_type(45);
  static const int SubwinOffsetParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubwinOffsetParameter, win_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubwinOffsetParameter, win_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubwinOffsetParameter, global_detection_),
  };
  SubwinOffsetParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SubwinOffsetParameter_descriptor_,
      SubwinOffsetParameter::internal_default_instance(),
      SubwinOffsetParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubwinOffsetParameter, _has_bits_),
      -1,
      -1,
      sizeof(SubwinOffsetParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubwinOffsetParameter, _internal_metadata_));
  SizeRejectionParameter_descriptor_ = file->message_type(46);
  static const int SizeRejectionParameter_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SizeRejectionParameter, w_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SizeRejectionParameter, w_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SizeRejectionParameter, h_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SizeRejectionParameter, h_max_),
  };
  SizeRejectionParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SizeRejectionParameter_descriptor_,
      SizeRejectionParameter::internal_default_instance(),
      SizeRejectionParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SizeRejectionParameter, _has_bits_),
      -1,
      -1,
      sizeof(SizeRejectionParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SizeRejectionParameter, _internal_metadata_));
  ConfCheckParameter_descriptor_ = file->message_type(47);
  static const int ConfCheckParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfCheckParameter, out_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfCheckParameter, draw_),
  };
  ConfCheckParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConfCheckParameter_descriptor_,
      ConfCheckParameter::internal_default_instance(),
      ConfCheckParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfCheckParameter, _has_bits_),
      -1,
      -1,
      sizeof(ConfCheckParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfCheckParameter, _internal_metadata_));
  ReorgParameter_descriptor_ = file->message_type(48);
  static const int ReorgParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorgParameter, stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorgParameter, reverse_),
  };
  ReorgParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReorgParameter_descriptor_,
      ReorgParameter::internal_default_instance(),
      ReorgParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorgParameter, _has_bits_),
      -1,
      -1,
      sizeof(ReorgParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorgParameter, _internal_metadata_));
  BatchRejectionParameter_descriptor_ = file->message_type(49);
  static const int BatchRejectionParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchRejectionParameter, rejection_by_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchRejectionParameter, threshold_),
  };
  BatchRejectionParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BatchRejectionParameter_descriptor_,
      BatchRejectionParameter::internal_default_instance(),
      BatchRejectionParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchRejectionParameter, _has_bits_),
      -1,
      -1,
      sizeof(BatchRejectionParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchRejectionParameter, _internal_metadata_));
  BlobShape_descriptor_ = file->message_type(50);
  static const int BlobShape_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShape, dim_),
  };
  BlobShape_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BlobShape_descriptor_,
      BlobShape::internal_default_instance(),
      BlobShape_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShape, _has_bits_),
      -1,
      -1,
      sizeof(BlobShape),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShape, _internal_metadata_));
  BlobProto_descriptor_ = file->message_type(51);
  static const int BlobProto_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, diff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, double_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, double_diff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, width_),
  };
  BlobProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BlobProto_descriptor_,
      BlobProto::internal_default_instance(),
      BlobProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, _has_bits_),
      -1,
      -1,
      sizeof(BlobProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, _internal_metadata_));
  BlobProtoVector_descriptor_ = file->message_type(52);
  static const int BlobProtoVector_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProtoVector, blobs_),
  };
  BlobProtoVector_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BlobProtoVector_descriptor_,
      BlobProtoVector::internal_default_instance(),
      BlobProtoVector_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProtoVector, _has_bits_),
      -1,
      -1,
      sizeof(BlobProtoVector),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProtoVector, _internal_metadata_));
  Datum_descriptor_ = file->message_type(53);
  static const int Datum_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, float_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, encoded_),
  };
  Datum_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Datum_descriptor_,
      Datum::internal_default_instance(),
      Datum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, _has_bits_),
      -1,
      -1,
      sizeof(Datum),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, _internal_metadata_));
  FillerParameter_descriptor_ = file->message_type(54);
  static const int FillerParameter_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, mean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, std_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, sparse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, variance_norm_),
  };
  FillerParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FillerParameter_descriptor_,
      FillerParameter::internal_default_instance(),
      FillerParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, _has_bits_),
      -1,
      -1,
      sizeof(FillerParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, _internal_metadata_));
  FillerParameter_VarianceNorm_descriptor_ = FillerParameter_descriptor_->enum_type(0);
  NetParameter_descriptor_ = file->message_type(55);
  static const int NetParameter_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, input_shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, input_dim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, force_backward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, debug_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, layers_),
  };
  NetParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NetParameter_descriptor_,
      NetParameter::internal_default_instance(),
      NetParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, _has_bits_),
      -1,
      -1,
      sizeof(NetParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, _internal_metadata_));
  SolverParameter_descriptor_ = file->message_type(56);
  static const int SolverParameter_offsets_[41] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, net_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, net_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, train_net_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, test_net_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, train_net_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, test_net_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, train_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, test_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, test_iter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, test_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, test_compute_loss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, test_initialization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, base_lr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, average_loss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, max_iter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, iter_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, lr_policy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, gamma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, momentum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, weight_decay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, regularization_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, stepsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, stepvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, clip_gradients_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, snapshot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, snapshot_prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, snapshot_diff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, snapshot_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, solver_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, random_seed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, delta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, momentum2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, rms_decay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, debug_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, snapshot_after_train_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, solver_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, layer_wise_reduce_),
  };
  SolverParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SolverParameter_descriptor_,
      SolverParameter::internal_default_instance(),
      SolverParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, _has_bits_),
      -1,
      -1,
      sizeof(SolverParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, _internal_metadata_));
  SolverParameter_SnapshotFormat_descriptor_ = SolverParameter_descriptor_->enum_type(0);
  SolverParameter_SolverMode_descriptor_ = SolverParameter_descriptor_->enum_type(1);
  SolverParameter_SolverType_descriptor_ = SolverParameter_descriptor_->enum_type(2);
  SolverState_descriptor_ = file->message_type(57);
  static const int SolverState_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, iter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, learned_net_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, history_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, current_step_),
  };
  SolverState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SolverState_descriptor_,
      SolverState::internal_default_instance(),
      SolverState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, _has_bits_),
      -1,
      -1,
      sizeof(SolverState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, _internal_metadata_));
  NetState_descriptor_ = file->message_type(58);
  static const int NetState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetState, phase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetState, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetState, stage_),
  };
  NetState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NetState_descriptor_,
      NetState::internal_default_instance(),
      NetState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetState, _has_bits_),
      -1,
      -1,
      sizeof(NetState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetState, _internal_metadata_));
  NetStateRule_descriptor_ = file->message_type(59);
  static const int NetStateRule_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStateRule, phase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStateRule, min_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStateRule, max_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStateRule, stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStateRule, not_stage_),
  };
  NetStateRule_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NetStateRule_descriptor_,
      NetStateRule::internal_default_instance(),
      NetStateRule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStateRule, _has_bits_),
      -1,
      -1,
      sizeof(NetStateRule),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStateRule, _internal_metadata_));
  ParamSpec_descriptor_ = file->message_type(60);
  static const int ParamSpec_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamSpec, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamSpec, share_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamSpec, lr_mult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamSpec, decay_mult_),
  };
  ParamSpec_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ParamSpec_descriptor_,
      ParamSpec::internal_default_instance(),
      ParamSpec_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamSpec, _has_bits_),
      -1,
      -1,
      sizeof(ParamSpec),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamSpec, _internal_metadata_));
  ParamSpec_DimCheckMode_descriptor_ = ParamSpec_descriptor_->enum_type(0);
  LayerParameter_descriptor_ = file->message_type(61);
  static const int LayerParameter_offsets_[94] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, bottom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, phase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, loss_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, blobs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, propagate_down_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, include_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, exclude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, transform_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, loss_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, accuracy_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, argmax_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, batch_norm_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, bias_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, concat_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, contrastive_loss_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, convolution_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, crop_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, dropout_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, dummy_data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, eltwise_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, elu_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, embed_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, exp_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, flatten_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, hdf5_data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, hdf5_output_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, hinge_loss_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, image_data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, infogain_loss_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, inner_product_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, input_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, log_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, lrn_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, memory_data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, mvn_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, parameter_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, pooling_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, power_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, prelu_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, python_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, recurrent_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, reduction_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, relu_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, reshape_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, scale_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, sigmoid_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, softmax_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, spp_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, slice_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, tanh_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, threshold_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, tile_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, window_data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, img_bbox_anno_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, heatmap_concat_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, bbox_anno_map_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, label_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, patch_data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, label_remap_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, bbox_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, sliding_window_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, bbox_to_grid_and_size_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, size_unit_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, padding_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, gt_map_data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, label_diff_ignore_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, gt_submap_data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, top_submap_data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, yololike_loss_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, weighted_softmax_loss_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, grid_proposal_loss_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, bg_synthesis_data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, size_filter_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, augmentation_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, heatmap_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, check_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, mean_sub_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, minibatch_data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, rcp_transform_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, anno_to_seg_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, train_roi_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, yolo_v2_loss_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, yolo_v2_result_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, detection_check_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, subwin_offset_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, size_rejection_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, conf_check_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, reorg_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, batch_rejection_param_),
  };
  LayerParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LayerParameter_descriptor_,
      LayerParameter::internal_default_instance(),
      LayerParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, _has_bits_),
      -1,
      -1,
      sizeof(LayerParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, _internal_metadata_));
  TransformationParameter_descriptor_ = file->message_type(62);
  static const int TransformationParameter_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, mirror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, crop_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, mean_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, mean_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, force_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, force_gray_),
  };
  TransformationParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransformationParameter_descriptor_,
      TransformationParameter::internal_default_instance(),
      TransformationParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, _has_bits_),
      -1,
      -1,
      sizeof(TransformationParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, _internal_metadata_));
  LossParameter_descriptor_ = file->message_type(63);
  static const int LossParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossParameter, ignore_label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossParameter, normalization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossParameter, normalize_),
  };
  LossParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LossParameter_descriptor_,
      LossParameter::internal_default_instance(),
      LossParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossParameter, _has_bits_),
      -1,
      -1,
      sizeof(LossParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossParameter, _internal_metadata_));
  LossParameter_NormalizationMode_descriptor_ = LossParameter_descriptor_->enum_type(0);
  AccuracyParameter_descriptor_ = file->message_type(64);
  static const int AccuracyParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccuracyParameter, top_k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccuracyParameter, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccuracyParameter, ignore_label_),
  };
  AccuracyParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AccuracyParameter_descriptor_,
      AccuracyParameter::internal_default_instance(),
      AccuracyParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccuracyParameter, _has_bits_),
      -1,
      -1,
      sizeof(AccuracyParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccuracyParameter, _internal_metadata_));
  ArgMaxParameter_descriptor_ = file->message_type(65);
  static const int ArgMaxParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArgMaxParameter, out_max_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArgMaxParameter, top_k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArgMaxParameter, axis_),
  };
  ArgMaxParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ArgMaxParameter_descriptor_,
      ArgMaxParameter::internal_default_instance(),
      ArgMaxParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArgMaxParameter, _has_bits_),
      -1,
      -1,
      sizeof(ArgMaxParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArgMaxParameter, _internal_metadata_));
  ConcatParameter_descriptor_ = file->message_type(66);
  static const int ConcatParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcatParameter, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcatParameter, concat_dim_),
  };
  ConcatParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConcatParameter_descriptor_,
      ConcatParameter::internal_default_instance(),
      ConcatParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcatParameter, _has_bits_),
      -1,
      -1,
      sizeof(ConcatParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcatParameter, _internal_metadata_));
  BatchNormParameter_descriptor_ = file->message_type(67);
  static const int BatchNormParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormParameter, use_global_stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormParameter, moving_average_fraction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormParameter, eps_),
  };
  BatchNormParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BatchNormParameter_descriptor_,
      BatchNormParameter::internal_default_instance(),
      BatchNormParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormParameter, _has_bits_),
      -1,
      -1,
      sizeof(BatchNormParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormParameter, _internal_metadata_));
  BiasParameter_descriptor_ = file->message_type(68);
  static const int BiasParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiasParameter, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiasParameter, num_axes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiasParameter, filler_),
  };
  BiasParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BiasParameter_descriptor_,
      BiasParameter::internal_default_instance(),
      BiasParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiasParameter, _has_bits_),
      -1,
      -1,
      sizeof(BiasParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiasParameter, _internal_metadata_));
  ContrastiveLossParameter_descriptor_ = file->message_type(69);
  static const int ContrastiveLossParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContrastiveLossParameter, margin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContrastiveLossParameter, legacy_version_),
  };
  ContrastiveLossParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ContrastiveLossParameter_descriptor_,
      ContrastiveLossParameter::internal_default_instance(),
      ContrastiveLossParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContrastiveLossParameter, _has_bits_),
      -1,
      -1,
      sizeof(ContrastiveLossParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContrastiveLossParameter, _internal_metadata_));
  ConvolutionParameter_descriptor_ = file->message_type(70);
  static const int ConvolutionParameter_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, num_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, bias_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, pad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, kernel_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, dilation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, pad_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, pad_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, kernel_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, kernel_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, stride_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, stride_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, weight_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, bias_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, engine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, force_nd_im2col_),
  };
  ConvolutionParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConvolutionParameter_descriptor_,
      ConvolutionParameter::internal_default_instance(),
      ConvolutionParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, _has_bits_),
      -1,
      -1,
      sizeof(ConvolutionParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, _internal_metadata_));
  ConvolutionParameter_Engine_descriptor_ = ConvolutionParameter_descriptor_->enum_type(0);
  CropParameter_descriptor_ = file->message_type(71);
  static const int CropParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropParameter, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropParameter, offset_),
  };
  CropParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CropParameter_descriptor_,
      CropParameter::internal_default_instance(),
      CropParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropParameter, _has_bits_),
      -1,
      -1,
      sizeof(CropParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropParameter, _internal_metadata_));
  DataParameter_descriptor_ = file->message_type(72);
  static const int DataParameter_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, batch_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, rand_skip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, backend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, mean_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, crop_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, mirror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, force_encoded_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, prefetch_),
  };
  DataParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DataParameter_descriptor_,
      DataParameter::internal_default_instance(),
      DataParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, _has_bits_),
      -1,
      -1,
      sizeof(DataParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, _internal_metadata_));
  DataParameter_DB_descriptor_ = DataParameter_descriptor_->enum_type(0);
  DropoutParameter_descriptor_ = file->message_type(73);
  static const int DropoutParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropoutParameter, dropout_ratio_),
  };
  DropoutParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DropoutParameter_descriptor_,
      DropoutParameter::internal_default_instance(),
      DropoutParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropoutParameter, _has_bits_),
      -1,
      -1,
      sizeof(DropoutParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropoutParameter, _internal_metadata_));
  DummyDataParameter_descriptor_ = file->message_type(74);
  static const int DummyDataParameter_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyDataParameter, data_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyDataParameter, shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyDataParameter, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyDataParameter, channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyDataParameter, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyDataParameter, width_),
  };
  DummyDataParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DummyDataParameter_descriptor_,
      DummyDataParameter::internal_default_instance(),
      DummyDataParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyDataParameter, _has_bits_),
      -1,
      -1,
      sizeof(DummyDataParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyDataParameter, _internal_metadata_));
  EltwiseParameter_descriptor_ = file->message_type(75);
  static const int EltwiseParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EltwiseParameter, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EltwiseParameter, coeff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EltwiseParameter, stable_prod_grad_),
  };
  EltwiseParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EltwiseParameter_descriptor_,
      EltwiseParameter::internal_default_instance(),
      EltwiseParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EltwiseParameter, _has_bits_),
      -1,
      -1,
      sizeof(EltwiseParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EltwiseParameter, _internal_metadata_));
  EltwiseParameter_EltwiseOp_descriptor_ = EltwiseParameter_descriptor_->enum_type(0);
  ELUParameter_descriptor_ = file->message_type(76);
  static const int ELUParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ELUParameter, alpha_),
  };
  ELUParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ELUParameter_descriptor_,
      ELUParameter::internal_default_instance(),
      ELUParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ELUParameter, _has_bits_),
      -1,
      -1,
      sizeof(ELUParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ELUParameter, _internal_metadata_));
  EmbedParameter_descriptor_ = file->message_type(77);
  static const int EmbedParameter_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedParameter, num_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedParameter, input_dim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedParameter, bias_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedParameter, weight_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedParameter, bias_filler_),
  };
  EmbedParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EmbedParameter_descriptor_,
      EmbedParameter::internal_default_instance(),
      EmbedParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedParameter, _has_bits_),
      -1,
      -1,
      sizeof(EmbedParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedParameter, _internal_metadata_));
  ExpParameter_descriptor_ = file->message_type(78);
  static const int ExpParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParameter, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParameter, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParameter, shift_),
  };
  ExpParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExpParameter_descriptor_,
      ExpParameter::internal_default_instance(),
      ExpParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParameter, _has_bits_),
      -1,
      -1,
      sizeof(ExpParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParameter, _internal_metadata_));
  FlattenParameter_descriptor_ = file->message_type(79);
  static const int FlattenParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlattenParameter, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlattenParameter, end_axis_),
  };
  FlattenParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FlattenParameter_descriptor_,
      FlattenParameter::internal_default_instance(),
      FlattenParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlattenParameter, _has_bits_),
      -1,
      -1,
      sizeof(FlattenParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlattenParameter, _internal_metadata_));
  HDF5DataParameter_descriptor_ = file->message_type(80);
  static const int HDF5DataParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDF5DataParameter, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDF5DataParameter, batch_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDF5DataParameter, shuffle_),
  };
  HDF5DataParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HDF5DataParameter_descriptor_,
      HDF5DataParameter::internal_default_instance(),
      HDF5DataParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDF5DataParameter, _has_bits_),
      -1,
      -1,
      sizeof(HDF5DataParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDF5DataParameter, _internal_metadata_));
  HDF5OutputParameter_descriptor_ = file->message_type(81);
  static const int HDF5OutputParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDF5OutputParameter, file_name_),
  };
  HDF5OutputParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HDF5OutputParameter_descriptor_,
      HDF5OutputParameter::internal_default_instance(),
      HDF5OutputParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDF5OutputParameter, _has_bits_),
      -1,
      -1,
      sizeof(HDF5OutputParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDF5OutputParameter, _internal_metadata_));
  HingeLossParameter_descriptor_ = file->message_type(82);
  static const int HingeLossParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HingeLossParameter, norm_),
  };
  HingeLossParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HingeLossParameter_descriptor_,
      HingeLossParameter::internal_default_instance(),
      HingeLossParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HingeLossParameter, _has_bits_),
      -1,
      -1,
      sizeof(HingeLossParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HingeLossParameter, _internal_metadata_));
  HingeLossParameter_Norm_descriptor_ = HingeLossParameter_descriptor_->enum_type(0);
  ImageDataParameter_descriptor_ = file->message_type(83);
  static const int ImageDataParameter_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, batch_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, rand_skip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, shuffle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, new_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, new_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, is_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, mean_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, crop_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, mirror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, root_folder_),
  };
  ImageDataParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ImageDataParameter_descriptor_,
      ImageDataParameter::internal_default_instance(),
      ImageDataParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, _has_bits_),
      -1,
      -1,
      sizeof(ImageDataParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, _internal_metadata_));
  InfogainLossParameter_descriptor_ = file->message_type(84);
  static const int InfogainLossParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfogainLossParameter, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfogainLossParameter, axis_),
  };
  InfogainLossParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InfogainLossParameter_descriptor_,
      InfogainLossParameter::internal_default_instance(),
      InfogainLossParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfogainLossParameter, _has_bits_),
      -1,
      -1,
      sizeof(InfogainLossParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfogainLossParameter, _internal_metadata_));
  InnerProductParameter_descriptor_ = file->message_type(85);
  static const int InnerProductParameter_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, num_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, bias_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, weight_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, bias_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, transpose_),
  };
  InnerProductParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InnerProductParameter_descriptor_,
      InnerProductParameter::internal_default_instance(),
      InnerProductParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, _has_bits_),
      -1,
      -1,
      sizeof(InnerProductParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, _internal_metadata_));
  InputParameter_descriptor_ = file->message_type(86);
  static const int InputParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputParameter, shape_),
  };
  InputParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InputParameter_descriptor_,
      InputParameter::internal_default_instance(),
      InputParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputParameter, _has_bits_),
      -1,
      -1,
      sizeof(InputParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputParameter, _internal_metadata_));
  LogParameter_descriptor_ = file->message_type(87);
  static const int LogParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogParameter, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogParameter, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogParameter, shift_),
  };
  LogParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogParameter_descriptor_,
      LogParameter::internal_default_instance(),
      LogParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogParameter, _has_bits_),
      -1,
      -1,
      sizeof(LogParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogParameter, _internal_metadata_));
  LRNParameter_descriptor_ = file->message_type(88);
  static const int LRNParameter_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, local_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, alpha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, beta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, norm_region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, engine_),
  };
  LRNParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LRNParameter_descriptor_,
      LRNParameter::internal_default_instance(),
      LRNParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, _has_bits_),
      -1,
      -1,
      sizeof(LRNParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, _internal_metadata_));
  LRNParameter_NormRegion_descriptor_ = LRNParameter_descriptor_->enum_type(0);
  LRNParameter_Engine_descriptor_ = LRNParameter_descriptor_->enum_type(1);
  MemoryDataParameter_descriptor_ = file->message_type(89);
  static const int MemoryDataParameter_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryDataParameter, batch_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryDataParameter, channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryDataParameter, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryDataParameter, width_),
  };
  MemoryDataParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MemoryDataParameter_descriptor_,
      MemoryDataParameter::internal_default_instance(),
      MemoryDataParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryDataParameter, _has_bits_),
      -1,
      -1,
      sizeof(MemoryDataParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryDataParameter, _internal_metadata_));
  MVNParameter_descriptor_ = file->message_type(90);
  static const int MVNParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVNParameter, normalize_variance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVNParameter, across_channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVNParameter, eps_),
  };
  MVNParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MVNParameter_descriptor_,
      MVNParameter::internal_default_instance(),
      MVNParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVNParameter, _has_bits_),
      -1,
      -1,
      sizeof(MVNParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVNParameter, _internal_metadata_));
  ParameterParameter_descriptor_ = file->message_type(91);
  static const int ParameterParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterParameter, shape_),
  };
  ParameterParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ParameterParameter_descriptor_,
      ParameterParameter::internal_default_instance(),
      ParameterParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterParameter, _has_bits_),
      -1,
      -1,
      sizeof(ParameterParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterParameter, _internal_metadata_));
  PoolingParameter_descriptor_ = file->message_type(92);
  static const int PoolingParameter_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, pool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, pad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, pad_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, pad_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, kernel_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, kernel_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, kernel_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, stride_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, stride_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, engine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, global_pooling_),
  };
  PoolingParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PoolingParameter_descriptor_,
      PoolingParameter::internal_default_instance(),
      PoolingParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, _has_bits_),
      -1,
      -1,
      sizeof(PoolingParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, _internal_metadata_));
  PoolingParameter_PoolMethod_descriptor_ = PoolingParameter_descriptor_->enum_type(0);
  PoolingParameter_Engine_descriptor_ = PoolingParameter_descriptor_->enum_type(1);
  PowerParameter_descriptor_ = file->message_type(93);
  static const int PowerParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerParameter, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerParameter, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerParameter, shift_),
  };
  PowerParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PowerParameter_descriptor_,
      PowerParameter::internal_default_instance(),
      PowerParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerParameter, _has_bits_),
      -1,
      -1,
      sizeof(PowerParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerParameter, _internal_metadata_));
  PythonParameter_descriptor_ = file->message_type(94);
  static const int PythonParameter_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonParameter, module_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonParameter, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonParameter, param_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonParameter, share_in_parallel_),
  };
  PythonParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PythonParameter_descriptor_,
      PythonParameter::internal_default_instance(),
      PythonParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonParameter, _has_bits_),
      -1,
      -1,
      sizeof(PythonParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonParameter, _internal_metadata_));
  RecurrentParameter_descriptor_ = file->message_type(95);
  static const int RecurrentParameter_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecurrentParameter, num_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecurrentParameter, weight_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecurrentParameter, bias_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecurrentParameter, debug_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecurrentParameter, expose_hidden_),
  };
  RecurrentParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RecurrentParameter_descriptor_,
      RecurrentParameter::internal_default_instance(),
      RecurrentParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecurrentParameter, _has_bits_),
      -1,
      -1,
      sizeof(RecurrentParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecurrentParameter, _internal_metadata_));
  ReductionParameter_descriptor_ = file->message_type(96);
  static const int ReductionParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReductionParameter, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReductionParameter, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReductionParameter, coeff_),
  };
  ReductionParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReductionParameter_descriptor_,
      ReductionParameter::internal_default_instance(),
      ReductionParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReductionParameter, _has_bits_),
      -1,
      -1,
      sizeof(ReductionParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReductionParameter, _internal_metadata_));
  ReductionParameter_ReductionOp_descriptor_ = ReductionParameter_descriptor_->enum_type(0);
  ReLUParameter_descriptor_ = file->message_type(97);
  static const int ReLUParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReLUParameter, negative_slope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReLUParameter, engine_),
  };
  ReLUParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReLUParameter_descriptor_,
      ReLUParameter::internal_default_instance(),
      ReLUParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReLUParameter, _has_bits_),
      -1,
      -1,
      sizeof(ReLUParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReLUParameter, _internal_metadata_));
  ReLUParameter_Engine_descriptor_ = ReLUParameter_descriptor_->enum_type(0);
  ReshapeParameter_descriptor_ = file->message_type(98);
  static const int ReshapeParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReshapeParameter, shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReshapeParameter, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReshapeParameter, num_axes_),
  };
  ReshapeParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReshapeParameter_descriptor_,
      ReshapeParameter::internal_default_instance(),
      ReshapeParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReshapeParameter, _has_bits_),
      -1,
      -1,
      sizeof(ReshapeParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReshapeParameter, _internal_metadata_));
  ScaleParameter_descriptor_ = file->message_type(99);
  static const int ScaleParameter_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleParameter, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleParameter, num_axes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleParameter, filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleParameter, bias_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleParameter, bias_filler_),
  };
  ScaleParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ScaleParameter_descriptor_,
      ScaleParameter::internal_default_instance(),
      ScaleParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleParameter, _has_bits_),
      -1,
      -1,
      sizeof(ScaleParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleParameter, _internal_metadata_));
  SigmoidParameter_descriptor_ = file->message_type(100);
  static const int SigmoidParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigmoidParameter, engine_),
  };
  SigmoidParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SigmoidParameter_descriptor_,
      SigmoidParameter::internal_default_instance(),
      SigmoidParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigmoidParameter, _has_bits_),
      -1,
      -1,
      sizeof(SigmoidParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigmoidParameter, _internal_metadata_));
  SigmoidParameter_Engine_descriptor_ = SigmoidParameter_descriptor_->enum_type(0);
  SliceParameter_descriptor_ = file->message_type(101);
  static const int SliceParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SliceParameter, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SliceParameter, slice_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SliceParameter, slice_dim_),
  };
  SliceParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SliceParameter_descriptor_,
      SliceParameter::internal_default_instance(),
      SliceParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SliceParameter, _has_bits_),
      -1,
      -1,
      sizeof(SliceParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SliceParameter, _internal_metadata_));
  SoftmaxParameter_descriptor_ = file->message_type(102);
  static const int SoftmaxParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxParameter, engine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxParameter, axis_),
  };
  SoftmaxParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SoftmaxParameter_descriptor_,
      SoftmaxParameter::internal_default_instance(),
      SoftmaxParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxParameter, _has_bits_),
      -1,
      -1,
      sizeof(SoftmaxParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxParameter, _internal_metadata_));
  SoftmaxParameter_Engine_descriptor_ = SoftmaxParameter_descriptor_->enum_type(0);
  TanHParameter_descriptor_ = file->message_type(103);
  static const int TanHParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TanHParameter, engine_),
  };
  TanHParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TanHParameter_descriptor_,
      TanHParameter::internal_default_instance(),
      TanHParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TanHParameter, _has_bits_),
      -1,
      -1,
      sizeof(TanHParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TanHParameter, _internal_metadata_));
  TanHParameter_Engine_descriptor_ = TanHParameter_descriptor_->enum_type(0);
  TileParameter_descriptor_ = file->message_type(104);
  static const int TileParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileParameter, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileParameter, tiles_),
  };
  TileParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TileParameter_descriptor_,
      TileParameter::internal_default_instance(),
      TileParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileParameter, _has_bits_),
      -1,
      -1,
      sizeof(TileParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileParameter, _internal_metadata_));
  ThresholdParameter_descriptor_ = file->message_type(105);
  static const int ThresholdParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThresholdParameter, threshold_),
  };
  ThresholdParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ThresholdParameter_descriptor_,
      ThresholdParameter::internal_default_instance(),
      ThresholdParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThresholdParameter, _has_bits_),
      -1,
      -1,
      sizeof(ThresholdParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThresholdParameter, _internal_metadata_));
  WindowDataParameter_descriptor_ = file->message_type(106);
  static const int WindowDataParameter_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, mean_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, batch_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, crop_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, mirror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, fg_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, bg_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, fg_fraction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, context_pad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, crop_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, cache_images_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, root_folder_),
  };
  WindowDataParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WindowDataParameter_descriptor_,
      WindowDataParameter::internal_default_instance(),
      WindowDataParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, _has_bits_),
      -1,
      -1,
      sizeof(WindowDataParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, _internal_metadata_));
  SPPParameter_descriptor_ = file->message_type(107);
  static const int SPPParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPPParameter, pyramid_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPPParameter, pool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPPParameter, engine_),
  };
  SPPParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SPPParameter_descriptor_,
      SPPParameter::internal_default_instance(),
      SPPParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPPParameter, _has_bits_),
      -1,
      -1,
      sizeof(SPPParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPPParameter, _internal_metadata_));
  SPPParameter_PoolMethod_descriptor_ = SPPParameter_descriptor_->enum_type(0);
  SPPParameter_Engine_descriptor_ = SPPParameter_descriptor_->enum_type(1);
  V1LayerParameter_descriptor_ = file->message_type(108);
  static const int V1LayerParameter_offsets_[43] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, bottom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, include_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, exclude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, blobs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, blob_share_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, blobs_lr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, weight_decay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, loss_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, accuracy_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, argmax_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, concat_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, contrastive_loss_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, convolution_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, dropout_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, dummy_data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, eltwise_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, exp_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, hdf5_data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, hdf5_output_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, hinge_loss_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, image_data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, infogain_loss_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, inner_product_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, lrn_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, memory_data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, mvn_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, pooling_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, power_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, relu_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, sigmoid_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, softmax_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, slice_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, tanh_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, threshold_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, window_data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, transform_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, loss_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, layer_),
  };
  V1LayerParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      V1LayerParameter_descriptor_,
      V1LayerParameter::internal_default_instance(),
      V1LayerParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, _has_bits_),
      -1,
      -1,
      sizeof(V1LayerParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, _internal_metadata_));
  V1LayerParameter_LayerType_descriptor_ = V1LayerParameter_descriptor_->enum_type(0);
  V1LayerParameter_DimCheckMode_descriptor_ = V1LayerParameter_descriptor_->enum_type(1);
  V0LayerParameter_descriptor_ = file->message_type(109);
  static const int V0LayerParameter_offsets_[38] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, num_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, biasterm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, weight_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, bias_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, pad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, kernelsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, pool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, dropout_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, local_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, alpha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, beta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, meanfile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, batchsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, cropsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, mirror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, blobs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, blobs_lr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, weight_decay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, rand_skip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, det_fg_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, det_bg_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, det_fg_fraction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, det_context_pad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, det_crop_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, new_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, new_channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, new_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, new_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, shuffle_images_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, concat_dim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, hdf5_output_param_),
  };
  V0LayerParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      V0LayerParameter_descriptor_,
      V0LayerParameter::internal_default_instance(),
      V0LayerParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, _has_bits_),
      -1,
      -1,
      sizeof(V0LayerParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, _internal_metadata_));
  V0LayerParameter_PoolMethod_descriptor_ = V0LayerParameter_descriptor_->enum_type(0);
  PReLUParameter_descriptor_ = file->message_type(110);
  static const int PReLUParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PReLUParameter, filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PReLUParameter, channel_shared_),
  };
  PReLUParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PReLUParameter_descriptor_,
      PReLUParameter::internal_default_instance(),
      PReLUParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PReLUParameter, _has_bits_),
      -1,
      -1,
      sizeof(PReLUParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PReLUParameter, _internal_metadata_));
  Phase_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_caffe_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ImgBBoxAnnoDatum_descriptor_, ImgBBoxAnnoDatum::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ImgBBoxAnnoParameter_descriptor_, ImgBBoxAnnoParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HeatmapConcatParameter_descriptor_, HeatmapConcatParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BBoxAnnoMapParameter_descriptor_, BBoxAnnoMapParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LabelParameter_descriptor_, LabelParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PatchDatum_descriptor_, PatchDatum::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PatchDataParameter_descriptor_, PatchDataParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LabelRemapParameter_descriptor_, LabelRemapParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BBoxParameter_descriptor_, BBoxParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SlidingWindowInputParameter_descriptor_, SlidingWindowInputParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BBoxToGridAndSizeParameter_descriptor_, BBoxToGridAndSizeParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SizeUnitParameter_descriptor_, SizeUnitParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PaddingParameter_descriptor_, PaddingParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Point2i_descriptor_, Point2i::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Point2f_descriptor_, Point2f::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Size2i_descriptor_, Size2i::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Size2f_descriptor_, Size2f::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Rect2f_descriptor_, Rect2f::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Rect2i_descriptor_, Rect2i::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActivationRegionParameter_descriptor_, ActivationRegionParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GTMapDataParameter_descriptor_, GTMapDataParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LabelDiffIgnoreParameter_descriptor_, LabelDiffIgnoreParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OffsetParameter_descriptor_, OffsetParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GTSubmapDataParameter_descriptor_, GTSubmapDataParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TopSubmapDataParameter_descriptor_, TopSubmapDataParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      YOLOLikeLossParameter_descriptor_, YOLOLikeLossParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WeightedSoftmaxLossParameter_descriptor_, WeightedSoftmaxLossParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GridProposalLossParameter_descriptor_, GridProposalLossParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BGSynthesisDataParameter_descriptor_, BGSynthesisDataParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SizeFilterParameter_descriptor_, SizeFilterParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RandomResizeParameter_descriptor_, RandomResizeParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GaussianNoiseParameter_descriptor_, GaussianNoiseParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MirrorParameter_descriptor_, MirrorParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BlurParameter_descriptor_, BlurParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AugmentationParameter_descriptor_, AugmentationParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HeatmapParameter_descriptor_, HeatmapParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MinibatchDataParameter_descriptor_, MinibatchDataParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RowColProposalTransformParameter_descriptor_, RowColProposalTransformParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CheckParameter_descriptor_, CheckParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MeanSubParameter_descriptor_, MeanSubParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AnnoToSegParameter_descriptor_, AnnoToSegParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrainROIParameter_descriptor_, TrainROIParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      YOLOV2LossParameter_descriptor_, YOLOV2LossParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      YOLOV2ResultParameter_descriptor_, YOLOV2ResultParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DetectionCheckParameter_descriptor_, DetectionCheckParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SubwinOffsetParameter_descriptor_, SubwinOffsetParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SizeRejectionParameter_descriptor_, SizeRejectionParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConfCheckParameter_descriptor_, ConfCheckParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReorgParameter_descriptor_, ReorgParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BatchRejectionParameter_descriptor_, BatchRejectionParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BlobShape_descriptor_, BlobShape::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BlobProto_descriptor_, BlobProto::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BlobProtoVector_descriptor_, BlobProtoVector::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Datum_descriptor_, Datum::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FillerParameter_descriptor_, FillerParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NetParameter_descriptor_, NetParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SolverParameter_descriptor_, SolverParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SolverState_descriptor_, SolverState::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NetState_descriptor_, NetState::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NetStateRule_descriptor_, NetStateRule::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ParamSpec_descriptor_, ParamSpec::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LayerParameter_descriptor_, LayerParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransformationParameter_descriptor_, TransformationParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LossParameter_descriptor_, LossParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AccuracyParameter_descriptor_, AccuracyParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ArgMaxParameter_descriptor_, ArgMaxParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConcatParameter_descriptor_, ConcatParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BatchNormParameter_descriptor_, BatchNormParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BiasParameter_descriptor_, BiasParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ContrastiveLossParameter_descriptor_, ContrastiveLossParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConvolutionParameter_descriptor_, ConvolutionParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CropParameter_descriptor_, CropParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DataParameter_descriptor_, DataParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DropoutParameter_descriptor_, DropoutParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DummyDataParameter_descriptor_, DummyDataParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EltwiseParameter_descriptor_, EltwiseParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ELUParameter_descriptor_, ELUParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EmbedParameter_descriptor_, EmbedParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExpParameter_descriptor_, ExpParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FlattenParameter_descriptor_, FlattenParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HDF5DataParameter_descriptor_, HDF5DataParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HDF5OutputParameter_descriptor_, HDF5OutputParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HingeLossParameter_descriptor_, HingeLossParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ImageDataParameter_descriptor_, ImageDataParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InfogainLossParameter_descriptor_, InfogainLossParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InnerProductParameter_descriptor_, InnerProductParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InputParameter_descriptor_, InputParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogParameter_descriptor_, LogParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LRNParameter_descriptor_, LRNParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MemoryDataParameter_descriptor_, MemoryDataParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MVNParameter_descriptor_, MVNParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ParameterParameter_descriptor_, ParameterParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PoolingParameter_descriptor_, PoolingParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PowerParameter_descriptor_, PowerParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PythonParameter_descriptor_, PythonParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RecurrentParameter_descriptor_, RecurrentParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReductionParameter_descriptor_, ReductionParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReLUParameter_descriptor_, ReLUParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReshapeParameter_descriptor_, ReshapeParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ScaleParameter_descriptor_, ScaleParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SigmoidParameter_descriptor_, SigmoidParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SliceParameter_descriptor_, SliceParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SoftmaxParameter_descriptor_, SoftmaxParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TanHParameter_descriptor_, TanHParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TileParameter_descriptor_, TileParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ThresholdParameter_descriptor_, ThresholdParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WindowDataParameter_descriptor_, WindowDataParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SPPParameter_descriptor_, SPPParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      V1LayerParameter_descriptor_, V1LayerParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      V0LayerParameter_descriptor_, V0LayerParameter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PReLUParameter_descriptor_, PReLUParameter::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_caffe_2eproto() {
  ImgBBoxAnnoDatum_default_instance_.Shutdown();
  delete ImgBBoxAnnoDatum_reflection_;
  ImgBBoxAnnoParameter_default_instance_.Shutdown();
  delete ImgBBoxAnnoParameter_reflection_;
  HeatmapConcatParameter_default_instance_.Shutdown();
  delete HeatmapConcatParameter_reflection_;
  BBoxAnnoMapParameter_default_instance_.Shutdown();
  delete BBoxAnnoMapParameter_reflection_;
  LabelParameter_default_instance_.Shutdown();
  delete LabelParameter_reflection_;
  PatchDatum_default_instance_.Shutdown();
  delete PatchDatum_reflection_;
  PatchDataParameter_default_instance_.Shutdown();
  delete PatchDataParameter_reflection_;
  LabelRemapParameter_default_instance_.Shutdown();
  delete LabelRemapParameter_reflection_;
  BBoxParameter_default_instance_.Shutdown();
  delete BBoxParameter_reflection_;
  SlidingWindowInputParameter_default_instance_.Shutdown();
  delete SlidingWindowInputParameter_reflection_;
  BBoxToGridAndSizeParameter_default_instance_.Shutdown();
  delete BBoxToGridAndSizeParameter_reflection_;
  SizeUnitParameter_default_instance_.Shutdown();
  delete SizeUnitParameter_reflection_;
  PaddingParameter_default_instance_.Shutdown();
  delete PaddingParameter_reflection_;
  Point2i_default_instance_.Shutdown();
  delete Point2i_reflection_;
  Point2f_default_instance_.Shutdown();
  delete Point2f_reflection_;
  Size2i_default_instance_.Shutdown();
  delete Size2i_reflection_;
  Size2f_default_instance_.Shutdown();
  delete Size2f_reflection_;
  Rect2f_default_instance_.Shutdown();
  delete Rect2f_reflection_;
  Rect2i_default_instance_.Shutdown();
  delete Rect2i_reflection_;
  ActivationRegionParameter_default_instance_.Shutdown();
  delete ActivationRegionParameter_reflection_;
  GTMapDataParameter_default_instance_.Shutdown();
  delete GTMapDataParameter_reflection_;
  LabelDiffIgnoreParameter_default_instance_.Shutdown();
  delete LabelDiffIgnoreParameter_reflection_;
  OffsetParameter_default_instance_.Shutdown();
  delete OffsetParameter_reflection_;
  GTSubmapDataParameter_default_instance_.Shutdown();
  delete GTSubmapDataParameter_reflection_;
  TopSubmapDataParameter_default_instance_.Shutdown();
  delete TopSubmapDataParameter_reflection_;
  YOLOLikeLossParameter_default_instance_.Shutdown();
  delete YOLOLikeLossParameter_reflection_;
  WeightedSoftmaxLossParameter_default_instance_.Shutdown();
  delete WeightedSoftmaxLossParameter_reflection_;
  GridProposalLossParameter_default_instance_.Shutdown();
  delete GridProposalLossParameter_reflection_;
  BGSynthesisDataParameter_default_instance_.Shutdown();
  delete BGSynthesisDataParameter_reflection_;
  SizeFilterParameter_default_instance_.Shutdown();
  delete SizeFilterParameter_reflection_;
  RandomResizeParameter_default_instance_.Shutdown();
  delete RandomResizeParameter_reflection_;
  GaussianNoiseParameter_default_instance_.Shutdown();
  delete GaussianNoiseParameter_reflection_;
  MirrorParameter_default_instance_.Shutdown();
  delete MirrorParameter_reflection_;
  BlurParameter_default_instance_.Shutdown();
  delete BlurParameter_reflection_;
  AugmentationParameter_default_instance_.Shutdown();
  delete AugmentationParameter_reflection_;
  HeatmapParameter_default_instance_.Shutdown();
  delete HeatmapParameter_reflection_;
  MinibatchDataParameter_default_instance_.Shutdown();
  delete MinibatchDataParameter_reflection_;
  RowColProposalTransformParameter_default_instance_.Shutdown();
  delete RowColProposalTransformParameter_reflection_;
  CheckParameter_default_instance_.Shutdown();
  delete CheckParameter_reflection_;
  MeanSubParameter_default_instance_.Shutdown();
  delete MeanSubParameter_reflection_;
  AnnoToSegParameter_default_instance_.Shutdown();
  delete AnnoToSegParameter_reflection_;
  TrainROIParameter_default_instance_.Shutdown();
  delete TrainROIParameter_reflection_;
  YOLOV2LossParameter_default_instance_.Shutdown();
  delete YOLOV2LossParameter_reflection_;
  YOLOV2ResultParameter_default_instance_.Shutdown();
  delete YOLOV2ResultParameter_reflection_;
  DetectionCheckParameter_default_instance_.Shutdown();
  delete DetectionCheckParameter_reflection_;
  delete DetectionCheckParameter::_default_log_path_;
  SubwinOffsetParameter_default_instance_.Shutdown();
  delete SubwinOffsetParameter_reflection_;
  SizeRejectionParameter_default_instance_.Shutdown();
  delete SizeRejectionParameter_reflection_;
  ConfCheckParameter_default_instance_.Shutdown();
  delete ConfCheckParameter_reflection_;
  delete ConfCheckParameter::_default_out_path_;
  ReorgParameter_default_instance_.Shutdown();
  delete ReorgParameter_reflection_;
  BatchRejectionParameter_default_instance_.Shutdown();
  delete BatchRejectionParameter_reflection_;
  BlobShape_default_instance_.Shutdown();
  delete BlobShape_reflection_;
  BlobProto_default_instance_.Shutdown();
  delete BlobProto_reflection_;
  BlobProtoVector_default_instance_.Shutdown();
  delete BlobProtoVector_reflection_;
  Datum_default_instance_.Shutdown();
  delete Datum_reflection_;
  FillerParameter_default_instance_.Shutdown();
  delete FillerParameter_reflection_;
  delete FillerParameter::_default_type_;
  NetParameter_default_instance_.Shutdown();
  delete NetParameter_reflection_;
  SolverParameter_default_instance_.Shutdown();
  delete SolverParameter_reflection_;
  delete SolverParameter::_default_regularization_type_;
  delete SolverParameter::_default_type_;
  SolverState_default_instance_.Shutdown();
  delete SolverState_reflection_;
  NetState_default_instance_.Shutdown();
  delete NetState_reflection_;
  NetStateRule_default_instance_.Shutdown();
  delete NetStateRule_reflection_;
  ParamSpec_default_instance_.Shutdown();
  delete ParamSpec_reflection_;
  LayerParameter_default_instance_.Shutdown();
  delete LayerParameter_reflection_;
  TransformationParameter_default_instance_.Shutdown();
  delete TransformationParameter_reflection_;
  LossParameter_default_instance_.Shutdown();
  delete LossParameter_reflection_;
  AccuracyParameter_default_instance_.Shutdown();
  delete AccuracyParameter_reflection_;
  ArgMaxParameter_default_instance_.Shutdown();
  delete ArgMaxParameter_reflection_;
  ConcatParameter_default_instance_.Shutdown();
  delete ConcatParameter_reflection_;
  BatchNormParameter_default_instance_.Shutdown();
  delete BatchNormParameter_reflection_;
  BiasParameter_default_instance_.Shutdown();
  delete BiasParameter_reflection_;
  ContrastiveLossParameter_default_instance_.Shutdown();
  delete ContrastiveLossParameter_reflection_;
  ConvolutionParameter_default_instance_.Shutdown();
  delete ConvolutionParameter_reflection_;
  CropParameter_default_instance_.Shutdown();
  delete CropParameter_reflection_;
  DataParameter_default_instance_.Shutdown();
  delete DataParameter_reflection_;
  DropoutParameter_default_instance_.Shutdown();
  delete DropoutParameter_reflection_;
  DummyDataParameter_default_instance_.Shutdown();
  delete DummyDataParameter_reflection_;
  EltwiseParameter_default_instance_.Shutdown();
  delete EltwiseParameter_reflection_;
  ELUParameter_default_instance_.Shutdown();
  delete ELUParameter_reflection_;
  EmbedParameter_default_instance_.Shutdown();
  delete EmbedParameter_reflection_;
  ExpParameter_default_instance_.Shutdown();
  delete ExpParameter_reflection_;
  FlattenParameter_default_instance_.Shutdown();
  delete FlattenParameter_reflection_;
  HDF5DataParameter_default_instance_.Shutdown();
  delete HDF5DataParameter_reflection_;
  HDF5OutputParameter_default_instance_.Shutdown();
  delete HDF5OutputParameter_reflection_;
  HingeLossParameter_default_instance_.Shutdown();
  delete HingeLossParameter_reflection_;
  ImageDataParameter_default_instance_.Shutdown();
  delete ImageDataParameter_reflection_;
  InfogainLossParameter_default_instance_.Shutdown();
  delete InfogainLossParameter_reflection_;
  InnerProductParameter_default_instance_.Shutdown();
  delete InnerProductParameter_reflection_;
  InputParameter_default_instance_.Shutdown();
  delete InputParameter_reflection_;
  LogParameter_default_instance_.Shutdown();
  delete LogParameter_reflection_;
  LRNParameter_default_instance_.Shutdown();
  delete LRNParameter_reflection_;
  MemoryDataParameter_default_instance_.Shutdown();
  delete MemoryDataParameter_reflection_;
  MVNParameter_default_instance_.Shutdown();
  delete MVNParameter_reflection_;
  ParameterParameter_default_instance_.Shutdown();
  delete ParameterParameter_reflection_;
  PoolingParameter_default_instance_.Shutdown();
  delete PoolingParameter_reflection_;
  PowerParameter_default_instance_.Shutdown();
  delete PowerParameter_reflection_;
  PythonParameter_default_instance_.Shutdown();
  delete PythonParameter_reflection_;
  RecurrentParameter_default_instance_.Shutdown();
  delete RecurrentParameter_reflection_;
  ReductionParameter_default_instance_.Shutdown();
  delete ReductionParameter_reflection_;
  ReLUParameter_default_instance_.Shutdown();
  delete ReLUParameter_reflection_;
  ReshapeParameter_default_instance_.Shutdown();
  delete ReshapeParameter_reflection_;
  ScaleParameter_default_instance_.Shutdown();
  delete ScaleParameter_reflection_;
  SigmoidParameter_default_instance_.Shutdown();
  delete SigmoidParameter_reflection_;
  SliceParameter_default_instance_.Shutdown();
  delete SliceParameter_reflection_;
  SoftmaxParameter_default_instance_.Shutdown();
  delete SoftmaxParameter_reflection_;
  TanHParameter_default_instance_.Shutdown();
  delete TanHParameter_reflection_;
  TileParameter_default_instance_.Shutdown();
  delete TileParameter_reflection_;
  ThresholdParameter_default_instance_.Shutdown();
  delete ThresholdParameter_reflection_;
  WindowDataParameter_default_instance_.Shutdown();
  delete WindowDataParameter_reflection_;
  delete WindowDataParameter::_default_crop_mode_;
  SPPParameter_default_instance_.Shutdown();
  delete SPPParameter_reflection_;
  V1LayerParameter_default_instance_.Shutdown();
  delete V1LayerParameter_reflection_;
  V0LayerParameter_default_instance_.Shutdown();
  delete V0LayerParameter_reflection_;
  delete V0LayerParameter::_default_det_crop_mode_;
  PReLUParameter_default_instance_.Shutdown();
  delete PReLUParameter_reflection_;
}

void protobuf_InitDefaults_caffe_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ImgBBoxAnnoDatum_default_instance_.DefaultConstruct();
  ImgBBoxAnnoParameter_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  HeatmapConcatParameter_default_instance_.DefaultConstruct();
  BBoxAnnoMapParameter_default_instance_.DefaultConstruct();
  LabelParameter_default_instance_.DefaultConstruct();
  PatchDatum_default_instance_.DefaultConstruct();
  PatchDataParameter_default_instance_.DefaultConstruct();
  LabelRemapParameter_default_instance_.DefaultConstruct();
  BBoxParameter_default_instance_.DefaultConstruct();
  SlidingWindowInputParameter_default_instance_.DefaultConstruct();
  BBoxToGridAndSizeParameter_default_instance_.DefaultConstruct();
  SizeUnitParameter_default_instance_.DefaultConstruct();
  PaddingParameter_default_instance_.DefaultConstruct();
  Point2i_default_instance_.DefaultConstruct();
  Point2f_default_instance_.DefaultConstruct();
  Size2i_default_instance_.DefaultConstruct();
  Size2f_default_instance_.DefaultConstruct();
  Rect2f_default_instance_.DefaultConstruct();
  Rect2i_default_instance_.DefaultConstruct();
  ActivationRegionParameter_default_instance_.DefaultConstruct();
  GTMapDataParameter_default_instance_.DefaultConstruct();
  LabelDiffIgnoreParameter_default_instance_.DefaultConstruct();
  OffsetParameter_default_instance_.DefaultConstruct();
  GTSubmapDataParameter_default_instance_.DefaultConstruct();
  TopSubmapDataParameter_default_instance_.DefaultConstruct();
  YOLOLikeLossParameter_default_instance_.DefaultConstruct();
  WeightedSoftmaxLossParameter_default_instance_.DefaultConstruct();
  GridProposalLossParameter_default_instance_.DefaultConstruct();
  BGSynthesisDataParameter_default_instance_.DefaultConstruct();
  SizeFilterParameter_default_instance_.DefaultConstruct();
  RandomResizeParameter_default_instance_.DefaultConstruct();
  GaussianNoiseParameter_default_instance_.DefaultConstruct();
  MirrorParameter_default_instance_.DefaultConstruct();
  BlurParameter_default_instance_.DefaultConstruct();
  AugmentationParameter_default_instance_.DefaultConstruct();
  HeatmapParameter_default_instance_.DefaultConstruct();
  MinibatchDataParameter_default_instance_.DefaultConstruct();
  RowColProposalTransformParameter_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CheckParameter_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  MeanSubParameter_default_instance_.DefaultConstruct();
  AnnoToSegParameter_default_instance_.DefaultConstruct();
  TrainROIParameter_default_instance_.DefaultConstruct();
  YOLOV2LossParameter_default_instance_.DefaultConstruct();
  YOLOV2ResultParameter_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  DetectionCheckParameter::_default_log_path_ =
      new ::std::string("./detection_log/", 16);
  DetectionCheckParameter_default_instance_.DefaultConstruct();
  SubwinOffsetParameter_default_instance_.DefaultConstruct();
  SizeRejectionParameter_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ConfCheckParameter::_default_out_path_ =
      new ::std::string(".", 1);
  ConfCheckParameter_default_instance_.DefaultConstruct();
  ReorgParameter_default_instance_.DefaultConstruct();
  BatchRejectionParameter_default_instance_.DefaultConstruct();
  BlobShape_default_instance_.DefaultConstruct();
  BlobProto_default_instance_.DefaultConstruct();
  BlobProtoVector_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Datum_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  FillerParameter::_default_type_ =
      new ::std::string("constant", 8);
  FillerParameter_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  NetParameter_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SolverParameter::_default_regularization_type_ =
      new ::std::string("L2", 2);
  SolverParameter::_default_type_ =
      new ::std::string("SGD", 3);
  SolverParameter_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SolverState_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  NetState_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  NetStateRule_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ParamSpec_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  LayerParameter_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TransformationParameter_default_instance_.DefaultConstruct();
  LossParameter_default_instance_.DefaultConstruct();
  AccuracyParameter_default_instance_.DefaultConstruct();
  ArgMaxParameter_default_instance_.DefaultConstruct();
  ConcatParameter_default_instance_.DefaultConstruct();
  BatchNormParameter_default_instance_.DefaultConstruct();
  BiasParameter_default_instance_.DefaultConstruct();
  ContrastiveLossParameter_default_instance_.DefaultConstruct();
  ConvolutionParameter_default_instance_.DefaultConstruct();
  CropParameter_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  DataParameter_default_instance_.DefaultConstruct();
  DropoutParameter_default_instance_.DefaultConstruct();
  DummyDataParameter_default_instance_.DefaultConstruct();
  EltwiseParameter_default_instance_.DefaultConstruct();
  ELUParameter_default_instance_.DefaultConstruct();
  EmbedParameter_default_instance_.DefaultConstruct();
  ExpParameter_default_instance_.DefaultConstruct();
  FlattenParameter_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  HDF5DataParameter_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  HDF5OutputParameter_default_instance_.DefaultConstruct();
  HingeLossParameter_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ImageDataParameter_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  InfogainLossParameter_default_instance_.DefaultConstruct();
  InnerProductParameter_default_instance_.DefaultConstruct();
  InputParameter_default_instance_.DefaultConstruct();
  LogParameter_default_instance_.DefaultConstruct();
  LRNParameter_default_instance_.DefaultConstruct();
  MemoryDataParameter_default_instance_.DefaultConstruct();
  MVNParameter_default_instance_.DefaultConstruct();
  ParameterParameter_default_instance_.DefaultConstruct();
  PoolingParameter_default_instance_.DefaultConstruct();
  PowerParameter_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  PythonParameter_default_instance_.DefaultConstruct();
  RecurrentParameter_default_instance_.DefaultConstruct();
  ReductionParameter_default_instance_.DefaultConstruct();
  ReLUParameter_default_instance_.DefaultConstruct();
  ReshapeParameter_default_instance_.DefaultConstruct();
  ScaleParameter_default_instance_.DefaultConstruct();
  SigmoidParameter_default_instance_.DefaultConstruct();
  SliceParameter_default_instance_.DefaultConstruct();
  SoftmaxParameter_default_instance_.DefaultConstruct();
  TanHParameter_default_instance_.DefaultConstruct();
  TileParameter_default_instance_.DefaultConstruct();
  ThresholdParameter_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  WindowDataParameter::_default_crop_mode_ =
      new ::std::string("warp", 4);
  WindowDataParameter_default_instance_.DefaultConstruct();
  SPPParameter_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  V1LayerParameter_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  V0LayerParameter::_default_det_crop_mode_ =
      new ::std::string("warp", 4);
  V0LayerParameter_default_instance_.DefaultConstruct();
  PReLUParameter_default_instance_.DefaultConstruct();
  ImgBBoxAnnoDatum_default_instance_.get_mutable()->InitAsDefaultInstance();
  ImgBBoxAnnoParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  HeatmapConcatParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  BBoxAnnoMapParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  LabelParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  PatchDatum_default_instance_.get_mutable()->InitAsDefaultInstance();
  PatchDataParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  LabelRemapParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  BBoxParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  SlidingWindowInputParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  BBoxToGridAndSizeParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  SizeUnitParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  PaddingParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  Point2i_default_instance_.get_mutable()->InitAsDefaultInstance();
  Point2f_default_instance_.get_mutable()->InitAsDefaultInstance();
  Size2i_default_instance_.get_mutable()->InitAsDefaultInstance();
  Size2f_default_instance_.get_mutable()->InitAsDefaultInstance();
  Rect2f_default_instance_.get_mutable()->InitAsDefaultInstance();
  Rect2i_default_instance_.get_mutable()->InitAsDefaultInstance();
  ActivationRegionParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  GTMapDataParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  LabelDiffIgnoreParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  OffsetParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  GTSubmapDataParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  TopSubmapDataParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  YOLOLikeLossParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  WeightedSoftmaxLossParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  GridProposalLossParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  BGSynthesisDataParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  SizeFilterParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  RandomResizeParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  GaussianNoiseParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  MirrorParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  BlurParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  AugmentationParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  HeatmapParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  MinibatchDataParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  RowColProposalTransformParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  CheckParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  MeanSubParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  AnnoToSegParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  TrainROIParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  YOLOV2LossParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  YOLOV2ResultParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  DetectionCheckParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  SubwinOffsetParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  SizeRejectionParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  ConfCheckParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReorgParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  BatchRejectionParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  BlobShape_default_instance_.get_mutable()->InitAsDefaultInstance();
  BlobProto_default_instance_.get_mutable()->InitAsDefaultInstance();
  BlobProtoVector_default_instance_.get_mutable()->InitAsDefaultInstance();
  Datum_default_instance_.get_mutable()->InitAsDefaultInstance();
  FillerParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  NetParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  SolverParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  SolverState_default_instance_.get_mutable()->InitAsDefaultInstance();
  NetState_default_instance_.get_mutable()->InitAsDefaultInstance();
  NetStateRule_default_instance_.get_mutable()->InitAsDefaultInstance();
  ParamSpec_default_instance_.get_mutable()->InitAsDefaultInstance();
  LayerParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  TransformationParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  LossParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  AccuracyParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  ArgMaxParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  ConcatParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  BatchNormParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  BiasParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  ContrastiveLossParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  ConvolutionParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  CropParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  DataParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  DropoutParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  DummyDataParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  EltwiseParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  ELUParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  EmbedParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  ExpParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  FlattenParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  HDF5DataParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  HDF5OutputParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  HingeLossParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  ImageDataParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  InfogainLossParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  InnerProductParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  InputParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  LogParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  LRNParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  MemoryDataParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  MVNParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  ParameterParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  PoolingParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  PowerParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  PythonParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  RecurrentParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReductionParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReLUParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReshapeParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  ScaleParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  SigmoidParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  SliceParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  SoftmaxParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  TanHParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  TileParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  ThresholdParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  WindowDataParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  SPPParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  V1LayerParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  V0LayerParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
  PReLUParameter_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_caffe_2eproto_once_);
void protobuf_InitDefaults_caffe_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_caffe_2eproto_once_,
                 &protobuf_InitDefaults_caffe_2eproto_impl);
}
void protobuf_AddDesc_caffe_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_caffe_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013caffe.proto\022\005caffe\"~\n\020ImgBBoxAnnoDatum"
    "\022\037\n\timg_datum\030\001 \002(\0132\014.caffe.Datum\022\r\n\005lab"
    "el\030\002 \003(\005\022\r\n\005x_min\030\003 \003(\002\022\r\n\005y_min\030\004 \003(\002\022\r"
    "\n\005x_max\030\005 \003(\002\022\r\n\005y_max\030\006 \003(\002\"n\n\024ImgBBoxA"
    "nnoParameter\022\022\n\nimg_height\030\001 \002(\005\022\021\n\timg_"
    "width\030\002 \002(\005\022\030\n\020max_bbox_per_img\030\003 \002(\005\022\025\n"
    "\007colored\030\004 \001(\010:\004true\".\n\026HeatmapConcatPar"
    "ameter\022\024\n\014heatmap_file\030\001 \002(\t\"\260\001\n\024BBoxAnn"
    "oMapParameter\022\022\n\nimg_height\030\001 \002(\005\022\021\n\timg"
    "_width\030\002 \002(\005\022\036\n\026receptive_field_height\030\003"
    " \002(\005\022\035\n\025receptive_field_width\030\004 \002(\005\022\027\n\017v"
    "ertical_stride\030\005 \002(\005\022\031\n\021horizontal_strid"
    "e\030\006 \002(\005\"]\n\016LabelParameter\022\021\n\tnum_label\030\002"
    " \002(\005\"8\n\022LabelParamConstant\022\030\n\013DUMMY_LABE"
    "L\020\377\377\377\377\377\377\377\377\377\001\022\010\n\004NONE\020\000\"\365\001\n\nPatchDatum\022\037\n"
    "\tpatch_img\030\001 \002(\0132\014.caffe.Datum\022\021\n\005label\030"
    "\002 \001(\005:\002-1\022\021\n\tbbox_xmin\030\003 \001(\002\022\021\n\tbbox_ymi"
    "n\030\004 \001(\002\022\021\n\tbbox_xmax\030\005 \001(\002\022\021\n\tbbox_ymax\030"
    "\006 \001(\002\022\030\n\020whole_img_height\030\007 \001(\002\022\027\n\017whole"
    "_img_width\030\010 \001(\002\022\031\n\021patch_offset_xmin\030\t "
    "\001(\002\022\031\n\021patch_offset_ymin\030\n \001(\002\"~\n\022PatchD"
    "ataParameter\022\034\n\rpositive_only\030\001 \001(\010:\005fal"
    "se\022(\n\032patch_offset_normalization\030\002 \001(\010:\004"
    "true\022 \n\022bbox_normalization\030\003 \001(\010:\004true\"/"
    "\n\023LabelRemapParameter\022\013\n\003src\030\001 \003(\005\022\013\n\003ds"
    "t\030\002 \003(\005\"\231\002\n\rBBoxParameter\0220\n\tbbox_type\030\001"
    " \001(\0162\035.caffe.BBoxParameter.BBoxType\022/\n\006a"
    "nchor\030\002 \001(\0162\037.caffe.BBoxParameter.BBoxAn"
    "chor\022\021\n\tnormalize\030\003 \001(\010\"@\n\010BBoxType\022\010\n\004F"
    "ULL\020\001\022\014\n\010VERTICAL\020\002\022\016\n\nHORIZONTAL\020\003\022\014\n\010T"
    "EMPLATE\020\004\"&\n\nBBoxAnchor\022\014\n\010TOP_LEFT\020\001\022\n\n"
    "\006CENTER\020\002\"(\n\014BBoxConstant\022\030\n\013DUMMY_VALUE"
    "\020\377\377\377\377\377\377\377\377\377\001\"\242\001\n\033SlidingWindowInputParame"
    "ter\022\024\n\014window_width\030\001 \002(\005\022\025\n\rwindow_heig"
    "ht\030\002 \002(\005\022\031\n\021horizontal_stride\030\003 \002(\005\022\027\n\017v"
    "ertical_stride\030\004 \002(\005\022\"\n\024window_normaliza"
    "tion\030\005 \001(\010:\004true\"O\n\032BBoxToGridAndSizePar"
    "ameter\022\016\n\006x_grid\030\001 \003(\002\022\016\n\006y_grid\030\002 \003(\002\022\021"
    "\n\tsize_grid\030\003 \003(\002\"!\n\021SizeUnitParameter\022\014"
    "\n\004unit\030\001 \002(\002\"\303\001\n\020PaddingParameter\0227\n\004typ"
    "e\030\001 \001(\0162#.caffe.PaddingParameter.Padding"
    "Type:\004ZERO\022\021\n\006pad_up\030\002 \001(\r:\0010\022\023\n\010pad_dow"
    "n\030\003 \001(\r:\0010\022\023\n\010pad_left\030\004 \001(\r:\0010\022\024\n\tpad_r"
    "ight\030\005 \001(\r:\0010\"#\n\013PaddingType\022\010\n\004ZERO\020\000\022\n"
    "\n\006MIRROR\020\001\"\037\n\007Point2i\022\t\n\001x\030\001 \002(\005\022\t\n\001y\030\002 "
    "\002(\005\"\037\n\007Point2f\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\"\'\n\006"
    "Size2i\022\r\n\005width\030\001 \002(\r\022\016\n\006height\030\002 \002(\r\"\'\n"
    "\006Size2f\022\r\n\005width\030\001 \002(\002\022\016\n\006height\030\002 \002(\002\"G"
    "\n\006Rect2f\022 \n\010top_left\030\001 \002(\0132\016.caffe.Point"
    "2f\022\033\n\004size\030\002 \002(\0132\r.caffe.Size2f\"G\n\006Rect2"
    "i\022 \n\010top_left\030\001 \002(\0132\016.caffe.Point2i\022\033\n\004s"
    "ize\030\002 \002(\0132\r.caffe.Size2i\"\270\001\n\031ActivationR"
    "egionParameter\022H\n\006method\030\001 \001(\01621.caffe.A"
    "ctivationRegionParameter.ActivationMetho"
    "d:\005WHOLE\022\035\n\006region\030\002 \001(\0132\r.caffe.Rect2i\""
    "2\n\020ActivationMethod\022\t\n\005WHOLE\020\001\022\007\n\003ANY\020\002\022"
    "\n\n\006CENTER\020\003\"\363\001\n\022GTMapDataParameter\022&\n\017re"
    "ceptive_field\030\001 \002(\0132\r.caffe.Size2i\022\031\n\021ho"
    "rizontal_stride\030\002 \002(\r\022\027\n\017vertical_stride"
    "\030\003 \002(\r\022A\n\027activation_region_param\030\004 \001(\0132"
    " .caffe.ActivationRegionParameter\022\"\n\032pat"
    "ch_offset_normalization\030\005 \002(\010\022\032\n\022bbox_no"
    "rmalization\030\006 \002(\010\"^\n\030LabelDiffIgnorePara"
    "meter\022\024\n\014ignore_label\030\001 \003(\r\022\023\n\013ignore_ra"
    "te\030\002 \003(\002\022\027\n\telem_wise\030\003 \001(\010:\004true\"\300\001\n\017Of"
    "fsetParameter\0227\n\006origin\030\001 \001(\0162\035.caffe.Of"
    "fsetParameter.Anchor:\010TOP_LEFT\0227\n\006anchor"
    "\030\002 \001(\0162\035.caffe.OffsetParameter.Anchor:\010T"
    "OP_LEFT\022\027\n\tnormalize\030\003 \001(\010:\004true\"\"\n\006Anch"
    "or\022\014\n\010TOP_LEFT\020\001\022\n\n\006CENTER\020\002\"\334\002\n\025GTSubma"
    "pDataParameter\022\031\n\021submap_batch_size\030\001 \002("
    "\r\022\"\n\013submap_size\030\002 \002(\0132\r.caffe.Size2i\022&\n"
    "\017receptive_field\030\003 \002(\0132\r.caffe.Size2i\022\031\n"
    "\021horizontal_stride\030\004 \002(\r\022\027\n\017vertical_str"
    "ide\030\005 \002(\r\022A\n\027activation_region_param\030\006 \001"
    "(\0132 .caffe.ActivationRegionParameter\022\025\n\n"
    "num_jitter\030\007 \001(\r:\0010\022 \n\022bbox_normalizatio"
    "n\030\010 \001(\010:\004true\022,\n\014offset_param\030\t \002(\0132\026.ca"
    "ffe.OffsetParameter\"\355\003\n\026TopSubmapDataPar"
    "ameter\022\037\n\010img_size\030\001 \002(\0132\r.caffe.Size2i\022"
    "\031\n\021submap_batch_size\030\002 \002(\r\022\037\n\010win_size\030\003"
    " \002(\0132\r.caffe.Size2i\022 \n\025win_horizontal_st"
    "ride\030\004 \001(\r:\0011\022\036\n\023win_vertical_stride\030\005 \001"
    "(\r:\0010\022\024\n\014num_win_rows\030\006 \001(\r\022\024\n\014num_win_c"
    "ols\030\007 \001(\r\022\"\n\013offset_unit\030\010 \001(\0132\r.caffe.S"
    "ize2i\022 \n\030offset_horizontal_stride\030\t \001(\r\022"
    "\036\n\026offset_vertical_stride\030\n \001(\r\022\036\n\007gt_un"
    "it\030\013 \001(\0132\r.caffe.Size2i\022\034\n\024gt_horizontal"
    "_stride\030\014 \001(\r\022\032\n\022gt_vertical_stride\030\r \001("
    "\r\022(\n\nbbox_param\030\016 \001(\0132\024.caffe.BBoxParame"
    "ter\022\036\n\020offset_normalize\030\017 \001(\010:\004true\"\352\001\n\025"
    "YOLOLikeLossParameter\022\034\n\021num_bbox_per_ce"
    "ll\030\001 \001(\r:\0012\022\025\n\tnum_class\030\002 \001(\r:\00220\022\026\n\013no"
    "obj_scale\030\003 \001(\002:\0011\022\024\n\tobj_scale\030\004 \001(\002:\0011"
    "\022\026\n\013class_scale\030\005 \001(\002:\0011\022\026\n\013coord_scale\030"
    "\006 \001(\002:\0011\022(\n\nbbox_param\030\007 \001(\0132\024.caffe.BBo"
    "xParameter\022\024\n\014class_weight\030\010 \003(\002\"4\n\034Weig"
    "htedSoftmaxLossParameter\022\024\n\014class_weight"
    "\030\001 \003(\002\"\203\001\n\031GridProposalLossParameter\022\027\n\014"
    "noobj_weight\030\001 \001(\002:\0011\022\022\n\nobj_weight\030\002 \003("
    "\002\022\024\n\tnum_class\030\003 \001(\r:\0011\022#\n\024general_obj_p"
    "roposal\030\004 \001(\010:\005false\"\242\002\n\030BGSynthesisData"
    "Parameter\022\r\n\005width\030\001 \002(\r\022\016\n\006height\030\002 \002(\r"
    "\022-\n\016obj_data_param\030\003 \002(\0132\025.caffe.LayerPa"
    "rameter\022,\n\rbg_data_param\030\004 \002(\0132\025.caffe.L"
    "ayerParameter\022\017\n\007max_obj\030\005 \002(\r\022\017\n\007min_ob"
    "j\030\006 \001(\r\022=\n\023active_region_param\030\007 \001(\0132 .c"
    "affe.ActivationRegionParameter\022\025\n\nbatch_"
    "size\030\010 \001(\r:\0011\022\022\n\007num_neg\030\t \001(\r:\0010\"@\n\023Siz"
    "eFilterParameter\022\017\n\004axis\030\001 \001(\r:\0012\022\013\n\003min"
    "\030\002 \001(\001\022\013\n\003max\030\003 \001(\001\"m\n\025RandomResizeParam"
    "eter\022\014\n\001p\030\001 \001(\002:\0011\022\020\n\005w_min\030\002 \001(\002:\0011\022\020\n\005"
    "w_max\030\003 \001(\002:\0011\022\020\n\005h_min\030\004 \001(\002:\0011\022\020\n\005h_ma"
    "x\030\005 \001(\002:\0011\"J\n\026GaussianNoiseParameter\022\014\n\001"
    "p\030\001 \001(\002:\0011\022\017\n\004mean\030\002 \001(\002:\0010\022\021\n\006stddev\030\003 "
    "\001(\002:\0011\"!\n\017MirrorParameter\022\016\n\001p\030\001 \001(\002:\0030."
    "5\"K\n\rBlurParameter\022\016\n\001p\030\001 \001(\002:\0030.5\022\026\n\013ke"
    "rnel_size\030\002 \001(\r:\0013\022\022\n\005sigma\030\003 \001(\002:\0031.4\"\216"
    "\002\n\025AugmentationParameter\022*\n\tpad_param\030\001 "
    "\001(\0132\027.caffe.PaddingParameter\0227\n\021rand_res"
    "ize_param\030\002 \001(\0132\034.caffe.RandomResizePara"
    "meter\0228\n\021gauss_noise_param\030\003 \003(\0132\035.caffe"
    ".GaussianNoiseParameter\022,\n\014mirror_param\030"
    "\004 \001(\0132\026.caffe.MirrorParameter\022(\n\nblur_pa"
    "ram\030\005 \001(\0132\024.caffe.BlurParameter\"\210\001\n\020Heat"
    "mapParameter\022\024\n\tnum_label\030\001 \001(\r:\0011\022\035\n\017bb"
    "ox_normalized\030\002 \001(\010:\004true\022\020\n\005width\030\003 \001(\002"
    ":\0011\022\021\n\006height\030\004 \001(\002:\0011\022\014\n\004rows\030\005 \001(\r\022\014\n\004"
    "cols\030\006 \001(\r\"\203\001\n\026MinibatchDataParameter\022\026\n"
    "\tnum_batch\030\001 \001(\r:\003128\022\020\n\005width\030\002 \001(\r:\0010\022"
    "\021\n\006height\030\003 \001(\r:\0010\022\022\n\006num_gt\030\004 \001(\r:\00210\022\030"
    "\n\rmax_num_patch\030\005 \001(\r:\0011\"\321\001\n RowColPropo"
    "salTransformParameter\022\016\n\003row\030\001 \001(\r:\0017\022\016\n"
    "\003col\030\002 \001(\r:\0017\022\020\n\010in_width\030\003 \002(\r\022\021\n\tin_he"
    "ight\030\004 \002(\r\022\024\n\tout_width\030\005 \001(\r:\0011\022\025\n\nout_"
    "height\030\006 \001(\r:\0011\022\022\n\nobjectness\030\007 \001(\010\022\021\n\tn"
    "um_label\030\010 \001(\r\022\024\n\014ignore_label\030\t \003(\r\"a\n\016"
    "CheckParameter\022\020\n\010dst_path\030\001 \001(\t\022\027\n\tbbox"
    "_norm\030\002 \001(\010:\004true\022\021\n\tw_divider\030\003 \001(\002\022\021\n\t"
    "h_divider\030\004 \001(\002\"%\n\020MeanSubParameter\022\021\n\tm"
    "ean_file\030\001 \002(\t\"\264\001\n\022AnnoToSegParameter\022\031\n"
    "\nobjectness\030\001 \001(\010:\005false\022\021\n\tnum_label\030\002 "
    "\001(\r\022\036\n\017bbox_normalized\030\003 \001(\010:\005false\022\023\n\010i"
    "n_width\030\004 \001(\r:\0011\022\024\n\tin_height\030\005 \001(\r:\0011\022\021"
    "\n\tout_width\030\006 \001(\r\022\022\n\nout_height\030\007 \001(\r\"a\n"
    "\021TrainROIParameter\022\021\n\timg_width\030\001 \002(\r\022\022\n"
    "\nimg_height\030\002 \002(\r\022\021\n\troi_width\030\003 \002(\r\022\022\n\n"
    "roi_height\030\004 \002(\r\"\212\002\n\023YOLOV2LossParameter"
    "\022\035\n\006anchor\030\001 \003(\0132\r.caffe.Rect2f\022\021\n\tnum_c"
    "lass\030\002 \002(\r\022\037\n\010img_size\030\003 \002(\0132\r.caffe.Siz"
    "e2i\022$\n\ryolo_map_size\030\004 \002(\0132\r.caffe.Size2"
    "i\022\036\n\021overlap_threshold\030\005 \001(\002:\0030.3\022\026\n\013noo"
    "bj_scale\030\006 \001(\002:\0011\022\024\n\tobj_scale\030\007 \001(\002:\0013\022"
    "\024\n\tcls_scale\030\010 \001(\002:\0012\022\026\n\013coord_scale\030\t \001"
    "(\002:\0012\"\331\001\n\025YOLOV2ResultParameter\022 \n\tcell_"
    "size\030\001 \002(\0132\r.caffe.Size2i\022\021\n\tnum_class\030\002"
    " \002(\r\022\035\n\006anchor\030\003 \003(\0132\r.caffe.Rect2f\022\025\n\rn"
    "um_detection\030\004 \002(\r\022\024\n\006do_nms\030\005 \001(\010:\004true"
    "\022\"\n\025nms_overlap_threshold\030\006 \001(\002:\0030.5\022\033\n\016"
    "conf_threshold\030\007 \001(\002:\0030.5\"\213\002\n\027DetectionC"
    "heckParameter\022\036\n\020eval_performance\030\001 \001(\010:"
    "\004true\022\022\n\004draw\030\002 \001(\010:\004true\022#\n\030detection_c"
    "onf_threshold\030\003 \001(\002:\0010\022\032\n\riou_threshold\030"
    "\004 \001(\002:\0030.5\022\"\n\010log_path\030\005 \001(\t:\020./detectio"
    "n_log/\022\035\n\016detection_only\030\006 \001(\010:\005false\022\024\n"
    "\006do_nms\030\007 \001(\010:\004true\022\"\n\025nms_overlap_thres"
    "hold\030\010 \001(\002:\0030.5\"|\n\025SubwinOffsetParameter"
    "\022\037\n\010win_size\030\001 \002(\0132\r.caffe.Size2i\022\"\n\nwin"
    "_offset\030\002 \003(\0132\016.caffe.Point2i\022\036\n\020global_"
    "detection\030\003 \001(\010:\004true\"T\n\026SizeRejectionPa"
    "rameter\022\r\n\005w_min\030\001 \001(\002\022\r\n\005w_max\030\002 \001(\002\022\r\n"
    "\005h_min\030\003 \001(\002\022\r\n\005h_max\030\004 \001(\002\">\n\022ConfCheck"
    "Parameter\022\023\n\010out_path\030\001 \001(\t:\001.\022\023\n\004draw\030\002"
    " \001(\010:\005false\"8\n\016ReorgParameter\022\016\n\006stride\030"
    "\001 \001(\r\022\026\n\007reverse\030\002 \001(\010:\005false\"S\n\027BatchRe"
    "jectionParameter\022%\n\026rejection_by_thresho"
    "ld\030\001 \001(\010:\005false\022\021\n\tthreshold\030\002 \001(\002\"\034\n\tBl"
    "obShape\022\017\n\003dim\030\001 \003(\003B\002\020\001\"\314\001\n\tBlobProto\022\037"
    "\n\005shape\030\007 \001(\0132\020.caffe.BlobShape\022\020\n\004data\030"
    "\005 \003(\002B\002\020\001\022\020\n\004diff\030\006 \003(\002B\002\020\001\022\027\n\013double_da"
    "ta\030\010 \003(\001B\002\020\001\022\027\n\013double_diff\030\t \003(\001B\002\020\001\022\016\n"
    "\003num\030\001 \001(\005:\0010\022\023\n\010channels\030\002 \001(\005:\0010\022\021\n\006he"
    "ight\030\003 \001(\005:\0010\022\020\n\005width\030\004 \001(\005:\0010\"2\n\017BlobP"
    "rotoVector\022\037\n\005blobs\030\001 \003(\0132\020.caffe.BlobPr"
    "oto\"\201\001\n\005Datum\022\020\n\010channels\030\001 \001(\005\022\016\n\006heigh"
    "t\030\002 \001(\005\022\r\n\005width\030\003 \001(\005\022\014\n\004data\030\004 \001(\014\022\r\n\005"
    "label\030\005 \001(\005\022\022\n\nfloat_data\030\006 \003(\002\022\026\n\007encod"
    "ed\030\007 \001(\010:\005false\"\212\002\n\017FillerParameter\022\026\n\004t"
    "ype\030\001 \001(\t:\010constant\022\020\n\005value\030\002 \001(\002:\0010\022\016\n"
    "\003min\030\003 \001(\002:\0010\022\016\n\003max\030\004 \001(\002:\0011\022\017\n\004mean\030\005 "
    "\001(\002:\0010\022\016\n\003std\030\006 \001(\002:\0011\022\022\n\006sparse\030\007 \001(\005:\002"
    "-1\022B\n\rvariance_norm\030\010 \001(\0162#.caffe.Filler"
    "Parameter.VarianceNorm:\006FAN_IN\"4\n\014Varian"
    "ceNorm\022\n\n\006FAN_IN\020\000\022\013\n\007FAN_OUT\020\001\022\013\n\007AVERA"
    "GE\020\002\"\216\002\n\014NetParameter\022\014\n\004name\030\001 \001(\t\022\r\n\005i"
    "nput\030\003 \003(\t\022%\n\013input_shape\030\010 \003(\0132\020.caffe."
    "BlobShape\022\021\n\tinput_dim\030\004 \003(\005\022\035\n\016force_ba"
    "ckward\030\005 \001(\010:\005false\022\036\n\005state\030\006 \001(\0132\017.caf"
    "fe.NetState\022\031\n\ndebug_info\030\007 \001(\010:\005false\022$"
    "\n\005layer\030d \003(\0132\025.caffe.LayerParameter\022\'\n\006"
    "layers\030\002 \003(\0132\027.caffe.V1LayerParameter\"\304\n"
    "\n\017SolverParameter\022\013\n\003net\030\030 \001(\t\022&\n\tnet_pa"
    "ram\030\031 \001(\0132\023.caffe.NetParameter\022\021\n\ttrain_"
    "net\030\001 \001(\t\022\020\n\010test_net\030\002 \003(\t\022,\n\017train_net"
    "_param\030\025 \001(\0132\023.caffe.NetParameter\022+\n\016tes"
    "t_net_param\030\026 \003(\0132\023.caffe.NetParameter\022$"
    "\n\013train_state\030\032 \001(\0132\017.caffe.NetState\022#\n\n"
    "test_state\030\033 \003(\0132\017.caffe.NetState\022\021\n\ttes"
    "t_iter\030\003 \003(\005\022\030\n\rtest_interval\030\004 \001(\005:\0010\022 "
    "\n\021test_compute_loss\030\023 \001(\010:\005false\022!\n\023test"
    "_initialization\030  \001(\010:\004true\022\017\n\007base_lr\030\005"
    " \001(\002\022\017\n\007display\030\006 \001(\005\022\027\n\014average_loss\030! "
    "\001(\005:\0011\022\020\n\010max_iter\030\007 \001(\005\022\024\n\titer_size\030$ "
    "\001(\005:\0011\022\021\n\tlr_policy\030\010 \001(\t\022\r\n\005gamma\030\t \001(\002"
    "\022\r\n\005power\030\n \001(\002\022\020\n\010momentum\030\013 \001(\002\022\024\n\014wei"
    "ght_decay\030\014 \001(\002\022\037\n\023regularization_type\030\035"
    " \001(\t:\002L2\022\020\n\010stepsize\030\r \001(\005\022\021\n\tstepvalue\030"
    "\" \003(\005\022\032\n\016clip_gradients\030# \001(\002:\002-1\022\023\n\010sna"
    "pshot\030\016 \001(\005:\0010\022\027\n\017snapshot_prefix\030\017 \001(\t\022"
    "\034\n\rsnapshot_diff\030\020 \001(\010:\005false\022K\n\017snapsho"
    "t_format\030% \001(\0162%.caffe.SolverParameter.S"
    "napshotFormat:\013BINARYPROTO\022;\n\013solver_mod"
    "e\030\021 \001(\0162!.caffe.SolverParameter.SolverMo"
    "de:\003GPU\022\024\n\tdevice_id\030\022 \001(\005:\0010\022\027\n\013random_"
    "seed\030\024 \001(\003:\002-1\022\021\n\004type\030( \001(\t:\003SGD\022\025\n\005del"
    "ta\030\037 \001(\002:\0061e-008\022\030\n\tmomentum2\030\' \001(\002:\0050.9"
    "99\022\027\n\trms_decay\030& \001(\002:\0040.99\022\031\n\ndebug_inf"
    "o\030\027 \001(\010:\005false\022\"\n\024snapshot_after_train\030\034"
    " \001(\010:\004true\022;\n\013solver_type\030\036 \001(\0162!.caffe."
    "SolverParameter.SolverType:\003SGD\022\037\n\021layer"
    "_wise_reduce\030) \001(\010:\004true\"+\n\016SnapshotForm"
    "at\022\010\n\004HDF5\020\000\022\017\n\013BINARYPROTO\020\001\"\036\n\nSolverM"
    "ode\022\007\n\003CPU\020\000\022\007\n\003GPU\020\001\"U\n\nSolverType\022\007\n\003S"
    "GD\020\000\022\014\n\010NESTEROV\020\001\022\013\n\007ADAGRAD\020\002\022\013\n\007RMSPR"
    "OP\020\003\022\014\n\010ADADELTA\020\004\022\010\n\004ADAM\020\005\"l\n\013SolverSt"
    "ate\022\014\n\004iter\030\001 \001(\005\022\023\n\013learned_net\030\002 \001(\t\022!"
    "\n\007history\030\003 \003(\0132\020.caffe.BlobProto\022\027\n\014cur"
    "rent_step\030\004 \001(\005:\0010\"N\n\010NetState\022!\n\005phase\030"
    "\001 \001(\0162\014.caffe.Phase:\004TEST\022\020\n\005level\030\002 \001(\005"
    ":\0010\022\r\n\005stage\030\003 \003(\t\"s\n\014NetStateRule\022\033\n\005ph"
    "ase\030\001 \001(\0162\014.caffe.Phase\022\021\n\tmin_level\030\002 \001"
    "(\005\022\021\n\tmax_level\030\003 \001(\005\022\r\n\005stage\030\004 \003(\t\022\021\n\t"
    "not_stage\030\005 \003(\t\"\243\001\n\tParamSpec\022\014\n\004name\030\001 "
    "\001(\t\0221\n\nshare_mode\030\002 \001(\0162\035.caffe.ParamSpe"
    "c.DimCheckMode\022\022\n\007lr_mult\030\003 \001(\002:\0011\022\025\n\nde"
    "cay_mult\030\004 \001(\002:\0011\"*\n\014DimCheckMode\022\n\n\006STR"
    "ICT\020\000\022\016\n\nPERMISSIVE\020\001\"\270$\n\016LayerParameter"
    "\022\014\n\004name\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\022\016\n\006bottom\030\003"
    " \003(\t\022\013\n\003top\030\004 \003(\t\022\033\n\005phase\030\n \001(\0162\014.caffe"
    ".Phase\022\023\n\013loss_weight\030\005 \003(\002\022\037\n\005param\030\006 \003"
    "(\0132\020.caffe.ParamSpec\022\037\n\005blobs\030\007 \003(\0132\020.ca"
    "ffe.BlobProto\022\026\n\016propagate_down\030\013 \003(\010\022$\n"
    "\007include\030\010 \003(\0132\023.caffe.NetStateRule\022$\n\007e"
    "xclude\030\t \003(\0132\023.caffe.NetStateRule\0227\n\017tra"
    "nsform_param\030d \001(\0132\036.caffe.Transformatio"
    "nParameter\022(\n\nloss_param\030e \001(\0132\024.caffe.L"
    "ossParameter\0220\n\016accuracy_param\030f \001(\0132\030.c"
    "affe.AccuracyParameter\022,\n\014argmax_param\030g"
    " \001(\0132\026.caffe.ArgMaxParameter\0224\n\020batch_no"
    "rm_param\030\213\001 \001(\0132\031.caffe.BatchNormParamet"
    "er\022)\n\nbias_param\030\215\001 \001(\0132\024.caffe.BiasPara"
    "meter\022,\n\014concat_param\030h \001(\0132\026.caffe.Conc"
    "atParameter\022\?\n\026contrastive_loss_param\030i "
    "\001(\0132\037.caffe.ContrastiveLossParameter\0226\n\021"
    "convolution_param\030j \001(\0132\033.caffe.Convolut"
    "ionParameter\022)\n\ncrop_param\030\220\001 \001(\0132\024.caff"
    "e.CropParameter\022(\n\ndata_param\030k \001(\0132\024.ca"
    "ffe.DataParameter\022.\n\rdropout_param\030l \001(\013"
    "2\027.caffe.DropoutParameter\0223\n\020dummy_data_"
    "param\030m \001(\0132\031.caffe.DummyDataParameter\022."
    "\n\reltwise_param\030n \001(\0132\027.caffe.EltwisePar"
    "ameter\022\'\n\telu_param\030\214\001 \001(\0132\023.caffe.ELUPa"
    "rameter\022+\n\013embed_param\030\211\001 \001(\0132\025.caffe.Em"
    "bedParameter\022&\n\texp_param\030o \001(\0132\023.caffe."
    "ExpParameter\022/\n\rflatten_param\030\207\001 \001(\0132\027.c"
    "affe.FlattenParameter\0221\n\017hdf5_data_param"
    "\030p \001(\0132\030.caffe.HDF5DataParameter\0225\n\021hdf5"
    "_output_param\030q \001(\0132\032.caffe.HDF5OutputPa"
    "rameter\0223\n\020hinge_loss_param\030r \001(\0132\031.caff"
    "e.HingeLossParameter\0223\n\020image_data_param"
    "\030s \001(\0132\031.caffe.ImageDataParameter\0229\n\023inf"
    "ogain_loss_param\030t \001(\0132\034.caffe.InfogainL"
    "ossParameter\0229\n\023inner_product_param\030u \001("
    "\0132\034.caffe.InnerProductParameter\022+\n\013input"
    "_param\030\217\001 \001(\0132\025.caffe.InputParameter\022\'\n\t"
    "log_param\030\206\001 \001(\0132\023.caffe.LogParameter\022&\n"
    "\tlrn_param\030v \001(\0132\023.caffe.LRNParameter\0225\n"
    "\021memory_data_param\030w \001(\0132\032.caffe.MemoryD"
    "ataParameter\022&\n\tmvn_param\030x \001(\0132\023.caffe."
    "MVNParameter\0223\n\017parameter_param\030\221\001 \001(\0132\031"
    ".caffe.ParameterParameter\022.\n\rpooling_par"
    "am\030y \001(\0132\027.caffe.PoolingParameter\022*\n\013pow"
    "er_param\030z \001(\0132\025.caffe.PowerParameter\022+\n"
    "\013prelu_param\030\203\001 \001(\0132\025.caffe.PReLUParamet"
    "er\022-\n\014python_param\030\202\001 \001(\0132\026.caffe.Python"
    "Parameter\0223\n\017recurrent_param\030\222\001 \001(\0132\031.ca"
    "ffe.RecurrentParameter\0223\n\017reduction_para"
    "m\030\210\001 \001(\0132\031.caffe.ReductionParameter\022(\n\nr"
    "elu_param\030{ \001(\0132\024.caffe.ReLUParameter\022/\n"
    "\rreshape_param\030\205\001 \001(\0132\027.caffe.ReshapePar"
    "ameter\022+\n\013scale_param\030\216\001 \001(\0132\025.caffe.Sca"
    "leParameter\022.\n\rsigmoid_param\030| \001(\0132\027.caf"
    "fe.SigmoidParameter\022.\n\rsoftmax_param\030} \001"
    "(\0132\027.caffe.SoftmaxParameter\022\'\n\tspp_param"
    "\030\204\001 \001(\0132\023.caffe.SPPParameter\022*\n\013slice_pa"
    "ram\030~ \001(\0132\025.caffe.SliceParameter\022(\n\ntanh"
    "_param\030\177 \001(\0132\024.caffe.TanHParameter\0223\n\017th"
    "reshold_param\030\200\001 \001(\0132\031.caffe.ThresholdPa"
    "rameter\022)\n\ntile_param\030\212\001 \001(\0132\024.caffe.Til"
    "eParameter\0226\n\021window_data_param\030\201\001 \001(\0132\032"
    ".caffe.WindowDataParameter\0229\n\023img_bbox_a"
    "nno_param\030\351\007 \001(\0132\033.caffe.ImgBBoxAnnoPara"
    "meter\022<\n\024heatmap_concat_param\030\352\007 \001(\0132\035.c"
    "affe.HeatmapConcatParameter\0229\n\023bbox_anno"
    "_map_param\030\353\007 \001(\0132\033.caffe.BBoxAnnoMapPar"
    "ameter\022+\n\013label_param\030\354\007 \001(\0132\025.caffe.Lab"
    "elParameter\0224\n\020patch_data_param\030\355\007 \001(\0132\031"
    ".caffe.PatchDataParameter\0226\n\021label_remap"
    "_param\030\356\007 \001(\0132\032.caffe.LabelRemapParamete"
    "r\022)\n\nbbox_param\030\357\007 \001(\0132\024.caffe.BBoxParam"
    "eter\022A\n\024sliding_window_param\030\360\007 \001(\0132\".ca"
    "ffe.SlidingWindowInputParameter\022G\n\033bbox_"
    "to_grid_and_size_param\030\361\007 \001(\0132!.caffe.BB"
    "oxToGridAndSizeParameter\0222\n\017size_unit_pa"
    "ram\030\362\007 \001(\0132\030.caffe.SizeUnitParameter\022/\n\r"
    "padding_param\030\363\007 \001(\0132\027.caffe.PaddingPara"
    "meter\0225\n\021gt_map_data_param\030\364\007 \001(\0132\031.caff"
    "e.GTMapDataParameter\022A\n\027label_diff_ignor"
    "e_param\030\365\007 \001(\0132\037.caffe.LabelDiffIgnorePa"
    "rameter\022;\n\024gt_submap_data_param\030\366\007 \001(\0132\034"
    ".caffe.GTSubmapDataParameter\022=\n\025top_subm"
    "ap_data_param\030\367\007 \001(\0132\035.caffe.TopSubmapDa"
    "taParameter\022:\n\023yololike_loss_param\030\370\007 \001("
    "\0132\034.caffe.YOLOLikeLossParameter\022I\n\033weigh"
    "ted_softmax_loss_param\030\371\007 \001(\0132#.caffe.We"
    "ightedSoftmaxLossParameter\022C\n\030grid_propo"
    "sal_loss_param\030\372\007 \001(\0132 .caffe.GridPropos"
    "alLossParameter\022A\n\027bg_synthesis_data_par"
    "am\030\373\007 \001(\0132\037.caffe.BGSynthesisDataParamet"
    "er\0226\n\021size_filter_param\030\374\007 \001(\0132\032.caffe.S"
    "izeFilterParameter\0229\n\022augmentation_param"
    "\030\375\007 \001(\0132\034.caffe.AugmentationParameter\022/\n"
    "\rheatmap_param\030\376\007 \001(\0132\027.caffe.HeatmapPar"
    "ameter\022+\n\013check_param\030\377\007 \001(\0132\025.caffe.Che"
    "ckParameter\0220\n\016mean_sub_param\030\200\010 \001(\0132\027.c"
    "affe.MeanSubParameter\022<\n\024minibatch_data_"
    "param\030\201\010 \001(\0132\035.caffe.MinibatchDataParame"
    "ter\022E\n\023rcp_transform_param\030\202\010 \001(\0132\'.caff"
    "e.RowColProposalTransformParameter\0225\n\021an"
    "no_to_seg_param\030\203\010 \001(\0132\031.caffe.AnnoToSeg"
    "Parameter\0222\n\017train_roi_param\030\204\010 \001(\0132\030.ca"
    "ffe.TrainROIParameter\0227\n\022yolo_v2_loss_pa"
    "ram\030\205\010 \001(\0132\032.caffe.YOLOV2LossParameter\022;"
    "\n\024yolo_v2_result_param\030\206\010 \001(\0132\034.caffe.YO"
    "LOV2ResultParameter\022>\n\025detection_check_p"
    "aram\030\207\010 \001(\0132\036.caffe.DetectionCheckParame"
    "ter\022:\n\023subwin_offset_param\030\210\010 \001(\0132\034.caff"
    "e.SubwinOffsetParameter\022<\n\024size_rejectio"
    "n_param\030\211\010 \001(\0132\035.caffe.SizeRejectionPara"
    "meter\0224\n\020conf_check_param\030\212\010 \001(\0132\031.caffe"
    ".ConfCheckParameter\022+\n\013reorg_param\030\213\010 \001("
    "\0132\025.caffe.ReorgParameter\022>\n\025batch_reject"
    "ion_param\030\214\010 \001(\0132\036.caffe.BatchRejectionP"
    "arameter\"\266\001\n\027TransformationParameter\022\020\n\005"
    "scale\030\001 \001(\002:\0011\022\025\n\006mirror\030\002 \001(\010:\005false\022\024\n"
    "\tcrop_size\030\003 \001(\r:\0010\022\021\n\tmean_file\030\004 \001(\t\022\022"
    "\n\nmean_value\030\005 \003(\002\022\032\n\013force_color\030\006 \001(\010:"
    "\005false\022\031\n\nforce_gray\030\007 \001(\010:\005false\"\302\001\n\rLo"
    "ssParameter\022\024\n\014ignore_label\030\001 \001(\005\022D\n\rnor"
    "malization\030\003 \001(\0162&.caffe.LossParameter.N"
    "ormalizationMode:\005VALID\022\021\n\tnormalize\030\002 \001"
    "(\010\"B\n\021NormalizationMode\022\010\n\004FULL\020\000\022\t\n\005VAL"
    "ID\020\001\022\016\n\nBATCH_SIZE\020\002\022\010\n\004NONE\020\003\"L\n\021Accura"
    "cyParameter\022\020\n\005top_k\030\001 \001(\r:\0011\022\017\n\004axis\030\002 "
    "\001(\005:\0011\022\024\n\014ignore_label\030\003 \001(\005\"M\n\017ArgMaxPa"
    "rameter\022\032\n\013out_max_val\030\001 \001(\010:\005false\022\020\n\005t"
    "op_k\030\002 \001(\r:\0011\022\014\n\004axis\030\003 \001(\005\"9\n\017ConcatPar"
    "ameter\022\017\n\004axis\030\002 \001(\005:\0011\022\025\n\nconcat_dim\030\001 "
    "\001(\r:\0011\"k\n\022BatchNormParameter\022\030\n\020use_glob"
    "al_stats\030\001 \001(\010\022&\n\027moving_average_fractio"
    "n\030\002 \001(\002:\0050.999\022\023\n\003eps\030\003 \001(\002:\0061e-005\"]\n\rB"
    "iasParameter\022\017\n\004axis\030\001 \001(\005:\0011\022\023\n\010num_axe"
    "s\030\002 \001(\005:\0011\022&\n\006filler\030\003 \001(\0132\026.caffe.Fille"
    "rParameter\"L\n\030ContrastiveLossParameter\022\021"
    "\n\006margin\030\001 \001(\002:\0011\022\035\n\016legacy_version\030\002 \001("
    "\010:\005false\"\374\003\n\024ConvolutionParameter\022\022\n\nnum"
    "_output\030\001 \001(\r\022\027\n\tbias_term\030\002 \001(\010:\004true\022\013"
    "\n\003pad\030\003 \003(\r\022\023\n\013kernel_size\030\004 \003(\r\022\016\n\006stri"
    "de\030\006 \003(\r\022\020\n\010dilation\030\022 \003(\r\022\020\n\005pad_h\030\t \001("
    "\r:\0010\022\020\n\005pad_w\030\n \001(\r:\0010\022\020\n\010kernel_h\030\013 \001(\r"
    "\022\020\n\010kernel_w\030\014 \001(\r\022\020\n\010stride_h\030\r \001(\r\022\020\n\010"
    "stride_w\030\016 \001(\r\022\020\n\005group\030\005 \001(\r:\0011\022-\n\rweig"
    "ht_filler\030\007 \001(\0132\026.caffe.FillerParameter\022"
    "+\n\013bias_filler\030\010 \001(\0132\026.caffe.FillerParam"
    "eter\022;\n\006engine\030\017 \001(\0162\".caffe.Convolution"
    "Parameter.Engine:\007DEFAULT\022\017\n\004axis\030\020 \001(\005:"
    "\0011\022\036\n\017force_nd_im2col\030\021 \001(\010:\005false\"+\n\006En"
    "gine\022\013\n\007DEFAULT\020\000\022\t\n\005CAFFE\020\001\022\t\n\005CUDNN\020\002\""
    "0\n\rCropParameter\022\017\n\004axis\030\001 \001(\005:\0012\022\016\n\006off"
    "set\030\002 \003(\r\"\244\002\n\rDataParameter\022\016\n\006source\030\001 "
    "\001(\t\022\022\n\nbatch_size\030\004 \001(\r\022\024\n\trand_skip\030\007 \001"
    "(\r:\0010\0221\n\007backend\030\010 \001(\0162\027.caffe.DataParam"
    "eter.DB:\007LEVELDB\022\020\n\005scale\030\002 \001(\002:\0011\022\021\n\tme"
    "an_file\030\003 \001(\t\022\024\n\tcrop_size\030\005 \001(\r:\0010\022\025\n\006m"
    "irror\030\006 \001(\010:\005false\022\"\n\023force_encoded_colo"
    "r\030\t \001(\010:\005false\022\023\n\010prefetch\030\n \001(\r:\0014\"\033\n\002D"
    "B\022\013\n\007LEVELDB\020\000\022\010\n\004LMDB\020\001\".\n\020DropoutParam"
    "eter\022\032\n\rdropout_ratio\030\001 \001(\002:\0030.5\"\240\001\n\022Dum"
    "myDataParameter\022+\n\013data_filler\030\001 \003(\0132\026.c"
    "affe.FillerParameter\022\037\n\005shape\030\006 \003(\0132\020.ca"
    "ffe.BlobShape\022\013\n\003num\030\002 \003(\r\022\020\n\010channels\030\003"
    " \003(\r\022\016\n\006height\030\004 \003(\r\022\r\n\005width\030\005 \003(\r\"\245\001\n\020"
    "EltwiseParameter\0229\n\toperation\030\001 \001(\0162!.ca"
    "ffe.EltwiseParameter.EltwiseOp:\003SUM\022\r\n\005c"
    "oeff\030\002 \003(\002\022\036\n\020stable_prod_grad\030\003 \001(\010:\004tr"
    "ue\"\'\n\tEltwiseOp\022\010\n\004PROD\020\000\022\007\n\003SUM\020\001\022\007\n\003MA"
    "X\020\002\" \n\014ELUParameter\022\020\n\005alpha\030\001 \001(\002:\0011\"\254\001"
    "\n\016EmbedParameter\022\022\n\nnum_output\030\001 \001(\r\022\021\n\t"
    "input_dim\030\002 \001(\r\022\027\n\tbias_term\030\003 \001(\010:\004true"
    "\022-\n\rweight_filler\030\004 \001(\0132\026.caffe.FillerPa"
    "rameter\022+\n\013bias_filler\030\005 \001(\0132\026.caffe.Fil"
    "lerParameter\"D\n\014ExpParameter\022\020\n\004base\030\001 \001"
    "(\002:\002-1\022\020\n\005scale\030\002 \001(\002:\0011\022\020\n\005shift\030\003 \001(\002:"
    "\0010\"9\n\020FlattenParameter\022\017\n\004axis\030\001 \001(\005:\0011\022"
    "\024\n\010end_axis\030\002 \001(\005:\002-1\"O\n\021HDF5DataParamet"
    "er\022\016\n\006source\030\001 \001(\t\022\022\n\nbatch_size\030\002 \001(\r\022\026"
    "\n\007shuffle\030\003 \001(\010:\005false\"(\n\023HDF5OutputPara"
    "meter\022\021\n\tfile_name\030\001 \001(\t\"^\n\022HingeLossPar"
    "ameter\0220\n\004norm\030\001 \001(\0162\036.caffe.HingeLossPa"
    "rameter.Norm:\002L1\"\026\n\004Norm\022\006\n\002L1\020\001\022\006\n\002L2\020\002"
    "\"\227\002\n\022ImageDataParameter\022\016\n\006source\030\001 \001(\t\022"
    "\025\n\nbatch_size\030\004 \001(\r:\0011\022\024\n\trand_skip\030\007 \001("
    "\r:\0010\022\026\n\007shuffle\030\010 \001(\010:\005false\022\025\n\nnew_heig"
    "ht\030\t \001(\r:\0010\022\024\n\tnew_width\030\n \001(\r:\0010\022\026\n\010is_"
    "color\030\013 \001(\010:\004true\022\020\n\005scale\030\002 \001(\002:\0011\022\021\n\tm"
    "ean_file\030\003 \001(\t\022\024\n\tcrop_size\030\005 \001(\r:\0010\022\025\n\006"
    "mirror\030\006 \001(\010:\005false\022\025\n\013root_folder\030\014 \001(\t"
    ":\000\"8\n\025InfogainLossParameter\022\016\n\006source\030\001 "
    "\001(\t\022\017\n\004axis\030\002 \001(\005:\0011\"\313\001\n\025InnerProductPar"
    "ameter\022\022\n\nnum_output\030\001 \001(\r\022\027\n\tbias_term\030"
    "\002 \001(\010:\004true\022-\n\rweight_filler\030\003 \001(\0132\026.caf"
    "fe.FillerParameter\022+\n\013bias_filler\030\004 \001(\0132"
    "\026.caffe.FillerParameter\022\017\n\004axis\030\005 \001(\005:\0011"
    "\022\030\n\ttranspose\030\006 \001(\010:\005false\"1\n\016InputParam"
    "eter\022\037\n\005shape\030\001 \003(\0132\020.caffe.BlobShape\"D\n"
    "\014LogParameter\022\020\n\004base\030\001 \001(\002:\002-1\022\020\n\005scale"
    "\030\002 \001(\002:\0011\022\020\n\005shift\030\003 \001(\002:\0010\"\270\002\n\014LRNParam"
    "eter\022\025\n\nlocal_size\030\001 \001(\r:\0015\022\020\n\005alpha\030\002 \001"
    "(\002:\0011\022\022\n\004beta\030\003 \001(\002:\0040.75\022D\n\013norm_region"
    "\030\004 \001(\0162\036.caffe.LRNParameter.NormRegion:\017"
    "ACROSS_CHANNELS\022\014\n\001k\030\005 \001(\002:\0011\0223\n\006engine\030"
    "\006 \001(\0162\032.caffe.LRNParameter.Engine:\007DEFAU"
    "LT\"5\n\nNormRegion\022\023\n\017ACROSS_CHANNELS\020\000\022\022\n"
    "\016WITHIN_CHANNEL\020\001\"+\n\006Engine\022\013\n\007DEFAULT\020\000"
    "\022\t\n\005CAFFE\020\001\022\t\n\005CUDNN\020\002\"Z\n\023MemoryDataPara"
    "meter\022\022\n\nbatch_size\030\001 \001(\r\022\020\n\010channels\030\002 "
    "\001(\r\022\016\n\006height\030\003 \001(\r\022\r\n\005width\030\004 \001(\r\"e\n\014MV"
    "NParameter\022 \n\022normalize_variance\030\001 \001(\010:\004"
    "true\022\036\n\017across_channels\030\002 \001(\010:\005false\022\023\n\003"
    "eps\030\003 \001(\002:\0061e-009\"5\n\022ParameterParameter\022"
    "\037\n\005shape\030\001 \001(\0132\020.caffe.BlobShape\"\242\003\n\020Poo"
    "lingParameter\0225\n\004pool\030\001 \001(\0162\".caffe.Pool"
    "ingParameter.PoolMethod:\003MAX\022\016\n\003pad\030\004 \001("
    "\r:\0010\022\020\n\005pad_h\030\t \001(\r:\0010\022\020\n\005pad_w\030\n \001(\r:\0010"
    "\022\023\n\013kernel_size\030\002 \001(\r\022\020\n\010kernel_h\030\005 \001(\r\022"
    "\020\n\010kernel_w\030\006 \001(\r\022\021\n\006stride\030\003 \001(\r:\0011\022\020\n\010"
    "stride_h\030\007 \001(\r\022\020\n\010stride_w\030\010 \001(\r\0227\n\006engi"
    "ne\030\013 \001(\0162\036.caffe.PoolingParameter.Engine"
    ":\007DEFAULT\022\035\n\016global_pooling\030\014 \001(\010:\005false"
    "\".\n\nPoolMethod\022\007\n\003MAX\020\000\022\007\n\003AVE\020\001\022\016\n\nSTOC"
    "HASTIC\020\002\"+\n\006Engine\022\013\n\007DEFAULT\020\000\022\t\n\005CAFFE"
    "\020\001\022\t\n\005CUDNN\020\002\"F\n\016PowerParameter\022\020\n\005power"
    "\030\001 \001(\002:\0011\022\020\n\005scale\030\002 \001(\002:\0011\022\020\n\005shift\030\003 \001"
    "(\002:\0010\"g\n\017PythonParameter\022\016\n\006module\030\001 \001(\t"
    "\022\r\n\005layer\030\002 \001(\t\022\023\n\tparam_str\030\003 \001(\t:\000\022 \n\021"
    "share_in_parallel\030\004 \001(\010:\005false\"\300\001\n\022Recur"
    "rentParameter\022\025\n\nnum_output\030\001 \001(\r:\0010\022-\n\r"
    "weight_filler\030\002 \001(\0132\026.caffe.FillerParame"
    "ter\022+\n\013bias_filler\030\003 \001(\0132\026.caffe.FillerP"
    "arameter\022\031\n\ndebug_info\030\004 \001(\010:\005false\022\034\n\re"
    "xpose_hidden\030\005 \001(\010:\005false\"\255\001\n\022ReductionP"
    "arameter\022=\n\toperation\030\001 \001(\0162%.caffe.Redu"
    "ctionParameter.ReductionOp:\003SUM\022\017\n\004axis\030"
    "\002 \001(\005:\0010\022\020\n\005coeff\030\003 \001(\002:\0011\"5\n\013ReductionO"
    "p\022\007\n\003SUM\020\001\022\010\n\004ASUM\020\002\022\t\n\005SUMSQ\020\003\022\010\n\004MEAN\020"
    "\004\"\215\001\n\rReLUParameter\022\031\n\016negative_slope\030\001 "
    "\001(\002:\0010\0224\n\006engine\030\002 \001(\0162\033.caffe.ReLUParam"
    "eter.Engine:\007DEFAULT\"+\n\006Engine\022\013\n\007DEFAUL"
    "T\020\000\022\t\n\005CAFFE\020\001\022\t\n\005CUDNN\020\002\"Z\n\020ReshapePara"
    "meter\022\037\n\005shape\030\001 \001(\0132\020.caffe.BlobShape\022\017"
    "\n\004axis\030\002 \001(\005:\0010\022\024\n\010num_axes\030\003 \001(\005:\002-1\"\245\001"
    "\n\016ScaleParameter\022\017\n\004axis\030\001 \001(\005:\0011\022\023\n\010num"
    "_axes\030\002 \001(\005:\0011\022&\n\006filler\030\003 \001(\0132\026.caffe.F"
    "illerParameter\022\030\n\tbias_term\030\004 \001(\010:\005false"
    "\022+\n\013bias_filler\030\005 \001(\0132\026.caffe.FillerPara"
    "meter\"x\n\020SigmoidParameter\0227\n\006engine\030\001 \001("
    "\0162\036.caffe.SigmoidParameter.Engine:\007DEFAU"
    "LT\"+\n\006Engine\022\013\n\007DEFAULT\020\000\022\t\n\005CAFFE\020\001\022\t\n\005"
    "CUDNN\020\002\"L\n\016SliceParameter\022\017\n\004axis\030\003 \001(\005:"
    "\0011\022\023\n\013slice_point\030\002 \003(\r\022\024\n\tslice_dim\030\001 \001"
    "(\r:\0011\"\211\001\n\020SoftmaxParameter\0227\n\006engine\030\001 \001"
    "(\0162\036.caffe.SoftmaxParameter.Engine:\007DEFA"
    "ULT\022\017\n\004axis\030\002 \001(\005:\0011\"+\n\006Engine\022\013\n\007DEFAUL"
    "T\020\000\022\t\n\005CAFFE\020\001\022\t\n\005CUDNN\020\002\"r\n\rTanHParamet"
    "er\0224\n\006engine\030\001 \001(\0162\033.caffe.TanHParameter"
    ".Engine:\007DEFAULT\"+\n\006Engine\022\013\n\007DEFAULT\020\000\022"
    "\t\n\005CAFFE\020\001\022\t\n\005CUDNN\020\002\"/\n\rTileParameter\022\017"
    "\n\004axis\030\001 \001(\005:\0011\022\r\n\005tiles\030\002 \001(\005\"*\n\022Thresh"
    "oldParameter\022\024\n\tthreshold\030\001 \001(\002:\0010\"\301\002\n\023W"
    "indowDataParameter\022\016\n\006source\030\001 \001(\t\022\020\n\005sc"
    "ale\030\002 \001(\002:\0011\022\021\n\tmean_file\030\003 \001(\t\022\022\n\nbatch"
    "_size\030\004 \001(\r\022\024\n\tcrop_size\030\005 \001(\r:\0010\022\025\n\006mir"
    "ror\030\006 \001(\010:\005false\022\031\n\014fg_threshold\030\007 \001(\002:\003"
    "0.5\022\031\n\014bg_threshold\030\010 \001(\002:\0030.5\022\031\n\013fg_fra"
    "ction\030\t \001(\002:\0040.25\022\026\n\013context_pad\030\n \001(\r:\001"
    "0\022\027\n\tcrop_mode\030\013 \001(\t:\004warp\022\033\n\014cache_imag"
    "es\030\014 \001(\010:\005false\022\025\n\013root_folder\030\r \001(\t:\000\"\353"
    "\001\n\014SPPParameter\022\026\n\016pyramid_height\030\001 \001(\r\022"
    "1\n\004pool\030\002 \001(\0162\036.caffe.SPPParameter.PoolM"
    "ethod:\003MAX\0223\n\006engine\030\006 \001(\0162\032.caffe.SPPPa"
    "rameter.Engine:\007DEFAULT\".\n\nPoolMethod\022\007\n"
    "\003MAX\020\000\022\007\n\003AVE\020\001\022\016\n\nSTOCHASTIC\020\002\"+\n\006Engin"
    "e\022\013\n\007DEFAULT\020\000\022\t\n\005CAFFE\020\001\022\t\n\005CUDNN\020\002\"\340\023\n"
    "\020V1LayerParameter\022\016\n\006bottom\030\002 \003(\t\022\013\n\003top"
    "\030\003 \003(\t\022\014\n\004name\030\004 \001(\t\022$\n\007include\030  \003(\0132\023."
    "caffe.NetStateRule\022$\n\007exclude\030! \003(\0132\023.ca"
    "ffe.NetStateRule\022/\n\004type\030\005 \001(\0162!.caffe.V"
    "1LayerParameter.LayerType\022\037\n\005blobs\030\006 \003(\013"
    "2\020.caffe.BlobProto\022\016\n\005param\030\351\007 \003(\t\022>\n\017bl"
    "ob_share_mode\030\352\007 \003(\0162$.caffe.V1LayerPara"
    "meter.DimCheckMode\022\020\n\010blobs_lr\030\007 \003(\002\022\024\n\014"
    "weight_decay\030\010 \003(\002\022\023\n\013loss_weight\030# \003(\002\022"
    "0\n\016accuracy_param\030\033 \001(\0132\030.caffe.Accuracy"
    "Parameter\022,\n\014argmax_param\030\027 \001(\0132\026.caffe."
    "ArgMaxParameter\022,\n\014concat_param\030\t \001(\0132\026."
    "caffe.ConcatParameter\022\?\n\026contrastive_los"
    "s_param\030( \001(\0132\037.caffe.ContrastiveLossPar"
    "ameter\0226\n\021convolution_param\030\n \001(\0132\033.caff"
    "e.ConvolutionParameter\022(\n\ndata_param\030\013 \001"
    "(\0132\024.caffe.DataParameter\022.\n\rdropout_para"
    "m\030\014 \001(\0132\027.caffe.DropoutParameter\0223\n\020dumm"
    "y_data_param\030\032 \001(\0132\031.caffe.DummyDataPara"
    "meter\022.\n\reltwise_param\030\030 \001(\0132\027.caffe.Elt"
    "wiseParameter\022&\n\texp_param\030) \001(\0132\023.caffe"
    ".ExpParameter\0221\n\017hdf5_data_param\030\r \001(\0132\030"
    ".caffe.HDF5DataParameter\0225\n\021hdf5_output_"
    "param\030\016 \001(\0132\032.caffe.HDF5OutputParameter\022"
    "3\n\020hinge_loss_param\030\035 \001(\0132\031.caffe.HingeL"
    "ossParameter\0223\n\020image_data_param\030\017 \001(\0132\031"
    ".caffe.ImageDataParameter\0229\n\023infogain_lo"
    "ss_param\030\020 \001(\0132\034.caffe.InfogainLossParam"
    "eter\0229\n\023inner_product_param\030\021 \001(\0132\034.caff"
    "e.InnerProductParameter\022&\n\tlrn_param\030\022 \001"
    "(\0132\023.caffe.LRNParameter\0225\n\021memory_data_p"
    "aram\030\026 \001(\0132\032.caffe.MemoryDataParameter\022&"
    "\n\tmvn_param\030\" \001(\0132\023.caffe.MVNParameter\022."
    "\n\rpooling_param\030\023 \001(\0132\027.caffe.PoolingPar"
    "ameter\022*\n\013power_param\030\025 \001(\0132\025.caffe.Powe"
    "rParameter\022(\n\nrelu_param\030\036 \001(\0132\024.caffe.R"
    "eLUParameter\022.\n\rsigmoid_param\030& \001(\0132\027.ca"
    "ffe.SigmoidParameter\022.\n\rsoftmax_param\030\' "
    "\001(\0132\027.caffe.SoftmaxParameter\022*\n\013slice_pa"
    "ram\030\037 \001(\0132\025.caffe.SliceParameter\022(\n\ntanh"
    "_param\030% \001(\0132\024.caffe.TanHParameter\0222\n\017th"
    "reshold_param\030\031 \001(\0132\031.caffe.ThresholdPar"
    "ameter\0225\n\021window_data_param\030\024 \001(\0132\032.caff"
    "e.WindowDataParameter\0227\n\017transform_param"
    "\030$ \001(\0132\036.caffe.TransformationParameter\022("
    "\n\nloss_param\030* \001(\0132\024.caffe.LossParameter"
    "\022&\n\005layer\030\001 \001(\0132\027.caffe.V0LayerParameter"
    "\"\330\004\n\tLayerType\022\010\n\004NONE\020\000\022\n\n\006ABSVAL\020#\022\014\n\010"
    "ACCURACY\020\001\022\n\n\006ARGMAX\020\036\022\010\n\004BNLL\020\002\022\n\n\006CONC"
    "AT\020\003\022\024\n\020CONTRASTIVE_LOSS\020%\022\017\n\013CONVOLUTIO"
    "N\020\004\022\010\n\004DATA\020\005\022\021\n\rDECONVOLUTION\020\'\022\013\n\007DROP"
    "OUT\020\006\022\016\n\nDUMMY_DATA\020 \022\022\n\016EUCLIDEAN_LOSS\020"
    "\007\022\013\n\007ELTWISE\020\031\022\007\n\003EXP\020&\022\013\n\007FLATTEN\020\010\022\r\n\t"
    "HDF5_DATA\020\t\022\017\n\013HDF5_OUTPUT\020\n\022\016\n\nHINGE_LO"
    "SS\020\034\022\n\n\006IM2COL\020\013\022\016\n\nIMAGE_DATA\020\014\022\021\n\rINFO"
    "GAIN_LOSS\020\r\022\021\n\rINNER_PRODUCT\020\016\022\007\n\003LRN\020\017\022"
    "\017\n\013MEMORY_DATA\020\035\022\035\n\031MULTINOMIAL_LOGISTIC"
    "_LOSS\020\020\022\007\n\003MVN\020\"\022\013\n\007POOLING\020\021\022\t\n\005POWER\020\032"
    "\022\010\n\004RELU\020\022\022\013\n\007SIGMOID\020\023\022\036\n\032SIGMOID_CROSS"
    "_ENTROPY_LOSS\020\033\022\013\n\007SILENCE\020$\022\013\n\007SOFTMAX\020"
    "\024\022\020\n\014SOFTMAX_LOSS\020\025\022\t\n\005SPLIT\020\026\022\t\n\005SLICE\020"
    "!\022\010\n\004TANH\020\027\022\017\n\013WINDOW_DATA\020\030\022\r\n\tTHRESHOL"
    "D\020\037\"*\n\014DimCheckMode\022\n\n\006STRICT\020\000\022\016\n\nPERMI"
    "SSIVE\020\001\"\375\007\n\020V0LayerParameter\022\014\n\004name\030\001 \001"
    "(\t\022\014\n\004type\030\002 \001(\t\022\022\n\nnum_output\030\003 \001(\r\022\026\n\010"
    "biasterm\030\004 \001(\010:\004true\022-\n\rweight_filler\030\005 "
    "\001(\0132\026.caffe.FillerParameter\022+\n\013bias_fill"
    "er\030\006 \001(\0132\026.caffe.FillerParameter\022\016\n\003pad\030"
    "\007 \001(\r:\0010\022\022\n\nkernelsize\030\010 \001(\r\022\020\n\005group\030\t "
    "\001(\r:\0011\022\021\n\006stride\030\n \001(\r:\0011\0225\n\004pool\030\013 \001(\0162"
    "\".caffe.V0LayerParameter.PoolMethod:\003MAX"
    "\022\032\n\rdropout_ratio\030\014 \001(\002:\0030.5\022\025\n\nlocal_si"
    "ze\030\r \001(\r:\0015\022\020\n\005alpha\030\016 \001(\002:\0011\022\022\n\004beta\030\017 "
    "\001(\002:\0040.75\022\014\n\001k\030\026 \001(\002:\0011\022\016\n\006source\030\020 \001(\t\022"
    "\020\n\005scale\030\021 \001(\002:\0011\022\020\n\010meanfile\030\022 \001(\t\022\021\n\tb"
    "atchsize\030\023 \001(\r\022\023\n\010cropsize\030\024 \001(\r:\0010\022\025\n\006m"
    "irror\030\025 \001(\010:\005false\022\037\n\005blobs\0302 \003(\0132\020.caff"
    "e.BlobProto\022\020\n\010blobs_lr\0303 \003(\002\022\024\n\014weight_"
    "decay\0304 \003(\002\022\024\n\trand_skip\0305 \001(\r:\0010\022\035\n\020det"
    "_fg_threshold\0306 \001(\002:\0030.5\022\035\n\020det_bg_thres"
    "hold\0307 \001(\002:\0030.5\022\035\n\017det_fg_fraction\0308 \001(\002"
    ":\0040.25\022\032\n\017det_context_pad\030: \001(\r:\0010\022\033\n\rde"
    "t_crop_mode\030; \001(\t:\004warp\022\022\n\007new_num\030< \001(\005"
    ":\0010\022\027\n\014new_channels\030= \001(\005:\0010\022\025\n\nnew_heig"
    "ht\030> \001(\005:\0010\022\024\n\tnew_width\030\? \001(\005:\0010\022\035\n\016shu"
    "ffle_images\030@ \001(\010:\005false\022\025\n\nconcat_dim\030A"
    " \001(\r:\0011\0226\n\021hdf5_output_param\030\351\007 \001(\0132\032.ca"
    "ffe.HDF5OutputParameter\".\n\nPoolMethod\022\007\n"
    "\003MAX\020\000\022\007\n\003AVE\020\001\022\016\n\nSTOCHASTIC\020\002\"W\n\016PReLU"
    "Parameter\022&\n\006filler\030\001 \001(\0132\026.caffe.Filler"
    "Parameter\022\035\n\016channel_shared\030\002 \001(\010:\005false"
    "*\034\n\005Phase\022\t\n\005TRAIN\020\000\022\010\n\004TEST\020\001", 24590);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "caffe.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_caffe_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_caffe_2eproto_once_);
void protobuf_AddDesc_caffe_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_caffe_2eproto_once_,
                 &protobuf_AddDesc_caffe_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_caffe_2eproto {
  StaticDescriptorInitializer_caffe_2eproto() {
    protobuf_AddDesc_caffe_2eproto();
  }
} static_descriptor_initializer_caffe_2eproto_;
const ::google::protobuf::EnumDescriptor* Phase_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Phase_descriptor_;
}
bool Phase_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImgBBoxAnnoDatum::kImgDatumFieldNumber;
const int ImgBBoxAnnoDatum::kLabelFieldNumber;
const int ImgBBoxAnnoDatum::kXMinFieldNumber;
const int ImgBBoxAnnoDatum::kYMinFieldNumber;
const int ImgBBoxAnnoDatum::kXMaxFieldNumber;
const int ImgBBoxAnnoDatum::kYMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImgBBoxAnnoDatum::ImgBBoxAnnoDatum()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ImgBBoxAnnoDatum)
}

void ImgBBoxAnnoDatum::InitAsDefaultInstance() {
  img_datum_ = const_cast< ::caffe::Datum*>(
      ::caffe::Datum::internal_default_instance());
}

ImgBBoxAnnoDatum::ImgBBoxAnnoDatum(const ImgBBoxAnnoDatum& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ImgBBoxAnnoDatum)
}

void ImgBBoxAnnoDatum::SharedCtor() {
  _cached_size_ = 0;
  img_datum_ = NULL;
}

ImgBBoxAnnoDatum::~ImgBBoxAnnoDatum() {
  // @@protoc_insertion_point(destructor:caffe.ImgBBoxAnnoDatum)
  SharedDtor();
}

void ImgBBoxAnnoDatum::SharedDtor() {
  if (this != &ImgBBoxAnnoDatum_default_instance_.get()) {
    delete img_datum_;
  }
}

void ImgBBoxAnnoDatum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImgBBoxAnnoDatum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImgBBoxAnnoDatum_descriptor_;
}

const ImgBBoxAnnoDatum& ImgBBoxAnnoDatum::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ImgBBoxAnnoDatum> ImgBBoxAnnoDatum_default_instance_;

ImgBBoxAnnoDatum* ImgBBoxAnnoDatum::New(::google::protobuf::Arena* arena) const {
  ImgBBoxAnnoDatum* n = new ImgBBoxAnnoDatum;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImgBBoxAnnoDatum::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ImgBBoxAnnoDatum)
  if (has_img_datum()) {
    if (img_datum_ != NULL) img_datum_->::caffe::Datum::Clear();
  }
  label_.Clear();
  x_min_.Clear();
  y_min_.Clear();
  x_max_.Clear();
  y_max_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ImgBBoxAnnoDatum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ImgBBoxAnnoDatum)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .caffe.Datum img_datum = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_img_datum()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_label;
        break;
      }

      // repeated int32 label = 2;
      case 2: {
        if (tag == 16) {
         parse_label:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_label())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_label())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_label;
        if (input->ExpectTag(29)) goto parse_x_min;
        break;
      }

      // repeated float x_min = 3;
      case 3: {
        if (tag == 29) {
         parse_x_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_x_min())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_x_min())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_x_min;
        if (input->ExpectTag(37)) goto parse_y_min;
        break;
      }

      // repeated float y_min = 4;
      case 4: {
        if (tag == 37) {
         parse_y_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37, input, this->mutable_y_min())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_y_min())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_y_min;
        if (input->ExpectTag(45)) goto parse_x_max;
        break;
      }

      // repeated float x_max = 5;
      case 5: {
        if (tag == 45) {
         parse_x_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45, input, this->mutable_x_max())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_x_max())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_x_max;
        if (input->ExpectTag(53)) goto parse_y_max;
        break;
      }

      // repeated float y_max = 6;
      case 6: {
        if (tag == 53) {
         parse_y_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 53, input, this->mutable_y_max())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_y_max())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_y_max;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ImgBBoxAnnoDatum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ImgBBoxAnnoDatum)
  return false;
#undef DO_
}

void ImgBBoxAnnoDatum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ImgBBoxAnnoDatum)
  // required .caffe.Datum img_datum = 1;
  if (has_img_datum()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->img_datum_, output);
  }

  // repeated int32 label = 2;
  for (int i = 0; i < this->label_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->label(i), output);
  }

  // repeated float x_min = 3;
  for (int i = 0; i < this->x_min_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->x_min(i), output);
  }

  // repeated float y_min = 4;
  for (int i = 0; i < this->y_min_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->y_min(i), output);
  }

  // repeated float x_max = 5;
  for (int i = 0; i < this->x_max_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->x_max(i), output);
  }

  // repeated float y_max = 6;
  for (int i = 0; i < this->y_max_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      6, this->y_max(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ImgBBoxAnnoDatum)
}

::google::protobuf::uint8* ImgBBoxAnnoDatum::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ImgBBoxAnnoDatum)
  // required .caffe.Datum img_datum = 1;
  if (has_img_datum()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->img_datum_, false, target);
  }

  // repeated int32 label = 2;
  for (int i = 0; i < this->label_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->label(i), target);
  }

  // repeated float x_min = 3;
  for (int i = 0; i < this->x_min_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(3, this->x_min(i), target);
  }

  // repeated float y_min = 4;
  for (int i = 0; i < this->y_min_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(4, this->y_min(i), target);
  }

  // repeated float x_max = 5;
  for (int i = 0; i < this->x_max_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(5, this->x_max(i), target);
  }

  // repeated float y_max = 6;
  for (int i = 0; i < this->y_max_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(6, this->y_max(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ImgBBoxAnnoDatum)
  return target;
}

size_t ImgBBoxAnnoDatum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ImgBBoxAnnoDatum)
  size_t total_size = 0;

  // required .caffe.Datum img_datum = 1;
  if (has_img_datum()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->img_datum_);
  }
  // repeated int32 label = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->label_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->label(i));
    }
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->label_size());
    total_size += data_size;
  }

  // repeated float x_min = 3;
  {
    size_t data_size = 0;
    unsigned int count = this->x_min_size();
    data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->x_min_size());
    total_size += data_size;
  }

  // repeated float y_min = 4;
  {
    size_t data_size = 0;
    unsigned int count = this->y_min_size();
    data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->y_min_size());
    total_size += data_size;
  }

  // repeated float x_max = 5;
  {
    size_t data_size = 0;
    unsigned int count = this->x_max_size();
    data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->x_max_size());
    total_size += data_size;
  }

  // repeated float y_max = 6;
  {
    size_t data_size = 0;
    unsigned int count = this->y_max_size();
    data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->y_max_size());
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImgBBoxAnnoDatum::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ImgBBoxAnnoDatum)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ImgBBoxAnnoDatum* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImgBBoxAnnoDatum>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ImgBBoxAnnoDatum)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ImgBBoxAnnoDatum)
    UnsafeMergeFrom(*source);
  }
}

void ImgBBoxAnnoDatum::MergeFrom(const ImgBBoxAnnoDatum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ImgBBoxAnnoDatum)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ImgBBoxAnnoDatum::UnsafeMergeFrom(const ImgBBoxAnnoDatum& from) {
  GOOGLE_DCHECK(&from != this);
  label_.UnsafeMergeFrom(from.label_);
  x_min_.UnsafeMergeFrom(from.x_min_);
  y_min_.UnsafeMergeFrom(from.y_min_);
  x_max_.UnsafeMergeFrom(from.x_max_);
  y_max_.UnsafeMergeFrom(from.y_max_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_img_datum()) {
      mutable_img_datum()->::caffe::Datum::MergeFrom(from.img_datum());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ImgBBoxAnnoDatum::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ImgBBoxAnnoDatum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImgBBoxAnnoDatum::CopyFrom(const ImgBBoxAnnoDatum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ImgBBoxAnnoDatum)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ImgBBoxAnnoDatum::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ImgBBoxAnnoDatum::Swap(ImgBBoxAnnoDatum* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImgBBoxAnnoDatum::InternalSwap(ImgBBoxAnnoDatum* other) {
  std::swap(img_datum_, other->img_datum_);
  label_.UnsafeArenaSwap(&other->label_);
  x_min_.UnsafeArenaSwap(&other->x_min_);
  y_min_.UnsafeArenaSwap(&other->y_min_);
  x_max_.UnsafeArenaSwap(&other->x_max_);
  y_max_.UnsafeArenaSwap(&other->y_max_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImgBBoxAnnoDatum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImgBBoxAnnoDatum_descriptor_;
  metadata.reflection = ImgBBoxAnnoDatum_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImgBBoxAnnoDatum

// required .caffe.Datum img_datum = 1;
bool ImgBBoxAnnoDatum::has_img_datum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImgBBoxAnnoDatum::set_has_img_datum() {
  _has_bits_[0] |= 0x00000001u;
}
void ImgBBoxAnnoDatum::clear_has_img_datum() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImgBBoxAnnoDatum::clear_img_datum() {
  if (img_datum_ != NULL) img_datum_->::caffe::Datum::Clear();
  clear_has_img_datum();
}
const ::caffe::Datum& ImgBBoxAnnoDatum::img_datum() const {
  // @@protoc_insertion_point(field_get:caffe.ImgBBoxAnnoDatum.img_datum)
  return img_datum_ != NULL ? *img_datum_
                         : *::caffe::Datum::internal_default_instance();
}
::caffe::Datum* ImgBBoxAnnoDatum::mutable_img_datum() {
  set_has_img_datum();
  if (img_datum_ == NULL) {
    img_datum_ = new ::caffe::Datum;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ImgBBoxAnnoDatum.img_datum)
  return img_datum_;
}
::caffe::Datum* ImgBBoxAnnoDatum::release_img_datum() {
  // @@protoc_insertion_point(field_release:caffe.ImgBBoxAnnoDatum.img_datum)
  clear_has_img_datum();
  ::caffe::Datum* temp = img_datum_;
  img_datum_ = NULL;
  return temp;
}
void ImgBBoxAnnoDatum::set_allocated_img_datum(::caffe::Datum* img_datum) {
  delete img_datum_;
  img_datum_ = img_datum;
  if (img_datum) {
    set_has_img_datum();
  } else {
    clear_has_img_datum();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ImgBBoxAnnoDatum.img_datum)
}

// repeated int32 label = 2;
int ImgBBoxAnnoDatum::label_size() const {
  return label_.size();
}
void ImgBBoxAnnoDatum::clear_label() {
  label_.Clear();
}
::google::protobuf::int32 ImgBBoxAnnoDatum::label(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ImgBBoxAnnoDatum.label)
  return label_.Get(index);
}
void ImgBBoxAnnoDatum::set_label(int index, ::google::protobuf::int32 value) {
  label_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ImgBBoxAnnoDatum.label)
}
void ImgBBoxAnnoDatum::add_label(::google::protobuf::int32 value) {
  label_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ImgBBoxAnnoDatum.label)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ImgBBoxAnnoDatum::label() const {
  // @@protoc_insertion_point(field_list:caffe.ImgBBoxAnnoDatum.label)
  return label_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ImgBBoxAnnoDatum::mutable_label() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ImgBBoxAnnoDatum.label)
  return &label_;
}

// repeated float x_min = 3;
int ImgBBoxAnnoDatum::x_min_size() const {
  return x_min_.size();
}
void ImgBBoxAnnoDatum::clear_x_min() {
  x_min_.Clear();
}
float ImgBBoxAnnoDatum::x_min(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ImgBBoxAnnoDatum.x_min)
  return x_min_.Get(index);
}
void ImgBBoxAnnoDatum::set_x_min(int index, float value) {
  x_min_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ImgBBoxAnnoDatum.x_min)
}
void ImgBBoxAnnoDatum::add_x_min(float value) {
  x_min_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ImgBBoxAnnoDatum.x_min)
}
const ::google::protobuf::RepeatedField< float >&
ImgBBoxAnnoDatum::x_min() const {
  // @@protoc_insertion_point(field_list:caffe.ImgBBoxAnnoDatum.x_min)
  return x_min_;
}
::google::protobuf::RepeatedField< float >*
ImgBBoxAnnoDatum::mutable_x_min() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ImgBBoxAnnoDatum.x_min)
  return &x_min_;
}

// repeated float y_min = 4;
int ImgBBoxAnnoDatum::y_min_size() const {
  return y_min_.size();
}
void ImgBBoxAnnoDatum::clear_y_min() {
  y_min_.Clear();
}
float ImgBBoxAnnoDatum::y_min(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ImgBBoxAnnoDatum.y_min)
  return y_min_.Get(index);
}
void ImgBBoxAnnoDatum::set_y_min(int index, float value) {
  y_min_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ImgBBoxAnnoDatum.y_min)
}
void ImgBBoxAnnoDatum::add_y_min(float value) {
  y_min_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ImgBBoxAnnoDatum.y_min)
}
const ::google::protobuf::RepeatedField< float >&
ImgBBoxAnnoDatum::y_min() const {
  // @@protoc_insertion_point(field_list:caffe.ImgBBoxAnnoDatum.y_min)
  return y_min_;
}
::google::protobuf::RepeatedField< float >*
ImgBBoxAnnoDatum::mutable_y_min() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ImgBBoxAnnoDatum.y_min)
  return &y_min_;
}

// repeated float x_max = 5;
int ImgBBoxAnnoDatum::x_max_size() const {
  return x_max_.size();
}
void ImgBBoxAnnoDatum::clear_x_max() {
  x_max_.Clear();
}
float ImgBBoxAnnoDatum::x_max(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ImgBBoxAnnoDatum.x_max)
  return x_max_.Get(index);
}
void ImgBBoxAnnoDatum::set_x_max(int index, float value) {
  x_max_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ImgBBoxAnnoDatum.x_max)
}
void ImgBBoxAnnoDatum::add_x_max(float value) {
  x_max_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ImgBBoxAnnoDatum.x_max)
}
const ::google::protobuf::RepeatedField< float >&
ImgBBoxAnnoDatum::x_max() const {
  // @@protoc_insertion_point(field_list:caffe.ImgBBoxAnnoDatum.x_max)
  return x_max_;
}
::google::protobuf::RepeatedField< float >*
ImgBBoxAnnoDatum::mutable_x_max() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ImgBBoxAnnoDatum.x_max)
  return &x_max_;
}

// repeated float y_max = 6;
int ImgBBoxAnnoDatum::y_max_size() const {
  return y_max_.size();
}
void ImgBBoxAnnoDatum::clear_y_max() {
  y_max_.Clear();
}
float ImgBBoxAnnoDatum::y_max(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ImgBBoxAnnoDatum.y_max)
  return y_max_.Get(index);
}
void ImgBBoxAnnoDatum::set_y_max(int index, float value) {
  y_max_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ImgBBoxAnnoDatum.y_max)
}
void ImgBBoxAnnoDatum::add_y_max(float value) {
  y_max_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ImgBBoxAnnoDatum.y_max)
}
const ::google::protobuf::RepeatedField< float >&
ImgBBoxAnnoDatum::y_max() const {
  // @@protoc_insertion_point(field_list:caffe.ImgBBoxAnnoDatum.y_max)
  return y_max_;
}
::google::protobuf::RepeatedField< float >*
ImgBBoxAnnoDatum::mutable_y_max() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ImgBBoxAnnoDatum.y_max)
  return &y_max_;
}

inline const ImgBBoxAnnoDatum* ImgBBoxAnnoDatum::internal_default_instance() {
  return &ImgBBoxAnnoDatum_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImgBBoxAnnoParameter::kImgHeightFieldNumber;
const int ImgBBoxAnnoParameter::kImgWidthFieldNumber;
const int ImgBBoxAnnoParameter::kMaxBboxPerImgFieldNumber;
const int ImgBBoxAnnoParameter::kColoredFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImgBBoxAnnoParameter::ImgBBoxAnnoParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ImgBBoxAnnoParameter)
}

void ImgBBoxAnnoParameter::InitAsDefaultInstance() {
}

ImgBBoxAnnoParameter::ImgBBoxAnnoParameter(const ImgBBoxAnnoParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ImgBBoxAnnoParameter)
}

void ImgBBoxAnnoParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&img_height_, 0, reinterpret_cast<char*>(&max_bbox_per_img_) -
    reinterpret_cast<char*>(&img_height_) + sizeof(max_bbox_per_img_));
  colored_ = true;
}

ImgBBoxAnnoParameter::~ImgBBoxAnnoParameter() {
  // @@protoc_insertion_point(destructor:caffe.ImgBBoxAnnoParameter)
  SharedDtor();
}

void ImgBBoxAnnoParameter::SharedDtor() {
}

void ImgBBoxAnnoParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImgBBoxAnnoParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImgBBoxAnnoParameter_descriptor_;
}

const ImgBBoxAnnoParameter& ImgBBoxAnnoParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ImgBBoxAnnoParameter> ImgBBoxAnnoParameter_default_instance_;

ImgBBoxAnnoParameter* ImgBBoxAnnoParameter::New(::google::protobuf::Arena* arena) const {
  ImgBBoxAnnoParameter* n = new ImgBBoxAnnoParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImgBBoxAnnoParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ImgBBoxAnnoParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ImgBBoxAnnoParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ImgBBoxAnnoParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(img_height_, max_bbox_per_img_);
    colored_ = true;
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ImgBBoxAnnoParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ImgBBoxAnnoParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 img_height = 1;
      case 1: {
        if (tag == 8) {
          set_has_img_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &img_height_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_img_width;
        break;
      }

      // required int32 img_width = 2;
      case 2: {
        if (tag == 16) {
         parse_img_width:
          set_has_img_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &img_width_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_max_bbox_per_img;
        break;
      }

      // required int32 max_bbox_per_img = 3;
      case 3: {
        if (tag == 24) {
         parse_max_bbox_per_img:
          set_has_max_bbox_per_img();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_bbox_per_img_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_colored;
        break;
      }

      // optional bool colored = 4 [default = true];
      case 4: {
        if (tag == 32) {
         parse_colored:
          set_has_colored();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &colored_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ImgBBoxAnnoParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ImgBBoxAnnoParameter)
  return false;
#undef DO_
}

void ImgBBoxAnnoParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ImgBBoxAnnoParameter)
  // required int32 img_height = 1;
  if (has_img_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->img_height(), output);
  }

  // required int32 img_width = 2;
  if (has_img_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->img_width(), output);
  }

  // required int32 max_bbox_per_img = 3;
  if (has_max_bbox_per_img()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_bbox_per_img(), output);
  }

  // optional bool colored = 4 [default = true];
  if (has_colored()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->colored(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ImgBBoxAnnoParameter)
}

::google::protobuf::uint8* ImgBBoxAnnoParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ImgBBoxAnnoParameter)
  // required int32 img_height = 1;
  if (has_img_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->img_height(), target);
  }

  // required int32 img_width = 2;
  if (has_img_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->img_width(), target);
  }

  // required int32 max_bbox_per_img = 3;
  if (has_max_bbox_per_img()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_bbox_per_img(), target);
  }

  // optional bool colored = 4 [default = true];
  if (has_colored()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->colored(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ImgBBoxAnnoParameter)
  return target;
}

size_t ImgBBoxAnnoParameter::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe.ImgBBoxAnnoParameter)
  size_t total_size = 0;

  if (has_img_height()) {
    // required int32 img_height = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->img_height());
  }

  if (has_img_width()) {
    // required int32 img_width = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->img_width());
  }

  if (has_max_bbox_per_img()) {
    // required int32 max_bbox_per_img = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_bbox_per_img());
  }

  return total_size;
}
size_t ImgBBoxAnnoParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ImgBBoxAnnoParameter)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 img_height = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->img_height());

    // required int32 img_width = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->img_width());

    // required int32 max_bbox_per_img = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_bbox_per_img());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool colored = 4 [default = true];
  if (has_colored()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImgBBoxAnnoParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ImgBBoxAnnoParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ImgBBoxAnnoParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImgBBoxAnnoParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ImgBBoxAnnoParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ImgBBoxAnnoParameter)
    UnsafeMergeFrom(*source);
  }
}

void ImgBBoxAnnoParameter::MergeFrom(const ImgBBoxAnnoParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ImgBBoxAnnoParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ImgBBoxAnnoParameter::UnsafeMergeFrom(const ImgBBoxAnnoParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_img_height()) {
      set_img_height(from.img_height());
    }
    if (from.has_img_width()) {
      set_img_width(from.img_width());
    }
    if (from.has_max_bbox_per_img()) {
      set_max_bbox_per_img(from.max_bbox_per_img());
    }
    if (from.has_colored()) {
      set_colored(from.colored());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ImgBBoxAnnoParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ImgBBoxAnnoParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImgBBoxAnnoParameter::CopyFrom(const ImgBBoxAnnoParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ImgBBoxAnnoParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ImgBBoxAnnoParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ImgBBoxAnnoParameter::Swap(ImgBBoxAnnoParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImgBBoxAnnoParameter::InternalSwap(ImgBBoxAnnoParameter* other) {
  std::swap(img_height_, other->img_height_);
  std::swap(img_width_, other->img_width_);
  std::swap(max_bbox_per_img_, other->max_bbox_per_img_);
  std::swap(colored_, other->colored_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImgBBoxAnnoParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImgBBoxAnnoParameter_descriptor_;
  metadata.reflection = ImgBBoxAnnoParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImgBBoxAnnoParameter

// required int32 img_height = 1;
bool ImgBBoxAnnoParameter::has_img_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImgBBoxAnnoParameter::set_has_img_height() {
  _has_bits_[0] |= 0x00000001u;
}
void ImgBBoxAnnoParameter::clear_has_img_height() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImgBBoxAnnoParameter::clear_img_height() {
  img_height_ = 0;
  clear_has_img_height();
}
::google::protobuf::int32 ImgBBoxAnnoParameter::img_height() const {
  // @@protoc_insertion_point(field_get:caffe.ImgBBoxAnnoParameter.img_height)
  return img_height_;
}
void ImgBBoxAnnoParameter::set_img_height(::google::protobuf::int32 value) {
  set_has_img_height();
  img_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImgBBoxAnnoParameter.img_height)
}

// required int32 img_width = 2;
bool ImgBBoxAnnoParameter::has_img_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImgBBoxAnnoParameter::set_has_img_width() {
  _has_bits_[0] |= 0x00000002u;
}
void ImgBBoxAnnoParameter::clear_has_img_width() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImgBBoxAnnoParameter::clear_img_width() {
  img_width_ = 0;
  clear_has_img_width();
}
::google::protobuf::int32 ImgBBoxAnnoParameter::img_width() const {
  // @@protoc_insertion_point(field_get:caffe.ImgBBoxAnnoParameter.img_width)
  return img_width_;
}
void ImgBBoxAnnoParameter::set_img_width(::google::protobuf::int32 value) {
  set_has_img_width();
  img_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImgBBoxAnnoParameter.img_width)
}

// required int32 max_bbox_per_img = 3;
bool ImgBBoxAnnoParameter::has_max_bbox_per_img() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ImgBBoxAnnoParameter::set_has_max_bbox_per_img() {
  _has_bits_[0] |= 0x00000004u;
}
void ImgBBoxAnnoParameter::clear_has_max_bbox_per_img() {
  _has_bits_[0] &= ~0x00000004u;
}
void ImgBBoxAnnoParameter::clear_max_bbox_per_img() {
  max_bbox_per_img_ = 0;
  clear_has_max_bbox_per_img();
}
::google::protobuf::int32 ImgBBoxAnnoParameter::max_bbox_per_img() const {
  // @@protoc_insertion_point(field_get:caffe.ImgBBoxAnnoParameter.max_bbox_per_img)
  return max_bbox_per_img_;
}
void ImgBBoxAnnoParameter::set_max_bbox_per_img(::google::protobuf::int32 value) {
  set_has_max_bbox_per_img();
  max_bbox_per_img_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImgBBoxAnnoParameter.max_bbox_per_img)
}

// optional bool colored = 4 [default = true];
bool ImgBBoxAnnoParameter::has_colored() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ImgBBoxAnnoParameter::set_has_colored() {
  _has_bits_[0] |= 0x00000008u;
}
void ImgBBoxAnnoParameter::clear_has_colored() {
  _has_bits_[0] &= ~0x00000008u;
}
void ImgBBoxAnnoParameter::clear_colored() {
  colored_ = true;
  clear_has_colored();
}
bool ImgBBoxAnnoParameter::colored() const {
  // @@protoc_insertion_point(field_get:caffe.ImgBBoxAnnoParameter.colored)
  return colored_;
}
void ImgBBoxAnnoParameter::set_colored(bool value) {
  set_has_colored();
  colored_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImgBBoxAnnoParameter.colored)
}

inline const ImgBBoxAnnoParameter* ImgBBoxAnnoParameter::internal_default_instance() {
  return &ImgBBoxAnnoParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeatmapConcatParameter::kHeatmapFileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeatmapConcatParameter::HeatmapConcatParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.HeatmapConcatParameter)
}

void HeatmapConcatParameter::InitAsDefaultInstance() {
}

HeatmapConcatParameter::HeatmapConcatParameter(const HeatmapConcatParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.HeatmapConcatParameter)
}

void HeatmapConcatParameter::SharedCtor() {
  _cached_size_ = 0;
  heatmap_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

HeatmapConcatParameter::~HeatmapConcatParameter() {
  // @@protoc_insertion_point(destructor:caffe.HeatmapConcatParameter)
  SharedDtor();
}

void HeatmapConcatParameter::SharedDtor() {
  heatmap_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HeatmapConcatParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeatmapConcatParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeatmapConcatParameter_descriptor_;
}

const HeatmapConcatParameter& HeatmapConcatParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<HeatmapConcatParameter> HeatmapConcatParameter_default_instance_;

HeatmapConcatParameter* HeatmapConcatParameter::New(::google::protobuf::Arena* arena) const {
  HeatmapConcatParameter* n = new HeatmapConcatParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeatmapConcatParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.HeatmapConcatParameter)
  if (has_heatmap_file()) {
    heatmap_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HeatmapConcatParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.HeatmapConcatParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string heatmap_file = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_heatmap_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->heatmap_file().data(), this->heatmap_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.HeatmapConcatParameter.heatmap_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.HeatmapConcatParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.HeatmapConcatParameter)
  return false;
#undef DO_
}

void HeatmapConcatParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.HeatmapConcatParameter)
  // required string heatmap_file = 1;
  if (has_heatmap_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->heatmap_file().data(), this->heatmap_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.HeatmapConcatParameter.heatmap_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->heatmap_file(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.HeatmapConcatParameter)
}

::google::protobuf::uint8* HeatmapConcatParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.HeatmapConcatParameter)
  // required string heatmap_file = 1;
  if (has_heatmap_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->heatmap_file().data(), this->heatmap_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.HeatmapConcatParameter.heatmap_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->heatmap_file(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.HeatmapConcatParameter)
  return target;
}

size_t HeatmapConcatParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.HeatmapConcatParameter)
  size_t total_size = 0;

  // required string heatmap_file = 1;
  if (has_heatmap_file()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->heatmap_file());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeatmapConcatParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.HeatmapConcatParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HeatmapConcatParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeatmapConcatParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.HeatmapConcatParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.HeatmapConcatParameter)
    UnsafeMergeFrom(*source);
  }
}

void HeatmapConcatParameter::MergeFrom(const HeatmapConcatParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.HeatmapConcatParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void HeatmapConcatParameter::UnsafeMergeFrom(const HeatmapConcatParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heatmap_file()) {
      set_has_heatmap_file();
      heatmap_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.heatmap_file_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void HeatmapConcatParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.HeatmapConcatParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeatmapConcatParameter::CopyFrom(const HeatmapConcatParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.HeatmapConcatParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool HeatmapConcatParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HeatmapConcatParameter::Swap(HeatmapConcatParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeatmapConcatParameter::InternalSwap(HeatmapConcatParameter* other) {
  heatmap_file_.Swap(&other->heatmap_file_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeatmapConcatParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeatmapConcatParameter_descriptor_;
  metadata.reflection = HeatmapConcatParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeatmapConcatParameter

// required string heatmap_file = 1;
bool HeatmapConcatParameter::has_heatmap_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HeatmapConcatParameter::set_has_heatmap_file() {
  _has_bits_[0] |= 0x00000001u;
}
void HeatmapConcatParameter::clear_has_heatmap_file() {
  _has_bits_[0] &= ~0x00000001u;
}
void HeatmapConcatParameter::clear_heatmap_file() {
  heatmap_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_heatmap_file();
}
const ::std::string& HeatmapConcatParameter::heatmap_file() const {
  // @@protoc_insertion_point(field_get:caffe.HeatmapConcatParameter.heatmap_file)
  return heatmap_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HeatmapConcatParameter::set_heatmap_file(const ::std::string& value) {
  set_has_heatmap_file();
  heatmap_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.HeatmapConcatParameter.heatmap_file)
}
void HeatmapConcatParameter::set_heatmap_file(const char* value) {
  set_has_heatmap_file();
  heatmap_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.HeatmapConcatParameter.heatmap_file)
}
void HeatmapConcatParameter::set_heatmap_file(const char* value, size_t size) {
  set_has_heatmap_file();
  heatmap_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.HeatmapConcatParameter.heatmap_file)
}
::std::string* HeatmapConcatParameter::mutable_heatmap_file() {
  set_has_heatmap_file();
  // @@protoc_insertion_point(field_mutable:caffe.HeatmapConcatParameter.heatmap_file)
  return heatmap_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HeatmapConcatParameter::release_heatmap_file() {
  // @@protoc_insertion_point(field_release:caffe.HeatmapConcatParameter.heatmap_file)
  clear_has_heatmap_file();
  return heatmap_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HeatmapConcatParameter::set_allocated_heatmap_file(::std::string* heatmap_file) {
  if (heatmap_file != NULL) {
    set_has_heatmap_file();
  } else {
    clear_has_heatmap_file();
  }
  heatmap_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), heatmap_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.HeatmapConcatParameter.heatmap_file)
}

inline const HeatmapConcatParameter* HeatmapConcatParameter::internal_default_instance() {
  return &HeatmapConcatParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BBoxAnnoMapParameter::kImgHeightFieldNumber;
const int BBoxAnnoMapParameter::kImgWidthFieldNumber;
const int BBoxAnnoMapParameter::kReceptiveFieldHeightFieldNumber;
const int BBoxAnnoMapParameter::kReceptiveFieldWidthFieldNumber;
const int BBoxAnnoMapParameter::kVerticalStrideFieldNumber;
const int BBoxAnnoMapParameter::kHorizontalStrideFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BBoxAnnoMapParameter::BBoxAnnoMapParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.BBoxAnnoMapParameter)
}

void BBoxAnnoMapParameter::InitAsDefaultInstance() {
}

BBoxAnnoMapParameter::BBoxAnnoMapParameter(const BBoxAnnoMapParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.BBoxAnnoMapParameter)
}

void BBoxAnnoMapParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&img_height_, 0, reinterpret_cast<char*>(&horizontal_stride_) -
    reinterpret_cast<char*>(&img_height_) + sizeof(horizontal_stride_));
}

BBoxAnnoMapParameter::~BBoxAnnoMapParameter() {
  // @@protoc_insertion_point(destructor:caffe.BBoxAnnoMapParameter)
  SharedDtor();
}

void BBoxAnnoMapParameter::SharedDtor() {
}

void BBoxAnnoMapParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BBoxAnnoMapParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BBoxAnnoMapParameter_descriptor_;
}

const BBoxAnnoMapParameter& BBoxAnnoMapParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BBoxAnnoMapParameter> BBoxAnnoMapParameter_default_instance_;

BBoxAnnoMapParameter* BBoxAnnoMapParameter::New(::google::protobuf::Arena* arena) const {
  BBoxAnnoMapParameter* n = new BBoxAnnoMapParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BBoxAnnoMapParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.BBoxAnnoMapParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BBoxAnnoMapParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BBoxAnnoMapParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(img_height_, horizontal_stride_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BBoxAnnoMapParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.BBoxAnnoMapParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 img_height = 1;
      case 1: {
        if (tag == 8) {
          set_has_img_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &img_height_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_img_width;
        break;
      }

      // required int32 img_width = 2;
      case 2: {
        if (tag == 16) {
         parse_img_width:
          set_has_img_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &img_width_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_receptive_field_height;
        break;
      }

      // required int32 receptive_field_height = 3;
      case 3: {
        if (tag == 24) {
         parse_receptive_field_height:
          set_has_receptive_field_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &receptive_field_height_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_receptive_field_width;
        break;
      }

      // required int32 receptive_field_width = 4;
      case 4: {
        if (tag == 32) {
         parse_receptive_field_width:
          set_has_receptive_field_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &receptive_field_width_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_vertical_stride;
        break;
      }

      // required int32 vertical_stride = 5;
      case 5: {
        if (tag == 40) {
         parse_vertical_stride:
          set_has_vertical_stride();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vertical_stride_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_horizontal_stride;
        break;
      }

      // required int32 horizontal_stride = 6;
      case 6: {
        if (tag == 48) {
         parse_horizontal_stride:
          set_has_horizontal_stride();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &horizontal_stride_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.BBoxAnnoMapParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.BBoxAnnoMapParameter)
  return false;
#undef DO_
}

void BBoxAnnoMapParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.BBoxAnnoMapParameter)
  // required int32 img_height = 1;
  if (has_img_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->img_height(), output);
  }

  // required int32 img_width = 2;
  if (has_img_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->img_width(), output);
  }

  // required int32 receptive_field_height = 3;
  if (has_receptive_field_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->receptive_field_height(), output);
  }

  // required int32 receptive_field_width = 4;
  if (has_receptive_field_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->receptive_field_width(), output);
  }

  // required int32 vertical_stride = 5;
  if (has_vertical_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->vertical_stride(), output);
  }

  // required int32 horizontal_stride = 6;
  if (has_horizontal_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->horizontal_stride(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.BBoxAnnoMapParameter)
}

::google::protobuf::uint8* BBoxAnnoMapParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.BBoxAnnoMapParameter)
  // required int32 img_height = 1;
  if (has_img_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->img_height(), target);
  }

  // required int32 img_width = 2;
  if (has_img_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->img_width(), target);
  }

  // required int32 receptive_field_height = 3;
  if (has_receptive_field_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->receptive_field_height(), target);
  }

  // required int32 receptive_field_width = 4;
  if (has_receptive_field_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->receptive_field_width(), target);
  }

  // required int32 vertical_stride = 5;
  if (has_vertical_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->vertical_stride(), target);
  }

  // required int32 horizontal_stride = 6;
  if (has_horizontal_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->horizontal_stride(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.BBoxAnnoMapParameter)
  return target;
}

size_t BBoxAnnoMapParameter::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe.BBoxAnnoMapParameter)
  size_t total_size = 0;

  if (has_img_height()) {
    // required int32 img_height = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->img_height());
  }

  if (has_img_width()) {
    // required int32 img_width = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->img_width());
  }

  if (has_receptive_field_height()) {
    // required int32 receptive_field_height = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->receptive_field_height());
  }

  if (has_receptive_field_width()) {
    // required int32 receptive_field_width = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->receptive_field_width());
  }

  if (has_vertical_stride()) {
    // required int32 vertical_stride = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vertical_stride());
  }

  if (has_horizontal_stride()) {
    // required int32 horizontal_stride = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->horizontal_stride());
  }

  return total_size;
}
size_t BBoxAnnoMapParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.BBoxAnnoMapParameter)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required int32 img_height = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->img_height());

    // required int32 img_width = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->img_width());

    // required int32 receptive_field_height = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->receptive_field_height());

    // required int32 receptive_field_width = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->receptive_field_width());

    // required int32 vertical_stride = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vertical_stride());

    // required int32 horizontal_stride = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->horizontal_stride());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BBoxAnnoMapParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.BBoxAnnoMapParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BBoxAnnoMapParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BBoxAnnoMapParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.BBoxAnnoMapParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.BBoxAnnoMapParameter)
    UnsafeMergeFrom(*source);
  }
}

void BBoxAnnoMapParameter::MergeFrom(const BBoxAnnoMapParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.BBoxAnnoMapParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BBoxAnnoMapParameter::UnsafeMergeFrom(const BBoxAnnoMapParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_img_height()) {
      set_img_height(from.img_height());
    }
    if (from.has_img_width()) {
      set_img_width(from.img_width());
    }
    if (from.has_receptive_field_height()) {
      set_receptive_field_height(from.receptive_field_height());
    }
    if (from.has_receptive_field_width()) {
      set_receptive_field_width(from.receptive_field_width());
    }
    if (from.has_vertical_stride()) {
      set_vertical_stride(from.vertical_stride());
    }
    if (from.has_horizontal_stride()) {
      set_horizontal_stride(from.horizontal_stride());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void BBoxAnnoMapParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.BBoxAnnoMapParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BBoxAnnoMapParameter::CopyFrom(const BBoxAnnoMapParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.BBoxAnnoMapParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BBoxAnnoMapParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void BBoxAnnoMapParameter::Swap(BBoxAnnoMapParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BBoxAnnoMapParameter::InternalSwap(BBoxAnnoMapParameter* other) {
  std::swap(img_height_, other->img_height_);
  std::swap(img_width_, other->img_width_);
  std::swap(receptive_field_height_, other->receptive_field_height_);
  std::swap(receptive_field_width_, other->receptive_field_width_);
  std::swap(vertical_stride_, other->vertical_stride_);
  std::swap(horizontal_stride_, other->horizontal_stride_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BBoxAnnoMapParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BBoxAnnoMapParameter_descriptor_;
  metadata.reflection = BBoxAnnoMapParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BBoxAnnoMapParameter

// required int32 img_height = 1;
bool BBoxAnnoMapParameter::has_img_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BBoxAnnoMapParameter::set_has_img_height() {
  _has_bits_[0] |= 0x00000001u;
}
void BBoxAnnoMapParameter::clear_has_img_height() {
  _has_bits_[0] &= ~0x00000001u;
}
void BBoxAnnoMapParameter::clear_img_height() {
  img_height_ = 0;
  clear_has_img_height();
}
::google::protobuf::int32 BBoxAnnoMapParameter::img_height() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxAnnoMapParameter.img_height)
  return img_height_;
}
void BBoxAnnoMapParameter::set_img_height(::google::protobuf::int32 value) {
  set_has_img_height();
  img_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxAnnoMapParameter.img_height)
}

// required int32 img_width = 2;
bool BBoxAnnoMapParameter::has_img_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BBoxAnnoMapParameter::set_has_img_width() {
  _has_bits_[0] |= 0x00000002u;
}
void BBoxAnnoMapParameter::clear_has_img_width() {
  _has_bits_[0] &= ~0x00000002u;
}
void BBoxAnnoMapParameter::clear_img_width() {
  img_width_ = 0;
  clear_has_img_width();
}
::google::protobuf::int32 BBoxAnnoMapParameter::img_width() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxAnnoMapParameter.img_width)
  return img_width_;
}
void BBoxAnnoMapParameter::set_img_width(::google::protobuf::int32 value) {
  set_has_img_width();
  img_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxAnnoMapParameter.img_width)
}

// required int32 receptive_field_height = 3;
bool BBoxAnnoMapParameter::has_receptive_field_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BBoxAnnoMapParameter::set_has_receptive_field_height() {
  _has_bits_[0] |= 0x00000004u;
}
void BBoxAnnoMapParameter::clear_has_receptive_field_height() {
  _has_bits_[0] &= ~0x00000004u;
}
void BBoxAnnoMapParameter::clear_receptive_field_height() {
  receptive_field_height_ = 0;
  clear_has_receptive_field_height();
}
::google::protobuf::int32 BBoxAnnoMapParameter::receptive_field_height() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxAnnoMapParameter.receptive_field_height)
  return receptive_field_height_;
}
void BBoxAnnoMapParameter::set_receptive_field_height(::google::protobuf::int32 value) {
  set_has_receptive_field_height();
  receptive_field_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxAnnoMapParameter.receptive_field_height)
}

// required int32 receptive_field_width = 4;
bool BBoxAnnoMapParameter::has_receptive_field_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BBoxAnnoMapParameter::set_has_receptive_field_width() {
  _has_bits_[0] |= 0x00000008u;
}
void BBoxAnnoMapParameter::clear_has_receptive_field_width() {
  _has_bits_[0] &= ~0x00000008u;
}
void BBoxAnnoMapParameter::clear_receptive_field_width() {
  receptive_field_width_ = 0;
  clear_has_receptive_field_width();
}
::google::protobuf::int32 BBoxAnnoMapParameter::receptive_field_width() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxAnnoMapParameter.receptive_field_width)
  return receptive_field_width_;
}
void BBoxAnnoMapParameter::set_receptive_field_width(::google::protobuf::int32 value) {
  set_has_receptive_field_width();
  receptive_field_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxAnnoMapParameter.receptive_field_width)
}

// required int32 vertical_stride = 5;
bool BBoxAnnoMapParameter::has_vertical_stride() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BBoxAnnoMapParameter::set_has_vertical_stride() {
  _has_bits_[0] |= 0x00000010u;
}
void BBoxAnnoMapParameter::clear_has_vertical_stride() {
  _has_bits_[0] &= ~0x00000010u;
}
void BBoxAnnoMapParameter::clear_vertical_stride() {
  vertical_stride_ = 0;
  clear_has_vertical_stride();
}
::google::protobuf::int32 BBoxAnnoMapParameter::vertical_stride() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxAnnoMapParameter.vertical_stride)
  return vertical_stride_;
}
void BBoxAnnoMapParameter::set_vertical_stride(::google::protobuf::int32 value) {
  set_has_vertical_stride();
  vertical_stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxAnnoMapParameter.vertical_stride)
}

// required int32 horizontal_stride = 6;
bool BBoxAnnoMapParameter::has_horizontal_stride() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BBoxAnnoMapParameter::set_has_horizontal_stride() {
  _has_bits_[0] |= 0x00000020u;
}
void BBoxAnnoMapParameter::clear_has_horizontal_stride() {
  _has_bits_[0] &= ~0x00000020u;
}
void BBoxAnnoMapParameter::clear_horizontal_stride() {
  horizontal_stride_ = 0;
  clear_has_horizontal_stride();
}
::google::protobuf::int32 BBoxAnnoMapParameter::horizontal_stride() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxAnnoMapParameter.horizontal_stride)
  return horizontal_stride_;
}
void BBoxAnnoMapParameter::set_horizontal_stride(::google::protobuf::int32 value) {
  set_has_horizontal_stride();
  horizontal_stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxAnnoMapParameter.horizontal_stride)
}

inline const BBoxAnnoMapParameter* BBoxAnnoMapParameter::internal_default_instance() {
  return &BBoxAnnoMapParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* LabelParameter_LabelParamConstant_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LabelParameter_LabelParamConstant_descriptor_;
}
bool LabelParameter_LabelParamConstant_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LabelParameter_LabelParamConstant LabelParameter::DUMMY_LABEL;
const LabelParameter_LabelParamConstant LabelParameter::NONE;
const LabelParameter_LabelParamConstant LabelParameter::LabelParamConstant_MIN;
const LabelParameter_LabelParamConstant LabelParameter::LabelParamConstant_MAX;
const int LabelParameter::LabelParamConstant_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LabelParameter::kNumLabelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LabelParameter::LabelParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.LabelParameter)
}

void LabelParameter::InitAsDefaultInstance() {
}

LabelParameter::LabelParameter(const LabelParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.LabelParameter)
}

void LabelParameter::SharedCtor() {
  _cached_size_ = 0;
  num_label_ = 0;
}

LabelParameter::~LabelParameter() {
  // @@protoc_insertion_point(destructor:caffe.LabelParameter)
  SharedDtor();
}

void LabelParameter::SharedDtor() {
}

void LabelParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LabelParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LabelParameter_descriptor_;
}

const LabelParameter& LabelParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<LabelParameter> LabelParameter_default_instance_;

LabelParameter* LabelParameter::New(::google::protobuf::Arena* arena) const {
  LabelParameter* n = new LabelParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LabelParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.LabelParameter)
  num_label_ = 0;
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LabelParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.LabelParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 num_label = 2;
      case 2: {
        if (tag == 16) {
          set_has_num_label();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_label_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.LabelParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.LabelParameter)
  return false;
#undef DO_
}

void LabelParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.LabelParameter)
  // required int32 num_label = 2;
  if (has_num_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_label(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.LabelParameter)
}

::google::protobuf::uint8* LabelParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.LabelParameter)
  // required int32 num_label = 2;
  if (has_num_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_label(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.LabelParameter)
  return target;
}

size_t LabelParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.LabelParameter)
  size_t total_size = 0;

  // required int32 num_label = 2;
  if (has_num_label()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_label());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LabelParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.LabelParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LabelParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LabelParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.LabelParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.LabelParameter)
    UnsafeMergeFrom(*source);
  }
}

void LabelParameter::MergeFrom(const LabelParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.LabelParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void LabelParameter::UnsafeMergeFrom(const LabelParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_label()) {
      set_num_label(from.num_label());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void LabelParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.LabelParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelParameter::CopyFrom(const LabelParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.LabelParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool LabelParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LabelParameter::Swap(LabelParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LabelParameter::InternalSwap(LabelParameter* other) {
  std::swap(num_label_, other->num_label_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LabelParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LabelParameter_descriptor_;
  metadata.reflection = LabelParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LabelParameter

// required int32 num_label = 2;
bool LabelParameter::has_num_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LabelParameter::set_has_num_label() {
  _has_bits_[0] |= 0x00000001u;
}
void LabelParameter::clear_has_num_label() {
  _has_bits_[0] &= ~0x00000001u;
}
void LabelParameter::clear_num_label() {
  num_label_ = 0;
  clear_has_num_label();
}
::google::protobuf::int32 LabelParameter::num_label() const {
  // @@protoc_insertion_point(field_get:caffe.LabelParameter.num_label)
  return num_label_;
}
void LabelParameter::set_num_label(::google::protobuf::int32 value) {
  set_has_num_label();
  num_label_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelParameter.num_label)
}

inline const LabelParameter* LabelParameter::internal_default_instance() {
  return &LabelParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PatchDatum::kPatchImgFieldNumber;
const int PatchDatum::kLabelFieldNumber;
const int PatchDatum::kBboxXminFieldNumber;
const int PatchDatum::kBboxYminFieldNumber;
const int PatchDatum::kBboxXmaxFieldNumber;
const int PatchDatum::kBboxYmaxFieldNumber;
const int PatchDatum::kWholeImgHeightFieldNumber;
const int PatchDatum::kWholeImgWidthFieldNumber;
const int PatchDatum::kPatchOffsetXminFieldNumber;
const int PatchDatum::kPatchOffsetYminFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PatchDatum::PatchDatum()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.PatchDatum)
}

void PatchDatum::InitAsDefaultInstance() {
  patch_img_ = const_cast< ::caffe::Datum*>(
      ::caffe::Datum::internal_default_instance());
}

PatchDatum::PatchDatum(const PatchDatum& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.PatchDatum)
}

void PatchDatum::SharedCtor() {
  _cached_size_ = 0;
  patch_img_ = NULL;
  ::memset(&bbox_xmin_, 0, reinterpret_cast<char*>(&patch_offset_ymin_) -
    reinterpret_cast<char*>(&bbox_xmin_) + sizeof(patch_offset_ymin_));
  label_ = -1;
}

PatchDatum::~PatchDatum() {
  // @@protoc_insertion_point(destructor:caffe.PatchDatum)
  SharedDtor();
}

void PatchDatum::SharedDtor() {
  if (this != &PatchDatum_default_instance_.get()) {
    delete patch_img_;
  }
}

void PatchDatum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PatchDatum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PatchDatum_descriptor_;
}

const PatchDatum& PatchDatum::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PatchDatum> PatchDatum_default_instance_;

PatchDatum* PatchDatum::New(::google::protobuf::Arena* arena) const {
  PatchDatum* n = new PatchDatum;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PatchDatum::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.PatchDatum)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PatchDatum, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PatchDatum*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(bbox_xmin_, whole_img_width_);
    if (has_patch_img()) {
      if (patch_img_ != NULL) patch_img_->::caffe::Datum::Clear();
    }
    label_ = -1;
  }
  ZR_(patch_offset_xmin_, patch_offset_ymin_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PatchDatum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.PatchDatum)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .caffe.Datum patch_img = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_patch_img()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_label;
        break;
      }

      // optional int32 label = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_label:
          set_has_label();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &label_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_bbox_xmin;
        break;
      }

      // optional float bbox_xmin = 3;
      case 3: {
        if (tag == 29) {
         parse_bbox_xmin:
          set_has_bbox_xmin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bbox_xmin_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_bbox_ymin;
        break;
      }

      // optional float bbox_ymin = 4;
      case 4: {
        if (tag == 37) {
         parse_bbox_ymin:
          set_has_bbox_ymin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bbox_ymin_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_bbox_xmax;
        break;
      }

      // optional float bbox_xmax = 5;
      case 5: {
        if (tag == 45) {
         parse_bbox_xmax:
          set_has_bbox_xmax();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bbox_xmax_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_bbox_ymax;
        break;
      }

      // optional float bbox_ymax = 6;
      case 6: {
        if (tag == 53) {
         parse_bbox_ymax:
          set_has_bbox_ymax();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bbox_ymax_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_whole_img_height;
        break;
      }

      // optional float whole_img_height = 7;
      case 7: {
        if (tag == 61) {
         parse_whole_img_height:
          set_has_whole_img_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &whole_img_height_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_whole_img_width;
        break;
      }

      // optional float whole_img_width = 8;
      case 8: {
        if (tag == 69) {
         parse_whole_img_width:
          set_has_whole_img_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &whole_img_width_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_patch_offset_xmin;
        break;
      }

      // optional float patch_offset_xmin = 9;
      case 9: {
        if (tag == 77) {
         parse_patch_offset_xmin:
          set_has_patch_offset_xmin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &patch_offset_xmin_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_patch_offset_ymin;
        break;
      }

      // optional float patch_offset_ymin = 10;
      case 10: {
        if (tag == 85) {
         parse_patch_offset_ymin:
          set_has_patch_offset_ymin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &patch_offset_ymin_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.PatchDatum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.PatchDatum)
  return false;
#undef DO_
}

void PatchDatum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.PatchDatum)
  // required .caffe.Datum patch_img = 1;
  if (has_patch_img()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->patch_img_, output);
  }

  // optional int32 label = 2 [default = -1];
  if (has_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->label(), output);
  }

  // optional float bbox_xmin = 3;
  if (has_bbox_xmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->bbox_xmin(), output);
  }

  // optional float bbox_ymin = 4;
  if (has_bbox_ymin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->bbox_ymin(), output);
  }

  // optional float bbox_xmax = 5;
  if (has_bbox_xmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->bbox_xmax(), output);
  }

  // optional float bbox_ymax = 6;
  if (has_bbox_ymax()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->bbox_ymax(), output);
  }

  // optional float whole_img_height = 7;
  if (has_whole_img_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->whole_img_height(), output);
  }

  // optional float whole_img_width = 8;
  if (has_whole_img_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->whole_img_width(), output);
  }

  // optional float patch_offset_xmin = 9;
  if (has_patch_offset_xmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->patch_offset_xmin(), output);
  }

  // optional float patch_offset_ymin = 10;
  if (has_patch_offset_ymin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->patch_offset_ymin(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.PatchDatum)
}

::google::protobuf::uint8* PatchDatum::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.PatchDatum)
  // required .caffe.Datum patch_img = 1;
  if (has_patch_img()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->patch_img_, false, target);
  }

  // optional int32 label = 2 [default = -1];
  if (has_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->label(), target);
  }

  // optional float bbox_xmin = 3;
  if (has_bbox_xmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->bbox_xmin(), target);
  }

  // optional float bbox_ymin = 4;
  if (has_bbox_ymin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->bbox_ymin(), target);
  }

  // optional float bbox_xmax = 5;
  if (has_bbox_xmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->bbox_xmax(), target);
  }

  // optional float bbox_ymax = 6;
  if (has_bbox_ymax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->bbox_ymax(), target);
  }

  // optional float whole_img_height = 7;
  if (has_whole_img_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->whole_img_height(), target);
  }

  // optional float whole_img_width = 8;
  if (has_whole_img_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->whole_img_width(), target);
  }

  // optional float patch_offset_xmin = 9;
  if (has_patch_offset_xmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->patch_offset_xmin(), target);
  }

  // optional float patch_offset_ymin = 10;
  if (has_patch_offset_ymin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->patch_offset_ymin(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.PatchDatum)
  return target;
}

size_t PatchDatum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.PatchDatum)
  size_t total_size = 0;

  // required .caffe.Datum patch_img = 1;
  if (has_patch_img()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->patch_img_);
  }
  if (_has_bits_[1 / 32] & 254u) {
    // optional int32 label = 2 [default = -1];
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->label());
    }

    // optional float bbox_xmin = 3;
    if (has_bbox_xmin()) {
      total_size += 1 + 4;
    }

    // optional float bbox_ymin = 4;
    if (has_bbox_ymin()) {
      total_size += 1 + 4;
    }

    // optional float bbox_xmax = 5;
    if (has_bbox_xmax()) {
      total_size += 1 + 4;
    }

    // optional float bbox_ymax = 6;
    if (has_bbox_ymax()) {
      total_size += 1 + 4;
    }

    // optional float whole_img_height = 7;
    if (has_whole_img_height()) {
      total_size += 1 + 4;
    }

    // optional float whole_img_width = 8;
    if (has_whole_img_width()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional float patch_offset_xmin = 9;
    if (has_patch_offset_xmin()) {
      total_size += 1 + 4;
    }

    // optional float patch_offset_ymin = 10;
    if (has_patch_offset_ymin()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PatchDatum::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.PatchDatum)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PatchDatum* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PatchDatum>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.PatchDatum)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.PatchDatum)
    UnsafeMergeFrom(*source);
  }
}

void PatchDatum::MergeFrom(const PatchDatum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.PatchDatum)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PatchDatum::UnsafeMergeFrom(const PatchDatum& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_patch_img()) {
      mutable_patch_img()->::caffe::Datum::MergeFrom(from.patch_img());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
    if (from.has_bbox_xmin()) {
      set_bbox_xmin(from.bbox_xmin());
    }
    if (from.has_bbox_ymin()) {
      set_bbox_ymin(from.bbox_ymin());
    }
    if (from.has_bbox_xmax()) {
      set_bbox_xmax(from.bbox_xmax());
    }
    if (from.has_bbox_ymax()) {
      set_bbox_ymax(from.bbox_ymax());
    }
    if (from.has_whole_img_height()) {
      set_whole_img_height(from.whole_img_height());
    }
    if (from.has_whole_img_width()) {
      set_whole_img_width(from.whole_img_width());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_patch_offset_xmin()) {
      set_patch_offset_xmin(from.patch_offset_xmin());
    }
    if (from.has_patch_offset_ymin()) {
      set_patch_offset_ymin(from.patch_offset_ymin());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void PatchDatum::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.PatchDatum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatchDatum::CopyFrom(const PatchDatum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.PatchDatum)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PatchDatum::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PatchDatum::Swap(PatchDatum* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PatchDatum::InternalSwap(PatchDatum* other) {
  std::swap(patch_img_, other->patch_img_);
  std::swap(label_, other->label_);
  std::swap(bbox_xmin_, other->bbox_xmin_);
  std::swap(bbox_ymin_, other->bbox_ymin_);
  std::swap(bbox_xmax_, other->bbox_xmax_);
  std::swap(bbox_ymax_, other->bbox_ymax_);
  std::swap(whole_img_height_, other->whole_img_height_);
  std::swap(whole_img_width_, other->whole_img_width_);
  std::swap(patch_offset_xmin_, other->patch_offset_xmin_);
  std::swap(patch_offset_ymin_, other->patch_offset_ymin_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PatchDatum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PatchDatum_descriptor_;
  metadata.reflection = PatchDatum_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PatchDatum

// required .caffe.Datum patch_img = 1;
bool PatchDatum::has_patch_img() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PatchDatum::set_has_patch_img() {
  _has_bits_[0] |= 0x00000001u;
}
void PatchDatum::clear_has_patch_img() {
  _has_bits_[0] &= ~0x00000001u;
}
void PatchDatum::clear_patch_img() {
  if (patch_img_ != NULL) patch_img_->::caffe::Datum::Clear();
  clear_has_patch_img();
}
const ::caffe::Datum& PatchDatum::patch_img() const {
  // @@protoc_insertion_point(field_get:caffe.PatchDatum.patch_img)
  return patch_img_ != NULL ? *patch_img_
                         : *::caffe::Datum::internal_default_instance();
}
::caffe::Datum* PatchDatum::mutable_patch_img() {
  set_has_patch_img();
  if (patch_img_ == NULL) {
    patch_img_ = new ::caffe::Datum;
  }
  // @@protoc_insertion_point(field_mutable:caffe.PatchDatum.patch_img)
  return patch_img_;
}
::caffe::Datum* PatchDatum::release_patch_img() {
  // @@protoc_insertion_point(field_release:caffe.PatchDatum.patch_img)
  clear_has_patch_img();
  ::caffe::Datum* temp = patch_img_;
  patch_img_ = NULL;
  return temp;
}
void PatchDatum::set_allocated_patch_img(::caffe::Datum* patch_img) {
  delete patch_img_;
  patch_img_ = patch_img;
  if (patch_img) {
    set_has_patch_img();
  } else {
    clear_has_patch_img();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.PatchDatum.patch_img)
}

// optional int32 label = 2 [default = -1];
bool PatchDatum::has_label() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PatchDatum::set_has_label() {
  _has_bits_[0] |= 0x00000002u;
}
void PatchDatum::clear_has_label() {
  _has_bits_[0] &= ~0x00000002u;
}
void PatchDatum::clear_label() {
  label_ = -1;
  clear_has_label();
}
::google::protobuf::int32 PatchDatum::label() const {
  // @@protoc_insertion_point(field_get:caffe.PatchDatum.label)
  return label_;
}
void PatchDatum::set_label(::google::protobuf::int32 value) {
  set_has_label();
  label_ = value;
  // @@protoc_insertion_point(field_set:caffe.PatchDatum.label)
}

// optional float bbox_xmin = 3;
bool PatchDatum::has_bbox_xmin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PatchDatum::set_has_bbox_xmin() {
  _has_bits_[0] |= 0x00000004u;
}
void PatchDatum::clear_has_bbox_xmin() {
  _has_bits_[0] &= ~0x00000004u;
}
void PatchDatum::clear_bbox_xmin() {
  bbox_xmin_ = 0;
  clear_has_bbox_xmin();
}
float PatchDatum::bbox_xmin() const {
  // @@protoc_insertion_point(field_get:caffe.PatchDatum.bbox_xmin)
  return bbox_xmin_;
}
void PatchDatum::set_bbox_xmin(float value) {
  set_has_bbox_xmin();
  bbox_xmin_ = value;
  // @@protoc_insertion_point(field_set:caffe.PatchDatum.bbox_xmin)
}

// optional float bbox_ymin = 4;
bool PatchDatum::has_bbox_ymin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PatchDatum::set_has_bbox_ymin() {
  _has_bits_[0] |= 0x00000008u;
}
void PatchDatum::clear_has_bbox_ymin() {
  _has_bits_[0] &= ~0x00000008u;
}
void PatchDatum::clear_bbox_ymin() {
  bbox_ymin_ = 0;
  clear_has_bbox_ymin();
}
float PatchDatum::bbox_ymin() const {
  // @@protoc_insertion_point(field_get:caffe.PatchDatum.bbox_ymin)
  return bbox_ymin_;
}
void PatchDatum::set_bbox_ymin(float value) {
  set_has_bbox_ymin();
  bbox_ymin_ = value;
  // @@protoc_insertion_point(field_set:caffe.PatchDatum.bbox_ymin)
}

// optional float bbox_xmax = 5;
bool PatchDatum::has_bbox_xmax() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PatchDatum::set_has_bbox_xmax() {
  _has_bits_[0] |= 0x00000010u;
}
void PatchDatum::clear_has_bbox_xmax() {
  _has_bits_[0] &= ~0x00000010u;
}
void PatchDatum::clear_bbox_xmax() {
  bbox_xmax_ = 0;
  clear_has_bbox_xmax();
}
float PatchDatum::bbox_xmax() const {
  // @@protoc_insertion_point(field_get:caffe.PatchDatum.bbox_xmax)
  return bbox_xmax_;
}
void PatchDatum::set_bbox_xmax(float value) {
  set_has_bbox_xmax();
  bbox_xmax_ = value;
  // @@protoc_insertion_point(field_set:caffe.PatchDatum.bbox_xmax)
}

// optional float bbox_ymax = 6;
bool PatchDatum::has_bbox_ymax() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PatchDatum::set_has_bbox_ymax() {
  _has_bits_[0] |= 0x00000020u;
}
void PatchDatum::clear_has_bbox_ymax() {
  _has_bits_[0] &= ~0x00000020u;
}
void PatchDatum::clear_bbox_ymax() {
  bbox_ymax_ = 0;
  clear_has_bbox_ymax();
}
float PatchDatum::bbox_ymax() const {
  // @@protoc_insertion_point(field_get:caffe.PatchDatum.bbox_ymax)
  return bbox_ymax_;
}
void PatchDatum::set_bbox_ymax(float value) {
  set_has_bbox_ymax();
  bbox_ymax_ = value;
  // @@protoc_insertion_point(field_set:caffe.PatchDatum.bbox_ymax)
}

// optional float whole_img_height = 7;
bool PatchDatum::has_whole_img_height() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PatchDatum::set_has_whole_img_height() {
  _has_bits_[0] |= 0x00000040u;
}
void PatchDatum::clear_has_whole_img_height() {
  _has_bits_[0] &= ~0x00000040u;
}
void PatchDatum::clear_whole_img_height() {
  whole_img_height_ = 0;
  clear_has_whole_img_height();
}
float PatchDatum::whole_img_height() const {
  // @@protoc_insertion_point(field_get:caffe.PatchDatum.whole_img_height)
  return whole_img_height_;
}
void PatchDatum::set_whole_img_height(float value) {
  set_has_whole_img_height();
  whole_img_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.PatchDatum.whole_img_height)
}

// optional float whole_img_width = 8;
bool PatchDatum::has_whole_img_width() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PatchDatum::set_has_whole_img_width() {
  _has_bits_[0] |= 0x00000080u;
}
void PatchDatum::clear_has_whole_img_width() {
  _has_bits_[0] &= ~0x00000080u;
}
void PatchDatum::clear_whole_img_width() {
  whole_img_width_ = 0;
  clear_has_whole_img_width();
}
float PatchDatum::whole_img_width() const {
  // @@protoc_insertion_point(field_get:caffe.PatchDatum.whole_img_width)
  return whole_img_width_;
}
void PatchDatum::set_whole_img_width(float value) {
  set_has_whole_img_width();
  whole_img_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.PatchDatum.whole_img_width)
}

// optional float patch_offset_xmin = 9;
bool PatchDatum::has_patch_offset_xmin() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PatchDatum::set_has_patch_offset_xmin() {
  _has_bits_[0] |= 0x00000100u;
}
void PatchDatum::clear_has_patch_offset_xmin() {
  _has_bits_[0] &= ~0x00000100u;
}
void PatchDatum::clear_patch_offset_xmin() {
  patch_offset_xmin_ = 0;
  clear_has_patch_offset_xmin();
}
float PatchDatum::patch_offset_xmin() const {
  // @@protoc_insertion_point(field_get:caffe.PatchDatum.patch_offset_xmin)
  return patch_offset_xmin_;
}
void PatchDatum::set_patch_offset_xmin(float value) {
  set_has_patch_offset_xmin();
  patch_offset_xmin_ = value;
  // @@protoc_insertion_point(field_set:caffe.PatchDatum.patch_offset_xmin)
}

// optional float patch_offset_ymin = 10;
bool PatchDatum::has_patch_offset_ymin() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PatchDatum::set_has_patch_offset_ymin() {
  _has_bits_[0] |= 0x00000200u;
}
void PatchDatum::clear_has_patch_offset_ymin() {
  _has_bits_[0] &= ~0x00000200u;
}
void PatchDatum::clear_patch_offset_ymin() {
  patch_offset_ymin_ = 0;
  clear_has_patch_offset_ymin();
}
float PatchDatum::patch_offset_ymin() const {
  // @@protoc_insertion_point(field_get:caffe.PatchDatum.patch_offset_ymin)
  return patch_offset_ymin_;
}
void PatchDatum::set_patch_offset_ymin(float value) {
  set_has_patch_offset_ymin();
  patch_offset_ymin_ = value;
  // @@protoc_insertion_point(field_set:caffe.PatchDatum.patch_offset_ymin)
}

inline const PatchDatum* PatchDatum::internal_default_instance() {
  return &PatchDatum_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PatchDataParameter::kPositiveOnlyFieldNumber;
const int PatchDataParameter::kPatchOffsetNormalizationFieldNumber;
const int PatchDataParameter::kBboxNormalizationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PatchDataParameter::PatchDataParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.PatchDataParameter)
}

void PatchDataParameter::InitAsDefaultInstance() {
}

PatchDataParameter::PatchDataParameter(const PatchDataParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.PatchDataParameter)
}

void PatchDataParameter::SharedCtor() {
  _cached_size_ = 0;
  positive_only_ = false;
  patch_offset_normalization_ = true;
  bbox_normalization_ = true;
}

PatchDataParameter::~PatchDataParameter() {
  // @@protoc_insertion_point(destructor:caffe.PatchDataParameter)
  SharedDtor();
}

void PatchDataParameter::SharedDtor() {
}

void PatchDataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PatchDataParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PatchDataParameter_descriptor_;
}

const PatchDataParameter& PatchDataParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PatchDataParameter> PatchDataParameter_default_instance_;

PatchDataParameter* PatchDataParameter::New(::google::protobuf::Arena* arena) const {
  PatchDataParameter* n = new PatchDataParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PatchDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.PatchDataParameter)
  if (_has_bits_[0 / 32] & 7u) {
    positive_only_ = false;
    patch_offset_normalization_ = true;
    bbox_normalization_ = true;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PatchDataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.PatchDataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool positive_only = 1 [default = false];
      case 1: {
        if (tag == 8) {
          set_has_positive_only();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &positive_only_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_patch_offset_normalization;
        break;
      }

      // optional bool patch_offset_normalization = 2 [default = true];
      case 2: {
        if (tag == 16) {
         parse_patch_offset_normalization:
          set_has_patch_offset_normalization();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &patch_offset_normalization_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bbox_normalization;
        break;
      }

      // optional bool bbox_normalization = 3 [default = true];
      case 3: {
        if (tag == 24) {
         parse_bbox_normalization:
          set_has_bbox_normalization();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bbox_normalization_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.PatchDataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.PatchDataParameter)
  return false;
#undef DO_
}

void PatchDataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.PatchDataParameter)
  // optional bool positive_only = 1 [default = false];
  if (has_positive_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->positive_only(), output);
  }

  // optional bool patch_offset_normalization = 2 [default = true];
  if (has_patch_offset_normalization()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->patch_offset_normalization(), output);
  }

  // optional bool bbox_normalization = 3 [default = true];
  if (has_bbox_normalization()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bbox_normalization(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.PatchDataParameter)
}

::google::protobuf::uint8* PatchDataParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.PatchDataParameter)
  // optional bool positive_only = 1 [default = false];
  if (has_positive_only()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->positive_only(), target);
  }

  // optional bool patch_offset_normalization = 2 [default = true];
  if (has_patch_offset_normalization()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->patch_offset_normalization(), target);
  }

  // optional bool bbox_normalization = 3 [default = true];
  if (has_bbox_normalization()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bbox_normalization(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.PatchDataParameter)
  return target;
}

size_t PatchDataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.PatchDataParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional bool positive_only = 1 [default = false];
    if (has_positive_only()) {
      total_size += 1 + 1;
    }

    // optional bool patch_offset_normalization = 2 [default = true];
    if (has_patch_offset_normalization()) {
      total_size += 1 + 1;
    }

    // optional bool bbox_normalization = 3 [default = true];
    if (has_bbox_normalization()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PatchDataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.PatchDataParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PatchDataParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PatchDataParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.PatchDataParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.PatchDataParameter)
    UnsafeMergeFrom(*source);
  }
}

void PatchDataParameter::MergeFrom(const PatchDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.PatchDataParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PatchDataParameter::UnsafeMergeFrom(const PatchDataParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_positive_only()) {
      set_positive_only(from.positive_only());
    }
    if (from.has_patch_offset_normalization()) {
      set_patch_offset_normalization(from.patch_offset_normalization());
    }
    if (from.has_bbox_normalization()) {
      set_bbox_normalization(from.bbox_normalization());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void PatchDataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.PatchDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatchDataParameter::CopyFrom(const PatchDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.PatchDataParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PatchDataParameter::IsInitialized() const {

  return true;
}

void PatchDataParameter::Swap(PatchDataParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PatchDataParameter::InternalSwap(PatchDataParameter* other) {
  std::swap(positive_only_, other->positive_only_);
  std::swap(patch_offset_normalization_, other->patch_offset_normalization_);
  std::swap(bbox_normalization_, other->bbox_normalization_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PatchDataParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PatchDataParameter_descriptor_;
  metadata.reflection = PatchDataParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PatchDataParameter

// optional bool positive_only = 1 [default = false];
bool PatchDataParameter::has_positive_only() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PatchDataParameter::set_has_positive_only() {
  _has_bits_[0] |= 0x00000001u;
}
void PatchDataParameter::clear_has_positive_only() {
  _has_bits_[0] &= ~0x00000001u;
}
void PatchDataParameter::clear_positive_only() {
  positive_only_ = false;
  clear_has_positive_only();
}
bool PatchDataParameter::positive_only() const {
  // @@protoc_insertion_point(field_get:caffe.PatchDataParameter.positive_only)
  return positive_only_;
}
void PatchDataParameter::set_positive_only(bool value) {
  set_has_positive_only();
  positive_only_ = value;
  // @@protoc_insertion_point(field_set:caffe.PatchDataParameter.positive_only)
}

// optional bool patch_offset_normalization = 2 [default = true];
bool PatchDataParameter::has_patch_offset_normalization() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PatchDataParameter::set_has_patch_offset_normalization() {
  _has_bits_[0] |= 0x00000002u;
}
void PatchDataParameter::clear_has_patch_offset_normalization() {
  _has_bits_[0] &= ~0x00000002u;
}
void PatchDataParameter::clear_patch_offset_normalization() {
  patch_offset_normalization_ = true;
  clear_has_patch_offset_normalization();
}
bool PatchDataParameter::patch_offset_normalization() const {
  // @@protoc_insertion_point(field_get:caffe.PatchDataParameter.patch_offset_normalization)
  return patch_offset_normalization_;
}
void PatchDataParameter::set_patch_offset_normalization(bool value) {
  set_has_patch_offset_normalization();
  patch_offset_normalization_ = value;
  // @@protoc_insertion_point(field_set:caffe.PatchDataParameter.patch_offset_normalization)
}

// optional bool bbox_normalization = 3 [default = true];
bool PatchDataParameter::has_bbox_normalization() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PatchDataParameter::set_has_bbox_normalization() {
  _has_bits_[0] |= 0x00000004u;
}
void PatchDataParameter::clear_has_bbox_normalization() {
  _has_bits_[0] &= ~0x00000004u;
}
void PatchDataParameter::clear_bbox_normalization() {
  bbox_normalization_ = true;
  clear_has_bbox_normalization();
}
bool PatchDataParameter::bbox_normalization() const {
  // @@protoc_insertion_point(field_get:caffe.PatchDataParameter.bbox_normalization)
  return bbox_normalization_;
}
void PatchDataParameter::set_bbox_normalization(bool value) {
  set_has_bbox_normalization();
  bbox_normalization_ = value;
  // @@protoc_insertion_point(field_set:caffe.PatchDataParameter.bbox_normalization)
}

inline const PatchDataParameter* PatchDataParameter::internal_default_instance() {
  return &PatchDataParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LabelRemapParameter::kSrcFieldNumber;
const int LabelRemapParameter::kDstFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LabelRemapParameter::LabelRemapParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.LabelRemapParameter)
}

void LabelRemapParameter::InitAsDefaultInstance() {
}

LabelRemapParameter::LabelRemapParameter(const LabelRemapParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.LabelRemapParameter)
}

void LabelRemapParameter::SharedCtor() {
  _cached_size_ = 0;
}

LabelRemapParameter::~LabelRemapParameter() {
  // @@protoc_insertion_point(destructor:caffe.LabelRemapParameter)
  SharedDtor();
}

void LabelRemapParameter::SharedDtor() {
}

void LabelRemapParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LabelRemapParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LabelRemapParameter_descriptor_;
}

const LabelRemapParameter& LabelRemapParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<LabelRemapParameter> LabelRemapParameter_default_instance_;

LabelRemapParameter* LabelRemapParameter::New(::google::protobuf::Arena* arena) const {
  LabelRemapParameter* n = new LabelRemapParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LabelRemapParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.LabelRemapParameter)
  src_.Clear();
  dst_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LabelRemapParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.LabelRemapParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 src = 1;
      case 1: {
        if (tag == 8) {
         parse_src:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_src())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_src())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_src;
        if (input->ExpectTag(16)) goto parse_dst;
        break;
      }

      // repeated int32 dst = 2;
      case 2: {
        if (tag == 16) {
         parse_dst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_dst())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dst())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dst;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.LabelRemapParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.LabelRemapParameter)
  return false;
#undef DO_
}

void LabelRemapParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.LabelRemapParameter)
  // repeated int32 src = 1;
  for (int i = 0; i < this->src_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->src(i), output);
  }

  // repeated int32 dst = 2;
  for (int i = 0; i < this->dst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->dst(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.LabelRemapParameter)
}

::google::protobuf::uint8* LabelRemapParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.LabelRemapParameter)
  // repeated int32 src = 1;
  for (int i = 0; i < this->src_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->src(i), target);
  }

  // repeated int32 dst = 2;
  for (int i = 0; i < this->dst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->dst(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.LabelRemapParameter)
  return target;
}

size_t LabelRemapParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.LabelRemapParameter)
  size_t total_size = 0;

  // repeated int32 src = 1;
  {
    size_t data_size = 0;
    unsigned int count = this->src_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->src(i));
    }
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->src_size());
    total_size += data_size;
  }

  // repeated int32 dst = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->dst_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dst(i));
    }
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->dst_size());
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LabelRemapParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.LabelRemapParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LabelRemapParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LabelRemapParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.LabelRemapParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.LabelRemapParameter)
    UnsafeMergeFrom(*source);
  }
}

void LabelRemapParameter::MergeFrom(const LabelRemapParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.LabelRemapParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void LabelRemapParameter::UnsafeMergeFrom(const LabelRemapParameter& from) {
  GOOGLE_DCHECK(&from != this);
  src_.UnsafeMergeFrom(from.src_);
  dst_.UnsafeMergeFrom(from.dst_);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void LabelRemapParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.LabelRemapParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelRemapParameter::CopyFrom(const LabelRemapParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.LabelRemapParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool LabelRemapParameter::IsInitialized() const {

  return true;
}

void LabelRemapParameter::Swap(LabelRemapParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LabelRemapParameter::InternalSwap(LabelRemapParameter* other) {
  src_.UnsafeArenaSwap(&other->src_);
  dst_.UnsafeArenaSwap(&other->dst_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LabelRemapParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LabelRemapParameter_descriptor_;
  metadata.reflection = LabelRemapParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LabelRemapParameter

// repeated int32 src = 1;
int LabelRemapParameter::src_size() const {
  return src_.size();
}
void LabelRemapParameter::clear_src() {
  src_.Clear();
}
::google::protobuf::int32 LabelRemapParameter::src(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LabelRemapParameter.src)
  return src_.Get(index);
}
void LabelRemapParameter::set_src(int index, ::google::protobuf::int32 value) {
  src_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.LabelRemapParameter.src)
}
void LabelRemapParameter::add_src(::google::protobuf::int32 value) {
  src_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.LabelRemapParameter.src)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
LabelRemapParameter::src() const {
  // @@protoc_insertion_point(field_list:caffe.LabelRemapParameter.src)
  return src_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
LabelRemapParameter::mutable_src() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LabelRemapParameter.src)
  return &src_;
}

// repeated int32 dst = 2;
int LabelRemapParameter::dst_size() const {
  return dst_.size();
}
void LabelRemapParameter::clear_dst() {
  dst_.Clear();
}
::google::protobuf::int32 LabelRemapParameter::dst(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LabelRemapParameter.dst)
  return dst_.Get(index);
}
void LabelRemapParameter::set_dst(int index, ::google::protobuf::int32 value) {
  dst_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.LabelRemapParameter.dst)
}
void LabelRemapParameter::add_dst(::google::protobuf::int32 value) {
  dst_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.LabelRemapParameter.dst)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
LabelRemapParameter::dst() const {
  // @@protoc_insertion_point(field_list:caffe.LabelRemapParameter.dst)
  return dst_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
LabelRemapParameter::mutable_dst() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LabelRemapParameter.dst)
  return &dst_;
}

inline const LabelRemapParameter* LabelRemapParameter::internal_default_instance() {
  return &LabelRemapParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* BBoxParameter_BBoxType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BBoxParameter_BBoxType_descriptor_;
}
bool BBoxParameter_BBoxType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BBoxParameter_BBoxType BBoxParameter::FULL;
const BBoxParameter_BBoxType BBoxParameter::VERTICAL;
const BBoxParameter_BBoxType BBoxParameter::HORIZONTAL;
const BBoxParameter_BBoxType BBoxParameter::TEMPLATE;
const BBoxParameter_BBoxType BBoxParameter::BBoxType_MIN;
const BBoxParameter_BBoxType BBoxParameter::BBoxType_MAX;
const int BBoxParameter::BBoxType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BBoxParameter_BBoxAnchor_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BBoxParameter_BBoxAnchor_descriptor_;
}
bool BBoxParameter_BBoxAnchor_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BBoxParameter_BBoxAnchor BBoxParameter::TOP_LEFT;
const BBoxParameter_BBoxAnchor BBoxParameter::CENTER;
const BBoxParameter_BBoxAnchor BBoxParameter::BBoxAnchor_MIN;
const BBoxParameter_BBoxAnchor BBoxParameter::BBoxAnchor_MAX;
const int BBoxParameter::BBoxAnchor_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BBoxParameter_BBoxConstant_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BBoxParameter_BBoxConstant_descriptor_;
}
bool BBoxParameter_BBoxConstant_IsValid(int value) {
  switch (value) {
    case -1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BBoxParameter_BBoxConstant BBoxParameter::DUMMY_VALUE;
const BBoxParameter_BBoxConstant BBoxParameter::BBoxConstant_MIN;
const BBoxParameter_BBoxConstant BBoxParameter::BBoxConstant_MAX;
const int BBoxParameter::BBoxConstant_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BBoxParameter::kBboxTypeFieldNumber;
const int BBoxParameter::kAnchorFieldNumber;
const int BBoxParameter::kNormalizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BBoxParameter::BBoxParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.BBoxParameter)
}

void BBoxParameter::InitAsDefaultInstance() {
}

BBoxParameter::BBoxParameter(const BBoxParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.BBoxParameter)
}

void BBoxParameter::SharedCtor() {
  _cached_size_ = 0;
  normalize_ = false;
  bbox_type_ = 1;
  anchor_ = 1;
}

BBoxParameter::~BBoxParameter() {
  // @@protoc_insertion_point(destructor:caffe.BBoxParameter)
  SharedDtor();
}

void BBoxParameter::SharedDtor() {
}

void BBoxParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BBoxParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BBoxParameter_descriptor_;
}

const BBoxParameter& BBoxParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BBoxParameter> BBoxParameter_default_instance_;

BBoxParameter* BBoxParameter::New(::google::protobuf::Arena* arena) const {
  BBoxParameter* n = new BBoxParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BBoxParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.BBoxParameter)
  if (_has_bits_[0 / 32] & 7u) {
    bbox_type_ = 1;
    anchor_ = 1;
    normalize_ = false;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BBoxParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.BBoxParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.BBoxParameter.BBoxType bbox_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::BBoxParameter_BBoxType_IsValid(value)) {
            set_bbox_type(static_cast< ::caffe::BBoxParameter_BBoxType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_anchor;
        break;
      }

      // optional .caffe.BBoxParameter.BBoxAnchor anchor = 2;
      case 2: {
        if (tag == 16) {
         parse_anchor:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::BBoxParameter_BBoxAnchor_IsValid(value)) {
            set_anchor(static_cast< ::caffe::BBoxParameter_BBoxAnchor >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_normalize;
        break;
      }

      // optional bool normalize = 3;
      case 3: {
        if (tag == 24) {
         parse_normalize:
          set_has_normalize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &normalize_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.BBoxParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.BBoxParameter)
  return false;
#undef DO_
}

void BBoxParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.BBoxParameter)
  // optional .caffe.BBoxParameter.BBoxType bbox_type = 1;
  if (has_bbox_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->bbox_type(), output);
  }

  // optional .caffe.BBoxParameter.BBoxAnchor anchor = 2;
  if (has_anchor()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->anchor(), output);
  }

  // optional bool normalize = 3;
  if (has_normalize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->normalize(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.BBoxParameter)
}

::google::protobuf::uint8* BBoxParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.BBoxParameter)
  // optional .caffe.BBoxParameter.BBoxType bbox_type = 1;
  if (has_bbox_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->bbox_type(), target);
  }

  // optional .caffe.BBoxParameter.BBoxAnchor anchor = 2;
  if (has_anchor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->anchor(), target);
  }

  // optional bool normalize = 3;
  if (has_normalize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->normalize(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.BBoxParameter)
  return target;
}

size_t BBoxParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.BBoxParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .caffe.BBoxParameter.BBoxType bbox_type = 1;
    if (has_bbox_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bbox_type());
    }

    // optional .caffe.BBoxParameter.BBoxAnchor anchor = 2;
    if (has_anchor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->anchor());
    }

    // optional bool normalize = 3;
    if (has_normalize()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BBoxParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.BBoxParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BBoxParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BBoxParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.BBoxParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.BBoxParameter)
    UnsafeMergeFrom(*source);
  }
}

void BBoxParameter::MergeFrom(const BBoxParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.BBoxParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BBoxParameter::UnsafeMergeFrom(const BBoxParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bbox_type()) {
      set_bbox_type(from.bbox_type());
    }
    if (from.has_anchor()) {
      set_anchor(from.anchor());
    }
    if (from.has_normalize()) {
      set_normalize(from.normalize());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void BBoxParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.BBoxParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BBoxParameter::CopyFrom(const BBoxParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.BBoxParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BBoxParameter::IsInitialized() const {

  return true;
}

void BBoxParameter::Swap(BBoxParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BBoxParameter::InternalSwap(BBoxParameter* other) {
  std::swap(bbox_type_, other->bbox_type_);
  std::swap(anchor_, other->anchor_);
  std::swap(normalize_, other->normalize_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BBoxParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BBoxParameter_descriptor_;
  metadata.reflection = BBoxParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BBoxParameter

// optional .caffe.BBoxParameter.BBoxType bbox_type = 1;
bool BBoxParameter::has_bbox_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BBoxParameter::set_has_bbox_type() {
  _has_bits_[0] |= 0x00000001u;
}
void BBoxParameter::clear_has_bbox_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void BBoxParameter::clear_bbox_type() {
  bbox_type_ = 1;
  clear_has_bbox_type();
}
::caffe::BBoxParameter_BBoxType BBoxParameter::bbox_type() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxParameter.bbox_type)
  return static_cast< ::caffe::BBoxParameter_BBoxType >(bbox_type_);
}
void BBoxParameter::set_bbox_type(::caffe::BBoxParameter_BBoxType value) {
  assert(::caffe::BBoxParameter_BBoxType_IsValid(value));
  set_has_bbox_type();
  bbox_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxParameter.bbox_type)
}

// optional .caffe.BBoxParameter.BBoxAnchor anchor = 2;
bool BBoxParameter::has_anchor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BBoxParameter::set_has_anchor() {
  _has_bits_[0] |= 0x00000002u;
}
void BBoxParameter::clear_has_anchor() {
  _has_bits_[0] &= ~0x00000002u;
}
void BBoxParameter::clear_anchor() {
  anchor_ = 1;
  clear_has_anchor();
}
::caffe::BBoxParameter_BBoxAnchor BBoxParameter::anchor() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxParameter.anchor)
  return static_cast< ::caffe::BBoxParameter_BBoxAnchor >(anchor_);
}
void BBoxParameter::set_anchor(::caffe::BBoxParameter_BBoxAnchor value) {
  assert(::caffe::BBoxParameter_BBoxAnchor_IsValid(value));
  set_has_anchor();
  anchor_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxParameter.anchor)
}

// optional bool normalize = 3;
bool BBoxParameter::has_normalize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BBoxParameter::set_has_normalize() {
  _has_bits_[0] |= 0x00000004u;
}
void BBoxParameter::clear_has_normalize() {
  _has_bits_[0] &= ~0x00000004u;
}
void BBoxParameter::clear_normalize() {
  normalize_ = false;
  clear_has_normalize();
}
bool BBoxParameter::normalize() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxParameter.normalize)
  return normalize_;
}
void BBoxParameter::set_normalize(bool value) {
  set_has_normalize();
  normalize_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxParameter.normalize)
}

inline const BBoxParameter* BBoxParameter::internal_default_instance() {
  return &BBoxParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SlidingWindowInputParameter::kWindowWidthFieldNumber;
const int SlidingWindowInputParameter::kWindowHeightFieldNumber;
const int SlidingWindowInputParameter::kHorizontalStrideFieldNumber;
const int SlidingWindowInputParameter::kVerticalStrideFieldNumber;
const int SlidingWindowInputParameter::kWindowNormalizationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SlidingWindowInputParameter::SlidingWindowInputParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SlidingWindowInputParameter)
}

void SlidingWindowInputParameter::InitAsDefaultInstance() {
}

SlidingWindowInputParameter::SlidingWindowInputParameter(const SlidingWindowInputParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.SlidingWindowInputParameter)
}

void SlidingWindowInputParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&window_width_, 0, reinterpret_cast<char*>(&vertical_stride_) -
    reinterpret_cast<char*>(&window_width_) + sizeof(vertical_stride_));
  window_normalization_ = true;
}

SlidingWindowInputParameter::~SlidingWindowInputParameter() {
  // @@protoc_insertion_point(destructor:caffe.SlidingWindowInputParameter)
  SharedDtor();
}

void SlidingWindowInputParameter::SharedDtor() {
}

void SlidingWindowInputParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlidingWindowInputParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlidingWindowInputParameter_descriptor_;
}

const SlidingWindowInputParameter& SlidingWindowInputParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SlidingWindowInputParameter> SlidingWindowInputParameter_default_instance_;

SlidingWindowInputParameter* SlidingWindowInputParameter::New(::google::protobuf::Arena* arena) const {
  SlidingWindowInputParameter* n = new SlidingWindowInputParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SlidingWindowInputParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SlidingWindowInputParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SlidingWindowInputParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SlidingWindowInputParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(window_width_, vertical_stride_);
    window_normalization_ = true;
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SlidingWindowInputParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SlidingWindowInputParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 window_width = 1;
      case 1: {
        if (tag == 8) {
          set_has_window_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &window_width_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_window_height;
        break;
      }

      // required int32 window_height = 2;
      case 2: {
        if (tag == 16) {
         parse_window_height:
          set_has_window_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &window_height_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_horizontal_stride;
        break;
      }

      // required int32 horizontal_stride = 3;
      case 3: {
        if (tag == 24) {
         parse_horizontal_stride:
          set_has_horizontal_stride();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &horizontal_stride_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_vertical_stride;
        break;
      }

      // required int32 vertical_stride = 4;
      case 4: {
        if (tag == 32) {
         parse_vertical_stride:
          set_has_vertical_stride();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vertical_stride_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_window_normalization;
        break;
      }

      // optional bool window_normalization = 5 [default = true];
      case 5: {
        if (tag == 40) {
         parse_window_normalization:
          set_has_window_normalization();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &window_normalization_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SlidingWindowInputParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SlidingWindowInputParameter)
  return false;
#undef DO_
}

void SlidingWindowInputParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SlidingWindowInputParameter)
  // required int32 window_width = 1;
  if (has_window_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->window_width(), output);
  }

  // required int32 window_height = 2;
  if (has_window_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->window_height(), output);
  }

  // required int32 horizontal_stride = 3;
  if (has_horizontal_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->horizontal_stride(), output);
  }

  // required int32 vertical_stride = 4;
  if (has_vertical_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->vertical_stride(), output);
  }

  // optional bool window_normalization = 5 [default = true];
  if (has_window_normalization()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->window_normalization(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SlidingWindowInputParameter)
}

::google::protobuf::uint8* SlidingWindowInputParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SlidingWindowInputParameter)
  // required int32 window_width = 1;
  if (has_window_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->window_width(), target);
  }

  // required int32 window_height = 2;
  if (has_window_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->window_height(), target);
  }

  // required int32 horizontal_stride = 3;
  if (has_horizontal_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->horizontal_stride(), target);
  }

  // required int32 vertical_stride = 4;
  if (has_vertical_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->vertical_stride(), target);
  }

  // optional bool window_normalization = 5 [default = true];
  if (has_window_normalization()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->window_normalization(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SlidingWindowInputParameter)
  return target;
}

size_t SlidingWindowInputParameter::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe.SlidingWindowInputParameter)
  size_t total_size = 0;

  if (has_window_width()) {
    // required int32 window_width = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->window_width());
  }

  if (has_window_height()) {
    // required int32 window_height = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->window_height());
  }

  if (has_horizontal_stride()) {
    // required int32 horizontal_stride = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->horizontal_stride());
  }

  if (has_vertical_stride()) {
    // required int32 vertical_stride = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vertical_stride());
  }

  return total_size;
}
size_t SlidingWindowInputParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SlidingWindowInputParameter)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 window_width = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->window_width());

    // required int32 window_height = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->window_height());

    // required int32 horizontal_stride = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->horizontal_stride());

    // required int32 vertical_stride = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vertical_stride());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool window_normalization = 5 [default = true];
  if (has_window_normalization()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlidingWindowInputParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SlidingWindowInputParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SlidingWindowInputParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SlidingWindowInputParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SlidingWindowInputParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SlidingWindowInputParameter)
    UnsafeMergeFrom(*source);
  }
}

void SlidingWindowInputParameter::MergeFrom(const SlidingWindowInputParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SlidingWindowInputParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SlidingWindowInputParameter::UnsafeMergeFrom(const SlidingWindowInputParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_window_width()) {
      set_window_width(from.window_width());
    }
    if (from.has_window_height()) {
      set_window_height(from.window_height());
    }
    if (from.has_horizontal_stride()) {
      set_horizontal_stride(from.horizontal_stride());
    }
    if (from.has_vertical_stride()) {
      set_vertical_stride(from.vertical_stride());
    }
    if (from.has_window_normalization()) {
      set_window_normalization(from.window_normalization());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void SlidingWindowInputParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SlidingWindowInputParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlidingWindowInputParameter::CopyFrom(const SlidingWindowInputParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SlidingWindowInputParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SlidingWindowInputParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SlidingWindowInputParameter::Swap(SlidingWindowInputParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SlidingWindowInputParameter::InternalSwap(SlidingWindowInputParameter* other) {
  std::swap(window_width_, other->window_width_);
  std::swap(window_height_, other->window_height_);
  std::swap(horizontal_stride_, other->horizontal_stride_);
  std::swap(vertical_stride_, other->vertical_stride_);
  std::swap(window_normalization_, other->window_normalization_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SlidingWindowInputParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlidingWindowInputParameter_descriptor_;
  metadata.reflection = SlidingWindowInputParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SlidingWindowInputParameter

// required int32 window_width = 1;
bool SlidingWindowInputParameter::has_window_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SlidingWindowInputParameter::set_has_window_width() {
  _has_bits_[0] |= 0x00000001u;
}
void SlidingWindowInputParameter::clear_has_window_width() {
  _has_bits_[0] &= ~0x00000001u;
}
void SlidingWindowInputParameter::clear_window_width() {
  window_width_ = 0;
  clear_has_window_width();
}
::google::protobuf::int32 SlidingWindowInputParameter::window_width() const {
  // @@protoc_insertion_point(field_get:caffe.SlidingWindowInputParameter.window_width)
  return window_width_;
}
void SlidingWindowInputParameter::set_window_width(::google::protobuf::int32 value) {
  set_has_window_width();
  window_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.SlidingWindowInputParameter.window_width)
}

// required int32 window_height = 2;
bool SlidingWindowInputParameter::has_window_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SlidingWindowInputParameter::set_has_window_height() {
  _has_bits_[0] |= 0x00000002u;
}
void SlidingWindowInputParameter::clear_has_window_height() {
  _has_bits_[0] &= ~0x00000002u;
}
void SlidingWindowInputParameter::clear_window_height() {
  window_height_ = 0;
  clear_has_window_height();
}
::google::protobuf::int32 SlidingWindowInputParameter::window_height() const {
  // @@protoc_insertion_point(field_get:caffe.SlidingWindowInputParameter.window_height)
  return window_height_;
}
void SlidingWindowInputParameter::set_window_height(::google::protobuf::int32 value) {
  set_has_window_height();
  window_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.SlidingWindowInputParameter.window_height)
}

// required int32 horizontal_stride = 3;
bool SlidingWindowInputParameter::has_horizontal_stride() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SlidingWindowInputParameter::set_has_horizontal_stride() {
  _has_bits_[0] |= 0x00000004u;
}
void SlidingWindowInputParameter::clear_has_horizontal_stride() {
  _has_bits_[0] &= ~0x00000004u;
}
void SlidingWindowInputParameter::clear_horizontal_stride() {
  horizontal_stride_ = 0;
  clear_has_horizontal_stride();
}
::google::protobuf::int32 SlidingWindowInputParameter::horizontal_stride() const {
  // @@protoc_insertion_point(field_get:caffe.SlidingWindowInputParameter.horizontal_stride)
  return horizontal_stride_;
}
void SlidingWindowInputParameter::set_horizontal_stride(::google::protobuf::int32 value) {
  set_has_horizontal_stride();
  horizontal_stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.SlidingWindowInputParameter.horizontal_stride)
}

// required int32 vertical_stride = 4;
bool SlidingWindowInputParameter::has_vertical_stride() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SlidingWindowInputParameter::set_has_vertical_stride() {
  _has_bits_[0] |= 0x00000008u;
}
void SlidingWindowInputParameter::clear_has_vertical_stride() {
  _has_bits_[0] &= ~0x00000008u;
}
void SlidingWindowInputParameter::clear_vertical_stride() {
  vertical_stride_ = 0;
  clear_has_vertical_stride();
}
::google::protobuf::int32 SlidingWindowInputParameter::vertical_stride() const {
  // @@protoc_insertion_point(field_get:caffe.SlidingWindowInputParameter.vertical_stride)
  return vertical_stride_;
}
void SlidingWindowInputParameter::set_vertical_stride(::google::protobuf::int32 value) {
  set_has_vertical_stride();
  vertical_stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.SlidingWindowInputParameter.vertical_stride)
}

// optional bool window_normalization = 5 [default = true];
bool SlidingWindowInputParameter::has_window_normalization() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SlidingWindowInputParameter::set_has_window_normalization() {
  _has_bits_[0] |= 0x00000010u;
}
void SlidingWindowInputParameter::clear_has_window_normalization() {
  _has_bits_[0] &= ~0x00000010u;
}
void SlidingWindowInputParameter::clear_window_normalization() {
  window_normalization_ = true;
  clear_has_window_normalization();
}
bool SlidingWindowInputParameter::window_normalization() const {
  // @@protoc_insertion_point(field_get:caffe.SlidingWindowInputParameter.window_normalization)
  return window_normalization_;
}
void SlidingWindowInputParameter::set_window_normalization(bool value) {
  set_has_window_normalization();
  window_normalization_ = value;
  // @@protoc_insertion_point(field_set:caffe.SlidingWindowInputParameter.window_normalization)
}

inline const SlidingWindowInputParameter* SlidingWindowInputParameter::internal_default_instance() {
  return &SlidingWindowInputParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BBoxToGridAndSizeParameter::kXGridFieldNumber;
const int BBoxToGridAndSizeParameter::kYGridFieldNumber;
const int BBoxToGridAndSizeParameter::kSizeGridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BBoxToGridAndSizeParameter::BBoxToGridAndSizeParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.BBoxToGridAndSizeParameter)
}

void BBoxToGridAndSizeParameter::InitAsDefaultInstance() {
}

BBoxToGridAndSizeParameter::BBoxToGridAndSizeParameter(const BBoxToGridAndSizeParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.BBoxToGridAndSizeParameter)
}

void BBoxToGridAndSizeParameter::SharedCtor() {
  _cached_size_ = 0;
}

BBoxToGridAndSizeParameter::~BBoxToGridAndSizeParameter() {
  // @@protoc_insertion_point(destructor:caffe.BBoxToGridAndSizeParameter)
  SharedDtor();
}

void BBoxToGridAndSizeParameter::SharedDtor() {
}

void BBoxToGridAndSizeParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BBoxToGridAndSizeParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BBoxToGridAndSizeParameter_descriptor_;
}

const BBoxToGridAndSizeParameter& BBoxToGridAndSizeParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BBoxToGridAndSizeParameter> BBoxToGridAndSizeParameter_default_instance_;

BBoxToGridAndSizeParameter* BBoxToGridAndSizeParameter::New(::google::protobuf::Arena* arena) const {
  BBoxToGridAndSizeParameter* n = new BBoxToGridAndSizeParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BBoxToGridAndSizeParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.BBoxToGridAndSizeParameter)
  x_grid_.Clear();
  y_grid_.Clear();
  size_grid_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BBoxToGridAndSizeParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.BBoxToGridAndSizeParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float x_grid = 1;
      case 1: {
        if (tag == 13) {
         parse_x_grid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13, input, this->mutable_x_grid())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_x_grid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(13)) goto parse_x_grid;
        if (input->ExpectTag(21)) goto parse_y_grid;
        break;
      }

      // repeated float y_grid = 2;
      case 2: {
        if (tag == 21) {
         parse_y_grid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21, input, this->mutable_y_grid())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_y_grid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y_grid;
        if (input->ExpectTag(29)) goto parse_size_grid;
        break;
      }

      // repeated float size_grid = 3;
      case 3: {
        if (tag == 29) {
         parse_size_grid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_size_grid())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_size_grid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_size_grid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.BBoxToGridAndSizeParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.BBoxToGridAndSizeParameter)
  return false;
#undef DO_
}

void BBoxToGridAndSizeParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.BBoxToGridAndSizeParameter)
  // repeated float x_grid = 1;
  for (int i = 0; i < this->x_grid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->x_grid(i), output);
  }

  // repeated float y_grid = 2;
  for (int i = 0; i < this->y_grid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->y_grid(i), output);
  }

  // repeated float size_grid = 3;
  for (int i = 0; i < this->size_grid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->size_grid(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.BBoxToGridAndSizeParameter)
}

::google::protobuf::uint8* BBoxToGridAndSizeParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.BBoxToGridAndSizeParameter)
  // repeated float x_grid = 1;
  for (int i = 0; i < this->x_grid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(1, this->x_grid(i), target);
  }

  // repeated float y_grid = 2;
  for (int i = 0; i < this->y_grid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(2, this->y_grid(i), target);
  }

  // repeated float size_grid = 3;
  for (int i = 0; i < this->size_grid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(3, this->size_grid(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.BBoxToGridAndSizeParameter)
  return target;
}

size_t BBoxToGridAndSizeParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.BBoxToGridAndSizeParameter)
  size_t total_size = 0;

  // repeated float x_grid = 1;
  {
    size_t data_size = 0;
    unsigned int count = this->x_grid_size();
    data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->x_grid_size());
    total_size += data_size;
  }

  // repeated float y_grid = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->y_grid_size();
    data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->y_grid_size());
    total_size += data_size;
  }

  // repeated float size_grid = 3;
  {
    size_t data_size = 0;
    unsigned int count = this->size_grid_size();
    data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->size_grid_size());
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BBoxToGridAndSizeParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.BBoxToGridAndSizeParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BBoxToGridAndSizeParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BBoxToGridAndSizeParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.BBoxToGridAndSizeParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.BBoxToGridAndSizeParameter)
    UnsafeMergeFrom(*source);
  }
}

void BBoxToGridAndSizeParameter::MergeFrom(const BBoxToGridAndSizeParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.BBoxToGridAndSizeParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BBoxToGridAndSizeParameter::UnsafeMergeFrom(const BBoxToGridAndSizeParameter& from) {
  GOOGLE_DCHECK(&from != this);
  x_grid_.UnsafeMergeFrom(from.x_grid_);
  y_grid_.UnsafeMergeFrom(from.y_grid_);
  size_grid_.UnsafeMergeFrom(from.size_grid_);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void BBoxToGridAndSizeParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.BBoxToGridAndSizeParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BBoxToGridAndSizeParameter::CopyFrom(const BBoxToGridAndSizeParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.BBoxToGridAndSizeParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BBoxToGridAndSizeParameter::IsInitialized() const {

  return true;
}

void BBoxToGridAndSizeParameter::Swap(BBoxToGridAndSizeParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BBoxToGridAndSizeParameter::InternalSwap(BBoxToGridAndSizeParameter* other) {
  x_grid_.UnsafeArenaSwap(&other->x_grid_);
  y_grid_.UnsafeArenaSwap(&other->y_grid_);
  size_grid_.UnsafeArenaSwap(&other->size_grid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BBoxToGridAndSizeParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BBoxToGridAndSizeParameter_descriptor_;
  metadata.reflection = BBoxToGridAndSizeParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BBoxToGridAndSizeParameter

// repeated float x_grid = 1;
int BBoxToGridAndSizeParameter::x_grid_size() const {
  return x_grid_.size();
}
void BBoxToGridAndSizeParameter::clear_x_grid() {
  x_grid_.Clear();
}
float BBoxToGridAndSizeParameter::x_grid(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BBoxToGridAndSizeParameter.x_grid)
  return x_grid_.Get(index);
}
void BBoxToGridAndSizeParameter::set_x_grid(int index, float value) {
  x_grid_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BBoxToGridAndSizeParameter.x_grid)
}
void BBoxToGridAndSizeParameter::add_x_grid(float value) {
  x_grid_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BBoxToGridAndSizeParameter.x_grid)
}
const ::google::protobuf::RepeatedField< float >&
BBoxToGridAndSizeParameter::x_grid() const {
  // @@protoc_insertion_point(field_list:caffe.BBoxToGridAndSizeParameter.x_grid)
  return x_grid_;
}
::google::protobuf::RepeatedField< float >*
BBoxToGridAndSizeParameter::mutable_x_grid() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BBoxToGridAndSizeParameter.x_grid)
  return &x_grid_;
}

// repeated float y_grid = 2;
int BBoxToGridAndSizeParameter::y_grid_size() const {
  return y_grid_.size();
}
void BBoxToGridAndSizeParameter::clear_y_grid() {
  y_grid_.Clear();
}
float BBoxToGridAndSizeParameter::y_grid(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BBoxToGridAndSizeParameter.y_grid)
  return y_grid_.Get(index);
}
void BBoxToGridAndSizeParameter::set_y_grid(int index, float value) {
  y_grid_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BBoxToGridAndSizeParameter.y_grid)
}
void BBoxToGridAndSizeParameter::add_y_grid(float value) {
  y_grid_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BBoxToGridAndSizeParameter.y_grid)
}
const ::google::protobuf::RepeatedField< float >&
BBoxToGridAndSizeParameter::y_grid() const {
  // @@protoc_insertion_point(field_list:caffe.BBoxToGridAndSizeParameter.y_grid)
  return y_grid_;
}
::google::protobuf::RepeatedField< float >*
BBoxToGridAndSizeParameter::mutable_y_grid() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BBoxToGridAndSizeParameter.y_grid)
  return &y_grid_;
}

// repeated float size_grid = 3;
int BBoxToGridAndSizeParameter::size_grid_size() const {
  return size_grid_.size();
}
void BBoxToGridAndSizeParameter::clear_size_grid() {
  size_grid_.Clear();
}
float BBoxToGridAndSizeParameter::size_grid(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BBoxToGridAndSizeParameter.size_grid)
  return size_grid_.Get(index);
}
void BBoxToGridAndSizeParameter::set_size_grid(int index, float value) {
  size_grid_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BBoxToGridAndSizeParameter.size_grid)
}
void BBoxToGridAndSizeParameter::add_size_grid(float value) {
  size_grid_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BBoxToGridAndSizeParameter.size_grid)
}
const ::google::protobuf::RepeatedField< float >&
BBoxToGridAndSizeParameter::size_grid() const {
  // @@protoc_insertion_point(field_list:caffe.BBoxToGridAndSizeParameter.size_grid)
  return size_grid_;
}
::google::protobuf::RepeatedField< float >*
BBoxToGridAndSizeParameter::mutable_size_grid() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BBoxToGridAndSizeParameter.size_grid)
  return &size_grid_;
}

inline const BBoxToGridAndSizeParameter* BBoxToGridAndSizeParameter::internal_default_instance() {
  return &BBoxToGridAndSizeParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SizeUnitParameter::kUnitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SizeUnitParameter::SizeUnitParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SizeUnitParameter)
}

void SizeUnitParameter::InitAsDefaultInstance() {
}

SizeUnitParameter::SizeUnitParameter(const SizeUnitParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.SizeUnitParameter)
}

void SizeUnitParameter::SharedCtor() {
  _cached_size_ = 0;
  unit_ = 0;
}

SizeUnitParameter::~SizeUnitParameter() {
  // @@protoc_insertion_point(destructor:caffe.SizeUnitParameter)
  SharedDtor();
}

void SizeUnitParameter::SharedDtor() {
}

void SizeUnitParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SizeUnitParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SizeUnitParameter_descriptor_;
}

const SizeUnitParameter& SizeUnitParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SizeUnitParameter> SizeUnitParameter_default_instance_;

SizeUnitParameter* SizeUnitParameter::New(::google::protobuf::Arena* arena) const {
  SizeUnitParameter* n = new SizeUnitParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SizeUnitParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SizeUnitParameter)
  unit_ = 0;
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SizeUnitParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SizeUnitParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float unit = 1;
      case 1: {
        if (tag == 13) {
          set_has_unit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &unit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SizeUnitParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SizeUnitParameter)
  return false;
#undef DO_
}

void SizeUnitParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SizeUnitParameter)
  // required float unit = 1;
  if (has_unit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->unit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SizeUnitParameter)
}

::google::protobuf::uint8* SizeUnitParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SizeUnitParameter)
  // required float unit = 1;
  if (has_unit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->unit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SizeUnitParameter)
  return target;
}

size_t SizeUnitParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SizeUnitParameter)
  size_t total_size = 0;

  // required float unit = 1;
  if (has_unit()) {
    total_size += 1 + 4;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SizeUnitParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SizeUnitParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SizeUnitParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SizeUnitParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SizeUnitParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SizeUnitParameter)
    UnsafeMergeFrom(*source);
  }
}

void SizeUnitParameter::MergeFrom(const SizeUnitParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SizeUnitParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SizeUnitParameter::UnsafeMergeFrom(const SizeUnitParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unit()) {
      set_unit(from.unit());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void SizeUnitParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SizeUnitParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SizeUnitParameter::CopyFrom(const SizeUnitParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SizeUnitParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SizeUnitParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SizeUnitParameter::Swap(SizeUnitParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SizeUnitParameter::InternalSwap(SizeUnitParameter* other) {
  std::swap(unit_, other->unit_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SizeUnitParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SizeUnitParameter_descriptor_;
  metadata.reflection = SizeUnitParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SizeUnitParameter

// required float unit = 1;
bool SizeUnitParameter::has_unit() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SizeUnitParameter::set_has_unit() {
  _has_bits_[0] |= 0x00000001u;
}
void SizeUnitParameter::clear_has_unit() {
  _has_bits_[0] &= ~0x00000001u;
}
void SizeUnitParameter::clear_unit() {
  unit_ = 0;
  clear_has_unit();
}
float SizeUnitParameter::unit() const {
  // @@protoc_insertion_point(field_get:caffe.SizeUnitParameter.unit)
  return unit_;
}
void SizeUnitParameter::set_unit(float value) {
  set_has_unit();
  unit_ = value;
  // @@protoc_insertion_point(field_set:caffe.SizeUnitParameter.unit)
}

inline const SizeUnitParameter* SizeUnitParameter::internal_default_instance() {
  return &SizeUnitParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* PaddingParameter_PaddingType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PaddingParameter_PaddingType_descriptor_;
}
bool PaddingParameter_PaddingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PaddingParameter_PaddingType PaddingParameter::ZERO;
const PaddingParameter_PaddingType PaddingParameter::MIRROR;
const PaddingParameter_PaddingType PaddingParameter::PaddingType_MIN;
const PaddingParameter_PaddingType PaddingParameter::PaddingType_MAX;
const int PaddingParameter::PaddingType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PaddingParameter::kTypeFieldNumber;
const int PaddingParameter::kPadUpFieldNumber;
const int PaddingParameter::kPadDownFieldNumber;
const int PaddingParameter::kPadLeftFieldNumber;
const int PaddingParameter::kPadRightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PaddingParameter::PaddingParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.PaddingParameter)
}

void PaddingParameter::InitAsDefaultInstance() {
}

PaddingParameter::PaddingParameter(const PaddingParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.PaddingParameter)
}

void PaddingParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&type_, 0, reinterpret_cast<char*>(&pad_right_) -
    reinterpret_cast<char*>(&type_) + sizeof(pad_right_));
}

PaddingParameter::~PaddingParameter() {
  // @@protoc_insertion_point(destructor:caffe.PaddingParameter)
  SharedDtor();
}

void PaddingParameter::SharedDtor() {
}

void PaddingParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PaddingParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PaddingParameter_descriptor_;
}

const PaddingParameter& PaddingParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PaddingParameter> PaddingParameter_default_instance_;

PaddingParameter* PaddingParameter::New(::google::protobuf::Arena* arena) const {
  PaddingParameter* n = new PaddingParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PaddingParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.PaddingParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PaddingParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PaddingParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, pad_right_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PaddingParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.PaddingParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.PaddingParameter.PaddingType type = 1 [default = ZERO];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::PaddingParameter_PaddingType_IsValid(value)) {
            set_type(static_cast< ::caffe::PaddingParameter_PaddingType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pad_up;
        break;
      }

      // optional uint32 pad_up = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_pad_up:
          set_has_pad_up();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_up_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pad_down;
        break;
      }

      // optional uint32 pad_down = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_pad_down:
          set_has_pad_down();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_down_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pad_left;
        break;
      }

      // optional uint32 pad_left = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_pad_left:
          set_has_pad_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_left_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pad_right;
        break;
      }

      // optional uint32 pad_right = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_pad_right:
          set_has_pad_right();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_right_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.PaddingParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.PaddingParameter)
  return false;
#undef DO_
}

void PaddingParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.PaddingParameter)
  // optional .caffe.PaddingParameter.PaddingType type = 1 [default = ZERO];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 pad_up = 2 [default = 0];
  if (has_pad_up()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pad_up(), output);
  }

  // optional uint32 pad_down = 3 [default = 0];
  if (has_pad_down()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pad_down(), output);
  }

  // optional uint32 pad_left = 4 [default = 0];
  if (has_pad_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pad_left(), output);
  }

  // optional uint32 pad_right = 5 [default = 0];
  if (has_pad_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->pad_right(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.PaddingParameter)
}

::google::protobuf::uint8* PaddingParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.PaddingParameter)
  // optional .caffe.PaddingParameter.PaddingType type = 1 [default = ZERO];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 pad_up = 2 [default = 0];
  if (has_pad_up()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pad_up(), target);
  }

  // optional uint32 pad_down = 3 [default = 0];
  if (has_pad_down()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pad_down(), target);
  }

  // optional uint32 pad_left = 4 [default = 0];
  if (has_pad_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pad_left(), target);
  }

  // optional uint32 pad_right = 5 [default = 0];
  if (has_pad_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->pad_right(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.PaddingParameter)
  return target;
}

size_t PaddingParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.PaddingParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional .caffe.PaddingParameter.PaddingType type = 1 [default = ZERO];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 pad_up = 2 [default = 0];
    if (has_pad_up()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_up());
    }

    // optional uint32 pad_down = 3 [default = 0];
    if (has_pad_down()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_down());
    }

    // optional uint32 pad_left = 4 [default = 0];
    if (has_pad_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_left());
    }

    // optional uint32 pad_right = 5 [default = 0];
    if (has_pad_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_right());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PaddingParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.PaddingParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PaddingParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PaddingParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.PaddingParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.PaddingParameter)
    UnsafeMergeFrom(*source);
  }
}

void PaddingParameter::MergeFrom(const PaddingParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.PaddingParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PaddingParameter::UnsafeMergeFrom(const PaddingParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_pad_up()) {
      set_pad_up(from.pad_up());
    }
    if (from.has_pad_down()) {
      set_pad_down(from.pad_down());
    }
    if (from.has_pad_left()) {
      set_pad_left(from.pad_left());
    }
    if (from.has_pad_right()) {
      set_pad_right(from.pad_right());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void PaddingParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.PaddingParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PaddingParameter::CopyFrom(const PaddingParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.PaddingParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PaddingParameter::IsInitialized() const {

  return true;
}

void PaddingParameter::Swap(PaddingParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PaddingParameter::InternalSwap(PaddingParameter* other) {
  std::swap(type_, other->type_);
  std::swap(pad_up_, other->pad_up_);
  std::swap(pad_down_, other->pad_down_);
  std::swap(pad_left_, other->pad_left_);
  std::swap(pad_right_, other->pad_right_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PaddingParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PaddingParameter_descriptor_;
  metadata.reflection = PaddingParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PaddingParameter

// optional .caffe.PaddingParameter.PaddingType type = 1 [default = ZERO];
bool PaddingParameter::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PaddingParameter::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void PaddingParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void PaddingParameter::clear_type() {
  type_ = 0;
  clear_has_type();
}
::caffe::PaddingParameter_PaddingType PaddingParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.PaddingParameter.type)
  return static_cast< ::caffe::PaddingParameter_PaddingType >(type_);
}
void PaddingParameter::set_type(::caffe::PaddingParameter_PaddingType value) {
  assert(::caffe::PaddingParameter_PaddingType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:caffe.PaddingParameter.type)
}

// optional uint32 pad_up = 2 [default = 0];
bool PaddingParameter::has_pad_up() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PaddingParameter::set_has_pad_up() {
  _has_bits_[0] |= 0x00000002u;
}
void PaddingParameter::clear_has_pad_up() {
  _has_bits_[0] &= ~0x00000002u;
}
void PaddingParameter::clear_pad_up() {
  pad_up_ = 0u;
  clear_has_pad_up();
}
::google::protobuf::uint32 PaddingParameter::pad_up() const {
  // @@protoc_insertion_point(field_get:caffe.PaddingParameter.pad_up)
  return pad_up_;
}
void PaddingParameter::set_pad_up(::google::protobuf::uint32 value) {
  set_has_pad_up();
  pad_up_ = value;
  // @@protoc_insertion_point(field_set:caffe.PaddingParameter.pad_up)
}

// optional uint32 pad_down = 3 [default = 0];
bool PaddingParameter::has_pad_down() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PaddingParameter::set_has_pad_down() {
  _has_bits_[0] |= 0x00000004u;
}
void PaddingParameter::clear_has_pad_down() {
  _has_bits_[0] &= ~0x00000004u;
}
void PaddingParameter::clear_pad_down() {
  pad_down_ = 0u;
  clear_has_pad_down();
}
::google::protobuf::uint32 PaddingParameter::pad_down() const {
  // @@protoc_insertion_point(field_get:caffe.PaddingParameter.pad_down)
  return pad_down_;
}
void PaddingParameter::set_pad_down(::google::protobuf::uint32 value) {
  set_has_pad_down();
  pad_down_ = value;
  // @@protoc_insertion_point(field_set:caffe.PaddingParameter.pad_down)
}

// optional uint32 pad_left = 4 [default = 0];
bool PaddingParameter::has_pad_left() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PaddingParameter::set_has_pad_left() {
  _has_bits_[0] |= 0x00000008u;
}
void PaddingParameter::clear_has_pad_left() {
  _has_bits_[0] &= ~0x00000008u;
}
void PaddingParameter::clear_pad_left() {
  pad_left_ = 0u;
  clear_has_pad_left();
}
::google::protobuf::uint32 PaddingParameter::pad_left() const {
  // @@protoc_insertion_point(field_get:caffe.PaddingParameter.pad_left)
  return pad_left_;
}
void PaddingParameter::set_pad_left(::google::protobuf::uint32 value) {
  set_has_pad_left();
  pad_left_ = value;
  // @@protoc_insertion_point(field_set:caffe.PaddingParameter.pad_left)
}

// optional uint32 pad_right = 5 [default = 0];
bool PaddingParameter::has_pad_right() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PaddingParameter::set_has_pad_right() {
  _has_bits_[0] |= 0x00000010u;
}
void PaddingParameter::clear_has_pad_right() {
  _has_bits_[0] &= ~0x00000010u;
}
void PaddingParameter::clear_pad_right() {
  pad_right_ = 0u;
  clear_has_pad_right();
}
::google::protobuf::uint32 PaddingParameter::pad_right() const {
  // @@protoc_insertion_point(field_get:caffe.PaddingParameter.pad_right)
  return pad_right_;
}
void PaddingParameter::set_pad_right(::google::protobuf::uint32 value) {
  set_has_pad_right();
  pad_right_ = value;
  // @@protoc_insertion_point(field_set:caffe.PaddingParameter.pad_right)
}

inline const PaddingParameter* PaddingParameter::internal_default_instance() {
  return &PaddingParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point2i::kXFieldNumber;
const int Point2i::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point2i::Point2i()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.Point2i)
}

void Point2i::InitAsDefaultInstance() {
}

Point2i::Point2i(const Point2i& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.Point2i)
}

void Point2i::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_) + sizeof(y_));
}

Point2i::~Point2i() {
  // @@protoc_insertion_point(destructor:caffe.Point2i)
  SharedDtor();
}

void Point2i::SharedDtor() {
}

void Point2i::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point2i::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point2i_descriptor_;
}

const Point2i& Point2i::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Point2i> Point2i_default_instance_;

Point2i* Point2i::New(::google::protobuf::Arena* arena) const {
  Point2i* n = new Point2i;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Point2i::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.Point2i)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Point2i, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Point2i*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, y_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Point2i::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.Point2i)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (tag == 8) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required int32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.Point2i)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.Point2i)
  return false;
#undef DO_
}

void Point2i::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.Point2i)
  // required int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.Point2i)
}

::google::protobuf::uint8* Point2i::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.Point2i)
  // required int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.Point2i)
  return target;
}

size_t Point2i::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe.Point2i)
  size_t total_size = 0;

  if (has_x()) {
    // required int32 x = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  if (has_y()) {
    // required int32 y = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  return total_size;
}
size_t Point2i::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.Point2i)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 x = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());

    // required int32 y = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point2i::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.Point2i)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Point2i* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Point2i>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.Point2i)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.Point2i)
    UnsafeMergeFrom(*source);
  }
}

void Point2i::MergeFrom(const Point2i& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.Point2i)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Point2i::UnsafeMergeFrom(const Point2i& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Point2i::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.Point2i)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point2i::CopyFrom(const Point2i& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.Point2i)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Point2i::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Point2i::Swap(Point2i* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point2i::InternalSwap(Point2i* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Point2i::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point2i_descriptor_;
  metadata.reflection = Point2i_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Point2i

// required int32 x = 1;
bool Point2i::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Point2i::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Point2i::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Point2i::clear_x() {
  x_ = 0;
  clear_has_x();
}
::google::protobuf::int32 Point2i::x() const {
  // @@protoc_insertion_point(field_get:caffe.Point2i.x)
  return x_;
}
void Point2i::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:caffe.Point2i.x)
}

// required int32 y = 2;
bool Point2i::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Point2i::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Point2i::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Point2i::clear_y() {
  y_ = 0;
  clear_has_y();
}
::google::protobuf::int32 Point2i::y() const {
  // @@protoc_insertion_point(field_get:caffe.Point2i.y)
  return y_;
}
void Point2i::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:caffe.Point2i.y)
}

inline const Point2i* Point2i::internal_default_instance() {
  return &Point2i_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point2f::kXFieldNumber;
const int Point2f::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point2f::Point2f()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.Point2f)
}

void Point2f::InitAsDefaultInstance() {
}

Point2f::Point2f(const Point2f& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.Point2f)
}

void Point2f::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_) + sizeof(y_));
}

Point2f::~Point2f() {
  // @@protoc_insertion_point(destructor:caffe.Point2f)
  SharedDtor();
}

void Point2f::SharedDtor() {
}

void Point2f::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point2f::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point2f_descriptor_;
}

const Point2f& Point2f::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Point2f> Point2f_default_instance_;

Point2f* Point2f::New(::google::protobuf::Arena* arena) const {
  Point2f* n = new Point2f;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Point2f::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.Point2f)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Point2f, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Point2f*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, y_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Point2f::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.Point2f)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.Point2f)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.Point2f)
  return false;
#undef DO_
}

void Point2f::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.Point2f)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.Point2f)
}

::google::protobuf::uint8* Point2f::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.Point2f)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.Point2f)
  return target;
}

size_t Point2f::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe.Point2f)
  size_t total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Point2f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.Point2f)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point2f::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.Point2f)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Point2f* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Point2f>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.Point2f)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.Point2f)
    UnsafeMergeFrom(*source);
  }
}

void Point2f::MergeFrom(const Point2f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.Point2f)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Point2f::UnsafeMergeFrom(const Point2f& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Point2f::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.Point2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point2f::CopyFrom(const Point2f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.Point2f)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Point2f::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Point2f::Swap(Point2f* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point2f::InternalSwap(Point2f* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Point2f::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point2f_descriptor_;
  metadata.reflection = Point2f_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Point2f

// required float x = 1;
bool Point2f::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Point2f::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Point2f::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Point2f::clear_x() {
  x_ = 0;
  clear_has_x();
}
float Point2f::x() const {
  // @@protoc_insertion_point(field_get:caffe.Point2f.x)
  return x_;
}
void Point2f::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:caffe.Point2f.x)
}

// required float y = 2;
bool Point2f::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Point2f::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Point2f::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Point2f::clear_y() {
  y_ = 0;
  clear_has_y();
}
float Point2f::y() const {
  // @@protoc_insertion_point(field_get:caffe.Point2f.y)
  return y_;
}
void Point2f::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:caffe.Point2f.y)
}

inline const Point2f* Point2f::internal_default_instance() {
  return &Point2f_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Size2i::kWidthFieldNumber;
const int Size2i::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Size2i::Size2i()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.Size2i)
}

void Size2i::InitAsDefaultInstance() {
}

Size2i::Size2i(const Size2i& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.Size2i)
}

void Size2i::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&width_, 0, reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_) + sizeof(height_));
}

Size2i::~Size2i() {
  // @@protoc_insertion_point(destructor:caffe.Size2i)
  SharedDtor();
}

void Size2i::SharedDtor() {
}

void Size2i::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Size2i::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Size2i_descriptor_;
}

const Size2i& Size2i::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Size2i> Size2i_default_instance_;

Size2i* Size2i::New(::google::protobuf::Arena* arena) const {
  Size2i* n = new Size2i;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Size2i::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.Size2i)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Size2i, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Size2i*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(width_, height_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Size2i::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.Size2i)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 width = 1;
      case 1: {
        if (tag == 8) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }

      // required uint32 height = 2;
      case 2: {
        if (tag == 16) {
         parse_height:
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.Size2i)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.Size2i)
  return false;
#undef DO_
}

void Size2i::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.Size2i)
  // required uint32 width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->width(), output);
  }

  // required uint32 height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.Size2i)
}

::google::protobuf::uint8* Size2i::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.Size2i)
  // required uint32 width = 1;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->width(), target);
  }

  // required uint32 height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.Size2i)
  return target;
}

size_t Size2i::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe.Size2i)
  size_t total_size = 0;

  if (has_width()) {
    // required uint32 width = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  if (has_height()) {
    // required uint32 height = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  return total_size;
}
size_t Size2i::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.Size2i)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 width = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());

    // required uint32 height = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Size2i::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.Size2i)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Size2i* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Size2i>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.Size2i)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.Size2i)
    UnsafeMergeFrom(*source);
  }
}

void Size2i::MergeFrom(const Size2i& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.Size2i)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Size2i::UnsafeMergeFrom(const Size2i& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Size2i::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.Size2i)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Size2i::CopyFrom(const Size2i& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.Size2i)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Size2i::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Size2i::Swap(Size2i* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Size2i::InternalSwap(Size2i* other) {
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Size2i::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Size2i_descriptor_;
  metadata.reflection = Size2i_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Size2i

// required uint32 width = 1;
bool Size2i::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Size2i::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
void Size2i::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
void Size2i::clear_width() {
  width_ = 0u;
  clear_has_width();
}
::google::protobuf::uint32 Size2i::width() const {
  // @@protoc_insertion_point(field_get:caffe.Size2i.width)
  return width_;
}
void Size2i::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.Size2i.width)
}

// required uint32 height = 2;
bool Size2i::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Size2i::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
void Size2i::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
void Size2i::clear_height() {
  height_ = 0u;
  clear_has_height();
}
::google::protobuf::uint32 Size2i::height() const {
  // @@protoc_insertion_point(field_get:caffe.Size2i.height)
  return height_;
}
void Size2i::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.Size2i.height)
}

inline const Size2i* Size2i::internal_default_instance() {
  return &Size2i_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Size2f::kWidthFieldNumber;
const int Size2f::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Size2f::Size2f()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.Size2f)
}

void Size2f::InitAsDefaultInstance() {
}

Size2f::Size2f(const Size2f& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.Size2f)
}

void Size2f::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&width_, 0, reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_) + sizeof(height_));
}

Size2f::~Size2f() {
  // @@protoc_insertion_point(destructor:caffe.Size2f)
  SharedDtor();
}

void Size2f::SharedDtor() {
}

void Size2f::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Size2f::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Size2f_descriptor_;
}

const Size2f& Size2f::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Size2f> Size2f_default_instance_;

Size2f* Size2f::New(::google::protobuf::Arena* arena) const {
  Size2f* n = new Size2f;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Size2f::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.Size2f)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Size2f, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Size2f*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(width_, height_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Size2f::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.Size2f)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float width = 1;
      case 1: {
        if (tag == 13) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_height;
        break;
      }

      // required float height = 2;
      case 2: {
        if (tag == 21) {
         parse_height:
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.Size2f)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.Size2f)
  return false;
#undef DO_
}

void Size2f::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.Size2f)
  // required float width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->width(), output);
  }

  // required float height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.Size2f)
}

::google::protobuf::uint8* Size2f::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.Size2f)
  // required float width = 1;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->width(), target);
  }

  // required float height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.Size2f)
  return target;
}

size_t Size2f::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe.Size2f)
  size_t total_size = 0;

  if (has_width()) {
    // required float width = 1;
    total_size += 1 + 4;
  }

  if (has_height()) {
    // required float height = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Size2f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.Size2f)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float width = 1;
    total_size += 1 + 4;

    // required float height = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Size2f::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.Size2f)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Size2f* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Size2f>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.Size2f)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.Size2f)
    UnsafeMergeFrom(*source);
  }
}

void Size2f::MergeFrom(const Size2f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.Size2f)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Size2f::UnsafeMergeFrom(const Size2f& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Size2f::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.Size2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Size2f::CopyFrom(const Size2f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.Size2f)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Size2f::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Size2f::Swap(Size2f* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Size2f::InternalSwap(Size2f* other) {
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Size2f::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Size2f_descriptor_;
  metadata.reflection = Size2f_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Size2f

// required float width = 1;
bool Size2f::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Size2f::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
void Size2f::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
void Size2f::clear_width() {
  width_ = 0;
  clear_has_width();
}
float Size2f::width() const {
  // @@protoc_insertion_point(field_get:caffe.Size2f.width)
  return width_;
}
void Size2f::set_width(float value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.Size2f.width)
}

// required float height = 2;
bool Size2f::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Size2f::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
void Size2f::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
void Size2f::clear_height() {
  height_ = 0;
  clear_has_height();
}
float Size2f::height() const {
  // @@protoc_insertion_point(field_get:caffe.Size2f.height)
  return height_;
}
void Size2f::set_height(float value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.Size2f.height)
}

inline const Size2f* Size2f::internal_default_instance() {
  return &Size2f_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rect2f::kTopLeftFieldNumber;
const int Rect2f::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rect2f::Rect2f()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.Rect2f)
}

void Rect2f::InitAsDefaultInstance() {
  top_left_ = const_cast< ::caffe::Point2f*>(
      ::caffe::Point2f::internal_default_instance());
  size_ = const_cast< ::caffe::Size2f*>(
      ::caffe::Size2f::internal_default_instance());
}

Rect2f::Rect2f(const Rect2f& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.Rect2f)
}

void Rect2f::SharedCtor() {
  _cached_size_ = 0;
  top_left_ = NULL;
  size_ = NULL;
}

Rect2f::~Rect2f() {
  // @@protoc_insertion_point(destructor:caffe.Rect2f)
  SharedDtor();
}

void Rect2f::SharedDtor() {
  if (this != &Rect2f_default_instance_.get()) {
    delete top_left_;
    delete size_;
  }
}

void Rect2f::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rect2f::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rect2f_descriptor_;
}

const Rect2f& Rect2f::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Rect2f> Rect2f_default_instance_;

Rect2f* Rect2f::New(::google::protobuf::Arena* arena) const {
  Rect2f* n = new Rect2f;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Rect2f::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.Rect2f)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_top_left()) {
      if (top_left_ != NULL) top_left_->::caffe::Point2f::Clear();
    }
    if (has_size()) {
      if (size_ != NULL) size_->::caffe::Size2f::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Rect2f::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.Rect2f)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .caffe.Point2f top_left = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_top_left()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_size;
        break;
      }

      // required .caffe.Size2f size = 2;
      case 2: {
        if (tag == 18) {
         parse_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_size()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.Rect2f)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.Rect2f)
  return false;
#undef DO_
}

void Rect2f::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.Rect2f)
  // required .caffe.Point2f top_left = 1;
  if (has_top_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->top_left_, output);
  }

  // required .caffe.Size2f size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->size_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.Rect2f)
}

::google::protobuf::uint8* Rect2f::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.Rect2f)
  // required .caffe.Point2f top_left = 1;
  if (has_top_left()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->top_left_, false, target);
  }

  // required .caffe.Size2f size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->size_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.Rect2f)
  return target;
}

size_t Rect2f::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe.Rect2f)
  size_t total_size = 0;

  if (has_top_left()) {
    // required .caffe.Point2f top_left = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->top_left_);
  }

  if (has_size()) {
    // required .caffe.Size2f size = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->size_);
  }

  return total_size;
}
size_t Rect2f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.Rect2f)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .caffe.Point2f top_left = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->top_left_);

    // required .caffe.Size2f size = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->size_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rect2f::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.Rect2f)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Rect2f* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Rect2f>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.Rect2f)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.Rect2f)
    UnsafeMergeFrom(*source);
  }
}

void Rect2f::MergeFrom(const Rect2f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.Rect2f)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Rect2f::UnsafeMergeFrom(const Rect2f& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_top_left()) {
      mutable_top_left()->::caffe::Point2f::MergeFrom(from.top_left());
    }
    if (from.has_size()) {
      mutable_size()->::caffe::Size2f::MergeFrom(from.size());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Rect2f::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.Rect2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rect2f::CopyFrom(const Rect2f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.Rect2f)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Rect2f::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_top_left()) {
    if (!this->top_left_->IsInitialized()) return false;
  }
  if (has_size()) {
    if (!this->size_->IsInitialized()) return false;
  }
  return true;
}

void Rect2f::Swap(Rect2f* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rect2f::InternalSwap(Rect2f* other) {
  std::swap(top_left_, other->top_left_);
  std::swap(size_, other->size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Rect2f::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rect2f_descriptor_;
  metadata.reflection = Rect2f_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Rect2f

// required .caffe.Point2f top_left = 1;
bool Rect2f::has_top_left() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Rect2f::set_has_top_left() {
  _has_bits_[0] |= 0x00000001u;
}
void Rect2f::clear_has_top_left() {
  _has_bits_[0] &= ~0x00000001u;
}
void Rect2f::clear_top_left() {
  if (top_left_ != NULL) top_left_->::caffe::Point2f::Clear();
  clear_has_top_left();
}
const ::caffe::Point2f& Rect2f::top_left() const {
  // @@protoc_insertion_point(field_get:caffe.Rect2f.top_left)
  return top_left_ != NULL ? *top_left_
                         : *::caffe::Point2f::internal_default_instance();
}
::caffe::Point2f* Rect2f::mutable_top_left() {
  set_has_top_left();
  if (top_left_ == NULL) {
    top_left_ = new ::caffe::Point2f;
  }
  // @@protoc_insertion_point(field_mutable:caffe.Rect2f.top_left)
  return top_left_;
}
::caffe::Point2f* Rect2f::release_top_left() {
  // @@protoc_insertion_point(field_release:caffe.Rect2f.top_left)
  clear_has_top_left();
  ::caffe::Point2f* temp = top_left_;
  top_left_ = NULL;
  return temp;
}
void Rect2f::set_allocated_top_left(::caffe::Point2f* top_left) {
  delete top_left_;
  top_left_ = top_left;
  if (top_left) {
    set_has_top_left();
  } else {
    clear_has_top_left();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.Rect2f.top_left)
}

// required .caffe.Size2f size = 2;
bool Rect2f::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Rect2f::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
void Rect2f::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void Rect2f::clear_size() {
  if (size_ != NULL) size_->::caffe::Size2f::Clear();
  clear_has_size();
}
const ::caffe::Size2f& Rect2f::size() const {
  // @@protoc_insertion_point(field_get:caffe.Rect2f.size)
  return size_ != NULL ? *size_
                         : *::caffe::Size2f::internal_default_instance();
}
::caffe::Size2f* Rect2f::mutable_size() {
  set_has_size();
  if (size_ == NULL) {
    size_ = new ::caffe::Size2f;
  }
  // @@protoc_insertion_point(field_mutable:caffe.Rect2f.size)
  return size_;
}
::caffe::Size2f* Rect2f::release_size() {
  // @@protoc_insertion_point(field_release:caffe.Rect2f.size)
  clear_has_size();
  ::caffe::Size2f* temp = size_;
  size_ = NULL;
  return temp;
}
void Rect2f::set_allocated_size(::caffe::Size2f* size) {
  delete size_;
  size_ = size;
  if (size) {
    set_has_size();
  } else {
    clear_has_size();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.Rect2f.size)
}

inline const Rect2f* Rect2f::internal_default_instance() {
  return &Rect2f_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rect2i::kTopLeftFieldNumber;
const int Rect2i::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rect2i::Rect2i()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.Rect2i)
}

void Rect2i::InitAsDefaultInstance() {
  top_left_ = const_cast< ::caffe::Point2i*>(
      ::caffe::Point2i::internal_default_instance());
  size_ = const_cast< ::caffe::Size2i*>(
      ::caffe::Size2i::internal_default_instance());
}

Rect2i::Rect2i(const Rect2i& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.Rect2i)
}

void Rect2i::SharedCtor() {
  _cached_size_ = 0;
  top_left_ = NULL;
  size_ = NULL;
}

Rect2i::~Rect2i() {
  // @@protoc_insertion_point(destructor:caffe.Rect2i)
  SharedDtor();
}

void Rect2i::SharedDtor() {
  if (this != &Rect2i_default_instance_.get()) {
    delete top_left_;
    delete size_;
  }
}

void Rect2i::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rect2i::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rect2i_descriptor_;
}

const Rect2i& Rect2i::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Rect2i> Rect2i_default_instance_;

Rect2i* Rect2i::New(::google::protobuf::Arena* arena) const {
  Rect2i* n = new Rect2i;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Rect2i::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.Rect2i)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_top_left()) {
      if (top_left_ != NULL) top_left_->::caffe::Point2i::Clear();
    }
    if (has_size()) {
      if (size_ != NULL) size_->::caffe::Size2i::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Rect2i::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.Rect2i)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .caffe.Point2i top_left = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_top_left()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_size;
        break;
      }

      // required .caffe.Size2i size = 2;
      case 2: {
        if (tag == 18) {
         parse_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_size()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.Rect2i)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.Rect2i)
  return false;
#undef DO_
}

void Rect2i::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.Rect2i)
  // required .caffe.Point2i top_left = 1;
  if (has_top_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->top_left_, output);
  }

  // required .caffe.Size2i size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->size_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.Rect2i)
}

::google::protobuf::uint8* Rect2i::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.Rect2i)
  // required .caffe.Point2i top_left = 1;
  if (has_top_left()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->top_left_, false, target);
  }

  // required .caffe.Size2i size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->size_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.Rect2i)
  return target;
}

size_t Rect2i::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe.Rect2i)
  size_t total_size = 0;

  if (has_top_left()) {
    // required .caffe.Point2i top_left = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->top_left_);
  }

  if (has_size()) {
    // required .caffe.Size2i size = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->size_);
  }

  return total_size;
}
size_t Rect2i::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.Rect2i)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .caffe.Point2i top_left = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->top_left_);

    // required .caffe.Size2i size = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->size_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rect2i::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.Rect2i)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Rect2i* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Rect2i>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.Rect2i)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.Rect2i)
    UnsafeMergeFrom(*source);
  }
}

void Rect2i::MergeFrom(const Rect2i& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.Rect2i)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Rect2i::UnsafeMergeFrom(const Rect2i& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_top_left()) {
      mutable_top_left()->::caffe::Point2i::MergeFrom(from.top_left());
    }
    if (from.has_size()) {
      mutable_size()->::caffe::Size2i::MergeFrom(from.size());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Rect2i::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.Rect2i)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rect2i::CopyFrom(const Rect2i& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.Rect2i)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Rect2i::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_top_left()) {
    if (!this->top_left_->IsInitialized()) return false;
  }
  if (has_size()) {
    if (!this->size_->IsInitialized()) return false;
  }
  return true;
}

void Rect2i::Swap(Rect2i* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rect2i::InternalSwap(Rect2i* other) {
  std::swap(top_left_, other->top_left_);
  std::swap(size_, other->size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Rect2i::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rect2i_descriptor_;
  metadata.reflection = Rect2i_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Rect2i

// required .caffe.Point2i top_left = 1;
bool Rect2i::has_top_left() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Rect2i::set_has_top_left() {
  _has_bits_[0] |= 0x00000001u;
}
void Rect2i::clear_has_top_left() {
  _has_bits_[0] &= ~0x00000001u;
}
void Rect2i::clear_top_left() {
  if (top_left_ != NULL) top_left_->::caffe::Point2i::Clear();
  clear_has_top_left();
}
const ::caffe::Point2i& Rect2i::top_left() const {
  // @@protoc_insertion_point(field_get:caffe.Rect2i.top_left)
  return top_left_ != NULL ? *top_left_
                         : *::caffe::Point2i::internal_default_instance();
}
::caffe::Point2i* Rect2i::mutable_top_left() {
  set_has_top_left();
  if (top_left_ == NULL) {
    top_left_ = new ::caffe::Point2i;
  }
  // @@protoc_insertion_point(field_mutable:caffe.Rect2i.top_left)
  return top_left_;
}
::caffe::Point2i* Rect2i::release_top_left() {
  // @@protoc_insertion_point(field_release:caffe.Rect2i.top_left)
  clear_has_top_left();
  ::caffe::Point2i* temp = top_left_;
  top_left_ = NULL;
  return temp;
}
void Rect2i::set_allocated_top_left(::caffe::Point2i* top_left) {
  delete top_left_;
  top_left_ = top_left;
  if (top_left) {
    set_has_top_left();
  } else {
    clear_has_top_left();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.Rect2i.top_left)
}

// required .caffe.Size2i size = 2;
bool Rect2i::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Rect2i::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
void Rect2i::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void Rect2i::clear_size() {
  if (size_ != NULL) size_->::caffe::Size2i::Clear();
  clear_has_size();
}
const ::caffe::Size2i& Rect2i::size() const {
  // @@protoc_insertion_point(field_get:caffe.Rect2i.size)
  return size_ != NULL ? *size_
                         : *::caffe::Size2i::internal_default_instance();
}
::caffe::Size2i* Rect2i::mutable_size() {
  set_has_size();
  if (size_ == NULL) {
    size_ = new ::caffe::Size2i;
  }
  // @@protoc_insertion_point(field_mutable:caffe.Rect2i.size)
  return size_;
}
::caffe::Size2i* Rect2i::release_size() {
  // @@protoc_insertion_point(field_release:caffe.Rect2i.size)
  clear_has_size();
  ::caffe::Size2i* temp = size_;
  size_ = NULL;
  return temp;
}
void Rect2i::set_allocated_size(::caffe::Size2i* size) {
  delete size_;
  size_ = size;
  if (size) {
    set_has_size();
  } else {
    clear_has_size();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.Rect2i.size)
}

inline const Rect2i* Rect2i::internal_default_instance() {
  return &Rect2i_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ActivationRegionParameter_ActivationMethod_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivationRegionParameter_ActivationMethod_descriptor_;
}
bool ActivationRegionParameter_ActivationMethod_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ActivationRegionParameter_ActivationMethod ActivationRegionParameter::WHOLE;
const ActivationRegionParameter_ActivationMethod ActivationRegionParameter::ANY;
const ActivationRegionParameter_ActivationMethod ActivationRegionParameter::CENTER;
const ActivationRegionParameter_ActivationMethod ActivationRegionParameter::ActivationMethod_MIN;
const ActivationRegionParameter_ActivationMethod ActivationRegionParameter::ActivationMethod_MAX;
const int ActivationRegionParameter::ActivationMethod_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActivationRegionParameter::kMethodFieldNumber;
const int ActivationRegionParameter::kRegionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActivationRegionParameter::ActivationRegionParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ActivationRegionParameter)
}

void ActivationRegionParameter::InitAsDefaultInstance() {
  region_ = const_cast< ::caffe::Rect2i*>(
      ::caffe::Rect2i::internal_default_instance());
}

ActivationRegionParameter::ActivationRegionParameter(const ActivationRegionParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ActivationRegionParameter)
}

void ActivationRegionParameter::SharedCtor() {
  _cached_size_ = 0;
  region_ = NULL;
  method_ = 1;
}

ActivationRegionParameter::~ActivationRegionParameter() {
  // @@protoc_insertion_point(destructor:caffe.ActivationRegionParameter)
  SharedDtor();
}

void ActivationRegionParameter::SharedDtor() {
  if (this != &ActivationRegionParameter_default_instance_.get()) {
    delete region_;
  }
}

void ActivationRegionParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivationRegionParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivationRegionParameter_descriptor_;
}

const ActivationRegionParameter& ActivationRegionParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ActivationRegionParameter> ActivationRegionParameter_default_instance_;

ActivationRegionParameter* ActivationRegionParameter::New(::google::protobuf::Arena* arena) const {
  ActivationRegionParameter* n = new ActivationRegionParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActivationRegionParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ActivationRegionParameter)
  if (_has_bits_[0 / 32] & 3u) {
    method_ = 1;
    if (has_region()) {
      if (region_ != NULL) region_->::caffe::Rect2i::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActivationRegionParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ActivationRegionParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.ActivationRegionParameter.ActivationMethod method = 1 [default = WHOLE];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::ActivationRegionParameter_ActivationMethod_IsValid(value)) {
            set_method(static_cast< ::caffe::ActivationRegionParameter_ActivationMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_region;
        break;
      }

      // optional .caffe.Rect2i region = 2;
      case 2: {
        if (tag == 18) {
         parse_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ActivationRegionParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ActivationRegionParameter)
  return false;
#undef DO_
}

void ActivationRegionParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ActivationRegionParameter)
  // optional .caffe.ActivationRegionParameter.ActivationMethod method = 1 [default = WHOLE];
  if (has_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->method(), output);
  }

  // optional .caffe.Rect2i region = 2;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->region_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ActivationRegionParameter)
}

::google::protobuf::uint8* ActivationRegionParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ActivationRegionParameter)
  // optional .caffe.ActivationRegionParameter.ActivationMethod method = 1 [default = WHOLE];
  if (has_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->method(), target);
  }

  // optional .caffe.Rect2i region = 2;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->region_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ActivationRegionParameter)
  return target;
}

size_t ActivationRegionParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ActivationRegionParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .caffe.ActivationRegionParameter.ActivationMethod method = 1 [default = WHOLE];
    if (has_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->method());
    }

    // optional .caffe.Rect2i region = 2;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->region_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivationRegionParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ActivationRegionParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ActivationRegionParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActivationRegionParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ActivationRegionParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ActivationRegionParameter)
    UnsafeMergeFrom(*source);
  }
}

void ActivationRegionParameter::MergeFrom(const ActivationRegionParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ActivationRegionParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ActivationRegionParameter::UnsafeMergeFrom(const ActivationRegionParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_method()) {
      set_method(from.method());
    }
    if (from.has_region()) {
      mutable_region()->::caffe::Rect2i::MergeFrom(from.region());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ActivationRegionParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ActivationRegionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivationRegionParameter::CopyFrom(const ActivationRegionParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ActivationRegionParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ActivationRegionParameter::IsInitialized() const {

  if (has_region()) {
    if (!this->region_->IsInitialized()) return false;
  }
  return true;
}

void ActivationRegionParameter::Swap(ActivationRegionParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActivationRegionParameter::InternalSwap(ActivationRegionParameter* other) {
  std::swap(method_, other->method_);
  std::swap(region_, other->region_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActivationRegionParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivationRegionParameter_descriptor_;
  metadata.reflection = ActivationRegionParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActivationRegionParameter

// optional .caffe.ActivationRegionParameter.ActivationMethod method = 1 [default = WHOLE];
bool ActivationRegionParameter::has_method() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ActivationRegionParameter::set_has_method() {
  _has_bits_[0] |= 0x00000001u;
}
void ActivationRegionParameter::clear_has_method() {
  _has_bits_[0] &= ~0x00000001u;
}
void ActivationRegionParameter::clear_method() {
  method_ = 1;
  clear_has_method();
}
::caffe::ActivationRegionParameter_ActivationMethod ActivationRegionParameter::method() const {
  // @@protoc_insertion_point(field_get:caffe.ActivationRegionParameter.method)
  return static_cast< ::caffe::ActivationRegionParameter_ActivationMethod >(method_);
}
void ActivationRegionParameter::set_method(::caffe::ActivationRegionParameter_ActivationMethod value) {
  assert(::caffe::ActivationRegionParameter_ActivationMethod_IsValid(value));
  set_has_method();
  method_ = value;
  // @@protoc_insertion_point(field_set:caffe.ActivationRegionParameter.method)
}

// optional .caffe.Rect2i region = 2;
bool ActivationRegionParameter::has_region() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ActivationRegionParameter::set_has_region() {
  _has_bits_[0] |= 0x00000002u;
}
void ActivationRegionParameter::clear_has_region() {
  _has_bits_[0] &= ~0x00000002u;
}
void ActivationRegionParameter::clear_region() {
  if (region_ != NULL) region_->::caffe::Rect2i::Clear();
  clear_has_region();
}
const ::caffe::Rect2i& ActivationRegionParameter::region() const {
  // @@protoc_insertion_point(field_get:caffe.ActivationRegionParameter.region)
  return region_ != NULL ? *region_
                         : *::caffe::Rect2i::internal_default_instance();
}
::caffe::Rect2i* ActivationRegionParameter::mutable_region() {
  set_has_region();
  if (region_ == NULL) {
    region_ = new ::caffe::Rect2i;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ActivationRegionParameter.region)
  return region_;
}
::caffe::Rect2i* ActivationRegionParameter::release_region() {
  // @@protoc_insertion_point(field_release:caffe.ActivationRegionParameter.region)
  clear_has_region();
  ::caffe::Rect2i* temp = region_;
  region_ = NULL;
  return temp;
}
void ActivationRegionParameter::set_allocated_region(::caffe::Rect2i* region) {
  delete region_;
  region_ = region;
  if (region) {
    set_has_region();
  } else {
    clear_has_region();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ActivationRegionParameter.region)
}

inline const ActivationRegionParameter* ActivationRegionParameter::internal_default_instance() {
  return &ActivationRegionParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GTMapDataParameter::kReceptiveFieldFieldNumber;
const int GTMapDataParameter::kHorizontalStrideFieldNumber;
const int GTMapDataParameter::kVerticalStrideFieldNumber;
const int GTMapDataParameter::kActivationRegionParamFieldNumber;
const int GTMapDataParameter::kPatchOffsetNormalizationFieldNumber;
const int GTMapDataParameter::kBboxNormalizationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GTMapDataParameter::GTMapDataParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.GTMapDataParameter)
}

void GTMapDataParameter::InitAsDefaultInstance() {
  receptive_field_ = const_cast< ::caffe::Size2i*>(
      ::caffe::Size2i::internal_default_instance());
  activation_region_param_ = const_cast< ::caffe::ActivationRegionParameter*>(
      ::caffe::ActivationRegionParameter::internal_default_instance());
}

GTMapDataParameter::GTMapDataParameter(const GTMapDataParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.GTMapDataParameter)
}

void GTMapDataParameter::SharedCtor() {
  _cached_size_ = 0;
  receptive_field_ = NULL;
  activation_region_param_ = NULL;
  ::memset(&horizontal_stride_, 0, reinterpret_cast<char*>(&bbox_normalization_) -
    reinterpret_cast<char*>(&horizontal_stride_) + sizeof(bbox_normalization_));
}

GTMapDataParameter::~GTMapDataParameter() {
  // @@protoc_insertion_point(destructor:caffe.GTMapDataParameter)
  SharedDtor();
}

void GTMapDataParameter::SharedDtor() {
  if (this != &GTMapDataParameter_default_instance_.get()) {
    delete receptive_field_;
    delete activation_region_param_;
  }
}

void GTMapDataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GTMapDataParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GTMapDataParameter_descriptor_;
}

const GTMapDataParameter& GTMapDataParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GTMapDataParameter> GTMapDataParameter_default_instance_;

GTMapDataParameter* GTMapDataParameter::New(::google::protobuf::Arena* arena) const {
  GTMapDataParameter* n = new GTMapDataParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GTMapDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.GTMapDataParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GTMapDataParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GTMapDataParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(horizontal_stride_, bbox_normalization_);
    if (has_receptive_field()) {
      if (receptive_field_ != NULL) receptive_field_->::caffe::Size2i::Clear();
    }
    if (has_activation_region_param()) {
      if (activation_region_param_ != NULL) activation_region_param_->::caffe::ActivationRegionParameter::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GTMapDataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.GTMapDataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .caffe.Size2i receptive_field = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receptive_field()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_horizontal_stride;
        break;
      }

      // required uint32 horizontal_stride = 2;
      case 2: {
        if (tag == 16) {
         parse_horizontal_stride:
          set_has_horizontal_stride();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &horizontal_stride_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_vertical_stride;
        break;
      }

      // required uint32 vertical_stride = 3;
      case 3: {
        if (tag == 24) {
         parse_vertical_stride:
          set_has_vertical_stride();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vertical_stride_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_activation_region_param;
        break;
      }

      // optional .caffe.ActivationRegionParameter activation_region_param = 4;
      case 4: {
        if (tag == 34) {
         parse_activation_region_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activation_region_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_patch_offset_normalization;
        break;
      }

      // required bool patch_offset_normalization = 5;
      case 5: {
        if (tag == 40) {
         parse_patch_offset_normalization:
          set_has_patch_offset_normalization();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &patch_offset_normalization_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_bbox_normalization;
        break;
      }

      // required bool bbox_normalization = 6;
      case 6: {
        if (tag == 48) {
         parse_bbox_normalization:
          set_has_bbox_normalization();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bbox_normalization_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.GTMapDataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.GTMapDataParameter)
  return false;
#undef DO_
}

void GTMapDataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.GTMapDataParameter)
  // required .caffe.Size2i receptive_field = 1;
  if (has_receptive_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->receptive_field_, output);
  }

  // required uint32 horizontal_stride = 2;
  if (has_horizontal_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->horizontal_stride(), output);
  }

  // required uint32 vertical_stride = 3;
  if (has_vertical_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->vertical_stride(), output);
  }

  // optional .caffe.ActivationRegionParameter activation_region_param = 4;
  if (has_activation_region_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->activation_region_param_, output);
  }

  // required bool patch_offset_normalization = 5;
  if (has_patch_offset_normalization()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->patch_offset_normalization(), output);
  }

  // required bool bbox_normalization = 6;
  if (has_bbox_normalization()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->bbox_normalization(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.GTMapDataParameter)
}

::google::protobuf::uint8* GTMapDataParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.GTMapDataParameter)
  // required .caffe.Size2i receptive_field = 1;
  if (has_receptive_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->receptive_field_, false, target);
  }

  // required uint32 horizontal_stride = 2;
  if (has_horizontal_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->horizontal_stride(), target);
  }

  // required uint32 vertical_stride = 3;
  if (has_vertical_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->vertical_stride(), target);
  }

  // optional .caffe.ActivationRegionParameter activation_region_param = 4;
  if (has_activation_region_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->activation_region_param_, false, target);
  }

  // required bool patch_offset_normalization = 5;
  if (has_patch_offset_normalization()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->patch_offset_normalization(), target);
  }

  // required bool bbox_normalization = 6;
  if (has_bbox_normalization()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->bbox_normalization(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.GTMapDataParameter)
  return target;
}

size_t GTMapDataParameter::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe.GTMapDataParameter)
  size_t total_size = 0;

  if (has_receptive_field()) {
    // required .caffe.Size2i receptive_field = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->receptive_field_);
  }

  if (has_horizontal_stride()) {
    // required uint32 horizontal_stride = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->horizontal_stride());
  }

  if (has_vertical_stride()) {
    // required uint32 vertical_stride = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vertical_stride());
  }

  if (has_patch_offset_normalization()) {
    // required bool patch_offset_normalization = 5;
    total_size += 1 + 1;
  }

  if (has_bbox_normalization()) {
    // required bool bbox_normalization = 6;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t GTMapDataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.GTMapDataParameter)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000037) ^ 0x00000037) == 0) {  // All required fields are present.
    // required .caffe.Size2i receptive_field = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->receptive_field_);

    // required uint32 horizontal_stride = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->horizontal_stride());

    // required uint32 vertical_stride = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vertical_stride());

    // required bool patch_offset_normalization = 5;
    total_size += 1 + 1;

    // required bool bbox_normalization = 6;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .caffe.ActivationRegionParameter activation_region_param = 4;
  if (has_activation_region_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->activation_region_param_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GTMapDataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.GTMapDataParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GTMapDataParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GTMapDataParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.GTMapDataParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.GTMapDataParameter)
    UnsafeMergeFrom(*source);
  }
}

void GTMapDataParameter::MergeFrom(const GTMapDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.GTMapDataParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GTMapDataParameter::UnsafeMergeFrom(const GTMapDataParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_receptive_field()) {
      mutable_receptive_field()->::caffe::Size2i::MergeFrom(from.receptive_field());
    }
    if (from.has_horizontal_stride()) {
      set_horizontal_stride(from.horizontal_stride());
    }
    if (from.has_vertical_stride()) {
      set_vertical_stride(from.vertical_stride());
    }
    if (from.has_activation_region_param()) {
      mutable_activation_region_param()->::caffe::ActivationRegionParameter::MergeFrom(from.activation_region_param());
    }
    if (from.has_patch_offset_normalization()) {
      set_patch_offset_normalization(from.patch_offset_normalization());
    }
    if (from.has_bbox_normalization()) {
      set_bbox_normalization(from.bbox_normalization());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void GTMapDataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.GTMapDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GTMapDataParameter::CopyFrom(const GTMapDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.GTMapDataParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GTMapDataParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000037) != 0x00000037) return false;

  if (has_receptive_field()) {
    if (!this->receptive_field_->IsInitialized()) return false;
  }
  if (has_activation_region_param()) {
    if (!this->activation_region_param_->IsInitialized()) return false;
  }
  return true;
}

void GTMapDataParameter::Swap(GTMapDataParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GTMapDataParameter::InternalSwap(GTMapDataParameter* other) {
  std::swap(receptive_field_, other->receptive_field_);
  std::swap(horizontal_stride_, other->horizontal_stride_);
  std::swap(vertical_stride_, other->vertical_stride_);
  std::swap(activation_region_param_, other->activation_region_param_);
  std::swap(patch_offset_normalization_, other->patch_offset_normalization_);
  std::swap(bbox_normalization_, other->bbox_normalization_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GTMapDataParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GTMapDataParameter_descriptor_;
  metadata.reflection = GTMapDataParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GTMapDataParameter

// required .caffe.Size2i receptive_field = 1;
bool GTMapDataParameter::has_receptive_field() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GTMapDataParameter::set_has_receptive_field() {
  _has_bits_[0] |= 0x00000001u;
}
void GTMapDataParameter::clear_has_receptive_field() {
  _has_bits_[0] &= ~0x00000001u;
}
void GTMapDataParameter::clear_receptive_field() {
  if (receptive_field_ != NULL) receptive_field_->::caffe::Size2i::Clear();
  clear_has_receptive_field();
}
const ::caffe::Size2i& GTMapDataParameter::receptive_field() const {
  // @@protoc_insertion_point(field_get:caffe.GTMapDataParameter.receptive_field)
  return receptive_field_ != NULL ? *receptive_field_
                         : *::caffe::Size2i::internal_default_instance();
}
::caffe::Size2i* GTMapDataParameter::mutable_receptive_field() {
  set_has_receptive_field();
  if (receptive_field_ == NULL) {
    receptive_field_ = new ::caffe::Size2i;
  }
  // @@protoc_insertion_point(field_mutable:caffe.GTMapDataParameter.receptive_field)
  return receptive_field_;
}
::caffe::Size2i* GTMapDataParameter::release_receptive_field() {
  // @@protoc_insertion_point(field_release:caffe.GTMapDataParameter.receptive_field)
  clear_has_receptive_field();
  ::caffe::Size2i* temp = receptive_field_;
  receptive_field_ = NULL;
  return temp;
}
void GTMapDataParameter::set_allocated_receptive_field(::caffe::Size2i* receptive_field) {
  delete receptive_field_;
  receptive_field_ = receptive_field;
  if (receptive_field) {
    set_has_receptive_field();
  } else {
    clear_has_receptive_field();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.GTMapDataParameter.receptive_field)
}

// required uint32 horizontal_stride = 2;
bool GTMapDataParameter::has_horizontal_stride() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GTMapDataParameter::set_has_horizontal_stride() {
  _has_bits_[0] |= 0x00000002u;
}
void GTMapDataParameter::clear_has_horizontal_stride() {
  _has_bits_[0] &= ~0x00000002u;
}
void GTMapDataParameter::clear_horizontal_stride() {
  horizontal_stride_ = 0u;
  clear_has_horizontal_stride();
}
::google::protobuf::uint32 GTMapDataParameter::horizontal_stride() const {
  // @@protoc_insertion_point(field_get:caffe.GTMapDataParameter.horizontal_stride)
  return horizontal_stride_;
}
void GTMapDataParameter::set_horizontal_stride(::google::protobuf::uint32 value) {
  set_has_horizontal_stride();
  horizontal_stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.GTMapDataParameter.horizontal_stride)
}

// required uint32 vertical_stride = 3;
bool GTMapDataParameter::has_vertical_stride() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GTMapDataParameter::set_has_vertical_stride() {
  _has_bits_[0] |= 0x00000004u;
}
void GTMapDataParameter::clear_has_vertical_stride() {
  _has_bits_[0] &= ~0x00000004u;
}
void GTMapDataParameter::clear_vertical_stride() {
  vertical_stride_ = 0u;
  clear_has_vertical_stride();
}
::google::protobuf::uint32 GTMapDataParameter::vertical_stride() const {
  // @@protoc_insertion_point(field_get:caffe.GTMapDataParameter.vertical_stride)
  return vertical_stride_;
}
void GTMapDataParameter::set_vertical_stride(::google::protobuf::uint32 value) {
  set_has_vertical_stride();
  vertical_stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.GTMapDataParameter.vertical_stride)
}

// optional .caffe.ActivationRegionParameter activation_region_param = 4;
bool GTMapDataParameter::has_activation_region_param() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GTMapDataParameter::set_has_activation_region_param() {
  _has_bits_[0] |= 0x00000008u;
}
void GTMapDataParameter::clear_has_activation_region_param() {
  _has_bits_[0] &= ~0x00000008u;
}
void GTMapDataParameter::clear_activation_region_param() {
  if (activation_region_param_ != NULL) activation_region_param_->::caffe::ActivationRegionParameter::Clear();
  clear_has_activation_region_param();
}
const ::caffe::ActivationRegionParameter& GTMapDataParameter::activation_region_param() const {
  // @@protoc_insertion_point(field_get:caffe.GTMapDataParameter.activation_region_param)
  return activation_region_param_ != NULL ? *activation_region_param_
                         : *::caffe::ActivationRegionParameter::internal_default_instance();
}
::caffe::ActivationRegionParameter* GTMapDataParameter::mutable_activation_region_param() {
  set_has_activation_region_param();
  if (activation_region_param_ == NULL) {
    activation_region_param_ = new ::caffe::ActivationRegionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.GTMapDataParameter.activation_region_param)
  return activation_region_param_;
}
::caffe::ActivationRegionParameter* GTMapDataParameter::release_activation_region_param() {
  // @@protoc_insertion_point(field_release:caffe.GTMapDataParameter.activation_region_param)
  clear_has_activation_region_param();
  ::caffe::ActivationRegionParameter* temp = activation_region_param_;
  activation_region_param_ = NULL;
  return temp;
}
void GTMapDataParameter::set_allocated_activation_region_param(::caffe::ActivationRegionParameter* activation_region_param) {
  delete activation_region_param_;
  activation_region_param_ = activation_region_param;
  if (activation_region_param) {
    set_has_activation_region_param();
  } else {
    clear_has_activation_region_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.GTMapDataParameter.activation_region_param)
}

// required bool patch_offset_normalization = 5;
bool GTMapDataParameter::has_patch_offset_normalization() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GTMapDataParameter::set_has_patch_offset_normalization() {
  _has_bits_[0] |= 0x00000010u;
}
void GTMapDataParameter::clear_has_patch_offset_normalization() {
  _has_bits_[0] &= ~0x00000010u;
}
void GTMapDataParameter::clear_patch_offset_normalization() {
  patch_offset_normalization_ = false;
  clear_has_patch_offset_normalization();
}
bool GTMapDataParameter::patch_offset_normalization() const {
  // @@protoc_insertion_point(field_get:caffe.GTMapDataParameter.patch_offset_normalization)
  return patch_offset_normalization_;
}
void GTMapDataParameter::set_patch_offset_normalization(bool value) {
  set_has_patch_offset_normalization();
  patch_offset_normalization_ = value;
  // @@protoc_insertion_point(field_set:caffe.GTMapDataParameter.patch_offset_normalization)
}

// required bool bbox_normalization = 6;
bool GTMapDataParameter::has_bbox_normalization() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GTMapDataParameter::set_has_bbox_normalization() {
  _has_bits_[0] |= 0x00000020u;
}
void GTMapDataParameter::clear_has_bbox_normalization() {
  _has_bits_[0] &= ~0x00000020u;
}
void GTMapDataParameter::clear_bbox_normalization() {
  bbox_normalization_ = false;
  clear_has_bbox_normalization();
}
bool GTMapDataParameter::bbox_normalization() const {
  // @@protoc_insertion_point(field_get:caffe.GTMapDataParameter.bbox_normalization)
  return bbox_normalization_;
}
void GTMapDataParameter::set_bbox_normalization(bool value) {
  set_has_bbox_normalization();
  bbox_normalization_ = value;
  // @@protoc_insertion_point(field_set:caffe.GTMapDataParameter.bbox_normalization)
}

inline const GTMapDataParameter* GTMapDataParameter::internal_default_instance() {
  return &GTMapDataParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LabelDiffIgnoreParameter::kIgnoreLabelFieldNumber;
const int LabelDiffIgnoreParameter::kIgnoreRateFieldNumber;
const int LabelDiffIgnoreParameter::kElemWiseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LabelDiffIgnoreParameter::LabelDiffIgnoreParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.LabelDiffIgnoreParameter)
}

void LabelDiffIgnoreParameter::InitAsDefaultInstance() {
}

LabelDiffIgnoreParameter::LabelDiffIgnoreParameter(const LabelDiffIgnoreParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.LabelDiffIgnoreParameter)
}

void LabelDiffIgnoreParameter::SharedCtor() {
  _cached_size_ = 0;
  elem_wise_ = true;
}

LabelDiffIgnoreParameter::~LabelDiffIgnoreParameter() {
  // @@protoc_insertion_point(destructor:caffe.LabelDiffIgnoreParameter)
  SharedDtor();
}

void LabelDiffIgnoreParameter::SharedDtor() {
}

void LabelDiffIgnoreParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LabelDiffIgnoreParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LabelDiffIgnoreParameter_descriptor_;
}

const LabelDiffIgnoreParameter& LabelDiffIgnoreParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<LabelDiffIgnoreParameter> LabelDiffIgnoreParameter_default_instance_;

LabelDiffIgnoreParameter* LabelDiffIgnoreParameter::New(::google::protobuf::Arena* arena) const {
  LabelDiffIgnoreParameter* n = new LabelDiffIgnoreParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LabelDiffIgnoreParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.LabelDiffIgnoreParameter)
  elem_wise_ = true;
  ignore_label_.Clear();
  ignore_rate_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LabelDiffIgnoreParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.LabelDiffIgnoreParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 ignore_label = 1;
      case 1: {
        if (tag == 8) {
         parse_ignore_label:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_ignore_label())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ignore_label())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_ignore_label;
        if (input->ExpectTag(21)) goto parse_ignore_rate;
        break;
      }

      // repeated float ignore_rate = 2;
      case 2: {
        if (tag == 21) {
         parse_ignore_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21, input, this->mutable_ignore_rate())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_ignore_rate())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_ignore_rate;
        if (input->ExpectTag(24)) goto parse_elem_wise;
        break;
      }

      // optional bool elem_wise = 3 [default = true];
      case 3: {
        if (tag == 24) {
         parse_elem_wise:
          set_has_elem_wise();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &elem_wise_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.LabelDiffIgnoreParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.LabelDiffIgnoreParameter)
  return false;
#undef DO_
}

void LabelDiffIgnoreParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.LabelDiffIgnoreParameter)
  // repeated uint32 ignore_label = 1;
  for (int i = 0; i < this->ignore_label_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->ignore_label(i), output);
  }

  // repeated float ignore_rate = 2;
  for (int i = 0; i < this->ignore_rate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->ignore_rate(i), output);
  }

  // optional bool elem_wise = 3 [default = true];
  if (has_elem_wise()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->elem_wise(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.LabelDiffIgnoreParameter)
}

::google::protobuf::uint8* LabelDiffIgnoreParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.LabelDiffIgnoreParameter)
  // repeated uint32 ignore_label = 1;
  for (int i = 0; i < this->ignore_label_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->ignore_label(i), target);
  }

  // repeated float ignore_rate = 2;
  for (int i = 0; i < this->ignore_rate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(2, this->ignore_rate(i), target);
  }

  // optional bool elem_wise = 3 [default = true];
  if (has_elem_wise()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->elem_wise(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.LabelDiffIgnoreParameter)
  return target;
}

size_t LabelDiffIgnoreParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.LabelDiffIgnoreParameter)
  size_t total_size = 0;

  // optional bool elem_wise = 3 [default = true];
  if (has_elem_wise()) {
    total_size += 1 + 1;
  }

  // repeated uint32 ignore_label = 1;
  {
    size_t data_size = 0;
    unsigned int count = this->ignore_label_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->ignore_label(i));
    }
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ignore_label_size());
    total_size += data_size;
  }

  // repeated float ignore_rate = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->ignore_rate_size();
    data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ignore_rate_size());
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LabelDiffIgnoreParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.LabelDiffIgnoreParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LabelDiffIgnoreParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LabelDiffIgnoreParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.LabelDiffIgnoreParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.LabelDiffIgnoreParameter)
    UnsafeMergeFrom(*source);
  }
}

void LabelDiffIgnoreParameter::MergeFrom(const LabelDiffIgnoreParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.LabelDiffIgnoreParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void LabelDiffIgnoreParameter::UnsafeMergeFrom(const LabelDiffIgnoreParameter& from) {
  GOOGLE_DCHECK(&from != this);
  ignore_label_.UnsafeMergeFrom(from.ignore_label_);
  ignore_rate_.UnsafeMergeFrom(from.ignore_rate_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_elem_wise()) {
      set_elem_wise(from.elem_wise());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void LabelDiffIgnoreParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.LabelDiffIgnoreParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelDiffIgnoreParameter::CopyFrom(const LabelDiffIgnoreParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.LabelDiffIgnoreParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool LabelDiffIgnoreParameter::IsInitialized() const {

  return true;
}

void LabelDiffIgnoreParameter::Swap(LabelDiffIgnoreParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LabelDiffIgnoreParameter::InternalSwap(LabelDiffIgnoreParameter* other) {
  ignore_label_.UnsafeArenaSwap(&other->ignore_label_);
  ignore_rate_.UnsafeArenaSwap(&other->ignore_rate_);
  std::swap(elem_wise_, other->elem_wise_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LabelDiffIgnoreParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LabelDiffIgnoreParameter_descriptor_;
  metadata.reflection = LabelDiffIgnoreParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LabelDiffIgnoreParameter

// repeated uint32 ignore_label = 1;
int LabelDiffIgnoreParameter::ignore_label_size() const {
  return ignore_label_.size();
}
void LabelDiffIgnoreParameter::clear_ignore_label() {
  ignore_label_.Clear();
}
::google::protobuf::uint32 LabelDiffIgnoreParameter::ignore_label(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LabelDiffIgnoreParameter.ignore_label)
  return ignore_label_.Get(index);
}
void LabelDiffIgnoreParameter::set_ignore_label(int index, ::google::protobuf::uint32 value) {
  ignore_label_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.LabelDiffIgnoreParameter.ignore_label)
}
void LabelDiffIgnoreParameter::add_ignore_label(::google::protobuf::uint32 value) {
  ignore_label_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.LabelDiffIgnoreParameter.ignore_label)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
LabelDiffIgnoreParameter::ignore_label() const {
  // @@protoc_insertion_point(field_list:caffe.LabelDiffIgnoreParameter.ignore_label)
  return ignore_label_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
LabelDiffIgnoreParameter::mutable_ignore_label() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LabelDiffIgnoreParameter.ignore_label)
  return &ignore_label_;
}

// repeated float ignore_rate = 2;
int LabelDiffIgnoreParameter::ignore_rate_size() const {
  return ignore_rate_.size();
}
void LabelDiffIgnoreParameter::clear_ignore_rate() {
  ignore_rate_.Clear();
}
float LabelDiffIgnoreParameter::ignore_rate(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LabelDiffIgnoreParameter.ignore_rate)
  return ignore_rate_.Get(index);
}
void LabelDiffIgnoreParameter::set_ignore_rate(int index, float value) {
  ignore_rate_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.LabelDiffIgnoreParameter.ignore_rate)
}
void LabelDiffIgnoreParameter::add_ignore_rate(float value) {
  ignore_rate_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.LabelDiffIgnoreParameter.ignore_rate)
}
const ::google::protobuf::RepeatedField< float >&
LabelDiffIgnoreParameter::ignore_rate() const {
  // @@protoc_insertion_point(field_list:caffe.LabelDiffIgnoreParameter.ignore_rate)
  return ignore_rate_;
}
::google::protobuf::RepeatedField< float >*
LabelDiffIgnoreParameter::mutable_ignore_rate() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LabelDiffIgnoreParameter.ignore_rate)
  return &ignore_rate_;
}

// optional bool elem_wise = 3 [default = true];
bool LabelDiffIgnoreParameter::has_elem_wise() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LabelDiffIgnoreParameter::set_has_elem_wise() {
  _has_bits_[0] |= 0x00000004u;
}
void LabelDiffIgnoreParameter::clear_has_elem_wise() {
  _has_bits_[0] &= ~0x00000004u;
}
void LabelDiffIgnoreParameter::clear_elem_wise() {
  elem_wise_ = true;
  clear_has_elem_wise();
}
bool LabelDiffIgnoreParameter::elem_wise() const {
  // @@protoc_insertion_point(field_get:caffe.LabelDiffIgnoreParameter.elem_wise)
  return elem_wise_;
}
void LabelDiffIgnoreParameter::set_elem_wise(bool value) {
  set_has_elem_wise();
  elem_wise_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelDiffIgnoreParameter.elem_wise)
}

inline const LabelDiffIgnoreParameter* LabelDiffIgnoreParameter::internal_default_instance() {
  return &LabelDiffIgnoreParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* OffsetParameter_Anchor_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OffsetParameter_Anchor_descriptor_;
}
bool OffsetParameter_Anchor_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const OffsetParameter_Anchor OffsetParameter::TOP_LEFT;
const OffsetParameter_Anchor OffsetParameter::CENTER;
const OffsetParameter_Anchor OffsetParameter::Anchor_MIN;
const OffsetParameter_Anchor OffsetParameter::Anchor_MAX;
const int OffsetParameter::Anchor_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OffsetParameter::kOriginFieldNumber;
const int OffsetParameter::kAnchorFieldNumber;
const int OffsetParameter::kNormalizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OffsetParameter::OffsetParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.OffsetParameter)
}

void OffsetParameter::InitAsDefaultInstance() {
}

OffsetParameter::OffsetParameter(const OffsetParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.OffsetParameter)
}

void OffsetParameter::SharedCtor() {
  _cached_size_ = 0;
  normalize_ = true;
  origin_ = 1;
  anchor_ = 1;
}

OffsetParameter::~OffsetParameter() {
  // @@protoc_insertion_point(destructor:caffe.OffsetParameter)
  SharedDtor();
}

void OffsetParameter::SharedDtor() {
}

void OffsetParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OffsetParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OffsetParameter_descriptor_;
}

const OffsetParameter& OffsetParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<OffsetParameter> OffsetParameter_default_instance_;

OffsetParameter* OffsetParameter::New(::google::protobuf::Arena* arena) const {
  OffsetParameter* n = new OffsetParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OffsetParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.OffsetParameter)
  if (_has_bits_[0 / 32] & 7u) {
    origin_ = 1;
    anchor_ = 1;
    normalize_ = true;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool OffsetParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.OffsetParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.OffsetParameter.Anchor origin = 1 [default = TOP_LEFT];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::OffsetParameter_Anchor_IsValid(value)) {
            set_origin(static_cast< ::caffe::OffsetParameter_Anchor >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_anchor;
        break;
      }

      // optional .caffe.OffsetParameter.Anchor anchor = 2 [default = TOP_LEFT];
      case 2: {
        if (tag == 16) {
         parse_anchor:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::OffsetParameter_Anchor_IsValid(value)) {
            set_anchor(static_cast< ::caffe::OffsetParameter_Anchor >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_normalize;
        break;
      }

      // optional bool normalize = 3 [default = true];
      case 3: {
        if (tag == 24) {
         parse_normalize:
          set_has_normalize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &normalize_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.OffsetParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.OffsetParameter)
  return false;
#undef DO_
}

void OffsetParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.OffsetParameter)
  // optional .caffe.OffsetParameter.Anchor origin = 1 [default = TOP_LEFT];
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->origin(), output);
  }

  // optional .caffe.OffsetParameter.Anchor anchor = 2 [default = TOP_LEFT];
  if (has_anchor()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->anchor(), output);
  }

  // optional bool normalize = 3 [default = true];
  if (has_normalize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->normalize(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.OffsetParameter)
}

::google::protobuf::uint8* OffsetParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.OffsetParameter)
  // optional .caffe.OffsetParameter.Anchor origin = 1 [default = TOP_LEFT];
  if (has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->origin(), target);
  }

  // optional .caffe.OffsetParameter.Anchor anchor = 2 [default = TOP_LEFT];
  if (has_anchor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->anchor(), target);
  }

  // optional bool normalize = 3 [default = true];
  if (has_normalize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->normalize(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.OffsetParameter)
  return target;
}

size_t OffsetParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.OffsetParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .caffe.OffsetParameter.Anchor origin = 1 [default = TOP_LEFT];
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->origin());
    }

    // optional .caffe.OffsetParameter.Anchor anchor = 2 [default = TOP_LEFT];
    if (has_anchor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->anchor());
    }

    // optional bool normalize = 3 [default = true];
    if (has_normalize()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OffsetParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.OffsetParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OffsetParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OffsetParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.OffsetParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.OffsetParameter)
    UnsafeMergeFrom(*source);
  }
}

void OffsetParameter::MergeFrom(const OffsetParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.OffsetParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void OffsetParameter::UnsafeMergeFrom(const OffsetParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_origin()) {
      set_origin(from.origin());
    }
    if (from.has_anchor()) {
      set_anchor(from.anchor());
    }
    if (from.has_normalize()) {
      set_normalize(from.normalize());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void OffsetParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.OffsetParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OffsetParameter::CopyFrom(const OffsetParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.OffsetParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool OffsetParameter::IsInitialized() const {

  return true;
}

void OffsetParameter::Swap(OffsetParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OffsetParameter::InternalSwap(OffsetParameter* other) {
  std::swap(origin_, other->origin_);
  std::swap(anchor_, other->anchor_);
  std::swap(normalize_, other->normalize_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OffsetParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OffsetParameter_descriptor_;
  metadata.reflection = OffsetParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OffsetParameter

// optional .caffe.OffsetParameter.Anchor origin = 1 [default = TOP_LEFT];
bool OffsetParameter::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OffsetParameter::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
void OffsetParameter::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
void OffsetParameter::clear_origin() {
  origin_ = 1;
  clear_has_origin();
}
::caffe::OffsetParameter_Anchor OffsetParameter::origin() const {
  // @@protoc_insertion_point(field_get:caffe.OffsetParameter.origin)
  return static_cast< ::caffe::OffsetParameter_Anchor >(origin_);
}
void OffsetParameter::set_origin(::caffe::OffsetParameter_Anchor value) {
  assert(::caffe::OffsetParameter_Anchor_IsValid(value));
  set_has_origin();
  origin_ = value;
  // @@protoc_insertion_point(field_set:caffe.OffsetParameter.origin)
}

// optional .caffe.OffsetParameter.Anchor anchor = 2 [default = TOP_LEFT];
bool OffsetParameter::has_anchor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OffsetParameter::set_has_anchor() {
  _has_bits_[0] |= 0x00000002u;
}
void OffsetParameter::clear_has_anchor() {
  _has_bits_[0] &= ~0x00000002u;
}
void OffsetParameter::clear_anchor() {
  anchor_ = 1;
  clear_has_anchor();
}
::caffe::OffsetParameter_Anchor OffsetParameter::anchor() const {
  // @@protoc_insertion_point(field_get:caffe.OffsetParameter.anchor)
  return static_cast< ::caffe::OffsetParameter_Anchor >(anchor_);
}
void OffsetParameter::set_anchor(::caffe::OffsetParameter_Anchor value) {
  assert(::caffe::OffsetParameter_Anchor_IsValid(value));
  set_has_anchor();
  anchor_ = value;
  // @@protoc_insertion_point(field_set:caffe.OffsetParameter.anchor)
}

// optional bool normalize = 3 [default = true];
bool OffsetParameter::has_normalize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OffsetParameter::set_has_normalize() {
  _has_bits_[0] |= 0x00000004u;
}
void OffsetParameter::clear_has_normalize() {
  _has_bits_[0] &= ~0x00000004u;
}
void OffsetParameter::clear_normalize() {
  normalize_ = true;
  clear_has_normalize();
}
bool OffsetParameter::normalize() const {
  // @@protoc_insertion_point(field_get:caffe.OffsetParameter.normalize)
  return normalize_;
}
void OffsetParameter::set_normalize(bool value) {
  set_has_normalize();
  normalize_ = value;
  // @@protoc_insertion_point(field_set:caffe.OffsetParameter.normalize)
}

inline const OffsetParameter* OffsetParameter::internal_default_instance() {
  return &OffsetParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GTSubmapDataParameter::kSubmapBatchSizeFieldNumber;
const int GTSubmapDataParameter::kSubmapSizeFieldNumber;
const int GTSubmapDataParameter::kReceptiveFieldFieldNumber;
const int GTSubmapDataParameter::kHorizontalStrideFieldNumber;
const int GTSubmapDataParameter::kVerticalStrideFieldNumber;
const int GTSubmapDataParameter::kActivationRegionParamFieldNumber;
const int GTSubmapDataParameter::kNumJitterFieldNumber;
const int GTSubmapDataParameter::kBboxNormalizationFieldNumber;
const int GTSubmapDataParameter::kOffsetParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GTSubmapDataParameter::GTSubmapDataParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.GTSubmapDataParameter)
}

void GTSubmapDataParameter::InitAsDefaultInstance() {
  submap_size_ = const_cast< ::caffe::Size2i*>(
      ::caffe::Size2i::internal_default_instance());
  receptive_field_ = const_cast< ::caffe::Size2i*>(
      ::caffe::Size2i::internal_default_instance());
  activation_region_param_ = const_cast< ::caffe::ActivationRegionParameter*>(
      ::caffe::ActivationRegionParameter::internal_default_instance());
  offset_param_ = const_cast< ::caffe::OffsetParameter*>(
      ::caffe::OffsetParameter::internal_default_instance());
}

GTSubmapDataParameter::GTSubmapDataParameter(const GTSubmapDataParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.GTSubmapDataParameter)
}

void GTSubmapDataParameter::SharedCtor() {
  _cached_size_ = 0;
  submap_size_ = NULL;
  receptive_field_ = NULL;
  activation_region_param_ = NULL;
  offset_param_ = NULL;
  ::memset(&submap_batch_size_, 0, reinterpret_cast<char*>(&num_jitter_) -
    reinterpret_cast<char*>(&submap_batch_size_) + sizeof(num_jitter_));
  bbox_normalization_ = true;
}

GTSubmapDataParameter::~GTSubmapDataParameter() {
  // @@protoc_insertion_point(destructor:caffe.GTSubmapDataParameter)
  SharedDtor();
}

void GTSubmapDataParameter::SharedDtor() {
  if (this != &GTSubmapDataParameter_default_instance_.get()) {
    delete submap_size_;
    delete receptive_field_;
    delete activation_region_param_;
    delete offset_param_;
  }
}

void GTSubmapDataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GTSubmapDataParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GTSubmapDataParameter_descriptor_;
}

const GTSubmapDataParameter& GTSubmapDataParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GTSubmapDataParameter> GTSubmapDataParameter_default_instance_;

GTSubmapDataParameter* GTSubmapDataParameter::New(::google::protobuf::Arena* arena) const {
  GTSubmapDataParameter* n = new GTSubmapDataParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GTSubmapDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.GTSubmapDataParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GTSubmapDataParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GTSubmapDataParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(submap_batch_size_, num_jitter_);
    if (has_submap_size()) {
      if (submap_size_ != NULL) submap_size_->::caffe::Size2i::Clear();
    }
    if (has_receptive_field()) {
      if (receptive_field_ != NULL) receptive_field_->::caffe::Size2i::Clear();
    }
    if (has_activation_region_param()) {
      if (activation_region_param_ != NULL) activation_region_param_->::caffe::ActivationRegionParameter::Clear();
    }
    bbox_normalization_ = true;
  }
  if (has_offset_param()) {
    if (offset_param_ != NULL) offset_param_->::caffe::OffsetParameter::Clear();
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GTSubmapDataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.GTSubmapDataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 submap_batch_size = 1;
      case 1: {
        if (tag == 8) {
          set_has_submap_batch_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &submap_batch_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_submap_size;
        break;
      }

      // required .caffe.Size2i submap_size = 2;
      case 2: {
        if (tag == 18) {
         parse_submap_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_submap_size()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_receptive_field;
        break;
      }

      // required .caffe.Size2i receptive_field = 3;
      case 3: {
        if (tag == 26) {
         parse_receptive_field:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receptive_field()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_horizontal_stride;
        break;
      }

      // required uint32 horizontal_stride = 4;
      case 4: {
        if (tag == 32) {
         parse_horizontal_stride:
          set_has_horizontal_stride();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &horizontal_stride_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_vertical_stride;
        break;
      }

      // required uint32 vertical_stride = 5;
      case 5: {
        if (tag == 40) {
         parse_vertical_stride:
          set_has_vertical_stride();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vertical_stride_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_activation_region_param;
        break;
      }

      // optional .caffe.ActivationRegionParameter activation_region_param = 6;
      case 6: {
        if (tag == 50) {
         parse_activation_region_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activation_region_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_num_jitter;
        break;
      }

      // optional uint32 num_jitter = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_num_jitter:
          set_has_num_jitter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_jitter_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_bbox_normalization;
        break;
      }

      // optional bool bbox_normalization = 8 [default = true];
      case 8: {
        if (tag == 64) {
         parse_bbox_normalization:
          set_has_bbox_normalization();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bbox_normalization_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_offset_param;
        break;
      }

      // required .caffe.OffsetParameter offset_param = 9;
      case 9: {
        if (tag == 74) {
         parse_offset_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_offset_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.GTSubmapDataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.GTSubmapDataParameter)
  return false;
#undef DO_
}

void GTSubmapDataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.GTSubmapDataParameter)
  // required uint32 submap_batch_size = 1;
  if (has_submap_batch_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->submap_batch_size(), output);
  }

  // required .caffe.Size2i submap_size = 2;
  if (has_submap_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->submap_size_, output);
  }

  // required .caffe.Size2i receptive_field = 3;
  if (has_receptive_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->receptive_field_, output);
  }

  // required uint32 horizontal_stride = 4;
  if (has_horizontal_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->horizontal_stride(), output);
  }

  // required uint32 vertical_stride = 5;
  if (has_vertical_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->vertical_stride(), output);
  }

  // optional .caffe.ActivationRegionParameter activation_region_param = 6;
  if (has_activation_region_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->activation_region_param_, output);
  }

  // optional uint32 num_jitter = 7 [default = 0];
  if (has_num_jitter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->num_jitter(), output);
  }

  // optional bool bbox_normalization = 8 [default = true];
  if (has_bbox_normalization()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->bbox_normalization(), output);
  }

  // required .caffe.OffsetParameter offset_param = 9;
  if (has_offset_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->offset_param_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.GTSubmapDataParameter)
}

::google::protobuf::uint8* GTSubmapDataParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.GTSubmapDataParameter)
  // required uint32 submap_batch_size = 1;
  if (has_submap_batch_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->submap_batch_size(), target);
  }

  // required .caffe.Size2i submap_size = 2;
  if (has_submap_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->submap_size_, false, target);
  }

  // required .caffe.Size2i receptive_field = 3;
  if (has_receptive_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->receptive_field_, false, target);
  }

  // required uint32 horizontal_stride = 4;
  if (has_horizontal_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->horizontal_stride(), target);
  }

  // required uint32 vertical_stride = 5;
  if (has_vertical_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->vertical_stride(), target);
  }

  // optional .caffe.ActivationRegionParameter activation_region_param = 6;
  if (has_activation_region_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->activation_region_param_, false, target);
  }

  // optional uint32 num_jitter = 7 [default = 0];
  if (has_num_jitter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->num_jitter(), target);
  }

  // optional bool bbox_normalization = 8 [default = true];
  if (has_bbox_normalization()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->bbox_normalization(), target);
  }

  // required .caffe.OffsetParameter offset_param = 9;
  if (has_offset_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->offset_param_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.GTSubmapDataParameter)
  return target;
}

size_t GTSubmapDataParameter::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe.GTSubmapDataParameter)
  size_t total_size = 0;

  if (has_submap_batch_size()) {
    // required uint32 submap_batch_size = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->submap_batch_size());
  }

  if (has_submap_size()) {
    // required .caffe.Size2i submap_size = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->submap_size_);
  }

  if (has_receptive_field()) {
    // required .caffe.Size2i receptive_field = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->receptive_field_);
  }

  if (has_horizontal_stride()) {
    // required uint32 horizontal_stride = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->horizontal_stride());
  }

  if (has_vertical_stride()) {
    // required uint32 vertical_stride = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vertical_stride());
  }

  if (has_offset_param()) {
    // required .caffe.OffsetParameter offset_param = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->offset_param_);
  }

  return total_size;
}
size_t GTSubmapDataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.GTSubmapDataParameter)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000011f) ^ 0x0000011f) == 0) {  // All required fields are present.
    // required uint32 submap_batch_size = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->submap_batch_size());

    // required .caffe.Size2i submap_size = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->submap_size_);

    // required .caffe.Size2i receptive_field = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->receptive_field_);

    // required uint32 horizontal_stride = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->horizontal_stride());

    // required uint32 vertical_stride = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vertical_stride());

    // required .caffe.OffsetParameter offset_param = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->offset_param_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[5 / 32] & 224u) {
    // optional .caffe.ActivationRegionParameter activation_region_param = 6;
    if (has_activation_region_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->activation_region_param_);
    }

    // optional uint32 num_jitter = 7 [default = 0];
    if (has_num_jitter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_jitter());
    }

    // optional bool bbox_normalization = 8 [default = true];
    if (has_bbox_normalization()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GTSubmapDataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.GTSubmapDataParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GTSubmapDataParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GTSubmapDataParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.GTSubmapDataParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.GTSubmapDataParameter)
    UnsafeMergeFrom(*source);
  }
}

void GTSubmapDataParameter::MergeFrom(const GTSubmapDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.GTSubmapDataParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GTSubmapDataParameter::UnsafeMergeFrom(const GTSubmapDataParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_submap_batch_size()) {
      set_submap_batch_size(from.submap_batch_size());
    }
    if (from.has_submap_size()) {
      mutable_submap_size()->::caffe::Size2i::MergeFrom(from.submap_size());
    }
    if (from.has_receptive_field()) {
      mutable_receptive_field()->::caffe::Size2i::MergeFrom(from.receptive_field());
    }
    if (from.has_horizontal_stride()) {
      set_horizontal_stride(from.horizontal_stride());
    }
    if (from.has_vertical_stride()) {
      set_vertical_stride(from.vertical_stride());
    }
    if (from.has_activation_region_param()) {
      mutable_activation_region_param()->::caffe::ActivationRegionParameter::MergeFrom(from.activation_region_param());
    }
    if (from.has_num_jitter()) {
      set_num_jitter(from.num_jitter());
    }
    if (from.has_bbox_normalization()) {
      set_bbox_normalization(from.bbox_normalization());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_offset_param()) {
      mutable_offset_param()->::caffe::OffsetParameter::MergeFrom(from.offset_param());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void GTSubmapDataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.GTSubmapDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GTSubmapDataParameter::CopyFrom(const GTSubmapDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.GTSubmapDataParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GTSubmapDataParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000011f) != 0x0000011f) return false;

  if (has_submap_size()) {
    if (!this->submap_size_->IsInitialized()) return false;
  }
  if (has_receptive_field()) {
    if (!this->receptive_field_->IsInitialized()) return false;
  }
  if (has_activation_region_param()) {
    if (!this->activation_region_param_->IsInitialized()) return false;
  }
  return true;
}

void GTSubmapDataParameter::Swap(GTSubmapDataParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GTSubmapDataParameter::InternalSwap(GTSubmapDataParameter* other) {
  std::swap(submap_batch_size_, other->submap_batch_size_);
  std::swap(submap_size_, other->submap_size_);
  std::swap(receptive_field_, other->receptive_field_);
  std::swap(horizontal_stride_, other->horizontal_stride_);
  std::swap(vertical_stride_, other->vertical_stride_);
  std::swap(activation_region_param_, other->activation_region_param_);
  std::swap(num_jitter_, other->num_jitter_);
  std::swap(bbox_normalization_, other->bbox_normalization_);
  std::swap(offset_param_, other->offset_param_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GTSubmapDataParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GTSubmapDataParameter_descriptor_;
  metadata.reflection = GTSubmapDataParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GTSubmapDataParameter

// required uint32 submap_batch_size = 1;
bool GTSubmapDataParameter::has_submap_batch_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GTSubmapDataParameter::set_has_submap_batch_size() {
  _has_bits_[0] |= 0x00000001u;
}
void GTSubmapDataParameter::clear_has_submap_batch_size() {
  _has_bits_[0] &= ~0x00000001u;
}
void GTSubmapDataParameter::clear_submap_batch_size() {
  submap_batch_size_ = 0u;
  clear_has_submap_batch_size();
}
::google::protobuf::uint32 GTSubmapDataParameter::submap_batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.GTSubmapDataParameter.submap_batch_size)
  return submap_batch_size_;
}
void GTSubmapDataParameter::set_submap_batch_size(::google::protobuf::uint32 value) {
  set_has_submap_batch_size();
  submap_batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.GTSubmapDataParameter.submap_batch_size)
}

// required .caffe.Size2i submap_size = 2;
bool GTSubmapDataParameter::has_submap_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GTSubmapDataParameter::set_has_submap_size() {
  _has_bits_[0] |= 0x00000002u;
}
void GTSubmapDataParameter::clear_has_submap_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void GTSubmapDataParameter::clear_submap_size() {
  if (submap_size_ != NULL) submap_size_->::caffe::Size2i::Clear();
  clear_has_submap_size();
}
const ::caffe::Size2i& GTSubmapDataParameter::submap_size() const {
  // @@protoc_insertion_point(field_get:caffe.GTSubmapDataParameter.submap_size)
  return submap_size_ != NULL ? *submap_size_
                         : *::caffe::Size2i::internal_default_instance();
}
::caffe::Size2i* GTSubmapDataParameter::mutable_submap_size() {
  set_has_submap_size();
  if (submap_size_ == NULL) {
    submap_size_ = new ::caffe::Size2i;
  }
  // @@protoc_insertion_point(field_mutable:caffe.GTSubmapDataParameter.submap_size)
  return submap_size_;
}
::caffe::Size2i* GTSubmapDataParameter::release_submap_size() {
  // @@protoc_insertion_point(field_release:caffe.GTSubmapDataParameter.submap_size)
  clear_has_submap_size();
  ::caffe::Size2i* temp = submap_size_;
  submap_size_ = NULL;
  return temp;
}
void GTSubmapDataParameter::set_allocated_submap_size(::caffe::Size2i* submap_size) {
  delete submap_size_;
  submap_size_ = submap_size;
  if (submap_size) {
    set_has_submap_size();
  } else {
    clear_has_submap_size();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.GTSubmapDataParameter.submap_size)
}

// required .caffe.Size2i receptive_field = 3;
bool GTSubmapDataParameter::has_receptive_field() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GTSubmapDataParameter::set_has_receptive_field() {
  _has_bits_[0] |= 0x00000004u;
}
void GTSubmapDataParameter::clear_has_receptive_field() {
  _has_bits_[0] &= ~0x00000004u;
}
void GTSubmapDataParameter::clear_receptive_field() {
  if (receptive_field_ != NULL) receptive_field_->::caffe::Size2i::Clear();
  clear_has_receptive_field();
}
const ::caffe::Size2i& GTSubmapDataParameter::receptive_field() const {
  // @@protoc_insertion_point(field_get:caffe.GTSubmapDataParameter.receptive_field)
  return receptive_field_ != NULL ? *receptive_field_
                         : *::caffe::Size2i::internal_default_instance();
}
::caffe::Size2i* GTSubmapDataParameter::mutable_receptive_field() {
  set_has_receptive_field();
  if (receptive_field_ == NULL) {
    receptive_field_ = new ::caffe::Size2i;
  }
  // @@protoc_insertion_point(field_mutable:caffe.GTSubmapDataParameter.receptive_field)
  return receptive_field_;
}
::caffe::Size2i* GTSubmapDataParameter::release_receptive_field() {
  // @@protoc_insertion_point(field_release:caffe.GTSubmapDataParameter.receptive_field)
  clear_has_receptive_field();
  ::caffe::Size2i* temp = receptive_field_;
  receptive_field_ = NULL;
  return temp;
}
void GTSubmapDataParameter::set_allocated_receptive_field(::caffe::Size2i* receptive_field) {
  delete receptive_field_;
  receptive_field_ = receptive_field;
  if (receptive_field) {
    set_has_receptive_field();
  } else {
    clear_has_receptive_field();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.GTSubmapDataParameter.receptive_field)
}

// required uint32 horizontal_stride = 4;
bool GTSubmapDataParameter::has_horizontal_stride() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GTSubmapDataParameter::set_has_horizontal_stride() {
  _has_bits_[0] |= 0x00000008u;
}
void GTSubmapDataParameter::clear_has_horizontal_stride() {
  _has_bits_[0] &= ~0x00000008u;
}
void GTSubmapDataParameter::clear_horizontal_stride() {
  horizontal_stride_ = 0u;
  clear_has_horizontal_stride();
}
::google::protobuf::uint32 GTSubmapDataParameter::horizontal_stride() const {
  // @@protoc_insertion_point(field_get:caffe.GTSubmapDataParameter.horizontal_stride)
  return horizontal_stride_;
}
void GTSubmapDataParameter::set_horizontal_stride(::google::protobuf::uint32 value) {
  set_has_horizontal_stride();
  horizontal_stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.GTSubmapDataParameter.horizontal_stride)
}

// required uint32 vertical_stride = 5;
bool GTSubmapDataParameter::has_vertical_stride() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GTSubmapDataParameter::set_has_vertical_stride() {
  _has_bits_[0] |= 0x00000010u;
}
void GTSubmapDataParameter::clear_has_vertical_stride() {
  _has_bits_[0] &= ~0x00000010u;
}
void GTSubmapDataParameter::clear_vertical_stride() {
  vertical_stride_ = 0u;
  clear_has_vertical_stride();
}
::google::protobuf::uint32 GTSubmapDataParameter::vertical_stride() const {
  // @@protoc_insertion_point(field_get:caffe.GTSubmapDataParameter.vertical_stride)
  return vertical_stride_;
}
void GTSubmapDataParameter::set_vertical_stride(::google::protobuf::uint32 value) {
  set_has_vertical_stride();
  vertical_stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.GTSubmapDataParameter.vertical_stride)
}

// optional .caffe.ActivationRegionParameter activation_region_param = 6;
bool GTSubmapDataParameter::has_activation_region_param() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GTSubmapDataParameter::set_has_activation_region_param() {
  _has_bits_[0] |= 0x00000020u;
}
void GTSubmapDataParameter::clear_has_activation_region_param() {
  _has_bits_[0] &= ~0x00000020u;
}
void GTSubmapDataParameter::clear_activation_region_param() {
  if (activation_region_param_ != NULL) activation_region_param_->::caffe::ActivationRegionParameter::Clear();
  clear_has_activation_region_param();
}
const ::caffe::ActivationRegionParameter& GTSubmapDataParameter::activation_region_param() const {
  // @@protoc_insertion_point(field_get:caffe.GTSubmapDataParameter.activation_region_param)
  return activation_region_param_ != NULL ? *activation_region_param_
                         : *::caffe::ActivationRegionParameter::internal_default_instance();
}
::caffe::ActivationRegionParameter* GTSubmapDataParameter::mutable_activation_region_param() {
  set_has_activation_region_param();
  if (activation_region_param_ == NULL) {
    activation_region_param_ = new ::caffe::ActivationRegionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.GTSubmapDataParameter.activation_region_param)
  return activation_region_param_;
}
::caffe::ActivationRegionParameter* GTSubmapDataParameter::release_activation_region_param() {
  // @@protoc_insertion_point(field_release:caffe.GTSubmapDataParameter.activation_region_param)
  clear_has_activation_region_param();
  ::caffe::ActivationRegionParameter* temp = activation_region_param_;
  activation_region_param_ = NULL;
  return temp;
}
void GTSubmapDataParameter::set_allocated_activation_region_param(::caffe::ActivationRegionParameter* activation_region_param) {
  delete activation_region_param_;
  activation_region_param_ = activation_region_param;
  if (activation_region_param) {
    set_has_activation_region_param();
  } else {
    clear_has_activation_region_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.GTSubmapDataParameter.activation_region_param)
}

// optional uint32 num_jitter = 7 [default = 0];
bool GTSubmapDataParameter::has_num_jitter() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GTSubmapDataParameter::set_has_num_jitter() {
  _has_bits_[0] |= 0x00000040u;
}
void GTSubmapDataParameter::clear_has_num_jitter() {
  _has_bits_[0] &= ~0x00000040u;
}
void GTSubmapDataParameter::clear_num_jitter() {
  num_jitter_ = 0u;
  clear_has_num_jitter();
}
::google::protobuf::uint32 GTSubmapDataParameter::num_jitter() const {
  // @@protoc_insertion_point(field_get:caffe.GTSubmapDataParameter.num_jitter)
  return num_jitter_;
}
void GTSubmapDataParameter::set_num_jitter(::google::protobuf::uint32 value) {
  set_has_num_jitter();
  num_jitter_ = value;
  // @@protoc_insertion_point(field_set:caffe.GTSubmapDataParameter.num_jitter)
}

// optional bool bbox_normalization = 8 [default = true];
bool GTSubmapDataParameter::has_bbox_normalization() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void GTSubmapDataParameter::set_has_bbox_normalization() {
  _has_bits_[0] |= 0x00000080u;
}
void GTSubmapDataParameter::clear_has_bbox_normalization() {
  _has_bits_[0] &= ~0x00000080u;
}
void GTSubmapDataParameter::clear_bbox_normalization() {
  bbox_normalization_ = true;
  clear_has_bbox_normalization();
}
bool GTSubmapDataParameter::bbox_normalization() const {
  // @@protoc_insertion_point(field_get:caffe.GTSubmapDataParameter.bbox_normalization)
  return bbox_normalization_;
}
void GTSubmapDataParameter::set_bbox_normalization(bool value) {
  set_has_bbox_normalization();
  bbox_normalization_ = value;
  // @@protoc_insertion_point(field_set:caffe.GTSubmapDataParameter.bbox_normalization)
}

// required .caffe.OffsetParameter offset_param = 9;
bool GTSubmapDataParameter::has_offset_param() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void GTSubmapDataParameter::set_has_offset_param() {
  _has_bits_[0] |= 0x00000100u;
}
void GTSubmapDataParameter::clear_has_offset_param() {
  _has_bits_[0] &= ~0x00000100u;
}
void GTSubmapDataParameter::clear_offset_param() {
  if (offset_param_ != NULL) offset_param_->::caffe::OffsetParameter::Clear();
  clear_has_offset_param();
}
const ::caffe::OffsetParameter& GTSubmapDataParameter::offset_param() const {
  // @@protoc_insertion_point(field_get:caffe.GTSubmapDataParameter.offset_param)
  return offset_param_ != NULL ? *offset_param_
                         : *::caffe::OffsetParameter::internal_default_instance();
}
::caffe::OffsetParameter* GTSubmapDataParameter::mutable_offset_param() {
  set_has_offset_param();
  if (offset_param_ == NULL) {
    offset_param_ = new ::caffe::OffsetParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.GTSubmapDataParameter.offset_param)
  return offset_param_;
}
::caffe::OffsetParameter* GTSubmapDataParameter::release_offset_param() {
  // @@protoc_insertion_point(field_release:caffe.GTSubmapDataParameter.offset_param)
  clear_has_offset_param();
  ::caffe::OffsetParameter* temp = offset_param_;
  offset_param_ = NULL;
  return temp;
}
void GTSubmapDataParameter::set_allocated_offset_param(::caffe::OffsetParameter* offset_param) {
  delete offset_param_;
  offset_param_ = offset_param;
  if (offset_param) {
    set_has_offset_param();
  } else {
    clear_has_offset_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.GTSubmapDataParameter.offset_param)
}

inline const GTSubmapDataParameter* GTSubmapDataParameter::internal_default_instance() {
  return &GTSubmapDataParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopSubmapDataParameter::kImgSizeFieldNumber;
const int TopSubmapDataParameter::kSubmapBatchSizeFieldNumber;
const int TopSubmapDataParameter::kWinSizeFieldNumber;
const int TopSubmapDataParameter::kWinHorizontalStrideFieldNumber;
const int TopSubmapDataParameter::kWinVerticalStrideFieldNumber;
const int TopSubmapDataParameter::kNumWinRowsFieldNumber;
const int TopSubmapDataParameter::kNumWinColsFieldNumber;
const int TopSubmapDataParameter::kOffsetUnitFieldNumber;
const int TopSubmapDataParameter::kOffsetHorizontalStrideFieldNumber;
const int TopSubmapDataParameter::kOffsetVerticalStrideFieldNumber;
const int TopSubmapDataParameter::kGtUnitFieldNumber;
const int TopSubmapDataParameter::kGtHorizontalStrideFieldNumber;
const int TopSubmapDataParameter::kGtVerticalStrideFieldNumber;
const int TopSubmapDataParameter::kBboxParamFieldNumber;
const int TopSubmapDataParameter::kOffsetNormalizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopSubmapDataParameter::TopSubmapDataParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.TopSubmapDataParameter)
}

void TopSubmapDataParameter::InitAsDefaultInstance() {
  img_size_ = const_cast< ::caffe::Size2i*>(
      ::caffe::Size2i::internal_default_instance());
  win_size_ = const_cast< ::caffe::Size2i*>(
      ::caffe::Size2i::internal_default_instance());
  offset_unit_ = const_cast< ::caffe::Size2i*>(
      ::caffe::Size2i::internal_default_instance());
  gt_unit_ = const_cast< ::caffe::Size2i*>(
      ::caffe::Size2i::internal_default_instance());
  bbox_param_ = const_cast< ::caffe::BBoxParameter*>(
      ::caffe::BBoxParameter::internal_default_instance());
}

TopSubmapDataParameter::TopSubmapDataParameter(const TopSubmapDataParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.TopSubmapDataParameter)
}

void TopSubmapDataParameter::SharedCtor() {
  _cached_size_ = 0;
  img_size_ = NULL;
  win_size_ = NULL;
  offset_unit_ = NULL;
  gt_unit_ = NULL;
  bbox_param_ = NULL;
  ::memset(&submap_batch_size_, 0, reinterpret_cast<char*>(&gt_vertical_stride_) -
    reinterpret_cast<char*>(&submap_batch_size_) + sizeof(gt_vertical_stride_));
  win_horizontal_stride_ = 1u;
  offset_normalize_ = true;
}

TopSubmapDataParameter::~TopSubmapDataParameter() {
  // @@protoc_insertion_point(destructor:caffe.TopSubmapDataParameter)
  SharedDtor();
}

void TopSubmapDataParameter::SharedDtor() {
  if (this != &TopSubmapDataParameter_default_instance_.get()) {
    delete img_size_;
    delete win_size_;
    delete offset_unit_;
    delete gt_unit_;
    delete bbox_param_;
  }
}

void TopSubmapDataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopSubmapDataParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopSubmapDataParameter_descriptor_;
}

const TopSubmapDataParameter& TopSubmapDataParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TopSubmapDataParameter> TopSubmapDataParameter_default_instance_;

TopSubmapDataParameter* TopSubmapDataParameter::New(::google::protobuf::Arena* arena) const {
  TopSubmapDataParameter* n = new TopSubmapDataParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TopSubmapDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.TopSubmapDataParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TopSubmapDataParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TopSubmapDataParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(submap_batch_size_, num_win_cols_);
    if (has_img_size()) {
      if (img_size_ != NULL) img_size_->::caffe::Size2i::Clear();
    }
    if (has_win_size()) {
      if (win_size_ != NULL) win_size_->::caffe::Size2i::Clear();
    }
    win_horizontal_stride_ = 1u;
    if (has_offset_unit()) {
      if (offset_unit_ != NULL) offset_unit_->::caffe::Size2i::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 32512u) {
    ZR_(offset_horizontal_stride_, gt_vertical_stride_);
    if (has_gt_unit()) {
      if (gt_unit_ != NULL) gt_unit_->::caffe::Size2i::Clear();
    }
    if (has_bbox_param()) {
      if (bbox_param_ != NULL) bbox_param_->::caffe::BBoxParameter::Clear();
    }
    offset_normalize_ = true;
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TopSubmapDataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.TopSubmapDataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .caffe.Size2i img_size = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_img_size()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_submap_batch_size;
        break;
      }

      // required uint32 submap_batch_size = 2;
      case 2: {
        if (tag == 16) {
         parse_submap_batch_size:
          set_has_submap_batch_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &submap_batch_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_win_size;
        break;
      }

      // required .caffe.Size2i win_size = 3;
      case 3: {
        if (tag == 26) {
         parse_win_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_win_size()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_win_horizontal_stride;
        break;
      }

      // optional uint32 win_horizontal_stride = 4 [default = 1];
      case 4: {
        if (tag == 32) {
         parse_win_horizontal_stride:
          set_has_win_horizontal_stride();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_horizontal_stride_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_win_vertical_stride;
        break;
      }

      // optional uint32 win_vertical_stride = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_win_vertical_stride:
          set_has_win_vertical_stride();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_vertical_stride_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_num_win_rows;
        break;
      }

      // optional uint32 num_win_rows = 6;
      case 6: {
        if (tag == 48) {
         parse_num_win_rows:
          set_has_num_win_rows();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_win_rows_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_num_win_cols;
        break;
      }

      // optional uint32 num_win_cols = 7;
      case 7: {
        if (tag == 56) {
         parse_num_win_cols:
          set_has_num_win_cols();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_win_cols_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_offset_unit;
        break;
      }

      // optional .caffe.Size2i offset_unit = 8;
      case 8: {
        if (tag == 66) {
         parse_offset_unit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_offset_unit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_offset_horizontal_stride;
        break;
      }

      // optional uint32 offset_horizontal_stride = 9;
      case 9: {
        if (tag == 72) {
         parse_offset_horizontal_stride:
          set_has_offset_horizontal_stride();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_horizontal_stride_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_offset_vertical_stride;
        break;
      }

      // optional uint32 offset_vertical_stride = 10;
      case 10: {
        if (tag == 80) {
         parse_offset_vertical_stride:
          set_has_offset_vertical_stride();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_vertical_stride_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_gt_unit;
        break;
      }

      // optional .caffe.Size2i gt_unit = 11;
      case 11: {
        if (tag == 90) {
         parse_gt_unit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gt_unit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_gt_horizontal_stride;
        break;
      }

      // optional uint32 gt_horizontal_stride = 12;
      case 12: {
        if (tag == 96) {
         parse_gt_horizontal_stride:
          set_has_gt_horizontal_stride();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gt_horizontal_stride_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_gt_vertical_stride;
        break;
      }

      // optional uint32 gt_vertical_stride = 13;
      case 13: {
        if (tag == 104) {
         parse_gt_vertical_stride:
          set_has_gt_vertical_stride();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gt_vertical_stride_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_bbox_param;
        break;
      }

      // optional .caffe.BBoxParameter bbox_param = 14;
      case 14: {
        if (tag == 114) {
         parse_bbox_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bbox_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_offset_normalize;
        break;
      }

      // optional bool offset_normalize = 15 [default = true];
      case 15: {
        if (tag == 120) {
         parse_offset_normalize:
          set_has_offset_normalize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &offset_normalize_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.TopSubmapDataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.TopSubmapDataParameter)
  return false;
#undef DO_
}

void TopSubmapDataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.TopSubmapDataParameter)
  // required .caffe.Size2i img_size = 1;
  if (has_img_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->img_size_, output);
  }

  // required uint32 submap_batch_size = 2;
  if (has_submap_batch_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->submap_batch_size(), output);
  }

  // required .caffe.Size2i win_size = 3;
  if (has_win_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->win_size_, output);
  }

  // optional uint32 win_horizontal_stride = 4 [default = 1];
  if (has_win_horizontal_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->win_horizontal_stride(), output);
  }

  // optional uint32 win_vertical_stride = 5 [default = 0];
  if (has_win_vertical_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->win_vertical_stride(), output);
  }

  // optional uint32 num_win_rows = 6;
  if (has_num_win_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->num_win_rows(), output);
  }

  // optional uint32 num_win_cols = 7;
  if (has_num_win_cols()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->num_win_cols(), output);
  }

  // optional .caffe.Size2i offset_unit = 8;
  if (has_offset_unit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->offset_unit_, output);
  }

  // optional uint32 offset_horizontal_stride = 9;
  if (has_offset_horizontal_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->offset_horizontal_stride(), output);
  }

  // optional uint32 offset_vertical_stride = 10;
  if (has_offset_vertical_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->offset_vertical_stride(), output);
  }

  // optional .caffe.Size2i gt_unit = 11;
  if (has_gt_unit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->gt_unit_, output);
  }

  // optional uint32 gt_horizontal_stride = 12;
  if (has_gt_horizontal_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->gt_horizontal_stride(), output);
  }

  // optional uint32 gt_vertical_stride = 13;
  if (has_gt_vertical_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->gt_vertical_stride(), output);
  }

  // optional .caffe.BBoxParameter bbox_param = 14;
  if (has_bbox_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->bbox_param_, output);
  }

  // optional bool offset_normalize = 15 [default = true];
  if (has_offset_normalize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->offset_normalize(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.TopSubmapDataParameter)
}

::google::protobuf::uint8* TopSubmapDataParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.TopSubmapDataParameter)
  // required .caffe.Size2i img_size = 1;
  if (has_img_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->img_size_, false, target);
  }

  // required uint32 submap_batch_size = 2;
  if (has_submap_batch_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->submap_batch_size(), target);
  }

  // required .caffe.Size2i win_size = 3;
  if (has_win_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->win_size_, false, target);
  }

  // optional uint32 win_horizontal_stride = 4 [default = 1];
  if (has_win_horizontal_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->win_horizontal_stride(), target);
  }

  // optional uint32 win_vertical_stride = 5 [default = 0];
  if (has_win_vertical_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->win_vertical_stride(), target);
  }

  // optional uint32 num_win_rows = 6;
  if (has_num_win_rows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->num_win_rows(), target);
  }

  // optional uint32 num_win_cols = 7;
  if (has_num_win_cols()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->num_win_cols(), target);
  }

  // optional .caffe.Size2i offset_unit = 8;
  if (has_offset_unit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->offset_unit_, false, target);
  }

  // optional uint32 offset_horizontal_stride = 9;
  if (has_offset_horizontal_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->offset_horizontal_stride(), target);
  }

  // optional uint32 offset_vertical_stride = 10;
  if (has_offset_vertical_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->offset_vertical_stride(), target);
  }

  // optional .caffe.Size2i gt_unit = 11;
  if (has_gt_unit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->gt_unit_, false, target);
  }

  // optional uint32 gt_horizontal_stride = 12;
  if (has_gt_horizontal_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->gt_horizontal_stride(), target);
  }

  // optional uint32 gt_vertical_stride = 13;
  if (has_gt_vertical_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->gt_vertical_stride(), target);
  }

  // optional .caffe.BBoxParameter bbox_param = 14;
  if (has_bbox_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->bbox_param_, false, target);
  }

  // optional bool offset_normalize = 15 [default = true];
  if (has_offset_normalize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->offset_normalize(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.TopSubmapDataParameter)
  return target;
}

size_t TopSubmapDataParameter::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe.TopSubmapDataParameter)
  size_t total_size = 0;

  if (has_img_size()) {
    // required .caffe.Size2i img_size = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->img_size_);
  }

  if (has_submap_batch_size()) {
    // required uint32 submap_batch_size = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->submap_batch_size());
  }

  if (has_win_size()) {
    // required .caffe.Size2i win_size = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->win_size_);
  }

  return total_size;
}
size_t TopSubmapDataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.TopSubmapDataParameter)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .caffe.Size2i img_size = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->img_size_);

    // required uint32 submap_batch_size = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->submap_batch_size());

    // required .caffe.Size2i win_size = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->win_size_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[3 / 32] & 248u) {
    // optional uint32 win_horizontal_stride = 4 [default = 1];
    if (has_win_horizontal_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win_horizontal_stride());
    }

    // optional uint32 win_vertical_stride = 5 [default = 0];
    if (has_win_vertical_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win_vertical_stride());
    }

    // optional uint32 num_win_rows = 6;
    if (has_num_win_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_win_rows());
    }

    // optional uint32 num_win_cols = 7;
    if (has_num_win_cols()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_win_cols());
    }

    // optional .caffe.Size2i offset_unit = 8;
    if (has_offset_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->offset_unit_);
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional uint32 offset_horizontal_stride = 9;
    if (has_offset_horizontal_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset_horizontal_stride());
    }

    // optional uint32 offset_vertical_stride = 10;
    if (has_offset_vertical_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset_vertical_stride());
    }

    // optional .caffe.Size2i gt_unit = 11;
    if (has_gt_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gt_unit_);
    }

    // optional uint32 gt_horizontal_stride = 12;
    if (has_gt_horizontal_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gt_horizontal_stride());
    }

    // optional uint32 gt_vertical_stride = 13;
    if (has_gt_vertical_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gt_vertical_stride());
    }

    // optional .caffe.BBoxParameter bbox_param = 14;
    if (has_bbox_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bbox_param_);
    }

    // optional bool offset_normalize = 15 [default = true];
    if (has_offset_normalize()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopSubmapDataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.TopSubmapDataParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TopSubmapDataParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TopSubmapDataParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.TopSubmapDataParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.TopSubmapDataParameter)
    UnsafeMergeFrom(*source);
  }
}

void TopSubmapDataParameter::MergeFrom(const TopSubmapDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.TopSubmapDataParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TopSubmapDataParameter::UnsafeMergeFrom(const TopSubmapDataParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_img_size()) {
      mutable_img_size()->::caffe::Size2i::MergeFrom(from.img_size());
    }
    if (from.has_submap_batch_size()) {
      set_submap_batch_size(from.submap_batch_size());
    }
    if (from.has_win_size()) {
      mutable_win_size()->::caffe::Size2i::MergeFrom(from.win_size());
    }
    if (from.has_win_horizontal_stride()) {
      set_win_horizontal_stride(from.win_horizontal_stride());
    }
    if (from.has_win_vertical_stride()) {
      set_win_vertical_stride(from.win_vertical_stride());
    }
    if (from.has_num_win_rows()) {
      set_num_win_rows(from.num_win_rows());
    }
    if (from.has_num_win_cols()) {
      set_num_win_cols(from.num_win_cols());
    }
    if (from.has_offset_unit()) {
      mutable_offset_unit()->::caffe::Size2i::MergeFrom(from.offset_unit());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_offset_horizontal_stride()) {
      set_offset_horizontal_stride(from.offset_horizontal_stride());
    }
    if (from.has_offset_vertical_stride()) {
      set_offset_vertical_stride(from.offset_vertical_stride());
    }
    if (from.has_gt_unit()) {
      mutable_gt_unit()->::caffe::Size2i::MergeFrom(from.gt_unit());
    }
    if (from.has_gt_horizontal_stride()) {
      set_gt_horizontal_stride(from.gt_horizontal_stride());
    }
    if (from.has_gt_vertical_stride()) {
      set_gt_vertical_stride(from.gt_vertical_stride());
    }
    if (from.has_bbox_param()) {
      mutable_bbox_param()->::caffe::BBoxParameter::MergeFrom(from.bbox_param());
    }
    if (from.has_offset_normalize()) {
      set_offset_normalize(from.offset_normalize());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void TopSubmapDataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.TopSubmapDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopSubmapDataParameter::CopyFrom(const TopSubmapDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.TopSubmapDataParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TopSubmapDataParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_img_size()) {
    if (!this->img_size_->IsInitialized()) return false;
  }
  if (has_win_size()) {
    if (!this->win_size_->IsInitialized()) return false;
  }
  if (has_offset_unit()) {
    if (!this->offset_unit_->IsInitialized()) return false;
  }
  if (has_gt_unit()) {
    if (!this->gt_unit_->IsInitialized()) return false;
  }
  return true;
}

void TopSubmapDataParameter::Swap(TopSubmapDataParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopSubmapDataParameter::InternalSwap(TopSubmapDataParameter* other) {
  std::swap(img_size_, other->img_size_);
  std::swap(submap_batch_size_, other->submap_batch_size_);
  std::swap(win_size_, other->win_size_);
  std::swap(win_horizontal_stride_, other->win_horizontal_stride_);
  std::swap(win_vertical_stride_, other->win_vertical_stride_);
  std::swap(num_win_rows_, other->num_win_rows_);
  std::swap(num_win_cols_, other->num_win_cols_);
  std::swap(offset_unit_, other->offset_unit_);
  std::swap(offset_horizontal_stride_, other->offset_horizontal_stride_);
  std::swap(offset_vertical_stride_, other->offset_vertical_stride_);
  std::swap(gt_unit_, other->gt_unit_);
  std::swap(gt_horizontal_stride_, other->gt_horizontal_stride_);
  std::swap(gt_vertical_stride_, other->gt_vertical_stride_);
  std::swap(bbox_param_, other->bbox_param_);
  std::swap(offset_normalize_, other->offset_normalize_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TopSubmapDataParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopSubmapDataParameter_descriptor_;
  metadata.reflection = TopSubmapDataParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TopSubmapDataParameter

// required .caffe.Size2i img_size = 1;
bool TopSubmapDataParameter::has_img_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TopSubmapDataParameter::set_has_img_size() {
  _has_bits_[0] |= 0x00000001u;
}
void TopSubmapDataParameter::clear_has_img_size() {
  _has_bits_[0] &= ~0x00000001u;
}
void TopSubmapDataParameter::clear_img_size() {
  if (img_size_ != NULL) img_size_->::caffe::Size2i::Clear();
  clear_has_img_size();
}
const ::caffe::Size2i& TopSubmapDataParameter::img_size() const {
  // @@protoc_insertion_point(field_get:caffe.TopSubmapDataParameter.img_size)
  return img_size_ != NULL ? *img_size_
                         : *::caffe::Size2i::internal_default_instance();
}
::caffe::Size2i* TopSubmapDataParameter::mutable_img_size() {
  set_has_img_size();
  if (img_size_ == NULL) {
    img_size_ = new ::caffe::Size2i;
  }
  // @@protoc_insertion_point(field_mutable:caffe.TopSubmapDataParameter.img_size)
  return img_size_;
}
::caffe::Size2i* TopSubmapDataParameter::release_img_size() {
  // @@protoc_insertion_point(field_release:caffe.TopSubmapDataParameter.img_size)
  clear_has_img_size();
  ::caffe::Size2i* temp = img_size_;
  img_size_ = NULL;
  return temp;
}
void TopSubmapDataParameter::set_allocated_img_size(::caffe::Size2i* img_size) {
  delete img_size_;
  img_size_ = img_size;
  if (img_size) {
    set_has_img_size();
  } else {
    clear_has_img_size();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.TopSubmapDataParameter.img_size)
}

// required uint32 submap_batch_size = 2;
bool TopSubmapDataParameter::has_submap_batch_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TopSubmapDataParameter::set_has_submap_batch_size() {
  _has_bits_[0] |= 0x00000002u;
}
void TopSubmapDataParameter::clear_has_submap_batch_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void TopSubmapDataParameter::clear_submap_batch_size() {
  submap_batch_size_ = 0u;
  clear_has_submap_batch_size();
}
::google::protobuf::uint32 TopSubmapDataParameter::submap_batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.TopSubmapDataParameter.submap_batch_size)
  return submap_batch_size_;
}
void TopSubmapDataParameter::set_submap_batch_size(::google::protobuf::uint32 value) {
  set_has_submap_batch_size();
  submap_batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.TopSubmapDataParameter.submap_batch_size)
}

// required .caffe.Size2i win_size = 3;
bool TopSubmapDataParameter::has_win_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TopSubmapDataParameter::set_has_win_size() {
  _has_bits_[0] |= 0x00000004u;
}
void TopSubmapDataParameter::clear_has_win_size() {
  _has_bits_[0] &= ~0x00000004u;
}
void TopSubmapDataParameter::clear_win_size() {
  if (win_size_ != NULL) win_size_->::caffe::Size2i::Clear();
  clear_has_win_size();
}
const ::caffe::Size2i& TopSubmapDataParameter::win_size() const {
  // @@protoc_insertion_point(field_get:caffe.TopSubmapDataParameter.win_size)
  return win_size_ != NULL ? *win_size_
                         : *::caffe::Size2i::internal_default_instance();
}
::caffe::Size2i* TopSubmapDataParameter::mutable_win_size() {
  set_has_win_size();
  if (win_size_ == NULL) {
    win_size_ = new ::caffe::Size2i;
  }
  // @@protoc_insertion_point(field_mutable:caffe.TopSubmapDataParameter.win_size)
  return win_size_;
}
::caffe::Size2i* TopSubmapDataParameter::release_win_size() {
  // @@protoc_insertion_point(field_release:caffe.TopSubmapDataParameter.win_size)
  clear_has_win_size();
  ::caffe::Size2i* temp = win_size_;
  win_size_ = NULL;
  return temp;
}
void TopSubmapDataParameter::set_allocated_win_size(::caffe::Size2i* win_size) {
  delete win_size_;
  win_size_ = win_size;
  if (win_size) {
    set_has_win_size();
  } else {
    clear_has_win_size();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.TopSubmapDataParameter.win_size)
}

// optional uint32 win_horizontal_stride = 4 [default = 1];
bool TopSubmapDataParameter::has_win_horizontal_stride() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TopSubmapDataParameter::set_has_win_horizontal_stride() {
  _has_bits_[0] |= 0x00000008u;
}
void TopSubmapDataParameter::clear_has_win_horizontal_stride() {
  _has_bits_[0] &= ~0x00000008u;
}
void TopSubmapDataParameter::clear_win_horizontal_stride() {
  win_horizontal_stride_ = 1u;
  clear_has_win_horizontal_stride();
}
::google::protobuf::uint32 TopSubmapDataParameter::win_horizontal_stride() const {
  // @@protoc_insertion_point(field_get:caffe.TopSubmapDataParameter.win_horizontal_stride)
  return win_horizontal_stride_;
}
void TopSubmapDataParameter::set_win_horizontal_stride(::google::protobuf::uint32 value) {
  set_has_win_horizontal_stride();
  win_horizontal_stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.TopSubmapDataParameter.win_horizontal_stride)
}

// optional uint32 win_vertical_stride = 5 [default = 0];
bool TopSubmapDataParameter::has_win_vertical_stride() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TopSubmapDataParameter::set_has_win_vertical_stride() {
  _has_bits_[0] |= 0x00000010u;
}
void TopSubmapDataParameter::clear_has_win_vertical_stride() {
  _has_bits_[0] &= ~0x00000010u;
}
void TopSubmapDataParameter::clear_win_vertical_stride() {
  win_vertical_stride_ = 0u;
  clear_has_win_vertical_stride();
}
::google::protobuf::uint32 TopSubmapDataParameter::win_vertical_stride() const {
  // @@protoc_insertion_point(field_get:caffe.TopSubmapDataParameter.win_vertical_stride)
  return win_vertical_stride_;
}
void TopSubmapDataParameter::set_win_vertical_stride(::google::protobuf::uint32 value) {
  set_has_win_vertical_stride();
  win_vertical_stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.TopSubmapDataParameter.win_vertical_stride)
}

// optional uint32 num_win_rows = 6;
bool TopSubmapDataParameter::has_num_win_rows() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TopSubmapDataParameter::set_has_num_win_rows() {
  _has_bits_[0] |= 0x00000020u;
}
void TopSubmapDataParameter::clear_has_num_win_rows() {
  _has_bits_[0] &= ~0x00000020u;
}
void TopSubmapDataParameter::clear_num_win_rows() {
  num_win_rows_ = 0u;
  clear_has_num_win_rows();
}
::google::protobuf::uint32 TopSubmapDataParameter::num_win_rows() const {
  // @@protoc_insertion_point(field_get:caffe.TopSubmapDataParameter.num_win_rows)
  return num_win_rows_;
}
void TopSubmapDataParameter::set_num_win_rows(::google::protobuf::uint32 value) {
  set_has_num_win_rows();
  num_win_rows_ = value;
  // @@protoc_insertion_point(field_set:caffe.TopSubmapDataParameter.num_win_rows)
}

// optional uint32 num_win_cols = 7;
bool TopSubmapDataParameter::has_num_win_cols() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TopSubmapDataParameter::set_has_num_win_cols() {
  _has_bits_[0] |= 0x00000040u;
}
void TopSubmapDataParameter::clear_has_num_win_cols() {
  _has_bits_[0] &= ~0x00000040u;
}
void TopSubmapDataParameter::clear_num_win_cols() {
  num_win_cols_ = 0u;
  clear_has_num_win_cols();
}
::google::protobuf::uint32 TopSubmapDataParameter::num_win_cols() const {
  // @@protoc_insertion_point(field_get:caffe.TopSubmapDataParameter.num_win_cols)
  return num_win_cols_;
}
void TopSubmapDataParameter::set_num_win_cols(::google::protobuf::uint32 value) {
  set_has_num_win_cols();
  num_win_cols_ = value;
  // @@protoc_insertion_point(field_set:caffe.TopSubmapDataParameter.num_win_cols)
}

// optional .caffe.Size2i offset_unit = 8;
bool TopSubmapDataParameter::has_offset_unit() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TopSubmapDataParameter::set_has_offset_unit() {
  _has_bits_[0] |= 0x00000080u;
}
void TopSubmapDataParameter::clear_has_offset_unit() {
  _has_bits_[0] &= ~0x00000080u;
}
void TopSubmapDataParameter::clear_offset_unit() {
  if (offset_unit_ != NULL) offset_unit_->::caffe::Size2i::Clear();
  clear_has_offset_unit();
}
const ::caffe::Size2i& TopSubmapDataParameter::offset_unit() const {
  // @@protoc_insertion_point(field_get:caffe.TopSubmapDataParameter.offset_unit)
  return offset_unit_ != NULL ? *offset_unit_
                         : *::caffe::Size2i::internal_default_instance();
}
::caffe::Size2i* TopSubmapDataParameter::mutable_offset_unit() {
  set_has_offset_unit();
  if (offset_unit_ == NULL) {
    offset_unit_ = new ::caffe::Size2i;
  }
  // @@protoc_insertion_point(field_mutable:caffe.TopSubmapDataParameter.offset_unit)
  return offset_unit_;
}
::caffe::Size2i* TopSubmapDataParameter::release_offset_unit() {
  // @@protoc_insertion_point(field_release:caffe.TopSubmapDataParameter.offset_unit)
  clear_has_offset_unit();
  ::caffe::Size2i* temp = offset_unit_;
  offset_unit_ = NULL;
  return temp;
}
void TopSubmapDataParameter::set_allocated_offset_unit(::caffe::Size2i* offset_unit) {
  delete offset_unit_;
  offset_unit_ = offset_unit;
  if (offset_unit) {
    set_has_offset_unit();
  } else {
    clear_has_offset_unit();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.TopSubmapDataParameter.offset_unit)
}

// optional uint32 offset_horizontal_stride = 9;
bool TopSubmapDataParameter::has_offset_horizontal_stride() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void TopSubmapDataParameter::set_has_offset_horizontal_stride() {
  _has_bits_[0] |= 0x00000100u;
}
void TopSubmapDataParameter::clear_has_offset_horizontal_stride() {
  _has_bits_[0] &= ~0x00000100u;
}
void TopSubmapDataParameter::clear_offset_horizontal_stride() {
  offset_horizontal_stride_ = 0u;
  clear_has_offset_horizontal_stride();
}
::google::protobuf::uint32 TopSubmapDataParameter::offset_horizontal_stride() const {
  // @@protoc_insertion_point(field_get:caffe.TopSubmapDataParameter.offset_horizontal_stride)
  return offset_horizontal_stride_;
}
void TopSubmapDataParameter::set_offset_horizontal_stride(::google::protobuf::uint32 value) {
  set_has_offset_horizontal_stride();
  offset_horizontal_stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.TopSubmapDataParameter.offset_horizontal_stride)
}

// optional uint32 offset_vertical_stride = 10;
bool TopSubmapDataParameter::has_offset_vertical_stride() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void TopSubmapDataParameter::set_has_offset_vertical_stride() {
  _has_bits_[0] |= 0x00000200u;
}
void TopSubmapDataParameter::clear_has_offset_vertical_stride() {
  _has_bits_[0] &= ~0x00000200u;
}
void TopSubmapDataParameter::clear_offset_vertical_stride() {
  offset_vertical_stride_ = 0u;
  clear_has_offset_vertical_stride();
}
::google::protobuf::uint32 TopSubmapDataParameter::offset_vertical_stride() const {
  // @@protoc_insertion_point(field_get:caffe.TopSubmapDataParameter.offset_vertical_stride)
  return offset_vertical_stride_;
}
void TopSubmapDataParameter::set_offset_vertical_stride(::google::protobuf::uint32 value) {
  set_has_offset_vertical_stride();
  offset_vertical_stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.TopSubmapDataParameter.offset_vertical_stride)
}

// optional .caffe.Size2i gt_unit = 11;
bool TopSubmapDataParameter::has_gt_unit() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void TopSubmapDataParameter::set_has_gt_unit() {
  _has_bits_[0] |= 0x00000400u;
}
void TopSubmapDataParameter::clear_has_gt_unit() {
  _has_bits_[0] &= ~0x00000400u;
}
void TopSubmapDataParameter::clear_gt_unit() {
  if (gt_unit_ != NULL) gt_unit_->::caffe::Size2i::Clear();
  clear_has_gt_unit();
}
const ::caffe::Size2i& TopSubmapDataParameter::gt_unit() const {
  // @@protoc_insertion_point(field_get:caffe.TopSubmapDataParameter.gt_unit)
  return gt_unit_ != NULL ? *gt_unit_
                         : *::caffe::Size2i::internal_default_instance();
}
::caffe::Size2i* TopSubmapDataParameter::mutable_gt_unit() {
  set_has_gt_unit();
  if (gt_unit_ == NULL) {
    gt_unit_ = new ::caffe::Size2i;
  }
  // @@protoc_insertion_point(field_mutable:caffe.TopSubmapDataParameter.gt_unit)
  return gt_unit_;
}
::caffe::Size2i* TopSubmapDataParameter::release_gt_unit() {
  // @@protoc_insertion_point(field_release:caffe.TopSubmapDataParameter.gt_unit)
  clear_has_gt_unit();
  ::caffe::Size2i* temp = gt_unit_;
  gt_unit_ = NULL;
  return temp;
}
void TopSubmapDataParameter::set_allocated_gt_unit(::caffe::Size2i* gt_unit) {
  delete gt_unit_;
  gt_unit_ = gt_unit;
  if (gt_unit) {
    set_has_gt_unit();
  } else {
    clear_has_gt_unit();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.TopSubmapDataParameter.gt_unit)
}

// optional uint32 gt_horizontal_stride = 12;
bool TopSubmapDataParameter::has_gt_horizontal_stride() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void TopSubmapDataParameter::set_has_gt_horizontal_stride() {
  _has_bits_[0] |= 0x00000800u;
}
void TopSubmapDataParameter::clear_has_gt_horizontal_stride() {
  _has_bits_[0] &= ~0x00000800u;
}
void TopSubmapDataParameter::clear_gt_horizontal_stride() {
  gt_horizontal_stride_ = 0u;
  clear_has_gt_horizontal_stride();
}
::google::protobuf::uint32 TopSubmapDataParameter::gt_horizontal_stride() const {
  // @@protoc_insertion_point(field_get:caffe.TopSubmapDataParameter.gt_horizontal_stride)
  return gt_horizontal_stride_;
}
void TopSubmapDataParameter::set_gt_horizontal_stride(::google::protobuf::uint32 value) {
  set_has_gt_horizontal_stride();
  gt_horizontal_stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.TopSubmapDataParameter.gt_horizontal_stride)
}

// optional uint32 gt_vertical_stride = 13;
bool TopSubmapDataParameter::has_gt_vertical_stride() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void TopSubmapDataParameter::set_has_gt_vertical_stride() {
  _has_bits_[0] |= 0x00001000u;
}
void TopSubmapDataParameter::clear_has_gt_vertical_stride() {
  _has_bits_[0] &= ~0x00001000u;
}
void TopSubmapDataParameter::clear_gt_vertical_stride() {
  gt_vertical_stride_ = 0u;
  clear_has_gt_vertical_stride();
}
::google::protobuf::uint32 TopSubmapDataParameter::gt_vertical_stride() const {
  // @@protoc_insertion_point(field_get:caffe.TopSubmapDataParameter.gt_vertical_stride)
  return gt_vertical_stride_;
}
void TopSubmapDataParameter::set_gt_vertical_stride(::google::protobuf::uint32 value) {
  set_has_gt_vertical_stride();
  gt_vertical_stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.TopSubmapDataParameter.gt_vertical_stride)
}

// optional .caffe.BBoxParameter bbox_param = 14;
bool TopSubmapDataParameter::has_bbox_param() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void TopSubmapDataParameter::set_has_bbox_param() {
  _has_bits_[0] |= 0x00002000u;
}
void TopSubmapDataParameter::clear_has_bbox_param() {
  _has_bits_[0] &= ~0x00002000u;
}
void TopSubmapDataParameter::clear_bbox_param() {
  if (bbox_param_ != NULL) bbox_param_->::caffe::BBoxParameter::Clear();
  clear_has_bbox_param();
}
const ::caffe::BBoxParameter& TopSubmapDataParameter::bbox_param() const {
  // @@protoc_insertion_point(field_get:caffe.TopSubmapDataParameter.bbox_param)
  return bbox_param_ != NULL ? *bbox_param_
                         : *::caffe::BBoxParameter::internal_default_instance();
}
::caffe::BBoxParameter* TopSubmapDataParameter::mutable_bbox_param() {
  set_has_bbox_param();
  if (bbox_param_ == NULL) {
    bbox_param_ = new ::caffe::BBoxParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.TopSubmapDataParameter.bbox_param)
  return bbox_param_;
}
::caffe::BBoxParameter* TopSubmapDataParameter::release_bbox_param() {
  // @@protoc_insertion_point(field_release:caffe.TopSubmapDataParameter.bbox_param)
  clear_has_bbox_param();
  ::caffe::BBoxParameter* temp = bbox_param_;
  bbox_param_ = NULL;
  return temp;
}
void TopSubmapDataParameter::set_allocated_bbox_param(::caffe::BBoxParameter* bbox_param) {
  delete bbox_param_;
  bbox_param_ = bbox_param;
  if (bbox_param) {
    set_has_bbox_param();
  } else {
    clear_has_bbox_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.TopSubmapDataParameter.bbox_param)
}

// optional bool offset_normalize = 15 [default = true];
bool TopSubmapDataParameter::has_offset_normalize() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void TopSubmapDataParameter::set_has_offset_normalize() {
  _has_bits_[0] |= 0x00004000u;
}
void TopSubmapDataParameter::clear_has_offset_normalize() {
  _has_bits_[0] &= ~0x00004000u;
}
void TopSubmapDataParameter::clear_offset_normalize() {
  offset_normalize_ = true;
  clear_has_offset_normalize();
}
bool TopSubmapDataParameter::offset_normalize() const {
  // @@protoc_insertion_point(field_get:caffe.TopSubmapDataParameter.offset_normalize)
  return offset_normalize_;
}
void TopSubmapDataParameter::set_offset_normalize(bool value) {
  set_has_offset_normalize();
  offset_normalize_ = value;
  // @@protoc_insertion_point(field_set:caffe.TopSubmapDataParameter.offset_normalize)
}

inline const TopSubmapDataParameter* TopSubmapDataParameter::internal_default_instance() {
  return &TopSubmapDataParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int YOLOLikeLossParameter::kNumBboxPerCellFieldNumber;
const int YOLOLikeLossParameter::kNumClassFieldNumber;
const int YOLOLikeLossParameter::kNoobjScaleFieldNumber;
const int YOLOLikeLossParameter::kObjScaleFieldNumber;
const int YOLOLikeLossParameter::kClassScaleFieldNumber;
const int YOLOLikeLossParameter::kCoordScaleFieldNumber;
const int YOLOLikeLossParameter::kBboxParamFieldNumber;
const int YOLOLikeLossParameter::kClassWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

YOLOLikeLossParameter::YOLOLikeLossParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.YOLOLikeLossParameter)
}

void YOLOLikeLossParameter::InitAsDefaultInstance() {
  bbox_param_ = const_cast< ::caffe::BBoxParameter*>(
      ::caffe::BBoxParameter::internal_default_instance());
}

YOLOLikeLossParameter::YOLOLikeLossParameter(const YOLOLikeLossParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.YOLOLikeLossParameter)
}

void YOLOLikeLossParameter::SharedCtor() {
  _cached_size_ = 0;
  bbox_param_ = NULL;
  num_bbox_per_cell_ = 2u;
  num_class_ = 20u;
  noobj_scale_ = 1;
  obj_scale_ = 1;
  class_scale_ = 1;
  coord_scale_ = 1;
}

YOLOLikeLossParameter::~YOLOLikeLossParameter() {
  // @@protoc_insertion_point(destructor:caffe.YOLOLikeLossParameter)
  SharedDtor();
}

void YOLOLikeLossParameter::SharedDtor() {
  if (this != &YOLOLikeLossParameter_default_instance_.get()) {
    delete bbox_param_;
  }
}

void YOLOLikeLossParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YOLOLikeLossParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YOLOLikeLossParameter_descriptor_;
}

const YOLOLikeLossParameter& YOLOLikeLossParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<YOLOLikeLossParameter> YOLOLikeLossParameter_default_instance_;

YOLOLikeLossParameter* YOLOLikeLossParameter::New(::google::protobuf::Arena* arena) const {
  YOLOLikeLossParameter* n = new YOLOLikeLossParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YOLOLikeLossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.YOLOLikeLossParameter)
  if (_has_bits_[0 / 32] & 127u) {
    num_bbox_per_cell_ = 2u;
    num_class_ = 20u;
    noobj_scale_ = 1;
    obj_scale_ = 1;
    class_scale_ = 1;
    coord_scale_ = 1;
    if (has_bbox_param()) {
      if (bbox_param_ != NULL) bbox_param_->::caffe::BBoxParameter::Clear();
    }
  }
  class_weight_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool YOLOLikeLossParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.YOLOLikeLossParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_bbox_per_cell = 1 [default = 2];
      case 1: {
        if (tag == 8) {
          set_has_num_bbox_per_cell();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_bbox_per_cell_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_class;
        break;
      }

      // optional uint32 num_class = 2 [default = 20];
      case 2: {
        if (tag == 16) {
         parse_num_class:
          set_has_num_class();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_class_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_noobj_scale;
        break;
      }

      // optional float noobj_scale = 3 [default = 1];
      case 3: {
        if (tag == 29) {
         parse_noobj_scale:
          set_has_noobj_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &noobj_scale_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_obj_scale;
        break;
      }

      // optional float obj_scale = 4 [default = 1];
      case 4: {
        if (tag == 37) {
         parse_obj_scale:
          set_has_obj_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obj_scale_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_class_scale;
        break;
      }

      // optional float class_scale = 5 [default = 1];
      case 5: {
        if (tag == 45) {
         parse_class_scale:
          set_has_class_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &class_scale_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_coord_scale;
        break;
      }

      // optional float coord_scale = 6 [default = 1];
      case 6: {
        if (tag == 53) {
         parse_coord_scale:
          set_has_coord_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &coord_scale_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_bbox_param;
        break;
      }

      // optional .caffe.BBoxParameter bbox_param = 7;
      case 7: {
        if (tag == 58) {
         parse_bbox_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bbox_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_class_weight;
        break;
      }

      // repeated float class_weight = 8;
      case 8: {
        if (tag == 69) {
         parse_class_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 69, input, this->mutable_class_weight())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_class_weight())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_class_weight;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.YOLOLikeLossParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.YOLOLikeLossParameter)
  return false;
#undef DO_
}

void YOLOLikeLossParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.YOLOLikeLossParameter)
  // optional uint32 num_bbox_per_cell = 1 [default = 2];
  if (has_num_bbox_per_cell()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_bbox_per_cell(), output);
  }

  // optional uint32 num_class = 2 [default = 20];
  if (has_num_class()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_class(), output);
  }

  // optional float noobj_scale = 3 [default = 1];
  if (has_noobj_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->noobj_scale(), output);
  }

  // optional float obj_scale = 4 [default = 1];
  if (has_obj_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->obj_scale(), output);
  }

  // optional float class_scale = 5 [default = 1];
  if (has_class_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->class_scale(), output);
  }

  // optional float coord_scale = 6 [default = 1];
  if (has_coord_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->coord_scale(), output);
  }

  // optional .caffe.BBoxParameter bbox_param = 7;
  if (has_bbox_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->bbox_param_, output);
  }

  // repeated float class_weight = 8;
  for (int i = 0; i < this->class_weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      8, this->class_weight(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.YOLOLikeLossParameter)
}

::google::protobuf::uint8* YOLOLikeLossParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.YOLOLikeLossParameter)
  // optional uint32 num_bbox_per_cell = 1 [default = 2];
  if (has_num_bbox_per_cell()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_bbox_per_cell(), target);
  }

  // optional uint32 num_class = 2 [default = 20];
  if (has_num_class()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_class(), target);
  }

  // optional float noobj_scale = 3 [default = 1];
  if (has_noobj_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->noobj_scale(), target);
  }

  // optional float obj_scale = 4 [default = 1];
  if (has_obj_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->obj_scale(), target);
  }

  // optional float class_scale = 5 [default = 1];
  if (has_class_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->class_scale(), target);
  }

  // optional float coord_scale = 6 [default = 1];
  if (has_coord_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->coord_scale(), target);
  }

  // optional .caffe.BBoxParameter bbox_param = 7;
  if (has_bbox_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->bbox_param_, false, target);
  }

  // repeated float class_weight = 8;
  for (int i = 0; i < this->class_weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(8, this->class_weight(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.YOLOLikeLossParameter)
  return target;
}

size_t YOLOLikeLossParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.YOLOLikeLossParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional uint32 num_bbox_per_cell = 1 [default = 2];
    if (has_num_bbox_per_cell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_bbox_per_cell());
    }

    // optional uint32 num_class = 2 [default = 20];
    if (has_num_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_class());
    }

    // optional float noobj_scale = 3 [default = 1];
    if (has_noobj_scale()) {
      total_size += 1 + 4;
    }

    // optional float obj_scale = 4 [default = 1];
    if (has_obj_scale()) {
      total_size += 1 + 4;
    }

    // optional float class_scale = 5 [default = 1];
    if (has_class_scale()) {
      total_size += 1 + 4;
    }

    // optional float coord_scale = 6 [default = 1];
    if (has_coord_scale()) {
      total_size += 1 + 4;
    }

    // optional .caffe.BBoxParameter bbox_param = 7;
    if (has_bbox_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bbox_param_);
    }

  }
  // repeated float class_weight = 8;
  {
    size_t data_size = 0;
    unsigned int count = this->class_weight_size();
    data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->class_weight_size());
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YOLOLikeLossParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.YOLOLikeLossParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const YOLOLikeLossParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const YOLOLikeLossParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.YOLOLikeLossParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.YOLOLikeLossParameter)
    UnsafeMergeFrom(*source);
  }
}

void YOLOLikeLossParameter::MergeFrom(const YOLOLikeLossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.YOLOLikeLossParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void YOLOLikeLossParameter::UnsafeMergeFrom(const YOLOLikeLossParameter& from) {
  GOOGLE_DCHECK(&from != this);
  class_weight_.UnsafeMergeFrom(from.class_weight_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_bbox_per_cell()) {
      set_num_bbox_per_cell(from.num_bbox_per_cell());
    }
    if (from.has_num_class()) {
      set_num_class(from.num_class());
    }
    if (from.has_noobj_scale()) {
      set_noobj_scale(from.noobj_scale());
    }
    if (from.has_obj_scale()) {
      set_obj_scale(from.obj_scale());
    }
    if (from.has_class_scale()) {
      set_class_scale(from.class_scale());
    }
    if (from.has_coord_scale()) {
      set_coord_scale(from.coord_scale());
    }
    if (from.has_bbox_param()) {
      mutable_bbox_param()->::caffe::BBoxParameter::MergeFrom(from.bbox_param());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void YOLOLikeLossParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.YOLOLikeLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YOLOLikeLossParameter::CopyFrom(const YOLOLikeLossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.YOLOLikeLossParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool YOLOLikeLossParameter::IsInitialized() const {

  return true;
}

void YOLOLikeLossParameter::Swap(YOLOLikeLossParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YOLOLikeLossParameter::InternalSwap(YOLOLikeLossParameter* other) {
  std::swap(num_bbox_per_cell_, other->num_bbox_per_cell_);
  std::swap(num_class_, other->num_class_);
  std::swap(noobj_scale_, other->noobj_scale_);
  std::swap(obj_scale_, other->obj_scale_);
  std::swap(class_scale_, other->class_scale_);
  std::swap(coord_scale_, other->coord_scale_);
  std::swap(bbox_param_, other->bbox_param_);
  class_weight_.UnsafeArenaSwap(&other->class_weight_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata YOLOLikeLossParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YOLOLikeLossParameter_descriptor_;
  metadata.reflection = YOLOLikeLossParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YOLOLikeLossParameter

// optional uint32 num_bbox_per_cell = 1 [default = 2];
bool YOLOLikeLossParameter::has_num_bbox_per_cell() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YOLOLikeLossParameter::set_has_num_bbox_per_cell() {
  _has_bits_[0] |= 0x00000001u;
}
void YOLOLikeLossParameter::clear_has_num_bbox_per_cell() {
  _has_bits_[0] &= ~0x00000001u;
}
void YOLOLikeLossParameter::clear_num_bbox_per_cell() {
  num_bbox_per_cell_ = 2u;
  clear_has_num_bbox_per_cell();
}
::google::protobuf::uint32 YOLOLikeLossParameter::num_bbox_per_cell() const {
  // @@protoc_insertion_point(field_get:caffe.YOLOLikeLossParameter.num_bbox_per_cell)
  return num_bbox_per_cell_;
}
void YOLOLikeLossParameter::set_num_bbox_per_cell(::google::protobuf::uint32 value) {
  set_has_num_bbox_per_cell();
  num_bbox_per_cell_ = value;
  // @@protoc_insertion_point(field_set:caffe.YOLOLikeLossParameter.num_bbox_per_cell)
}

// optional uint32 num_class = 2 [default = 20];
bool YOLOLikeLossParameter::has_num_class() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YOLOLikeLossParameter::set_has_num_class() {
  _has_bits_[0] |= 0x00000002u;
}
void YOLOLikeLossParameter::clear_has_num_class() {
  _has_bits_[0] &= ~0x00000002u;
}
void YOLOLikeLossParameter::clear_num_class() {
  num_class_ = 20u;
  clear_has_num_class();
}
::google::protobuf::uint32 YOLOLikeLossParameter::num_class() const {
  // @@protoc_insertion_point(field_get:caffe.YOLOLikeLossParameter.num_class)
  return num_class_;
}
void YOLOLikeLossParameter::set_num_class(::google::protobuf::uint32 value) {
  set_has_num_class();
  num_class_ = value;
  // @@protoc_insertion_point(field_set:caffe.YOLOLikeLossParameter.num_class)
}

// optional float noobj_scale = 3 [default = 1];
bool YOLOLikeLossParameter::has_noobj_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YOLOLikeLossParameter::set_has_noobj_scale() {
  _has_bits_[0] |= 0x00000004u;
}
void YOLOLikeLossParameter::clear_has_noobj_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
void YOLOLikeLossParameter::clear_noobj_scale() {
  noobj_scale_ = 1;
  clear_has_noobj_scale();
}
float YOLOLikeLossParameter::noobj_scale() const {
  // @@protoc_insertion_point(field_get:caffe.YOLOLikeLossParameter.noobj_scale)
  return noobj_scale_;
}
void YOLOLikeLossParameter::set_noobj_scale(float value) {
  set_has_noobj_scale();
  noobj_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.YOLOLikeLossParameter.noobj_scale)
}

// optional float obj_scale = 4 [default = 1];
bool YOLOLikeLossParameter::has_obj_scale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YOLOLikeLossParameter::set_has_obj_scale() {
  _has_bits_[0] |= 0x00000008u;
}
void YOLOLikeLossParameter::clear_has_obj_scale() {
  _has_bits_[0] &= ~0x00000008u;
}
void YOLOLikeLossParameter::clear_obj_scale() {
  obj_scale_ = 1;
  clear_has_obj_scale();
}
float YOLOLikeLossParameter::obj_scale() const {
  // @@protoc_insertion_point(field_get:caffe.YOLOLikeLossParameter.obj_scale)
  return obj_scale_;
}
void YOLOLikeLossParameter::set_obj_scale(float value) {
  set_has_obj_scale();
  obj_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.YOLOLikeLossParameter.obj_scale)
}

// optional float class_scale = 5 [default = 1];
bool YOLOLikeLossParameter::has_class_scale() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YOLOLikeLossParameter::set_has_class_scale() {
  _has_bits_[0] |= 0x00000010u;
}
void YOLOLikeLossParameter::clear_has_class_scale() {
  _has_bits_[0] &= ~0x00000010u;
}
void YOLOLikeLossParameter::clear_class_scale() {
  class_scale_ = 1;
  clear_has_class_scale();
}
float YOLOLikeLossParameter::class_scale() const {
  // @@protoc_insertion_point(field_get:caffe.YOLOLikeLossParameter.class_scale)
  return class_scale_;
}
void YOLOLikeLossParameter::set_class_scale(float value) {
  set_has_class_scale();
  class_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.YOLOLikeLossParameter.class_scale)
}

// optional float coord_scale = 6 [default = 1];
bool YOLOLikeLossParameter::has_coord_scale() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void YOLOLikeLossParameter::set_has_coord_scale() {
  _has_bits_[0] |= 0x00000020u;
}
void YOLOLikeLossParameter::clear_has_coord_scale() {
  _has_bits_[0] &= ~0x00000020u;
}
void YOLOLikeLossParameter::clear_coord_scale() {
  coord_scale_ = 1;
  clear_has_coord_scale();
}
float YOLOLikeLossParameter::coord_scale() const {
  // @@protoc_insertion_point(field_get:caffe.YOLOLikeLossParameter.coord_scale)
  return coord_scale_;
}
void YOLOLikeLossParameter::set_coord_scale(float value) {
  set_has_coord_scale();
  coord_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.YOLOLikeLossParameter.coord_scale)
}

// optional .caffe.BBoxParameter bbox_param = 7;
bool YOLOLikeLossParameter::has_bbox_param() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void YOLOLikeLossParameter::set_has_bbox_param() {
  _has_bits_[0] |= 0x00000040u;
}
void YOLOLikeLossParameter::clear_has_bbox_param() {
  _has_bits_[0] &= ~0x00000040u;
}
void YOLOLikeLossParameter::clear_bbox_param() {
  if (bbox_param_ != NULL) bbox_param_->::caffe::BBoxParameter::Clear();
  clear_has_bbox_param();
}
const ::caffe::BBoxParameter& YOLOLikeLossParameter::bbox_param() const {
  // @@protoc_insertion_point(field_get:caffe.YOLOLikeLossParameter.bbox_param)
  return bbox_param_ != NULL ? *bbox_param_
                         : *::caffe::BBoxParameter::internal_default_instance();
}
::caffe::BBoxParameter* YOLOLikeLossParameter::mutable_bbox_param() {
  set_has_bbox_param();
  if (bbox_param_ == NULL) {
    bbox_param_ = new ::caffe::BBoxParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.YOLOLikeLossParameter.bbox_param)
  return bbox_param_;
}
::caffe::BBoxParameter* YOLOLikeLossParameter::release_bbox_param() {
  // @@protoc_insertion_point(field_release:caffe.YOLOLikeLossParameter.bbox_param)
  clear_has_bbox_param();
  ::caffe::BBoxParameter* temp = bbox_param_;
  bbox_param_ = NULL;
  return temp;
}
void YOLOLikeLossParameter::set_allocated_bbox_param(::caffe::BBoxParameter* bbox_param) {
  delete bbox_param_;
  bbox_param_ = bbox_param;
  if (bbox_param) {
    set_has_bbox_param();
  } else {
    clear_has_bbox_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.YOLOLikeLossParameter.bbox_param)
}

// repeated float class_weight = 8;
int YOLOLikeLossParameter::class_weight_size() const {
  return class_weight_.size();
}
void YOLOLikeLossParameter::clear_class_weight() {
  class_weight_.Clear();
}
float YOLOLikeLossParameter::class_weight(int index) const {
  // @@protoc_insertion_point(field_get:caffe.YOLOLikeLossParameter.class_weight)
  return class_weight_.Get(index);
}
void YOLOLikeLossParameter::set_class_weight(int index, float value) {
  class_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.YOLOLikeLossParameter.class_weight)
}
void YOLOLikeLossParameter::add_class_weight(float value) {
  class_weight_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.YOLOLikeLossParameter.class_weight)
}
const ::google::protobuf::RepeatedField< float >&
YOLOLikeLossParameter::class_weight() const {
  // @@protoc_insertion_point(field_list:caffe.YOLOLikeLossParameter.class_weight)
  return class_weight_;
}
::google::protobuf::RepeatedField< float >*
YOLOLikeLossParameter::mutable_class_weight() {
  // @@protoc_insertion_point(field_mutable_list:caffe.YOLOLikeLossParameter.class_weight)
  return &class_weight_;
}

inline const YOLOLikeLossParameter* YOLOLikeLossParameter::internal_default_instance() {
  return &YOLOLikeLossParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WeightedSoftmaxLossParameter::kClassWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WeightedSoftmaxLossParameter::WeightedSoftmaxLossParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.WeightedSoftmaxLossParameter)
}

void WeightedSoftmaxLossParameter::InitAsDefaultInstance() {
}

WeightedSoftmaxLossParameter::WeightedSoftmaxLossParameter(const WeightedSoftmaxLossParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.WeightedSoftmaxLossParameter)
}

void WeightedSoftmaxLossParameter::SharedCtor() {
  _cached_size_ = 0;
}

WeightedSoftmaxLossParameter::~WeightedSoftmaxLossParameter() {
  // @@protoc_insertion_point(destructor:caffe.WeightedSoftmaxLossParameter)
  SharedDtor();
}

void WeightedSoftmaxLossParameter::SharedDtor() {
}

void WeightedSoftmaxLossParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeightedSoftmaxLossParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeightedSoftmaxLossParameter_descriptor_;
}

const WeightedSoftmaxLossParameter& WeightedSoftmaxLossParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<WeightedSoftmaxLossParameter> WeightedSoftmaxLossParameter_default_instance_;

WeightedSoftmaxLossParameter* WeightedSoftmaxLossParameter::New(::google::protobuf::Arena* arena) const {
  WeightedSoftmaxLossParameter* n = new WeightedSoftmaxLossParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WeightedSoftmaxLossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.WeightedSoftmaxLossParameter)
  class_weight_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WeightedSoftmaxLossParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.WeightedSoftmaxLossParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float class_weight = 1;
      case 1: {
        if (tag == 13) {
         parse_class_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13, input, this->mutable_class_weight())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_class_weight())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(13)) goto parse_class_weight;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.WeightedSoftmaxLossParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.WeightedSoftmaxLossParameter)
  return false;
#undef DO_
}

void WeightedSoftmaxLossParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.WeightedSoftmaxLossParameter)
  // repeated float class_weight = 1;
  for (int i = 0; i < this->class_weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->class_weight(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.WeightedSoftmaxLossParameter)
}

::google::protobuf::uint8* WeightedSoftmaxLossParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.WeightedSoftmaxLossParameter)
  // repeated float class_weight = 1;
  for (int i = 0; i < this->class_weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(1, this->class_weight(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.WeightedSoftmaxLossParameter)
  return target;
}

size_t WeightedSoftmaxLossParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.WeightedSoftmaxLossParameter)
  size_t total_size = 0;

  // repeated float class_weight = 1;
  {
    size_t data_size = 0;
    unsigned int count = this->class_weight_size();
    data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->class_weight_size());
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeightedSoftmaxLossParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.WeightedSoftmaxLossParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WeightedSoftmaxLossParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WeightedSoftmaxLossParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.WeightedSoftmaxLossParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.WeightedSoftmaxLossParameter)
    UnsafeMergeFrom(*source);
  }
}

void WeightedSoftmaxLossParameter::MergeFrom(const WeightedSoftmaxLossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.WeightedSoftmaxLossParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void WeightedSoftmaxLossParameter::UnsafeMergeFrom(const WeightedSoftmaxLossParameter& from) {
  GOOGLE_DCHECK(&from != this);
  class_weight_.UnsafeMergeFrom(from.class_weight_);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void WeightedSoftmaxLossParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.WeightedSoftmaxLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeightedSoftmaxLossParameter::CopyFrom(const WeightedSoftmaxLossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.WeightedSoftmaxLossParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool WeightedSoftmaxLossParameter::IsInitialized() const {

  return true;
}

void WeightedSoftmaxLossParameter::Swap(WeightedSoftmaxLossParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WeightedSoftmaxLossParameter::InternalSwap(WeightedSoftmaxLossParameter* other) {
  class_weight_.UnsafeArenaSwap(&other->class_weight_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WeightedSoftmaxLossParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeightedSoftmaxLossParameter_descriptor_;
  metadata.reflection = WeightedSoftmaxLossParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WeightedSoftmaxLossParameter

// repeated float class_weight = 1;
int WeightedSoftmaxLossParameter::class_weight_size() const {
  return class_weight_.size();
}
void WeightedSoftmaxLossParameter::clear_class_weight() {
  class_weight_.Clear();
}
float WeightedSoftmaxLossParameter::class_weight(int index) const {
  // @@protoc_insertion_point(field_get:caffe.WeightedSoftmaxLossParameter.class_weight)
  return class_weight_.Get(index);
}
void WeightedSoftmaxLossParameter::set_class_weight(int index, float value) {
  class_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.WeightedSoftmaxLossParameter.class_weight)
}
void WeightedSoftmaxLossParameter::add_class_weight(float value) {
  class_weight_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.WeightedSoftmaxLossParameter.class_weight)
}
const ::google::protobuf::RepeatedField< float >&
WeightedSoftmaxLossParameter::class_weight() const {
  // @@protoc_insertion_point(field_list:caffe.WeightedSoftmaxLossParameter.class_weight)
  return class_weight_;
}
::google::protobuf::RepeatedField< float >*
WeightedSoftmaxLossParameter::mutable_class_weight() {
  // @@protoc_insertion_point(field_mutable_list:caffe.WeightedSoftmaxLossParameter.class_weight)
  return &class_weight_;
}

inline const WeightedSoftmaxLossParameter* WeightedSoftmaxLossParameter::internal_default_instance() {
  return &WeightedSoftmaxLossParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GridProposalLossParameter::kNoobjWeightFieldNumber;
const int GridProposalLossParameter::kObjWeightFieldNumber;
const int GridProposalLossParameter::kNumClassFieldNumber;
const int GridProposalLossParameter::kGeneralObjProposalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GridProposalLossParameter::GridProposalLossParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.GridProposalLossParameter)
}

void GridProposalLossParameter::InitAsDefaultInstance() {
}

GridProposalLossParameter::GridProposalLossParameter(const GridProposalLossParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.GridProposalLossParameter)
}

void GridProposalLossParameter::SharedCtor() {
  _cached_size_ = 0;
  general_obj_proposal_ = false;
  noobj_weight_ = 1;
  num_class_ = 1u;
}

GridProposalLossParameter::~GridProposalLossParameter() {
  // @@protoc_insertion_point(destructor:caffe.GridProposalLossParameter)
  SharedDtor();
}

void GridProposalLossParameter::SharedDtor() {
}

void GridProposalLossParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GridProposalLossParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GridProposalLossParameter_descriptor_;
}

const GridProposalLossParameter& GridProposalLossParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GridProposalLossParameter> GridProposalLossParameter_default_instance_;

GridProposalLossParameter* GridProposalLossParameter::New(::google::protobuf::Arena* arena) const {
  GridProposalLossParameter* n = new GridProposalLossParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GridProposalLossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.GridProposalLossParameter)
  if (_has_bits_[0 / 32] & 13u) {
    noobj_weight_ = 1;
    num_class_ = 1u;
    general_obj_proposal_ = false;
  }
  obj_weight_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GridProposalLossParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.GridProposalLossParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float noobj_weight = 1 [default = 1];
      case 1: {
        if (tag == 13) {
          set_has_noobj_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &noobj_weight_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_obj_weight;
        break;
      }

      // repeated float obj_weight = 2;
      case 2: {
        if (tag == 21) {
         parse_obj_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21, input, this->mutable_obj_weight())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_obj_weight())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_obj_weight;
        if (input->ExpectTag(24)) goto parse_num_class;
        break;
      }

      // optional uint32 num_class = 3 [default = 1];
      case 3: {
        if (tag == 24) {
         parse_num_class:
          set_has_num_class();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_class_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_general_obj_proposal;
        break;
      }

      // optional bool general_obj_proposal = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_general_obj_proposal:
          set_has_general_obj_proposal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &general_obj_proposal_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.GridProposalLossParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.GridProposalLossParameter)
  return false;
#undef DO_
}

void GridProposalLossParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.GridProposalLossParameter)
  // optional float noobj_weight = 1 [default = 1];
  if (has_noobj_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->noobj_weight(), output);
  }

  // repeated float obj_weight = 2;
  for (int i = 0; i < this->obj_weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->obj_weight(i), output);
  }

  // optional uint32 num_class = 3 [default = 1];
  if (has_num_class()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num_class(), output);
  }

  // optional bool general_obj_proposal = 4 [default = false];
  if (has_general_obj_proposal()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->general_obj_proposal(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.GridProposalLossParameter)
}

::google::protobuf::uint8* GridProposalLossParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.GridProposalLossParameter)
  // optional float noobj_weight = 1 [default = 1];
  if (has_noobj_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->noobj_weight(), target);
  }

  // repeated float obj_weight = 2;
  for (int i = 0; i < this->obj_weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(2, this->obj_weight(i), target);
  }

  // optional uint32 num_class = 3 [default = 1];
  if (has_num_class()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num_class(), target);
  }

  // optional bool general_obj_proposal = 4 [default = false];
  if (has_general_obj_proposal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->general_obj_proposal(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.GridProposalLossParameter)
  return target;
}

size_t GridProposalLossParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.GridProposalLossParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 13u) {
    // optional float noobj_weight = 1 [default = 1];
    if (has_noobj_weight()) {
      total_size += 1 + 4;
    }

    // optional uint32 num_class = 3 [default = 1];
    if (has_num_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_class());
    }

    // optional bool general_obj_proposal = 4 [default = false];
    if (has_general_obj_proposal()) {
      total_size += 1 + 1;
    }

  }
  // repeated float obj_weight = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->obj_weight_size();
    data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->obj_weight_size());
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GridProposalLossParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.GridProposalLossParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GridProposalLossParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GridProposalLossParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.GridProposalLossParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.GridProposalLossParameter)
    UnsafeMergeFrom(*source);
  }
}

void GridProposalLossParameter::MergeFrom(const GridProposalLossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.GridProposalLossParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GridProposalLossParameter::UnsafeMergeFrom(const GridProposalLossParameter& from) {
  GOOGLE_DCHECK(&from != this);
  obj_weight_.UnsafeMergeFrom(from.obj_weight_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_noobj_weight()) {
      set_noobj_weight(from.noobj_weight());
    }
    if (from.has_num_class()) {
      set_num_class(from.num_class());
    }
    if (from.has_general_obj_proposal()) {
      set_general_obj_proposal(from.general_obj_proposal());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void GridProposalLossParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.GridProposalLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GridProposalLossParameter::CopyFrom(const GridProposalLossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.GridProposalLossParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GridProposalLossParameter::IsInitialized() const {

  return true;
}

void GridProposalLossParameter::Swap(GridProposalLossParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GridProposalLossParameter::InternalSwap(GridProposalLossParameter* other) {
  std::swap(noobj_weight_, other->noobj_weight_);
  obj_weight_.UnsafeArenaSwap(&other->obj_weight_);
  std::swap(num_class_, other->num_class_);
  std::swap(general_obj_proposal_, other->general_obj_proposal_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GridProposalLossParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GridProposalLossParameter_descriptor_;
  metadata.reflection = GridProposalLossParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GridProposalLossParameter

// optional float noobj_weight = 1 [default = 1];
bool GridProposalLossParameter::has_noobj_weight() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GridProposalLossParameter::set_has_noobj_weight() {
  _has_bits_[0] |= 0x00000001u;
}
void GridProposalLossParameter::clear_has_noobj_weight() {
  _has_bits_[0] &= ~0x00000001u;
}
void GridProposalLossParameter::clear_noobj_weight() {
  noobj_weight_ = 1;
  clear_has_noobj_weight();
}
float GridProposalLossParameter::noobj_weight() const {
  // @@protoc_insertion_point(field_get:caffe.GridProposalLossParameter.noobj_weight)
  return noobj_weight_;
}
void GridProposalLossParameter::set_noobj_weight(float value) {
  set_has_noobj_weight();
  noobj_weight_ = value;
  // @@protoc_insertion_point(field_set:caffe.GridProposalLossParameter.noobj_weight)
}

// repeated float obj_weight = 2;
int GridProposalLossParameter::obj_weight_size() const {
  return obj_weight_.size();
}
void GridProposalLossParameter::clear_obj_weight() {
  obj_weight_.Clear();
}
float GridProposalLossParameter::obj_weight(int index) const {
  // @@protoc_insertion_point(field_get:caffe.GridProposalLossParameter.obj_weight)
  return obj_weight_.Get(index);
}
void GridProposalLossParameter::set_obj_weight(int index, float value) {
  obj_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.GridProposalLossParameter.obj_weight)
}
void GridProposalLossParameter::add_obj_weight(float value) {
  obj_weight_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.GridProposalLossParameter.obj_weight)
}
const ::google::protobuf::RepeatedField< float >&
GridProposalLossParameter::obj_weight() const {
  // @@protoc_insertion_point(field_list:caffe.GridProposalLossParameter.obj_weight)
  return obj_weight_;
}
::google::protobuf::RepeatedField< float >*
GridProposalLossParameter::mutable_obj_weight() {
  // @@protoc_insertion_point(field_mutable_list:caffe.GridProposalLossParameter.obj_weight)
  return &obj_weight_;
}

// optional uint32 num_class = 3 [default = 1];
bool GridProposalLossParameter::has_num_class() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GridProposalLossParameter::set_has_num_class() {
  _has_bits_[0] |= 0x00000004u;
}
void GridProposalLossParameter::clear_has_num_class() {
  _has_bits_[0] &= ~0x00000004u;
}
void GridProposalLossParameter::clear_num_class() {
  num_class_ = 1u;
  clear_has_num_class();
}
::google::protobuf::uint32 GridProposalLossParameter::num_class() const {
  // @@protoc_insertion_point(field_get:caffe.GridProposalLossParameter.num_class)
  return num_class_;
}
void GridProposalLossParameter::set_num_class(::google::protobuf::uint32 value) {
  set_has_num_class();
  num_class_ = value;
  // @@protoc_insertion_point(field_set:caffe.GridProposalLossParameter.num_class)
}

// optional bool general_obj_proposal = 4 [default = false];
bool GridProposalLossParameter::has_general_obj_proposal() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GridProposalLossParameter::set_has_general_obj_proposal() {
  _has_bits_[0] |= 0x00000008u;
}
void GridProposalLossParameter::clear_has_general_obj_proposal() {
  _has_bits_[0] &= ~0x00000008u;
}
void GridProposalLossParameter::clear_general_obj_proposal() {
  general_obj_proposal_ = false;
  clear_has_general_obj_proposal();
}
bool GridProposalLossParameter::general_obj_proposal() const {
  // @@protoc_insertion_point(field_get:caffe.GridProposalLossParameter.general_obj_proposal)
  return general_obj_proposal_;
}
void GridProposalLossParameter::set_general_obj_proposal(bool value) {
  set_has_general_obj_proposal();
  general_obj_proposal_ = value;
  // @@protoc_insertion_point(field_set:caffe.GridProposalLossParameter.general_obj_proposal)
}

inline const GridProposalLossParameter* GridProposalLossParameter::internal_default_instance() {
  return &GridProposalLossParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BGSynthesisDataParameter::kWidthFieldNumber;
const int BGSynthesisDataParameter::kHeightFieldNumber;
const int BGSynthesisDataParameter::kObjDataParamFieldNumber;
const int BGSynthesisDataParameter::kBgDataParamFieldNumber;
const int BGSynthesisDataParameter::kMaxObjFieldNumber;
const int BGSynthesisDataParameter::kMinObjFieldNumber;
const int BGSynthesisDataParameter::kActiveRegionParamFieldNumber;
const int BGSynthesisDataParameter::kBatchSizeFieldNumber;
const int BGSynthesisDataParameter::kNumNegFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BGSynthesisDataParameter::BGSynthesisDataParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.BGSynthesisDataParameter)
}

void BGSynthesisDataParameter::InitAsDefaultInstance() {
  obj_data_param_ = const_cast< ::caffe::LayerParameter*>(
      ::caffe::LayerParameter::internal_default_instance());
  bg_data_param_ = const_cast< ::caffe::LayerParameter*>(
      ::caffe::LayerParameter::internal_default_instance());
  active_region_param_ = const_cast< ::caffe::ActivationRegionParameter*>(
      ::caffe::ActivationRegionParameter::internal_default_instance());
}

BGSynthesisDataParameter::BGSynthesisDataParameter(const BGSynthesisDataParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.BGSynthesisDataParameter)
}

void BGSynthesisDataParameter::SharedCtor() {
  _cached_size_ = 0;
  obj_data_param_ = NULL;
  bg_data_param_ = NULL;
  active_region_param_ = NULL;
  ::memset(&width_, 0, reinterpret_cast<char*>(&num_neg_) -
    reinterpret_cast<char*>(&width_) + sizeof(num_neg_));
  batch_size_ = 1u;
}

BGSynthesisDataParameter::~BGSynthesisDataParameter() {
  // @@protoc_insertion_point(destructor:caffe.BGSynthesisDataParameter)
  SharedDtor();
}

void BGSynthesisDataParameter::SharedDtor() {
  if (this != &BGSynthesisDataParameter_default_instance_.get()) {
    delete obj_data_param_;
    delete bg_data_param_;
    delete active_region_param_;
  }
}

void BGSynthesisDataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BGSynthesisDataParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BGSynthesisDataParameter_descriptor_;
}

const BGSynthesisDataParameter& BGSynthesisDataParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BGSynthesisDataParameter> BGSynthesisDataParameter_default_instance_;

BGSynthesisDataParameter* BGSynthesisDataParameter::New(::google::protobuf::Arena* arena) const {
  BGSynthesisDataParameter* n = new BGSynthesisDataParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BGSynthesisDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.BGSynthesisDataParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BGSynthesisDataParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BGSynthesisDataParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(width_, min_obj_);
    if (has_obj_data_param()) {
      if (obj_data_param_ != NULL) obj_data_param_->::caffe::LayerParameter::Clear();
    }
    if (has_bg_data_param()) {
      if (bg_data_param_ != NULL) bg_data_param_->::caffe::LayerParameter::Clear();
    }
    if (has_active_region_param()) {
      if (active_region_param_ != NULL) active_region_param_->::caffe::ActivationRegionParameter::Clear();
    }
    batch_size_ = 1u;
  }
  num_neg_ = 0u;

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BGSynthesisDataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.BGSynthesisDataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 width = 1;
      case 1: {
        if (tag == 8) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }

      // required uint32 height = 2;
      case 2: {
        if (tag == 16) {
         parse_height:
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_obj_data_param;
        break;
      }

      // required .caffe.LayerParameter obj_data_param = 3;
      case 3: {
        if (tag == 26) {
         parse_obj_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_obj_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_bg_data_param;
        break;
      }

      // required .caffe.LayerParameter bg_data_param = 4;
      case 4: {
        if (tag == 34) {
         parse_bg_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bg_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_max_obj;
        break;
      }

      // required uint32 max_obj = 5;
      case 5: {
        if (tag == 40) {
         parse_max_obj:
          set_has_max_obj();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_obj_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_min_obj;
        break;
      }

      // optional uint32 min_obj = 6;
      case 6: {
        if (tag == 48) {
         parse_min_obj:
          set_has_min_obj();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_obj_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_active_region_param;
        break;
      }

      // optional .caffe.ActivationRegionParameter active_region_param = 7;
      case 7: {
        if (tag == 58) {
         parse_active_region_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_active_region_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_batch_size;
        break;
      }

      // optional uint32 batch_size = 8 [default = 1];
      case 8: {
        if (tag == 64) {
         parse_batch_size:
          set_has_batch_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_num_neg;
        break;
      }

      // optional uint32 num_neg = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_num_neg:
          set_has_num_neg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_neg_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.BGSynthesisDataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.BGSynthesisDataParameter)
  return false;
#undef DO_
}

void BGSynthesisDataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.BGSynthesisDataParameter)
  // required uint32 width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->width(), output);
  }

  // required uint32 height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->height(), output);
  }

  // required .caffe.LayerParameter obj_data_param = 3;
  if (has_obj_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->obj_data_param_, output);
  }

  // required .caffe.LayerParameter bg_data_param = 4;
  if (has_bg_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->bg_data_param_, output);
  }

  // required uint32 max_obj = 5;
  if (has_max_obj()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->max_obj(), output);
  }

  // optional uint32 min_obj = 6;
  if (has_min_obj()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->min_obj(), output);
  }

  // optional .caffe.ActivationRegionParameter active_region_param = 7;
  if (has_active_region_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->active_region_param_, output);
  }

  // optional uint32 batch_size = 8 [default = 1];
  if (has_batch_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->batch_size(), output);
  }

  // optional uint32 num_neg = 9 [default = 0];
  if (has_num_neg()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->num_neg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.BGSynthesisDataParameter)
}

::google::protobuf::uint8* BGSynthesisDataParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.BGSynthesisDataParameter)
  // required uint32 width = 1;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->width(), target);
  }

  // required uint32 height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->height(), target);
  }

  // required .caffe.LayerParameter obj_data_param = 3;
  if (has_obj_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->obj_data_param_, false, target);
  }

  // required .caffe.LayerParameter bg_data_param = 4;
  if (has_bg_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->bg_data_param_, false, target);
  }

  // required uint32 max_obj = 5;
  if (has_max_obj()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->max_obj(), target);
  }

  // optional uint32 min_obj = 6;
  if (has_min_obj()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->min_obj(), target);
  }

  // optional .caffe.ActivationRegionParameter active_region_param = 7;
  if (has_active_region_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->active_region_param_, false, target);
  }

  // optional uint32 batch_size = 8 [default = 1];
  if (has_batch_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->batch_size(), target);
  }

  // optional uint32 num_neg = 9 [default = 0];
  if (has_num_neg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->num_neg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.BGSynthesisDataParameter)
  return target;
}

size_t BGSynthesisDataParameter::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe.BGSynthesisDataParameter)
  size_t total_size = 0;

  if (has_width()) {
    // required uint32 width = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  if (has_height()) {
    // required uint32 height = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  if (has_obj_data_param()) {
    // required .caffe.LayerParameter obj_data_param = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->obj_data_param_);
  }

  if (has_bg_data_param()) {
    // required .caffe.LayerParameter bg_data_param = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bg_data_param_);
  }

  if (has_max_obj()) {
    // required uint32 max_obj = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_obj());
  }

  return total_size;
}
size_t BGSynthesisDataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.BGSynthesisDataParameter)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required uint32 width = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());

    // required uint32 height = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());

    // required .caffe.LayerParameter obj_data_param = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->obj_data_param_);

    // required .caffe.LayerParameter bg_data_param = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bg_data_param_);

    // required uint32 max_obj = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_obj());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[5 / 32] & 224u) {
    // optional uint32 min_obj = 6;
    if (has_min_obj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_obj());
    }

    // optional .caffe.ActivationRegionParameter active_region_param = 7;
    if (has_active_region_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->active_region_param_);
    }

    // optional uint32 batch_size = 8 [default = 1];
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_size());
    }

  }
  // optional uint32 num_neg = 9 [default = 0];
  if (has_num_neg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_neg());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BGSynthesisDataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.BGSynthesisDataParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BGSynthesisDataParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BGSynthesisDataParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.BGSynthesisDataParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.BGSynthesisDataParameter)
    UnsafeMergeFrom(*source);
  }
}

void BGSynthesisDataParameter::MergeFrom(const BGSynthesisDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.BGSynthesisDataParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BGSynthesisDataParameter::UnsafeMergeFrom(const BGSynthesisDataParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_obj_data_param()) {
      mutable_obj_data_param()->::caffe::LayerParameter::MergeFrom(from.obj_data_param());
    }
    if (from.has_bg_data_param()) {
      mutable_bg_data_param()->::caffe::LayerParameter::MergeFrom(from.bg_data_param());
    }
    if (from.has_max_obj()) {
      set_max_obj(from.max_obj());
    }
    if (from.has_min_obj()) {
      set_min_obj(from.min_obj());
    }
    if (from.has_active_region_param()) {
      mutable_active_region_param()->::caffe::ActivationRegionParameter::MergeFrom(from.active_region_param());
    }
    if (from.has_batch_size()) {
      set_batch_size(from.batch_size());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_num_neg()) {
      set_num_neg(from.num_neg());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void BGSynthesisDataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.BGSynthesisDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BGSynthesisDataParameter::CopyFrom(const BGSynthesisDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.BGSynthesisDataParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BGSynthesisDataParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_obj_data_param()) {
    if (!this->obj_data_param_->IsInitialized()) return false;
  }
  if (has_bg_data_param()) {
    if (!this->bg_data_param_->IsInitialized()) return false;
  }
  if (has_active_region_param()) {
    if (!this->active_region_param_->IsInitialized()) return false;
  }
  return true;
}

void BGSynthesisDataParameter::Swap(BGSynthesisDataParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BGSynthesisDataParameter::InternalSwap(BGSynthesisDataParameter* other) {
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(obj_data_param_, other->obj_data_param_);
  std::swap(bg_data_param_, other->bg_data_param_);
  std::swap(max_obj_, other->max_obj_);
  std::swap(min_obj_, other->min_obj_);
  std::swap(active_region_param_, other->active_region_param_);
  std::swap(batch_size_, other->batch_size_);
  std::swap(num_neg_, other->num_neg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BGSynthesisDataParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BGSynthesisDataParameter_descriptor_;
  metadata.reflection = BGSynthesisDataParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BGSynthesisDataParameter

// required uint32 width = 1;
bool BGSynthesisDataParameter::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BGSynthesisDataParameter::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
void BGSynthesisDataParameter::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
void BGSynthesisDataParameter::clear_width() {
  width_ = 0u;
  clear_has_width();
}
::google::protobuf::uint32 BGSynthesisDataParameter::width() const {
  // @@protoc_insertion_point(field_get:caffe.BGSynthesisDataParameter.width)
  return width_;
}
void BGSynthesisDataParameter::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.BGSynthesisDataParameter.width)
}

// required uint32 height = 2;
bool BGSynthesisDataParameter::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BGSynthesisDataParameter::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
void BGSynthesisDataParameter::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
void BGSynthesisDataParameter::clear_height() {
  height_ = 0u;
  clear_has_height();
}
::google::protobuf::uint32 BGSynthesisDataParameter::height() const {
  // @@protoc_insertion_point(field_get:caffe.BGSynthesisDataParameter.height)
  return height_;
}
void BGSynthesisDataParameter::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.BGSynthesisDataParameter.height)
}

// required .caffe.LayerParameter obj_data_param = 3;
bool BGSynthesisDataParameter::has_obj_data_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BGSynthesisDataParameter::set_has_obj_data_param() {
  _has_bits_[0] |= 0x00000004u;
}
void BGSynthesisDataParameter::clear_has_obj_data_param() {
  _has_bits_[0] &= ~0x00000004u;
}
void BGSynthesisDataParameter::clear_obj_data_param() {
  if (obj_data_param_ != NULL) obj_data_param_->::caffe::LayerParameter::Clear();
  clear_has_obj_data_param();
}
const ::caffe::LayerParameter& BGSynthesisDataParameter::obj_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.BGSynthesisDataParameter.obj_data_param)
  return obj_data_param_ != NULL ? *obj_data_param_
                         : *::caffe::LayerParameter::internal_default_instance();
}
::caffe::LayerParameter* BGSynthesisDataParameter::mutable_obj_data_param() {
  set_has_obj_data_param();
  if (obj_data_param_ == NULL) {
    obj_data_param_ = new ::caffe::LayerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.BGSynthesisDataParameter.obj_data_param)
  return obj_data_param_;
}
::caffe::LayerParameter* BGSynthesisDataParameter::release_obj_data_param() {
  // @@protoc_insertion_point(field_release:caffe.BGSynthesisDataParameter.obj_data_param)
  clear_has_obj_data_param();
  ::caffe::LayerParameter* temp = obj_data_param_;
  obj_data_param_ = NULL;
  return temp;
}
void BGSynthesisDataParameter::set_allocated_obj_data_param(::caffe::LayerParameter* obj_data_param) {
  delete obj_data_param_;
  obj_data_param_ = obj_data_param;
  if (obj_data_param) {
    set_has_obj_data_param();
  } else {
    clear_has_obj_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.BGSynthesisDataParameter.obj_data_param)
}

// required .caffe.LayerParameter bg_data_param = 4;
bool BGSynthesisDataParameter::has_bg_data_param() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BGSynthesisDataParameter::set_has_bg_data_param() {
  _has_bits_[0] |= 0x00000008u;
}
void BGSynthesisDataParameter::clear_has_bg_data_param() {
  _has_bits_[0] &= ~0x00000008u;
}
void BGSynthesisDataParameter::clear_bg_data_param() {
  if (bg_data_param_ != NULL) bg_data_param_->::caffe::LayerParameter::Clear();
  clear_has_bg_data_param();
}
const ::caffe::LayerParameter& BGSynthesisDataParameter::bg_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.BGSynthesisDataParameter.bg_data_param)
  return bg_data_param_ != NULL ? *bg_data_param_
                         : *::caffe::LayerParameter::internal_default_instance();
}
::caffe::LayerParameter* BGSynthesisDataParameter::mutable_bg_data_param() {
  set_has_bg_data_param();
  if (bg_data_param_ == NULL) {
    bg_data_param_ = new ::caffe::LayerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.BGSynthesisDataParameter.bg_data_param)
  return bg_data_param_;
}
::caffe::LayerParameter* BGSynthesisDataParameter::release_bg_data_param() {
  // @@protoc_insertion_point(field_release:caffe.BGSynthesisDataParameter.bg_data_param)
  clear_has_bg_data_param();
  ::caffe::LayerParameter* temp = bg_data_param_;
  bg_data_param_ = NULL;
  return temp;
}
void BGSynthesisDataParameter::set_allocated_bg_data_param(::caffe::LayerParameter* bg_data_param) {
  delete bg_data_param_;
  bg_data_param_ = bg_data_param;
  if (bg_data_param) {
    set_has_bg_data_param();
  } else {
    clear_has_bg_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.BGSynthesisDataParameter.bg_data_param)
}

// required uint32 max_obj = 5;
bool BGSynthesisDataParameter::has_max_obj() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BGSynthesisDataParameter::set_has_max_obj() {
  _has_bits_[0] |= 0x00000010u;
}
void BGSynthesisDataParameter::clear_has_max_obj() {
  _has_bits_[0] &= ~0x00000010u;
}
void BGSynthesisDataParameter::clear_max_obj() {
  max_obj_ = 0u;
  clear_has_max_obj();
}
::google::protobuf::uint32 BGSynthesisDataParameter::max_obj() const {
  // @@protoc_insertion_point(field_get:caffe.BGSynthesisDataParameter.max_obj)
  return max_obj_;
}
void BGSynthesisDataParameter::set_max_obj(::google::protobuf::uint32 value) {
  set_has_max_obj();
  max_obj_ = value;
  // @@protoc_insertion_point(field_set:caffe.BGSynthesisDataParameter.max_obj)
}

// optional uint32 min_obj = 6;
bool BGSynthesisDataParameter::has_min_obj() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BGSynthesisDataParameter::set_has_min_obj() {
  _has_bits_[0] |= 0x00000020u;
}
void BGSynthesisDataParameter::clear_has_min_obj() {
  _has_bits_[0] &= ~0x00000020u;
}
void BGSynthesisDataParameter::clear_min_obj() {
  min_obj_ = 0u;
  clear_has_min_obj();
}
::google::protobuf::uint32 BGSynthesisDataParameter::min_obj() const {
  // @@protoc_insertion_point(field_get:caffe.BGSynthesisDataParameter.min_obj)
  return min_obj_;
}
void BGSynthesisDataParameter::set_min_obj(::google::protobuf::uint32 value) {
  set_has_min_obj();
  min_obj_ = value;
  // @@protoc_insertion_point(field_set:caffe.BGSynthesisDataParameter.min_obj)
}

// optional .caffe.ActivationRegionParameter active_region_param = 7;
bool BGSynthesisDataParameter::has_active_region_param() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BGSynthesisDataParameter::set_has_active_region_param() {
  _has_bits_[0] |= 0x00000040u;
}
void BGSynthesisDataParameter::clear_has_active_region_param() {
  _has_bits_[0] &= ~0x00000040u;
}
void BGSynthesisDataParameter::clear_active_region_param() {
  if (active_region_param_ != NULL) active_region_param_->::caffe::ActivationRegionParameter::Clear();
  clear_has_active_region_param();
}
const ::caffe::ActivationRegionParameter& BGSynthesisDataParameter::active_region_param() const {
  // @@protoc_insertion_point(field_get:caffe.BGSynthesisDataParameter.active_region_param)
  return active_region_param_ != NULL ? *active_region_param_
                         : *::caffe::ActivationRegionParameter::internal_default_instance();
}
::caffe::ActivationRegionParameter* BGSynthesisDataParameter::mutable_active_region_param() {
  set_has_active_region_param();
  if (active_region_param_ == NULL) {
    active_region_param_ = new ::caffe::ActivationRegionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.BGSynthesisDataParameter.active_region_param)
  return active_region_param_;
}
::caffe::ActivationRegionParameter* BGSynthesisDataParameter::release_active_region_param() {
  // @@protoc_insertion_point(field_release:caffe.BGSynthesisDataParameter.active_region_param)
  clear_has_active_region_param();
  ::caffe::ActivationRegionParameter* temp = active_region_param_;
  active_region_param_ = NULL;
  return temp;
}
void BGSynthesisDataParameter::set_allocated_active_region_param(::caffe::ActivationRegionParameter* active_region_param) {
  delete active_region_param_;
  active_region_param_ = active_region_param;
  if (active_region_param) {
    set_has_active_region_param();
  } else {
    clear_has_active_region_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.BGSynthesisDataParameter.active_region_param)
}

// optional uint32 batch_size = 8 [default = 1];
bool BGSynthesisDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BGSynthesisDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000080u;
}
void BGSynthesisDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000080u;
}
void BGSynthesisDataParameter::clear_batch_size() {
  batch_size_ = 1u;
  clear_has_batch_size();
}
::google::protobuf::uint32 BGSynthesisDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.BGSynthesisDataParameter.batch_size)
  return batch_size_;
}
void BGSynthesisDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.BGSynthesisDataParameter.batch_size)
}

// optional uint32 num_neg = 9 [default = 0];
bool BGSynthesisDataParameter::has_num_neg() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void BGSynthesisDataParameter::set_has_num_neg() {
  _has_bits_[0] |= 0x00000100u;
}
void BGSynthesisDataParameter::clear_has_num_neg() {
  _has_bits_[0] &= ~0x00000100u;
}
void BGSynthesisDataParameter::clear_num_neg() {
  num_neg_ = 0u;
  clear_has_num_neg();
}
::google::protobuf::uint32 BGSynthesisDataParameter::num_neg() const {
  // @@protoc_insertion_point(field_get:caffe.BGSynthesisDataParameter.num_neg)
  return num_neg_;
}
void BGSynthesisDataParameter::set_num_neg(::google::protobuf::uint32 value) {
  set_has_num_neg();
  num_neg_ = value;
  // @@protoc_insertion_point(field_set:caffe.BGSynthesisDataParameter.num_neg)
}

inline const BGSynthesisDataParameter* BGSynthesisDataParameter::internal_default_instance() {
  return &BGSynthesisDataParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SizeFilterParameter::kAxisFieldNumber;
const int SizeFilterParameter::kMinFieldNumber;
const int SizeFilterParameter::kMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SizeFilterParameter::SizeFilterParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SizeFilterParameter)
}

void SizeFilterParameter::InitAsDefaultInstance() {
}

SizeFilterParameter::SizeFilterParameter(const SizeFilterParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.SizeFilterParameter)
}

void SizeFilterParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&min_, 0, reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_) + sizeof(max_));
  axis_ = 2u;
}

SizeFilterParameter::~SizeFilterParameter() {
  // @@protoc_insertion_point(destructor:caffe.SizeFilterParameter)
  SharedDtor();
}

void SizeFilterParameter::SharedDtor() {
}

void SizeFilterParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SizeFilterParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SizeFilterParameter_descriptor_;
}

const SizeFilterParameter& SizeFilterParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SizeFilterParameter> SizeFilterParameter_default_instance_;

SizeFilterParameter* SizeFilterParameter::New(::google::protobuf::Arena* arena) const {
  SizeFilterParameter* n = new SizeFilterParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SizeFilterParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SizeFilterParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SizeFilterParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SizeFilterParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(min_, max_);
    axis_ = 2u;
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SizeFilterParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SizeFilterParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 axis = 1 [default = 2];
      case 1: {
        if (tag == 8) {
          set_has_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &axis_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_min;
        break;
      }

      // optional double min = 2;
      case 2: {
        if (tag == 17) {
         parse_min:
          set_has_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_max;
        break;
      }

      // optional double max = 3;
      case 3: {
        if (tag == 25) {
         parse_max:
          set_has_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SizeFilterParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SizeFilterParameter)
  return false;
#undef DO_
}

void SizeFilterParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SizeFilterParameter)
  // optional uint32 axis = 1 [default = 2];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->axis(), output);
  }

  // optional double min = 2;
  if (has_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->min(), output);
  }

  // optional double max = 3;
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->max(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SizeFilterParameter)
}

::google::protobuf::uint8* SizeFilterParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SizeFilterParameter)
  // optional uint32 axis = 1 [default = 2];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->axis(), target);
  }

  // optional double min = 2;
  if (has_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->min(), target);
  }

  // optional double max = 3;
  if (has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->max(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SizeFilterParameter)
  return target;
}

size_t SizeFilterParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SizeFilterParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 axis = 1 [default = 2];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->axis());
    }

    // optional double min = 2;
    if (has_min()) {
      total_size += 1 + 8;
    }

    // optional double max = 3;
    if (has_max()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SizeFilterParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SizeFilterParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SizeFilterParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SizeFilterParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SizeFilterParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SizeFilterParameter)
    UnsafeMergeFrom(*source);
  }
}

void SizeFilterParameter::MergeFrom(const SizeFilterParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SizeFilterParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SizeFilterParameter::UnsafeMergeFrom(const SizeFilterParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_axis()) {
      set_axis(from.axis());
    }
    if (from.has_min()) {
      set_min(from.min());
    }
    if (from.has_max()) {
      set_max(from.max());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void SizeFilterParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SizeFilterParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SizeFilterParameter::CopyFrom(const SizeFilterParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SizeFilterParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SizeFilterParameter::IsInitialized() const {

  return true;
}

void SizeFilterParameter::Swap(SizeFilterParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SizeFilterParameter::InternalSwap(SizeFilterParameter* other) {
  std::swap(axis_, other->axis_);
  std::swap(min_, other->min_);
  std::swap(max_, other->max_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SizeFilterParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SizeFilterParameter_descriptor_;
  metadata.reflection = SizeFilterParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SizeFilterParameter

// optional uint32 axis = 1 [default = 2];
bool SizeFilterParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SizeFilterParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
void SizeFilterParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
void SizeFilterParameter::clear_axis() {
  axis_ = 2u;
  clear_has_axis();
}
::google::protobuf::uint32 SizeFilterParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.SizeFilterParameter.axis)
  return axis_;
}
void SizeFilterParameter::set_axis(::google::protobuf::uint32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.SizeFilterParameter.axis)
}

// optional double min = 2;
bool SizeFilterParameter::has_min() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SizeFilterParameter::set_has_min() {
  _has_bits_[0] |= 0x00000002u;
}
void SizeFilterParameter::clear_has_min() {
  _has_bits_[0] &= ~0x00000002u;
}
void SizeFilterParameter::clear_min() {
  min_ = 0;
  clear_has_min();
}
double SizeFilterParameter::min() const {
  // @@protoc_insertion_point(field_get:caffe.SizeFilterParameter.min)
  return min_;
}
void SizeFilterParameter::set_min(double value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:caffe.SizeFilterParameter.min)
}

// optional double max = 3;
bool SizeFilterParameter::has_max() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SizeFilterParameter::set_has_max() {
  _has_bits_[0] |= 0x00000004u;
}
void SizeFilterParameter::clear_has_max() {
  _has_bits_[0] &= ~0x00000004u;
}
void SizeFilterParameter::clear_max() {
  max_ = 0;
  clear_has_max();
}
double SizeFilterParameter::max() const {
  // @@protoc_insertion_point(field_get:caffe.SizeFilterParameter.max)
  return max_;
}
void SizeFilterParameter::set_max(double value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:caffe.SizeFilterParameter.max)
}

inline const SizeFilterParameter* SizeFilterParameter::internal_default_instance() {
  return &SizeFilterParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RandomResizeParameter::kPFieldNumber;
const int RandomResizeParameter::kWMinFieldNumber;
const int RandomResizeParameter::kWMaxFieldNumber;
const int RandomResizeParameter::kHMinFieldNumber;
const int RandomResizeParameter::kHMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RandomResizeParameter::RandomResizeParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.RandomResizeParameter)
}

void RandomResizeParameter::InitAsDefaultInstance() {
}

RandomResizeParameter::RandomResizeParameter(const RandomResizeParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.RandomResizeParameter)
}

void RandomResizeParameter::SharedCtor() {
  _cached_size_ = 0;
  h_max_ = 1;
  p_ = 1;
  w_min_ = 1;
  w_max_ = 1;
  h_min_ = 1;
}

RandomResizeParameter::~RandomResizeParameter() {
  // @@protoc_insertion_point(destructor:caffe.RandomResizeParameter)
  SharedDtor();
}

void RandomResizeParameter::SharedDtor() {
}

void RandomResizeParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandomResizeParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RandomResizeParameter_descriptor_;
}

const RandomResizeParameter& RandomResizeParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RandomResizeParameter> RandomResizeParameter_default_instance_;

RandomResizeParameter* RandomResizeParameter::New(::google::protobuf::Arena* arena) const {
  RandomResizeParameter* n = new RandomResizeParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RandomResizeParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.RandomResizeParameter)
  if (_has_bits_[0 / 32] & 31u) {
    p_ = 1;
    w_min_ = 1;
    w_max_ = 1;
    h_min_ = 1;
    h_max_ = 1;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RandomResizeParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.RandomResizeParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float p = 1 [default = 1];
      case 1: {
        if (tag == 13) {
          set_has_p();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &p_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_w_min;
        break;
      }

      // optional float w_min = 2 [default = 1];
      case 2: {
        if (tag == 21) {
         parse_w_min:
          set_has_w_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_min_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_w_max;
        break;
      }

      // optional float w_max = 3 [default = 1];
      case 3: {
        if (tag == 29) {
         parse_w_max:
          set_has_w_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_max_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_h_min;
        break;
      }

      // optional float h_min = 4 [default = 1];
      case 4: {
        if (tag == 37) {
         parse_h_min:
          set_has_h_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &h_min_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_h_max;
        break;
      }

      // optional float h_max = 5 [default = 1];
      case 5: {
        if (tag == 45) {
         parse_h_max:
          set_has_h_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &h_max_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.RandomResizeParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.RandomResizeParameter)
  return false;
#undef DO_
}

void RandomResizeParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.RandomResizeParameter)
  // optional float p = 1 [default = 1];
  if (has_p()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->p(), output);
  }

  // optional float w_min = 2 [default = 1];
  if (has_w_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->w_min(), output);
  }

  // optional float w_max = 3 [default = 1];
  if (has_w_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->w_max(), output);
  }

  // optional float h_min = 4 [default = 1];
  if (has_h_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->h_min(), output);
  }

  // optional float h_max = 5 [default = 1];
  if (has_h_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->h_max(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.RandomResizeParameter)
}

::google::protobuf::uint8* RandomResizeParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.RandomResizeParameter)
  // optional float p = 1 [default = 1];
  if (has_p()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->p(), target);
  }

  // optional float w_min = 2 [default = 1];
  if (has_w_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->w_min(), target);
  }

  // optional float w_max = 3 [default = 1];
  if (has_w_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->w_max(), target);
  }

  // optional float h_min = 4 [default = 1];
  if (has_h_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->h_min(), target);
  }

  // optional float h_max = 5 [default = 1];
  if (has_h_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->h_max(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.RandomResizeParameter)
  return target;
}

size_t RandomResizeParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.RandomResizeParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional float p = 1 [default = 1];
    if (has_p()) {
      total_size += 1 + 4;
    }

    // optional float w_min = 2 [default = 1];
    if (has_w_min()) {
      total_size += 1 + 4;
    }

    // optional float w_max = 3 [default = 1];
    if (has_w_max()) {
      total_size += 1 + 4;
    }

    // optional float h_min = 4 [default = 1];
    if (has_h_min()) {
      total_size += 1 + 4;
    }

    // optional float h_max = 5 [default = 1];
    if (has_h_max()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandomResizeParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.RandomResizeParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RandomResizeParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RandomResizeParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.RandomResizeParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.RandomResizeParameter)
    UnsafeMergeFrom(*source);
  }
}

void RandomResizeParameter::MergeFrom(const RandomResizeParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.RandomResizeParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RandomResizeParameter::UnsafeMergeFrom(const RandomResizeParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_p()) {
      set_p(from.p());
    }
    if (from.has_w_min()) {
      set_w_min(from.w_min());
    }
    if (from.has_w_max()) {
      set_w_max(from.w_max());
    }
    if (from.has_h_min()) {
      set_h_min(from.h_min());
    }
    if (from.has_h_max()) {
      set_h_max(from.h_max());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void RandomResizeParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.RandomResizeParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomResizeParameter::CopyFrom(const RandomResizeParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.RandomResizeParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RandomResizeParameter::IsInitialized() const {

  return true;
}

void RandomResizeParameter::Swap(RandomResizeParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RandomResizeParameter::InternalSwap(RandomResizeParameter* other) {
  std::swap(p_, other->p_);
  std::swap(w_min_, other->w_min_);
  std::swap(w_max_, other->w_max_);
  std::swap(h_min_, other->h_min_);
  std::swap(h_max_, other->h_max_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RandomResizeParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RandomResizeParameter_descriptor_;
  metadata.reflection = RandomResizeParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RandomResizeParameter

// optional float p = 1 [default = 1];
bool RandomResizeParameter::has_p() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RandomResizeParameter::set_has_p() {
  _has_bits_[0] |= 0x00000001u;
}
void RandomResizeParameter::clear_has_p() {
  _has_bits_[0] &= ~0x00000001u;
}
void RandomResizeParameter::clear_p() {
  p_ = 1;
  clear_has_p();
}
float RandomResizeParameter::p() const {
  // @@protoc_insertion_point(field_get:caffe.RandomResizeParameter.p)
  return p_;
}
void RandomResizeParameter::set_p(float value) {
  set_has_p();
  p_ = value;
  // @@protoc_insertion_point(field_set:caffe.RandomResizeParameter.p)
}

// optional float w_min = 2 [default = 1];
bool RandomResizeParameter::has_w_min() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RandomResizeParameter::set_has_w_min() {
  _has_bits_[0] |= 0x00000002u;
}
void RandomResizeParameter::clear_has_w_min() {
  _has_bits_[0] &= ~0x00000002u;
}
void RandomResizeParameter::clear_w_min() {
  w_min_ = 1;
  clear_has_w_min();
}
float RandomResizeParameter::w_min() const {
  // @@protoc_insertion_point(field_get:caffe.RandomResizeParameter.w_min)
  return w_min_;
}
void RandomResizeParameter::set_w_min(float value) {
  set_has_w_min();
  w_min_ = value;
  // @@protoc_insertion_point(field_set:caffe.RandomResizeParameter.w_min)
}

// optional float w_max = 3 [default = 1];
bool RandomResizeParameter::has_w_max() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RandomResizeParameter::set_has_w_max() {
  _has_bits_[0] |= 0x00000004u;
}
void RandomResizeParameter::clear_has_w_max() {
  _has_bits_[0] &= ~0x00000004u;
}
void RandomResizeParameter::clear_w_max() {
  w_max_ = 1;
  clear_has_w_max();
}
float RandomResizeParameter::w_max() const {
  // @@protoc_insertion_point(field_get:caffe.RandomResizeParameter.w_max)
  return w_max_;
}
void RandomResizeParameter::set_w_max(float value) {
  set_has_w_max();
  w_max_ = value;
  // @@protoc_insertion_point(field_set:caffe.RandomResizeParameter.w_max)
}

// optional float h_min = 4 [default = 1];
bool RandomResizeParameter::has_h_min() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RandomResizeParameter::set_has_h_min() {
  _has_bits_[0] |= 0x00000008u;
}
void RandomResizeParameter::clear_has_h_min() {
  _has_bits_[0] &= ~0x00000008u;
}
void RandomResizeParameter::clear_h_min() {
  h_min_ = 1;
  clear_has_h_min();
}
float RandomResizeParameter::h_min() const {
  // @@protoc_insertion_point(field_get:caffe.RandomResizeParameter.h_min)
  return h_min_;
}
void RandomResizeParameter::set_h_min(float value) {
  set_has_h_min();
  h_min_ = value;
  // @@protoc_insertion_point(field_set:caffe.RandomResizeParameter.h_min)
}

// optional float h_max = 5 [default = 1];
bool RandomResizeParameter::has_h_max() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RandomResizeParameter::set_has_h_max() {
  _has_bits_[0] |= 0x00000010u;
}
void RandomResizeParameter::clear_has_h_max() {
  _has_bits_[0] &= ~0x00000010u;
}
void RandomResizeParameter::clear_h_max() {
  h_max_ = 1;
  clear_has_h_max();
}
float RandomResizeParameter::h_max() const {
  // @@protoc_insertion_point(field_get:caffe.RandomResizeParameter.h_max)
  return h_max_;
}
void RandomResizeParameter::set_h_max(float value) {
  set_has_h_max();
  h_max_ = value;
  // @@protoc_insertion_point(field_set:caffe.RandomResizeParameter.h_max)
}

inline const RandomResizeParameter* RandomResizeParameter::internal_default_instance() {
  return &RandomResizeParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GaussianNoiseParameter::kPFieldNumber;
const int GaussianNoiseParameter::kMeanFieldNumber;
const int GaussianNoiseParameter::kStddevFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GaussianNoiseParameter::GaussianNoiseParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.GaussianNoiseParameter)
}

void GaussianNoiseParameter::InitAsDefaultInstance() {
}

GaussianNoiseParameter::GaussianNoiseParameter(const GaussianNoiseParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.GaussianNoiseParameter)
}

void GaussianNoiseParameter::SharedCtor() {
  _cached_size_ = 0;
  mean_ = 0;
  p_ = 1;
  stddev_ = 1;
}

GaussianNoiseParameter::~GaussianNoiseParameter() {
  // @@protoc_insertion_point(destructor:caffe.GaussianNoiseParameter)
  SharedDtor();
}

void GaussianNoiseParameter::SharedDtor() {
}

void GaussianNoiseParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GaussianNoiseParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GaussianNoiseParameter_descriptor_;
}

const GaussianNoiseParameter& GaussianNoiseParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GaussianNoiseParameter> GaussianNoiseParameter_default_instance_;

GaussianNoiseParameter* GaussianNoiseParameter::New(::google::protobuf::Arena* arena) const {
  GaussianNoiseParameter* n = new GaussianNoiseParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GaussianNoiseParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.GaussianNoiseParameter)
  if (_has_bits_[0 / 32] & 7u) {
    p_ = 1;
    mean_ = 0;
    stddev_ = 1;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GaussianNoiseParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.GaussianNoiseParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float p = 1 [default = 1];
      case 1: {
        if (tag == 13) {
          set_has_p();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &p_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_mean;
        break;
      }

      // optional float mean = 2 [default = 0];
      case 2: {
        if (tag == 21) {
         parse_mean:
          set_has_mean();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_stddev;
        break;
      }

      // optional float stddev = 3 [default = 1];
      case 3: {
        if (tag == 29) {
         parse_stddev:
          set_has_stddev();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stddev_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.GaussianNoiseParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.GaussianNoiseParameter)
  return false;
#undef DO_
}

void GaussianNoiseParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.GaussianNoiseParameter)
  // optional float p = 1 [default = 1];
  if (has_p()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->p(), output);
  }

  // optional float mean = 2 [default = 0];
  if (has_mean()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->mean(), output);
  }

  // optional float stddev = 3 [default = 1];
  if (has_stddev()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->stddev(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.GaussianNoiseParameter)
}

::google::protobuf::uint8* GaussianNoiseParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.GaussianNoiseParameter)
  // optional float p = 1 [default = 1];
  if (has_p()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->p(), target);
  }

  // optional float mean = 2 [default = 0];
  if (has_mean()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->mean(), target);
  }

  // optional float stddev = 3 [default = 1];
  if (has_stddev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->stddev(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.GaussianNoiseParameter)
  return target;
}

size_t GaussianNoiseParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.GaussianNoiseParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional float p = 1 [default = 1];
    if (has_p()) {
      total_size += 1 + 4;
    }

    // optional float mean = 2 [default = 0];
    if (has_mean()) {
      total_size += 1 + 4;
    }

    // optional float stddev = 3 [default = 1];
    if (has_stddev()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GaussianNoiseParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.GaussianNoiseParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GaussianNoiseParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GaussianNoiseParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.GaussianNoiseParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.GaussianNoiseParameter)
    UnsafeMergeFrom(*source);
  }
}

void GaussianNoiseParameter::MergeFrom(const GaussianNoiseParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.GaussianNoiseParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GaussianNoiseParameter::UnsafeMergeFrom(const GaussianNoiseParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_p()) {
      set_p(from.p());
    }
    if (from.has_mean()) {
      set_mean(from.mean());
    }
    if (from.has_stddev()) {
      set_stddev(from.stddev());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void GaussianNoiseParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.GaussianNoiseParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GaussianNoiseParameter::CopyFrom(const GaussianNoiseParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.GaussianNoiseParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GaussianNoiseParameter::IsInitialized() const {

  return true;
}

void GaussianNoiseParameter::Swap(GaussianNoiseParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GaussianNoiseParameter::InternalSwap(GaussianNoiseParameter* other) {
  std::swap(p_, other->p_);
  std::swap(mean_, other->mean_);
  std::swap(stddev_, other->stddev_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GaussianNoiseParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GaussianNoiseParameter_descriptor_;
  metadata.reflection = GaussianNoiseParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GaussianNoiseParameter

// optional float p = 1 [default = 1];
bool GaussianNoiseParameter::has_p() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GaussianNoiseParameter::set_has_p() {
  _has_bits_[0] |= 0x00000001u;
}
void GaussianNoiseParameter::clear_has_p() {
  _has_bits_[0] &= ~0x00000001u;
}
void GaussianNoiseParameter::clear_p() {
  p_ = 1;
  clear_has_p();
}
float GaussianNoiseParameter::p() const {
  // @@protoc_insertion_point(field_get:caffe.GaussianNoiseParameter.p)
  return p_;
}
void GaussianNoiseParameter::set_p(float value) {
  set_has_p();
  p_ = value;
  // @@protoc_insertion_point(field_set:caffe.GaussianNoiseParameter.p)
}

// optional float mean = 2 [default = 0];
bool GaussianNoiseParameter::has_mean() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GaussianNoiseParameter::set_has_mean() {
  _has_bits_[0] |= 0x00000002u;
}
void GaussianNoiseParameter::clear_has_mean() {
  _has_bits_[0] &= ~0x00000002u;
}
void GaussianNoiseParameter::clear_mean() {
  mean_ = 0;
  clear_has_mean();
}
float GaussianNoiseParameter::mean() const {
  // @@protoc_insertion_point(field_get:caffe.GaussianNoiseParameter.mean)
  return mean_;
}
void GaussianNoiseParameter::set_mean(float value) {
  set_has_mean();
  mean_ = value;
  // @@protoc_insertion_point(field_set:caffe.GaussianNoiseParameter.mean)
}

// optional float stddev = 3 [default = 1];
bool GaussianNoiseParameter::has_stddev() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GaussianNoiseParameter::set_has_stddev() {
  _has_bits_[0] |= 0x00000004u;
}
void GaussianNoiseParameter::clear_has_stddev() {
  _has_bits_[0] &= ~0x00000004u;
}
void GaussianNoiseParameter::clear_stddev() {
  stddev_ = 1;
  clear_has_stddev();
}
float GaussianNoiseParameter::stddev() const {
  // @@protoc_insertion_point(field_get:caffe.GaussianNoiseParameter.stddev)
  return stddev_;
}
void GaussianNoiseParameter::set_stddev(float value) {
  set_has_stddev();
  stddev_ = value;
  // @@protoc_insertion_point(field_set:caffe.GaussianNoiseParameter.stddev)
}

inline const GaussianNoiseParameter* GaussianNoiseParameter::internal_default_instance() {
  return &GaussianNoiseParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MirrorParameter::kPFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MirrorParameter::MirrorParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.MirrorParameter)
}

void MirrorParameter::InitAsDefaultInstance() {
}

MirrorParameter::MirrorParameter(const MirrorParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.MirrorParameter)
}

void MirrorParameter::SharedCtor() {
  _cached_size_ = 0;
  p_ = 0.5f;
}

MirrorParameter::~MirrorParameter() {
  // @@protoc_insertion_point(destructor:caffe.MirrorParameter)
  SharedDtor();
}

void MirrorParameter::SharedDtor() {
}

void MirrorParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MirrorParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MirrorParameter_descriptor_;
}

const MirrorParameter& MirrorParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MirrorParameter> MirrorParameter_default_instance_;

MirrorParameter* MirrorParameter::New(::google::protobuf::Arena* arena) const {
  MirrorParameter* n = new MirrorParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MirrorParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.MirrorParameter)
  p_ = 0.5f;
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MirrorParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.MirrorParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float p = 1 [default = 0.5];
      case 1: {
        if (tag == 13) {
          set_has_p();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &p_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.MirrorParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.MirrorParameter)
  return false;
#undef DO_
}

void MirrorParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.MirrorParameter)
  // optional float p = 1 [default = 0.5];
  if (has_p()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->p(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.MirrorParameter)
}

::google::protobuf::uint8* MirrorParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.MirrorParameter)
  // optional float p = 1 [default = 0.5];
  if (has_p()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->p(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.MirrorParameter)
  return target;
}

size_t MirrorParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.MirrorParameter)
  size_t total_size = 0;

  // optional float p = 1 [default = 0.5];
  if (has_p()) {
    total_size += 1 + 4;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MirrorParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.MirrorParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MirrorParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MirrorParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.MirrorParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.MirrorParameter)
    UnsafeMergeFrom(*source);
  }
}

void MirrorParameter::MergeFrom(const MirrorParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.MirrorParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MirrorParameter::UnsafeMergeFrom(const MirrorParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_p()) {
      set_p(from.p());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void MirrorParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.MirrorParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MirrorParameter::CopyFrom(const MirrorParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.MirrorParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MirrorParameter::IsInitialized() const {

  return true;
}

void MirrorParameter::Swap(MirrorParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MirrorParameter::InternalSwap(MirrorParameter* other) {
  std::swap(p_, other->p_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MirrorParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MirrorParameter_descriptor_;
  metadata.reflection = MirrorParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MirrorParameter

// optional float p = 1 [default = 0.5];
bool MirrorParameter::has_p() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MirrorParameter::set_has_p() {
  _has_bits_[0] |= 0x00000001u;
}
void MirrorParameter::clear_has_p() {
  _has_bits_[0] &= ~0x00000001u;
}
void MirrorParameter::clear_p() {
  p_ = 0.5f;
  clear_has_p();
}
float MirrorParameter::p() const {
  // @@protoc_insertion_point(field_get:caffe.MirrorParameter.p)
  return p_;
}
void MirrorParameter::set_p(float value) {
  set_has_p();
  p_ = value;
  // @@protoc_insertion_point(field_set:caffe.MirrorParameter.p)
}

inline const MirrorParameter* MirrorParameter::internal_default_instance() {
  return &MirrorParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlurParameter::kPFieldNumber;
const int BlurParameter::kKernelSizeFieldNumber;
const int BlurParameter::kSigmaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlurParameter::BlurParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.BlurParameter)
}

void BlurParameter::InitAsDefaultInstance() {
}

BlurParameter::BlurParameter(const BlurParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.BlurParameter)
}

void BlurParameter::SharedCtor() {
  _cached_size_ = 0;
  sigma_ = 1.4f;
  p_ = 0.5f;
  kernel_size_ = 3u;
}

BlurParameter::~BlurParameter() {
  // @@protoc_insertion_point(destructor:caffe.BlurParameter)
  SharedDtor();
}

void BlurParameter::SharedDtor() {
}

void BlurParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlurParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlurParameter_descriptor_;
}

const BlurParameter& BlurParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BlurParameter> BlurParameter_default_instance_;

BlurParameter* BlurParameter::New(::google::protobuf::Arena* arena) const {
  BlurParameter* n = new BlurParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlurParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.BlurParameter)
  if (_has_bits_[0 / 32] & 7u) {
    p_ = 0.5f;
    kernel_size_ = 3u;
    sigma_ = 1.4f;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BlurParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.BlurParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float p = 1 [default = 0.5];
      case 1: {
        if (tag == 13) {
          set_has_p();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &p_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_kernel_size;
        break;
      }

      // optional uint32 kernel_size = 2 [default = 3];
      case 2: {
        if (tag == 16) {
         parse_kernel_size:
          set_has_kernel_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_sigma;
        break;
      }

      // optional float sigma = 3 [default = 1.4];
      case 3: {
        if (tag == 29) {
         parse_sigma:
          set_has_sigma();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sigma_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.BlurParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.BlurParameter)
  return false;
#undef DO_
}

void BlurParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.BlurParameter)
  // optional float p = 1 [default = 0.5];
  if (has_p()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->p(), output);
  }

  // optional uint32 kernel_size = 2 [default = 3];
  if (has_kernel_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->kernel_size(), output);
  }

  // optional float sigma = 3 [default = 1.4];
  if (has_sigma()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->sigma(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.BlurParameter)
}

::google::protobuf::uint8* BlurParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.BlurParameter)
  // optional float p = 1 [default = 0.5];
  if (has_p()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->p(), target);
  }

  // optional uint32 kernel_size = 2 [default = 3];
  if (has_kernel_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->kernel_size(), target);
  }

  // optional float sigma = 3 [default = 1.4];
  if (has_sigma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->sigma(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.BlurParameter)
  return target;
}

size_t BlurParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.BlurParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional float p = 1 [default = 0.5];
    if (has_p()) {
      total_size += 1 + 4;
    }

    // optional uint32 kernel_size = 2 [default = 3];
    if (has_kernel_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_size());
    }

    // optional float sigma = 3 [default = 1.4];
    if (has_sigma()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlurParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.BlurParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BlurParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlurParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.BlurParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.BlurParameter)
    UnsafeMergeFrom(*source);
  }
}

void BlurParameter::MergeFrom(const BlurParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.BlurParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BlurParameter::UnsafeMergeFrom(const BlurParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_p()) {
      set_p(from.p());
    }
    if (from.has_kernel_size()) {
      set_kernel_size(from.kernel_size());
    }
    if (from.has_sigma()) {
      set_sigma(from.sigma());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void BlurParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.BlurParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlurParameter::CopyFrom(const BlurParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.BlurParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BlurParameter::IsInitialized() const {

  return true;
}

void BlurParameter::Swap(BlurParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlurParameter::InternalSwap(BlurParameter* other) {
  std::swap(p_, other->p_);
  std::swap(kernel_size_, other->kernel_size_);
  std::swap(sigma_, other->sigma_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlurParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlurParameter_descriptor_;
  metadata.reflection = BlurParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlurParameter

// optional float p = 1 [default = 0.5];
bool BlurParameter::has_p() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BlurParameter::set_has_p() {
  _has_bits_[0] |= 0x00000001u;
}
void BlurParameter::clear_has_p() {
  _has_bits_[0] &= ~0x00000001u;
}
void BlurParameter::clear_p() {
  p_ = 0.5f;
  clear_has_p();
}
float BlurParameter::p() const {
  // @@protoc_insertion_point(field_get:caffe.BlurParameter.p)
  return p_;
}
void BlurParameter::set_p(float value) {
  set_has_p();
  p_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlurParameter.p)
}

// optional uint32 kernel_size = 2 [default = 3];
bool BlurParameter::has_kernel_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BlurParameter::set_has_kernel_size() {
  _has_bits_[0] |= 0x00000002u;
}
void BlurParameter::clear_has_kernel_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void BlurParameter::clear_kernel_size() {
  kernel_size_ = 3u;
  clear_has_kernel_size();
}
::google::protobuf::uint32 BlurParameter::kernel_size() const {
  // @@protoc_insertion_point(field_get:caffe.BlurParameter.kernel_size)
  return kernel_size_;
}
void BlurParameter::set_kernel_size(::google::protobuf::uint32 value) {
  set_has_kernel_size();
  kernel_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlurParameter.kernel_size)
}

// optional float sigma = 3 [default = 1.4];
bool BlurParameter::has_sigma() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BlurParameter::set_has_sigma() {
  _has_bits_[0] |= 0x00000004u;
}
void BlurParameter::clear_has_sigma() {
  _has_bits_[0] &= ~0x00000004u;
}
void BlurParameter::clear_sigma() {
  sigma_ = 1.4f;
  clear_has_sigma();
}
float BlurParameter::sigma() const {
  // @@protoc_insertion_point(field_get:caffe.BlurParameter.sigma)
  return sigma_;
}
void BlurParameter::set_sigma(float value) {
  set_has_sigma();
  sigma_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlurParameter.sigma)
}

inline const BlurParameter* BlurParameter::internal_default_instance() {
  return &BlurParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AugmentationParameter::kPadParamFieldNumber;
const int AugmentationParameter::kRandResizeParamFieldNumber;
const int AugmentationParameter::kGaussNoiseParamFieldNumber;
const int AugmentationParameter::kMirrorParamFieldNumber;
const int AugmentationParameter::kBlurParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AugmentationParameter::AugmentationParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.AugmentationParameter)
}

void AugmentationParameter::InitAsDefaultInstance() {
  pad_param_ = const_cast< ::caffe::PaddingParameter*>(
      ::caffe::PaddingParameter::internal_default_instance());
  rand_resize_param_ = const_cast< ::caffe::RandomResizeParameter*>(
      ::caffe::RandomResizeParameter::internal_default_instance());
  mirror_param_ = const_cast< ::caffe::MirrorParameter*>(
      ::caffe::MirrorParameter::internal_default_instance());
  blur_param_ = const_cast< ::caffe::BlurParameter*>(
      ::caffe::BlurParameter::internal_default_instance());
}

AugmentationParameter::AugmentationParameter(const AugmentationParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.AugmentationParameter)
}

void AugmentationParameter::SharedCtor() {
  _cached_size_ = 0;
  pad_param_ = NULL;
  rand_resize_param_ = NULL;
  mirror_param_ = NULL;
  blur_param_ = NULL;
}

AugmentationParameter::~AugmentationParameter() {
  // @@protoc_insertion_point(destructor:caffe.AugmentationParameter)
  SharedDtor();
}

void AugmentationParameter::SharedDtor() {
  if (this != &AugmentationParameter_default_instance_.get()) {
    delete pad_param_;
    delete rand_resize_param_;
    delete mirror_param_;
    delete blur_param_;
  }
}

void AugmentationParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AugmentationParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AugmentationParameter_descriptor_;
}

const AugmentationParameter& AugmentationParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AugmentationParameter> AugmentationParameter_default_instance_;

AugmentationParameter* AugmentationParameter::New(::google::protobuf::Arena* arena) const {
  AugmentationParameter* n = new AugmentationParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AugmentationParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.AugmentationParameter)
  if (_has_bits_[0 / 32] & 27u) {
    if (has_pad_param()) {
      if (pad_param_ != NULL) pad_param_->::caffe::PaddingParameter::Clear();
    }
    if (has_rand_resize_param()) {
      if (rand_resize_param_ != NULL) rand_resize_param_->::caffe::RandomResizeParameter::Clear();
    }
    if (has_mirror_param()) {
      if (mirror_param_ != NULL) mirror_param_->::caffe::MirrorParameter::Clear();
    }
    if (has_blur_param()) {
      if (blur_param_ != NULL) blur_param_->::caffe::BlurParameter::Clear();
    }
  }
  gauss_noise_param_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AugmentationParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.AugmentationParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.PaddingParameter pad_param = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pad_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rand_resize_param;
        break;
      }

      // optional .caffe.RandomResizeParameter rand_resize_param = 2;
      case 2: {
        if (tag == 18) {
         parse_rand_resize_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rand_resize_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_gauss_noise_param;
        break;
      }

      // repeated .caffe.GaussianNoiseParameter gauss_noise_param = 3;
      case 3: {
        if (tag == 26) {
         parse_gauss_noise_param:
          DO_(input->IncrementRecursionDepth());
         parse_loop_gauss_noise_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_gauss_noise_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_gauss_noise_param;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_mirror_param;
        break;
      }

      // optional .caffe.MirrorParameter mirror_param = 4;
      case 4: {
        if (tag == 34) {
         parse_mirror_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mirror_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_blur_param;
        break;
      }

      // optional .caffe.BlurParameter blur_param = 5;
      case 5: {
        if (tag == 42) {
         parse_blur_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blur_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.AugmentationParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.AugmentationParameter)
  return false;
#undef DO_
}

void AugmentationParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.AugmentationParameter)
  // optional .caffe.PaddingParameter pad_param = 1;
  if (has_pad_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pad_param_, output);
  }

  // optional .caffe.RandomResizeParameter rand_resize_param = 2;
  if (has_rand_resize_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->rand_resize_param_, output);
  }

  // repeated .caffe.GaussianNoiseParameter gauss_noise_param = 3;
  for (unsigned int i = 0, n = this->gauss_noise_param_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->gauss_noise_param(i), output);
  }

  // optional .caffe.MirrorParameter mirror_param = 4;
  if (has_mirror_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->mirror_param_, output);
  }

  // optional .caffe.BlurParameter blur_param = 5;
  if (has_blur_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->blur_param_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.AugmentationParameter)
}

::google::protobuf::uint8* AugmentationParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.AugmentationParameter)
  // optional .caffe.PaddingParameter pad_param = 1;
  if (has_pad_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pad_param_, false, target);
  }

  // optional .caffe.RandomResizeParameter rand_resize_param = 2;
  if (has_rand_resize_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->rand_resize_param_, false, target);
  }

  // repeated .caffe.GaussianNoiseParameter gauss_noise_param = 3;
  for (unsigned int i = 0, n = this->gauss_noise_param_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->gauss_noise_param(i), false, target);
  }

  // optional .caffe.MirrorParameter mirror_param = 4;
  if (has_mirror_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->mirror_param_, false, target);
  }

  // optional .caffe.BlurParameter blur_param = 5;
  if (has_blur_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->blur_param_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.AugmentationParameter)
  return target;
}

size_t AugmentationParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.AugmentationParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 27u) {
    // optional .caffe.PaddingParameter pad_param = 1;
    if (has_pad_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pad_param_);
    }

    // optional .caffe.RandomResizeParameter rand_resize_param = 2;
    if (has_rand_resize_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rand_resize_param_);
    }

    // optional .caffe.MirrorParameter mirror_param = 4;
    if (has_mirror_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mirror_param_);
    }

    // optional .caffe.BlurParameter blur_param = 5;
    if (has_blur_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->blur_param_);
    }

  }
  // repeated .caffe.GaussianNoiseParameter gauss_noise_param = 3;
  {
    unsigned int count = this->gauss_noise_param_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gauss_noise_param(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AugmentationParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.AugmentationParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AugmentationParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AugmentationParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.AugmentationParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.AugmentationParameter)
    UnsafeMergeFrom(*source);
  }
}

void AugmentationParameter::MergeFrom(const AugmentationParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.AugmentationParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AugmentationParameter::UnsafeMergeFrom(const AugmentationParameter& from) {
  GOOGLE_DCHECK(&from != this);
  gauss_noise_param_.MergeFrom(from.gauss_noise_param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pad_param()) {
      mutable_pad_param()->::caffe::PaddingParameter::MergeFrom(from.pad_param());
    }
    if (from.has_rand_resize_param()) {
      mutable_rand_resize_param()->::caffe::RandomResizeParameter::MergeFrom(from.rand_resize_param());
    }
    if (from.has_mirror_param()) {
      mutable_mirror_param()->::caffe::MirrorParameter::MergeFrom(from.mirror_param());
    }
    if (from.has_blur_param()) {
      mutable_blur_param()->::caffe::BlurParameter::MergeFrom(from.blur_param());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void AugmentationParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.AugmentationParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AugmentationParameter::CopyFrom(const AugmentationParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.AugmentationParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AugmentationParameter::IsInitialized() const {

  return true;
}

void AugmentationParameter::Swap(AugmentationParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AugmentationParameter::InternalSwap(AugmentationParameter* other) {
  std::swap(pad_param_, other->pad_param_);
  std::swap(rand_resize_param_, other->rand_resize_param_);
  gauss_noise_param_.UnsafeArenaSwap(&other->gauss_noise_param_);
  std::swap(mirror_param_, other->mirror_param_);
  std::swap(blur_param_, other->blur_param_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AugmentationParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AugmentationParameter_descriptor_;
  metadata.reflection = AugmentationParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AugmentationParameter

// optional .caffe.PaddingParameter pad_param = 1;
bool AugmentationParameter::has_pad_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AugmentationParameter::set_has_pad_param() {
  _has_bits_[0] |= 0x00000001u;
}
void AugmentationParameter::clear_has_pad_param() {
  _has_bits_[0] &= ~0x00000001u;
}
void AugmentationParameter::clear_pad_param() {
  if (pad_param_ != NULL) pad_param_->::caffe::PaddingParameter::Clear();
  clear_has_pad_param();
}
const ::caffe::PaddingParameter& AugmentationParameter::pad_param() const {
  // @@protoc_insertion_point(field_get:caffe.AugmentationParameter.pad_param)
  return pad_param_ != NULL ? *pad_param_
                         : *::caffe::PaddingParameter::internal_default_instance();
}
::caffe::PaddingParameter* AugmentationParameter::mutable_pad_param() {
  set_has_pad_param();
  if (pad_param_ == NULL) {
    pad_param_ = new ::caffe::PaddingParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.AugmentationParameter.pad_param)
  return pad_param_;
}
::caffe::PaddingParameter* AugmentationParameter::release_pad_param() {
  // @@protoc_insertion_point(field_release:caffe.AugmentationParameter.pad_param)
  clear_has_pad_param();
  ::caffe::PaddingParameter* temp = pad_param_;
  pad_param_ = NULL;
  return temp;
}
void AugmentationParameter::set_allocated_pad_param(::caffe::PaddingParameter* pad_param) {
  delete pad_param_;
  pad_param_ = pad_param;
  if (pad_param) {
    set_has_pad_param();
  } else {
    clear_has_pad_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.AugmentationParameter.pad_param)
}

// optional .caffe.RandomResizeParameter rand_resize_param = 2;
bool AugmentationParameter::has_rand_resize_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AugmentationParameter::set_has_rand_resize_param() {
  _has_bits_[0] |= 0x00000002u;
}
void AugmentationParameter::clear_has_rand_resize_param() {
  _has_bits_[0] &= ~0x00000002u;
}
void AugmentationParameter::clear_rand_resize_param() {
  if (rand_resize_param_ != NULL) rand_resize_param_->::caffe::RandomResizeParameter::Clear();
  clear_has_rand_resize_param();
}
const ::caffe::RandomResizeParameter& AugmentationParameter::rand_resize_param() const {
  // @@protoc_insertion_point(field_get:caffe.AugmentationParameter.rand_resize_param)
  return rand_resize_param_ != NULL ? *rand_resize_param_
                         : *::caffe::RandomResizeParameter::internal_default_instance();
}
::caffe::RandomResizeParameter* AugmentationParameter::mutable_rand_resize_param() {
  set_has_rand_resize_param();
  if (rand_resize_param_ == NULL) {
    rand_resize_param_ = new ::caffe::RandomResizeParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.AugmentationParameter.rand_resize_param)
  return rand_resize_param_;
}
::caffe::RandomResizeParameter* AugmentationParameter::release_rand_resize_param() {
  // @@protoc_insertion_point(field_release:caffe.AugmentationParameter.rand_resize_param)
  clear_has_rand_resize_param();
  ::caffe::RandomResizeParameter* temp = rand_resize_param_;
  rand_resize_param_ = NULL;
  return temp;
}
void AugmentationParameter::set_allocated_rand_resize_param(::caffe::RandomResizeParameter* rand_resize_param) {
  delete rand_resize_param_;
  rand_resize_param_ = rand_resize_param;
  if (rand_resize_param) {
    set_has_rand_resize_param();
  } else {
    clear_has_rand_resize_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.AugmentationParameter.rand_resize_param)
}

// repeated .caffe.GaussianNoiseParameter gauss_noise_param = 3;
int AugmentationParameter::gauss_noise_param_size() const {
  return gauss_noise_param_.size();
}
void AugmentationParameter::clear_gauss_noise_param() {
  gauss_noise_param_.Clear();
}
const ::caffe::GaussianNoiseParameter& AugmentationParameter::gauss_noise_param(int index) const {
  // @@protoc_insertion_point(field_get:caffe.AugmentationParameter.gauss_noise_param)
  return gauss_noise_param_.Get(index);
}
::caffe::GaussianNoiseParameter* AugmentationParameter::mutable_gauss_noise_param(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.AugmentationParameter.gauss_noise_param)
  return gauss_noise_param_.Mutable(index);
}
::caffe::GaussianNoiseParameter* AugmentationParameter::add_gauss_noise_param() {
  // @@protoc_insertion_point(field_add:caffe.AugmentationParameter.gauss_noise_param)
  return gauss_noise_param_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::GaussianNoiseParameter >*
AugmentationParameter::mutable_gauss_noise_param() {
  // @@protoc_insertion_point(field_mutable_list:caffe.AugmentationParameter.gauss_noise_param)
  return &gauss_noise_param_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::GaussianNoiseParameter >&
AugmentationParameter::gauss_noise_param() const {
  // @@protoc_insertion_point(field_list:caffe.AugmentationParameter.gauss_noise_param)
  return gauss_noise_param_;
}

// optional .caffe.MirrorParameter mirror_param = 4;
bool AugmentationParameter::has_mirror_param() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AugmentationParameter::set_has_mirror_param() {
  _has_bits_[0] |= 0x00000008u;
}
void AugmentationParameter::clear_has_mirror_param() {
  _has_bits_[0] &= ~0x00000008u;
}
void AugmentationParameter::clear_mirror_param() {
  if (mirror_param_ != NULL) mirror_param_->::caffe::MirrorParameter::Clear();
  clear_has_mirror_param();
}
const ::caffe::MirrorParameter& AugmentationParameter::mirror_param() const {
  // @@protoc_insertion_point(field_get:caffe.AugmentationParameter.mirror_param)
  return mirror_param_ != NULL ? *mirror_param_
                         : *::caffe::MirrorParameter::internal_default_instance();
}
::caffe::MirrorParameter* AugmentationParameter::mutable_mirror_param() {
  set_has_mirror_param();
  if (mirror_param_ == NULL) {
    mirror_param_ = new ::caffe::MirrorParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.AugmentationParameter.mirror_param)
  return mirror_param_;
}
::caffe::MirrorParameter* AugmentationParameter::release_mirror_param() {
  // @@protoc_insertion_point(field_release:caffe.AugmentationParameter.mirror_param)
  clear_has_mirror_param();
  ::caffe::MirrorParameter* temp = mirror_param_;
  mirror_param_ = NULL;
  return temp;
}
void AugmentationParameter::set_allocated_mirror_param(::caffe::MirrorParameter* mirror_param) {
  delete mirror_param_;
  mirror_param_ = mirror_param;
  if (mirror_param) {
    set_has_mirror_param();
  } else {
    clear_has_mirror_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.AugmentationParameter.mirror_param)
}

// optional .caffe.BlurParameter blur_param = 5;
bool AugmentationParameter::has_blur_param() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AugmentationParameter::set_has_blur_param() {
  _has_bits_[0] |= 0x00000010u;
}
void AugmentationParameter::clear_has_blur_param() {
  _has_bits_[0] &= ~0x00000010u;
}
void AugmentationParameter::clear_blur_param() {
  if (blur_param_ != NULL) blur_param_->::caffe::BlurParameter::Clear();
  clear_has_blur_param();
}
const ::caffe::BlurParameter& AugmentationParameter::blur_param() const {
  // @@protoc_insertion_point(field_get:caffe.AugmentationParameter.blur_param)
  return blur_param_ != NULL ? *blur_param_
                         : *::caffe::BlurParameter::internal_default_instance();
}
::caffe::BlurParameter* AugmentationParameter::mutable_blur_param() {
  set_has_blur_param();
  if (blur_param_ == NULL) {
    blur_param_ = new ::caffe::BlurParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.AugmentationParameter.blur_param)
  return blur_param_;
}
::caffe::BlurParameter* AugmentationParameter::release_blur_param() {
  // @@protoc_insertion_point(field_release:caffe.AugmentationParameter.blur_param)
  clear_has_blur_param();
  ::caffe::BlurParameter* temp = blur_param_;
  blur_param_ = NULL;
  return temp;
}
void AugmentationParameter::set_allocated_blur_param(::caffe::BlurParameter* blur_param) {
  delete blur_param_;
  blur_param_ = blur_param;
  if (blur_param) {
    set_has_blur_param();
  } else {
    clear_has_blur_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.AugmentationParameter.blur_param)
}

inline const AugmentationParameter* AugmentationParameter::internal_default_instance() {
  return &AugmentationParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeatmapParameter::kNumLabelFieldNumber;
const int HeatmapParameter::kBboxNormalizedFieldNumber;
const int HeatmapParameter::kWidthFieldNumber;
const int HeatmapParameter::kHeightFieldNumber;
const int HeatmapParameter::kRowsFieldNumber;
const int HeatmapParameter::kColsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeatmapParameter::HeatmapParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.HeatmapParameter)
}

void HeatmapParameter::InitAsDefaultInstance() {
}

HeatmapParameter::HeatmapParameter(const HeatmapParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.HeatmapParameter)
}

void HeatmapParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&rows_, 0, reinterpret_cast<char*>(&cols_) -
    reinterpret_cast<char*>(&rows_) + sizeof(cols_));
  num_label_ = 1u;
  bbox_normalized_ = true;
  width_ = 1;
  height_ = 1;
}

HeatmapParameter::~HeatmapParameter() {
  // @@protoc_insertion_point(destructor:caffe.HeatmapParameter)
  SharedDtor();
}

void HeatmapParameter::SharedDtor() {
}

void HeatmapParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeatmapParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeatmapParameter_descriptor_;
}

const HeatmapParameter& HeatmapParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<HeatmapParameter> HeatmapParameter_default_instance_;

HeatmapParameter* HeatmapParameter::New(::google::protobuf::Arena* arena) const {
  HeatmapParameter* n = new HeatmapParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeatmapParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.HeatmapParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(HeatmapParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<HeatmapParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(rows_, cols_);
    num_label_ = 1u;
    bbox_normalized_ = true;
    width_ = 1;
    height_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HeatmapParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.HeatmapParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_label = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          set_has_num_label();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_label_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bbox_normalized;
        break;
      }

      // optional bool bbox_normalized = 2 [default = true];
      case 2: {
        if (tag == 16) {
         parse_bbox_normalized:
          set_has_bbox_normalized();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bbox_normalized_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_width;
        break;
      }

      // optional float width = 3 [default = 1];
      case 3: {
        if (tag == 29) {
         parse_width:
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_height;
        break;
      }

      // optional float height = 4 [default = 1];
      case 4: {
        if (tag == 37) {
         parse_height:
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_rows;
        break;
      }

      // optional uint32 rows = 5;
      case 5: {
        if (tag == 40) {
         parse_rows:
          set_has_rows();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rows_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_cols;
        break;
      }

      // optional uint32 cols = 6;
      case 6: {
        if (tag == 48) {
         parse_cols:
          set_has_cols();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cols_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.HeatmapParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.HeatmapParameter)
  return false;
#undef DO_
}

void HeatmapParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.HeatmapParameter)
  // optional uint32 num_label = 1 [default = 1];
  if (has_num_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_label(), output);
  }

  // optional bool bbox_normalized = 2 [default = true];
  if (has_bbox_normalized()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bbox_normalized(), output);
  }

  // optional float width = 3 [default = 1];
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->width(), output);
  }

  // optional float height = 4 [default = 1];
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->height(), output);
  }

  // optional uint32 rows = 5;
  if (has_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->rows(), output);
  }

  // optional uint32 cols = 6;
  if (has_cols()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->cols(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.HeatmapParameter)
}

::google::protobuf::uint8* HeatmapParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.HeatmapParameter)
  // optional uint32 num_label = 1 [default = 1];
  if (has_num_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_label(), target);
  }

  // optional bool bbox_normalized = 2 [default = true];
  if (has_bbox_normalized()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bbox_normalized(), target);
  }

  // optional float width = 3 [default = 1];
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->width(), target);
  }

  // optional float height = 4 [default = 1];
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->height(), target);
  }

  // optional uint32 rows = 5;
  if (has_rows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->rows(), target);
  }

  // optional uint32 cols = 6;
  if (has_cols()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->cols(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.HeatmapParameter)
  return target;
}

size_t HeatmapParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.HeatmapParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 num_label = 1 [default = 1];
    if (has_num_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_label());
    }

    // optional bool bbox_normalized = 2 [default = true];
    if (has_bbox_normalized()) {
      total_size += 1 + 1;
    }

    // optional float width = 3 [default = 1];
    if (has_width()) {
      total_size += 1 + 4;
    }

    // optional float height = 4 [default = 1];
    if (has_height()) {
      total_size += 1 + 4;
    }

    // optional uint32 rows = 5;
    if (has_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rows());
    }

    // optional uint32 cols = 6;
    if (has_cols()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cols());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeatmapParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.HeatmapParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HeatmapParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeatmapParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.HeatmapParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.HeatmapParameter)
    UnsafeMergeFrom(*source);
  }
}

void HeatmapParameter::MergeFrom(const HeatmapParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.HeatmapParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void HeatmapParameter::UnsafeMergeFrom(const HeatmapParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_label()) {
      set_num_label(from.num_label());
    }
    if (from.has_bbox_normalized()) {
      set_bbox_normalized(from.bbox_normalized());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_rows()) {
      set_rows(from.rows());
    }
    if (from.has_cols()) {
      set_cols(from.cols());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void HeatmapParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.HeatmapParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeatmapParameter::CopyFrom(const HeatmapParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.HeatmapParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool HeatmapParameter::IsInitialized() const {

  return true;
}

void HeatmapParameter::Swap(HeatmapParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeatmapParameter::InternalSwap(HeatmapParameter* other) {
  std::swap(num_label_, other->num_label_);
  std::swap(bbox_normalized_, other->bbox_normalized_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(rows_, other->rows_);
  std::swap(cols_, other->cols_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeatmapParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeatmapParameter_descriptor_;
  metadata.reflection = HeatmapParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeatmapParameter

// optional uint32 num_label = 1 [default = 1];
bool HeatmapParameter::has_num_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HeatmapParameter::set_has_num_label() {
  _has_bits_[0] |= 0x00000001u;
}
void HeatmapParameter::clear_has_num_label() {
  _has_bits_[0] &= ~0x00000001u;
}
void HeatmapParameter::clear_num_label() {
  num_label_ = 1u;
  clear_has_num_label();
}
::google::protobuf::uint32 HeatmapParameter::num_label() const {
  // @@protoc_insertion_point(field_get:caffe.HeatmapParameter.num_label)
  return num_label_;
}
void HeatmapParameter::set_num_label(::google::protobuf::uint32 value) {
  set_has_num_label();
  num_label_ = value;
  // @@protoc_insertion_point(field_set:caffe.HeatmapParameter.num_label)
}

// optional bool bbox_normalized = 2 [default = true];
bool HeatmapParameter::has_bbox_normalized() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HeatmapParameter::set_has_bbox_normalized() {
  _has_bits_[0] |= 0x00000002u;
}
void HeatmapParameter::clear_has_bbox_normalized() {
  _has_bits_[0] &= ~0x00000002u;
}
void HeatmapParameter::clear_bbox_normalized() {
  bbox_normalized_ = true;
  clear_has_bbox_normalized();
}
bool HeatmapParameter::bbox_normalized() const {
  // @@protoc_insertion_point(field_get:caffe.HeatmapParameter.bbox_normalized)
  return bbox_normalized_;
}
void HeatmapParameter::set_bbox_normalized(bool value) {
  set_has_bbox_normalized();
  bbox_normalized_ = value;
  // @@protoc_insertion_point(field_set:caffe.HeatmapParameter.bbox_normalized)
}

// optional float width = 3 [default = 1];
bool HeatmapParameter::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HeatmapParameter::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
void HeatmapParameter::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
void HeatmapParameter::clear_width() {
  width_ = 1;
  clear_has_width();
}
float HeatmapParameter::width() const {
  // @@protoc_insertion_point(field_get:caffe.HeatmapParameter.width)
  return width_;
}
void HeatmapParameter::set_width(float value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.HeatmapParameter.width)
}

// optional float height = 4 [default = 1];
bool HeatmapParameter::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void HeatmapParameter::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
void HeatmapParameter::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
void HeatmapParameter::clear_height() {
  height_ = 1;
  clear_has_height();
}
float HeatmapParameter::height() const {
  // @@protoc_insertion_point(field_get:caffe.HeatmapParameter.height)
  return height_;
}
void HeatmapParameter::set_height(float value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.HeatmapParameter.height)
}

// optional uint32 rows = 5;
bool HeatmapParameter::has_rows() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void HeatmapParameter::set_has_rows() {
  _has_bits_[0] |= 0x00000010u;
}
void HeatmapParameter::clear_has_rows() {
  _has_bits_[0] &= ~0x00000010u;
}
void HeatmapParameter::clear_rows() {
  rows_ = 0u;
  clear_has_rows();
}
::google::protobuf::uint32 HeatmapParameter::rows() const {
  // @@protoc_insertion_point(field_get:caffe.HeatmapParameter.rows)
  return rows_;
}
void HeatmapParameter::set_rows(::google::protobuf::uint32 value) {
  set_has_rows();
  rows_ = value;
  // @@protoc_insertion_point(field_set:caffe.HeatmapParameter.rows)
}

// optional uint32 cols = 6;
bool HeatmapParameter::has_cols() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void HeatmapParameter::set_has_cols() {
  _has_bits_[0] |= 0x00000020u;
}
void HeatmapParameter::clear_has_cols() {
  _has_bits_[0] &= ~0x00000020u;
}
void HeatmapParameter::clear_cols() {
  cols_ = 0u;
  clear_has_cols();
}
::google::protobuf::uint32 HeatmapParameter::cols() const {
  // @@protoc_insertion_point(field_get:caffe.HeatmapParameter.cols)
  return cols_;
}
void HeatmapParameter::set_cols(::google::protobuf::uint32 value) {
  set_has_cols();
  cols_ = value;
  // @@protoc_insertion_point(field_set:caffe.HeatmapParameter.cols)
}

inline const HeatmapParameter* HeatmapParameter::internal_default_instance() {
  return &HeatmapParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MinibatchDataParameter::kNumBatchFieldNumber;
const int MinibatchDataParameter::kWidthFieldNumber;
const int MinibatchDataParameter::kHeightFieldNumber;
const int MinibatchDataParameter::kNumGtFieldNumber;
const int MinibatchDataParameter::kMaxNumPatchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MinibatchDataParameter::MinibatchDataParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.MinibatchDataParameter)
}

void MinibatchDataParameter::InitAsDefaultInstance() {
}

MinibatchDataParameter::MinibatchDataParameter(const MinibatchDataParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.MinibatchDataParameter)
}

void MinibatchDataParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&width_, 0, reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_) + sizeof(height_));
  max_num_patch_ = 1u;
  num_batch_ = 128u;
  num_gt_ = 10u;
}

MinibatchDataParameter::~MinibatchDataParameter() {
  // @@protoc_insertion_point(destructor:caffe.MinibatchDataParameter)
  SharedDtor();
}

void MinibatchDataParameter::SharedDtor() {
}

void MinibatchDataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MinibatchDataParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MinibatchDataParameter_descriptor_;
}

const MinibatchDataParameter& MinibatchDataParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MinibatchDataParameter> MinibatchDataParameter_default_instance_;

MinibatchDataParameter* MinibatchDataParameter::New(::google::protobuf::Arena* arena) const {
  MinibatchDataParameter* n = new MinibatchDataParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MinibatchDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.MinibatchDataParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MinibatchDataParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MinibatchDataParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(width_, height_);
    num_batch_ = 128u;
    num_gt_ = 10u;
    max_num_patch_ = 1u;
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MinibatchDataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.MinibatchDataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_batch = 1 [default = 128];
      case 1: {
        if (tag == 8) {
          set_has_num_batch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_batch_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_width;
        break;
      }

      // optional uint32 width = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_width:
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }

      // optional uint32 height = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_height:
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_num_gt;
        break;
      }

      // optional uint32 num_gt = 4 [default = 10];
      case 4: {
        if (tag == 32) {
         parse_num_gt:
          set_has_num_gt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_gt_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_max_num_patch;
        break;
      }

      // optional uint32 max_num_patch = 5 [default = 1];
      case 5: {
        if (tag == 40) {
         parse_max_num_patch:
          set_has_max_num_patch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_num_patch_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.MinibatchDataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.MinibatchDataParameter)
  return false;
#undef DO_
}

void MinibatchDataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.MinibatchDataParameter)
  // optional uint32 num_batch = 1 [default = 128];
  if (has_num_batch()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_batch(), output);
  }

  // optional uint32 width = 2 [default = 0];
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->width(), output);
  }

  // optional uint32 height = 3 [default = 0];
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->height(), output);
  }

  // optional uint32 num_gt = 4 [default = 10];
  if (has_num_gt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num_gt(), output);
  }

  // optional uint32 max_num_patch = 5 [default = 1];
  if (has_max_num_patch()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->max_num_patch(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.MinibatchDataParameter)
}

::google::protobuf::uint8* MinibatchDataParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.MinibatchDataParameter)
  // optional uint32 num_batch = 1 [default = 128];
  if (has_num_batch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_batch(), target);
  }

  // optional uint32 width = 2 [default = 0];
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->width(), target);
  }

  // optional uint32 height = 3 [default = 0];
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->height(), target);
  }

  // optional uint32 num_gt = 4 [default = 10];
  if (has_num_gt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num_gt(), target);
  }

  // optional uint32 max_num_patch = 5 [default = 1];
  if (has_max_num_patch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->max_num_patch(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.MinibatchDataParameter)
  return target;
}

size_t MinibatchDataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.MinibatchDataParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 num_batch = 1 [default = 128];
    if (has_num_batch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_batch());
    }

    // optional uint32 width = 2 [default = 0];
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional uint32 height = 3 [default = 0];
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // optional uint32 num_gt = 4 [default = 10];
    if (has_num_gt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_gt());
    }

    // optional uint32 max_num_patch = 5 [default = 1];
    if (has_max_num_patch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_num_patch());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MinibatchDataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.MinibatchDataParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MinibatchDataParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MinibatchDataParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.MinibatchDataParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.MinibatchDataParameter)
    UnsafeMergeFrom(*source);
  }
}

void MinibatchDataParameter::MergeFrom(const MinibatchDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.MinibatchDataParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MinibatchDataParameter::UnsafeMergeFrom(const MinibatchDataParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_batch()) {
      set_num_batch(from.num_batch());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_num_gt()) {
      set_num_gt(from.num_gt());
    }
    if (from.has_max_num_patch()) {
      set_max_num_patch(from.max_num_patch());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void MinibatchDataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.MinibatchDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MinibatchDataParameter::CopyFrom(const MinibatchDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.MinibatchDataParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MinibatchDataParameter::IsInitialized() const {

  return true;
}

void MinibatchDataParameter::Swap(MinibatchDataParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MinibatchDataParameter::InternalSwap(MinibatchDataParameter* other) {
  std::swap(num_batch_, other->num_batch_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(num_gt_, other->num_gt_);
  std::swap(max_num_patch_, other->max_num_patch_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MinibatchDataParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MinibatchDataParameter_descriptor_;
  metadata.reflection = MinibatchDataParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MinibatchDataParameter

// optional uint32 num_batch = 1 [default = 128];
bool MinibatchDataParameter::has_num_batch() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MinibatchDataParameter::set_has_num_batch() {
  _has_bits_[0] |= 0x00000001u;
}
void MinibatchDataParameter::clear_has_num_batch() {
  _has_bits_[0] &= ~0x00000001u;
}
void MinibatchDataParameter::clear_num_batch() {
  num_batch_ = 128u;
  clear_has_num_batch();
}
::google::protobuf::uint32 MinibatchDataParameter::num_batch() const {
  // @@protoc_insertion_point(field_get:caffe.MinibatchDataParameter.num_batch)
  return num_batch_;
}
void MinibatchDataParameter::set_num_batch(::google::protobuf::uint32 value) {
  set_has_num_batch();
  num_batch_ = value;
  // @@protoc_insertion_point(field_set:caffe.MinibatchDataParameter.num_batch)
}

// optional uint32 width = 2 [default = 0];
bool MinibatchDataParameter::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MinibatchDataParameter::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
void MinibatchDataParameter::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
void MinibatchDataParameter::clear_width() {
  width_ = 0u;
  clear_has_width();
}
::google::protobuf::uint32 MinibatchDataParameter::width() const {
  // @@protoc_insertion_point(field_get:caffe.MinibatchDataParameter.width)
  return width_;
}
void MinibatchDataParameter::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.MinibatchDataParameter.width)
}

// optional uint32 height = 3 [default = 0];
bool MinibatchDataParameter::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MinibatchDataParameter::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
void MinibatchDataParameter::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
void MinibatchDataParameter::clear_height() {
  height_ = 0u;
  clear_has_height();
}
::google::protobuf::uint32 MinibatchDataParameter::height() const {
  // @@protoc_insertion_point(field_get:caffe.MinibatchDataParameter.height)
  return height_;
}
void MinibatchDataParameter::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.MinibatchDataParameter.height)
}

// optional uint32 num_gt = 4 [default = 10];
bool MinibatchDataParameter::has_num_gt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MinibatchDataParameter::set_has_num_gt() {
  _has_bits_[0] |= 0x00000008u;
}
void MinibatchDataParameter::clear_has_num_gt() {
  _has_bits_[0] &= ~0x00000008u;
}
void MinibatchDataParameter::clear_num_gt() {
  num_gt_ = 10u;
  clear_has_num_gt();
}
::google::protobuf::uint32 MinibatchDataParameter::num_gt() const {
  // @@protoc_insertion_point(field_get:caffe.MinibatchDataParameter.num_gt)
  return num_gt_;
}
void MinibatchDataParameter::set_num_gt(::google::protobuf::uint32 value) {
  set_has_num_gt();
  num_gt_ = value;
  // @@protoc_insertion_point(field_set:caffe.MinibatchDataParameter.num_gt)
}

// optional uint32 max_num_patch = 5 [default = 1];
bool MinibatchDataParameter::has_max_num_patch() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MinibatchDataParameter::set_has_max_num_patch() {
  _has_bits_[0] |= 0x00000010u;
}
void MinibatchDataParameter::clear_has_max_num_patch() {
  _has_bits_[0] &= ~0x00000010u;
}
void MinibatchDataParameter::clear_max_num_patch() {
  max_num_patch_ = 1u;
  clear_has_max_num_patch();
}
::google::protobuf::uint32 MinibatchDataParameter::max_num_patch() const {
  // @@protoc_insertion_point(field_get:caffe.MinibatchDataParameter.max_num_patch)
  return max_num_patch_;
}
void MinibatchDataParameter::set_max_num_patch(::google::protobuf::uint32 value) {
  set_has_max_num_patch();
  max_num_patch_ = value;
  // @@protoc_insertion_point(field_set:caffe.MinibatchDataParameter.max_num_patch)
}

inline const MinibatchDataParameter* MinibatchDataParameter::internal_default_instance() {
  return &MinibatchDataParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RowColProposalTransformParameter::kRowFieldNumber;
const int RowColProposalTransformParameter::kColFieldNumber;
const int RowColProposalTransformParameter::kInWidthFieldNumber;
const int RowColProposalTransformParameter::kInHeightFieldNumber;
const int RowColProposalTransformParameter::kOutWidthFieldNumber;
const int RowColProposalTransformParameter::kOutHeightFieldNumber;
const int RowColProposalTransformParameter::kObjectnessFieldNumber;
const int RowColProposalTransformParameter::kNumLabelFieldNumber;
const int RowColProposalTransformParameter::kIgnoreLabelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RowColProposalTransformParameter::RowColProposalTransformParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.RowColProposalTransformParameter)
}

void RowColProposalTransformParameter::InitAsDefaultInstance() {
}

RowColProposalTransformParameter::RowColProposalTransformParameter(const RowColProposalTransformParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.RowColProposalTransformParameter)
}

void RowColProposalTransformParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&in_width_, 0, reinterpret_cast<char*>(&num_label_) -
    reinterpret_cast<char*>(&in_width_) + sizeof(num_label_));
  row_ = 7u;
  col_ = 7u;
  out_width_ = 1u;
  out_height_ = 1u;
}

RowColProposalTransformParameter::~RowColProposalTransformParameter() {
  // @@protoc_insertion_point(destructor:caffe.RowColProposalTransformParameter)
  SharedDtor();
}

void RowColProposalTransformParameter::SharedDtor() {
}

void RowColProposalTransformParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RowColProposalTransformParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RowColProposalTransformParameter_descriptor_;
}

const RowColProposalTransformParameter& RowColProposalTransformParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RowColProposalTransformParameter> RowColProposalTransformParameter_default_instance_;

RowColProposalTransformParameter* RowColProposalTransformParameter::New(::google::protobuf::Arena* arena) const {
  RowColProposalTransformParameter* n = new RowColProposalTransformParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RowColProposalTransformParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.RowColProposalTransformParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RowColProposalTransformParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RowColProposalTransformParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(in_width_, num_label_);
    row_ = 7u;
    col_ = 7u;
    out_width_ = 1u;
    out_height_ = 1u;
  }

#undef ZR_HELPER_
#undef ZR_

  ignore_label_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RowColProposalTransformParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.RowColProposalTransformParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 row = 1 [default = 7];
      case 1: {
        if (tag == 8) {
          set_has_row();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &row_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_col;
        break;
      }

      // optional uint32 col = 2 [default = 7];
      case 2: {
        if (tag == 16) {
         parse_col:
          set_has_col();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &col_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_in_width;
        break;
      }

      // required uint32 in_width = 3;
      case 3: {
        if (tag == 24) {
         parse_in_width:
          set_has_in_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &in_width_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_in_height;
        break;
      }

      // required uint32 in_height = 4;
      case 4: {
        if (tag == 32) {
         parse_in_height:
          set_has_in_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &in_height_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_out_width;
        break;
      }

      // optional uint32 out_width = 5 [default = 1];
      case 5: {
        if (tag == 40) {
         parse_out_width:
          set_has_out_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &out_width_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_out_height;
        break;
      }

      // optional uint32 out_height = 6 [default = 1];
      case 6: {
        if (tag == 48) {
         parse_out_height:
          set_has_out_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &out_height_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_objectness;
        break;
      }

      // optional bool objectness = 7;
      case 7: {
        if (tag == 56) {
         parse_objectness:
          set_has_objectness();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &objectness_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_num_label;
        break;
      }

      // optional uint32 num_label = 8;
      case 8: {
        if (tag == 64) {
         parse_num_label:
          set_has_num_label();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_label_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_ignore_label;
        break;
      }

      // repeated uint32 ignore_label = 9;
      case 9: {
        if (tag == 72) {
         parse_ignore_label:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72, input, this->mutable_ignore_label())));
        } else if (tag == 74) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ignore_label())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_ignore_label;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.RowColProposalTransformParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.RowColProposalTransformParameter)
  return false;
#undef DO_
}

void RowColProposalTransformParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.RowColProposalTransformParameter)
  // optional uint32 row = 1 [default = 7];
  if (has_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->row(), output);
  }

  // optional uint32 col = 2 [default = 7];
  if (has_col()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->col(), output);
  }

  // required uint32 in_width = 3;
  if (has_in_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->in_width(), output);
  }

  // required uint32 in_height = 4;
  if (has_in_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->in_height(), output);
  }

  // optional uint32 out_width = 5 [default = 1];
  if (has_out_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->out_width(), output);
  }

  // optional uint32 out_height = 6 [default = 1];
  if (has_out_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->out_height(), output);
  }

  // optional bool objectness = 7;
  if (has_objectness()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->objectness(), output);
  }

  // optional uint32 num_label = 8;
  if (has_num_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->num_label(), output);
  }

  // repeated uint32 ignore_label = 9;
  for (int i = 0; i < this->ignore_label_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->ignore_label(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.RowColProposalTransformParameter)
}

::google::protobuf::uint8* RowColProposalTransformParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.RowColProposalTransformParameter)
  // optional uint32 row = 1 [default = 7];
  if (has_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->row(), target);
  }

  // optional uint32 col = 2 [default = 7];
  if (has_col()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->col(), target);
  }

  // required uint32 in_width = 3;
  if (has_in_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->in_width(), target);
  }

  // required uint32 in_height = 4;
  if (has_in_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->in_height(), target);
  }

  // optional uint32 out_width = 5 [default = 1];
  if (has_out_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->out_width(), target);
  }

  // optional uint32 out_height = 6 [default = 1];
  if (has_out_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->out_height(), target);
  }

  // optional bool objectness = 7;
  if (has_objectness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->objectness(), target);
  }

  // optional uint32 num_label = 8;
  if (has_num_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->num_label(), target);
  }

  // repeated uint32 ignore_label = 9;
  for (int i = 0; i < this->ignore_label_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(9, this->ignore_label(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.RowColProposalTransformParameter)
  return target;
}

size_t RowColProposalTransformParameter::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe.RowColProposalTransformParameter)
  size_t total_size = 0;

  if (has_in_width()) {
    // required uint32 in_width = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->in_width());
  }

  if (has_in_height()) {
    // required uint32 in_height = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->in_height());
  }

  return total_size;
}
size_t RowColProposalTransformParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.RowColProposalTransformParameter)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required uint32 in_width = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->in_width());

    // required uint32 in_height = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->in_height());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 243u) {
    // optional uint32 row = 1 [default = 7];
    if (has_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->row());
    }

    // optional uint32 col = 2 [default = 7];
    if (has_col()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->col());
    }

    // optional uint32 out_width = 5 [default = 1];
    if (has_out_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->out_width());
    }

    // optional uint32 out_height = 6 [default = 1];
    if (has_out_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->out_height());
    }

    // optional bool objectness = 7;
    if (has_objectness()) {
      total_size += 1 + 1;
    }

    // optional uint32 num_label = 8;
    if (has_num_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_label());
    }

  }
  // repeated uint32 ignore_label = 9;
  {
    size_t data_size = 0;
    unsigned int count = this->ignore_label_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->ignore_label(i));
    }
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ignore_label_size());
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RowColProposalTransformParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.RowColProposalTransformParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RowColProposalTransformParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RowColProposalTransformParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.RowColProposalTransformParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.RowColProposalTransformParameter)
    UnsafeMergeFrom(*source);
  }
}

void RowColProposalTransformParameter::MergeFrom(const RowColProposalTransformParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.RowColProposalTransformParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RowColProposalTransformParameter::UnsafeMergeFrom(const RowColProposalTransformParameter& from) {
  GOOGLE_DCHECK(&from != this);
  ignore_label_.UnsafeMergeFrom(from.ignore_label_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_row()) {
      set_row(from.row());
    }
    if (from.has_col()) {
      set_col(from.col());
    }
    if (from.has_in_width()) {
      set_in_width(from.in_width());
    }
    if (from.has_in_height()) {
      set_in_height(from.in_height());
    }
    if (from.has_out_width()) {
      set_out_width(from.out_width());
    }
    if (from.has_out_height()) {
      set_out_height(from.out_height());
    }
    if (from.has_objectness()) {
      set_objectness(from.objectness());
    }
    if (from.has_num_label()) {
      set_num_label(from.num_label());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void RowColProposalTransformParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.RowColProposalTransformParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RowColProposalTransformParameter::CopyFrom(const RowColProposalTransformParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.RowColProposalTransformParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RowColProposalTransformParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;

  return true;
}

void RowColProposalTransformParameter::Swap(RowColProposalTransformParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RowColProposalTransformParameter::InternalSwap(RowColProposalTransformParameter* other) {
  std::swap(row_, other->row_);
  std::swap(col_, other->col_);
  std::swap(in_width_, other->in_width_);
  std::swap(in_height_, other->in_height_);
  std::swap(out_width_, other->out_width_);
  std::swap(out_height_, other->out_height_);
  std::swap(objectness_, other->objectness_);
  std::swap(num_label_, other->num_label_);
  ignore_label_.UnsafeArenaSwap(&other->ignore_label_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RowColProposalTransformParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RowColProposalTransformParameter_descriptor_;
  metadata.reflection = RowColProposalTransformParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RowColProposalTransformParameter

// optional uint32 row = 1 [default = 7];
bool RowColProposalTransformParameter::has_row() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RowColProposalTransformParameter::set_has_row() {
  _has_bits_[0] |= 0x00000001u;
}
void RowColProposalTransformParameter::clear_has_row() {
  _has_bits_[0] &= ~0x00000001u;
}
void RowColProposalTransformParameter::clear_row() {
  row_ = 7u;
  clear_has_row();
}
::google::protobuf::uint32 RowColProposalTransformParameter::row() const {
  // @@protoc_insertion_point(field_get:caffe.RowColProposalTransformParameter.row)
  return row_;
}
void RowColProposalTransformParameter::set_row(::google::protobuf::uint32 value) {
  set_has_row();
  row_ = value;
  // @@protoc_insertion_point(field_set:caffe.RowColProposalTransformParameter.row)
}

// optional uint32 col = 2 [default = 7];
bool RowColProposalTransformParameter::has_col() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RowColProposalTransformParameter::set_has_col() {
  _has_bits_[0] |= 0x00000002u;
}
void RowColProposalTransformParameter::clear_has_col() {
  _has_bits_[0] &= ~0x00000002u;
}
void RowColProposalTransformParameter::clear_col() {
  col_ = 7u;
  clear_has_col();
}
::google::protobuf::uint32 RowColProposalTransformParameter::col() const {
  // @@protoc_insertion_point(field_get:caffe.RowColProposalTransformParameter.col)
  return col_;
}
void RowColProposalTransformParameter::set_col(::google::protobuf::uint32 value) {
  set_has_col();
  col_ = value;
  // @@protoc_insertion_point(field_set:caffe.RowColProposalTransformParameter.col)
}

// required uint32 in_width = 3;
bool RowColProposalTransformParameter::has_in_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RowColProposalTransformParameter::set_has_in_width() {
  _has_bits_[0] |= 0x00000004u;
}
void RowColProposalTransformParameter::clear_has_in_width() {
  _has_bits_[0] &= ~0x00000004u;
}
void RowColProposalTransformParameter::clear_in_width() {
  in_width_ = 0u;
  clear_has_in_width();
}
::google::protobuf::uint32 RowColProposalTransformParameter::in_width() const {
  // @@protoc_insertion_point(field_get:caffe.RowColProposalTransformParameter.in_width)
  return in_width_;
}
void RowColProposalTransformParameter::set_in_width(::google::protobuf::uint32 value) {
  set_has_in_width();
  in_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.RowColProposalTransformParameter.in_width)
}

// required uint32 in_height = 4;
bool RowColProposalTransformParameter::has_in_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RowColProposalTransformParameter::set_has_in_height() {
  _has_bits_[0] |= 0x00000008u;
}
void RowColProposalTransformParameter::clear_has_in_height() {
  _has_bits_[0] &= ~0x00000008u;
}
void RowColProposalTransformParameter::clear_in_height() {
  in_height_ = 0u;
  clear_has_in_height();
}
::google::protobuf::uint32 RowColProposalTransformParameter::in_height() const {
  // @@protoc_insertion_point(field_get:caffe.RowColProposalTransformParameter.in_height)
  return in_height_;
}
void RowColProposalTransformParameter::set_in_height(::google::protobuf::uint32 value) {
  set_has_in_height();
  in_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.RowColProposalTransformParameter.in_height)
}

// optional uint32 out_width = 5 [default = 1];
bool RowColProposalTransformParameter::has_out_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RowColProposalTransformParameter::set_has_out_width() {
  _has_bits_[0] |= 0x00000010u;
}
void RowColProposalTransformParameter::clear_has_out_width() {
  _has_bits_[0] &= ~0x00000010u;
}
void RowColProposalTransformParameter::clear_out_width() {
  out_width_ = 1u;
  clear_has_out_width();
}
::google::protobuf::uint32 RowColProposalTransformParameter::out_width() const {
  // @@protoc_insertion_point(field_get:caffe.RowColProposalTransformParameter.out_width)
  return out_width_;
}
void RowColProposalTransformParameter::set_out_width(::google::protobuf::uint32 value) {
  set_has_out_width();
  out_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.RowColProposalTransformParameter.out_width)
}

// optional uint32 out_height = 6 [default = 1];
bool RowColProposalTransformParameter::has_out_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RowColProposalTransformParameter::set_has_out_height() {
  _has_bits_[0] |= 0x00000020u;
}
void RowColProposalTransformParameter::clear_has_out_height() {
  _has_bits_[0] &= ~0x00000020u;
}
void RowColProposalTransformParameter::clear_out_height() {
  out_height_ = 1u;
  clear_has_out_height();
}
::google::protobuf::uint32 RowColProposalTransformParameter::out_height() const {
  // @@protoc_insertion_point(field_get:caffe.RowColProposalTransformParameter.out_height)
  return out_height_;
}
void RowColProposalTransformParameter::set_out_height(::google::protobuf::uint32 value) {
  set_has_out_height();
  out_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.RowColProposalTransformParameter.out_height)
}

// optional bool objectness = 7;
bool RowColProposalTransformParameter::has_objectness() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RowColProposalTransformParameter::set_has_objectness() {
  _has_bits_[0] |= 0x00000040u;
}
void RowColProposalTransformParameter::clear_has_objectness() {
  _has_bits_[0] &= ~0x00000040u;
}
void RowColProposalTransformParameter::clear_objectness() {
  objectness_ = false;
  clear_has_objectness();
}
bool RowColProposalTransformParameter::objectness() const {
  // @@protoc_insertion_point(field_get:caffe.RowColProposalTransformParameter.objectness)
  return objectness_;
}
void RowColProposalTransformParameter::set_objectness(bool value) {
  set_has_objectness();
  objectness_ = value;
  // @@protoc_insertion_point(field_set:caffe.RowColProposalTransformParameter.objectness)
}

// optional uint32 num_label = 8;
bool RowColProposalTransformParameter::has_num_label() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void RowColProposalTransformParameter::set_has_num_label() {
  _has_bits_[0] |= 0x00000080u;
}
void RowColProposalTransformParameter::clear_has_num_label() {
  _has_bits_[0] &= ~0x00000080u;
}
void RowColProposalTransformParameter::clear_num_label() {
  num_label_ = 0u;
  clear_has_num_label();
}
::google::protobuf::uint32 RowColProposalTransformParameter::num_label() const {
  // @@protoc_insertion_point(field_get:caffe.RowColProposalTransformParameter.num_label)
  return num_label_;
}
void RowColProposalTransformParameter::set_num_label(::google::protobuf::uint32 value) {
  set_has_num_label();
  num_label_ = value;
  // @@protoc_insertion_point(field_set:caffe.RowColProposalTransformParameter.num_label)
}

// repeated uint32 ignore_label = 9;
int RowColProposalTransformParameter::ignore_label_size() const {
  return ignore_label_.size();
}
void RowColProposalTransformParameter::clear_ignore_label() {
  ignore_label_.Clear();
}
::google::protobuf::uint32 RowColProposalTransformParameter::ignore_label(int index) const {
  // @@protoc_insertion_point(field_get:caffe.RowColProposalTransformParameter.ignore_label)
  return ignore_label_.Get(index);
}
void RowColProposalTransformParameter::set_ignore_label(int index, ::google::protobuf::uint32 value) {
  ignore_label_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.RowColProposalTransformParameter.ignore_label)
}
void RowColProposalTransformParameter::add_ignore_label(::google::protobuf::uint32 value) {
  ignore_label_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.RowColProposalTransformParameter.ignore_label)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RowColProposalTransformParameter::ignore_label() const {
  // @@protoc_insertion_point(field_list:caffe.RowColProposalTransformParameter.ignore_label)
  return ignore_label_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RowColProposalTransformParameter::mutable_ignore_label() {
  // @@protoc_insertion_point(field_mutable_list:caffe.RowColProposalTransformParameter.ignore_label)
  return &ignore_label_;
}

inline const RowColProposalTransformParameter* RowColProposalTransformParameter::internal_default_instance() {
  return &RowColProposalTransformParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckParameter::kDstPathFieldNumber;
const int CheckParameter::kBboxNormFieldNumber;
const int CheckParameter::kWDividerFieldNumber;
const int CheckParameter::kHDividerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckParameter::CheckParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.CheckParameter)
}

void CheckParameter::InitAsDefaultInstance() {
}

CheckParameter::CheckParameter(const CheckParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.CheckParameter)
}

void CheckParameter::SharedCtor() {
  _cached_size_ = 0;
  dst_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&w_divider_, 0, reinterpret_cast<char*>(&h_divider_) -
    reinterpret_cast<char*>(&w_divider_) + sizeof(h_divider_));
  bbox_norm_ = true;
}

CheckParameter::~CheckParameter() {
  // @@protoc_insertion_point(destructor:caffe.CheckParameter)
  SharedDtor();
}

void CheckParameter::SharedDtor() {
  dst_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CheckParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckParameter_descriptor_;
}

const CheckParameter& CheckParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CheckParameter> CheckParameter_default_instance_;

CheckParameter* CheckParameter::New(::google::protobuf::Arena* arena) const {
  CheckParameter* n = new CheckParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.CheckParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CheckParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CheckParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(w_divider_, h_divider_);
    if (has_dst_path()) {
      dst_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    bbox_norm_ = true;
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CheckParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.CheckParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string dst_path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dst_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dst_path().data(), this->dst_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.CheckParameter.dst_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bbox_norm;
        break;
      }

      // optional bool bbox_norm = 2 [default = true];
      case 2: {
        if (tag == 16) {
         parse_bbox_norm:
          set_has_bbox_norm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bbox_norm_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_w_divider;
        break;
      }

      // optional float w_divider = 3;
      case 3: {
        if (tag == 29) {
         parse_w_divider:
          set_has_w_divider();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_divider_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_h_divider;
        break;
      }

      // optional float h_divider = 4;
      case 4: {
        if (tag == 37) {
         parse_h_divider:
          set_has_h_divider();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &h_divider_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.CheckParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.CheckParameter)
  return false;
#undef DO_
}

void CheckParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.CheckParameter)
  // optional string dst_path = 1;
  if (has_dst_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dst_path().data(), this->dst_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.CheckParameter.dst_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dst_path(), output);
  }

  // optional bool bbox_norm = 2 [default = true];
  if (has_bbox_norm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bbox_norm(), output);
  }

  // optional float w_divider = 3;
  if (has_w_divider()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->w_divider(), output);
  }

  // optional float h_divider = 4;
  if (has_h_divider()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->h_divider(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.CheckParameter)
}

::google::protobuf::uint8* CheckParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.CheckParameter)
  // optional string dst_path = 1;
  if (has_dst_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dst_path().data(), this->dst_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.CheckParameter.dst_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dst_path(), target);
  }

  // optional bool bbox_norm = 2 [default = true];
  if (has_bbox_norm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bbox_norm(), target);
  }

  // optional float w_divider = 3;
  if (has_w_divider()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->w_divider(), target);
  }

  // optional float h_divider = 4;
  if (has_h_divider()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->h_divider(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.CheckParameter)
  return target;
}

size_t CheckParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.CheckParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional string dst_path = 1;
    if (has_dst_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dst_path());
    }

    // optional bool bbox_norm = 2 [default = true];
    if (has_bbox_norm()) {
      total_size += 1 + 1;
    }

    // optional float w_divider = 3;
    if (has_w_divider()) {
      total_size += 1 + 4;
    }

    // optional float h_divider = 4;
    if (has_h_divider()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.CheckParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CheckParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.CheckParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.CheckParameter)
    UnsafeMergeFrom(*source);
  }
}

void CheckParameter::MergeFrom(const CheckParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.CheckParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CheckParameter::UnsafeMergeFrom(const CheckParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dst_path()) {
      set_has_dst_path();
      dst_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dst_path_);
    }
    if (from.has_bbox_norm()) {
      set_bbox_norm(from.bbox_norm());
    }
    if (from.has_w_divider()) {
      set_w_divider(from.w_divider());
    }
    if (from.has_h_divider()) {
      set_h_divider(from.h_divider());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CheckParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.CheckParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckParameter::CopyFrom(const CheckParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.CheckParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CheckParameter::IsInitialized() const {

  return true;
}

void CheckParameter::Swap(CheckParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckParameter::InternalSwap(CheckParameter* other) {
  dst_path_.Swap(&other->dst_path_);
  std::swap(bbox_norm_, other->bbox_norm_);
  std::swap(w_divider_, other->w_divider_);
  std::swap(h_divider_, other->h_divider_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckParameter_descriptor_;
  metadata.reflection = CheckParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckParameter

// optional string dst_path = 1;
bool CheckParameter::has_dst_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CheckParameter::set_has_dst_path() {
  _has_bits_[0] |= 0x00000001u;
}
void CheckParameter::clear_has_dst_path() {
  _has_bits_[0] &= ~0x00000001u;
}
void CheckParameter::clear_dst_path() {
  dst_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dst_path();
}
const ::std::string& CheckParameter::dst_path() const {
  // @@protoc_insertion_point(field_get:caffe.CheckParameter.dst_path)
  return dst_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckParameter::set_dst_path(const ::std::string& value) {
  set_has_dst_path();
  dst_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.CheckParameter.dst_path)
}
void CheckParameter::set_dst_path(const char* value) {
  set_has_dst_path();
  dst_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.CheckParameter.dst_path)
}
void CheckParameter::set_dst_path(const char* value, size_t size) {
  set_has_dst_path();
  dst_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.CheckParameter.dst_path)
}
::std::string* CheckParameter::mutable_dst_path() {
  set_has_dst_path();
  // @@protoc_insertion_point(field_mutable:caffe.CheckParameter.dst_path)
  return dst_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckParameter::release_dst_path() {
  // @@protoc_insertion_point(field_release:caffe.CheckParameter.dst_path)
  clear_has_dst_path();
  return dst_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckParameter::set_allocated_dst_path(::std::string* dst_path) {
  if (dst_path != NULL) {
    set_has_dst_path();
  } else {
    clear_has_dst_path();
  }
  dst_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dst_path);
  // @@protoc_insertion_point(field_set_allocated:caffe.CheckParameter.dst_path)
}

// optional bool bbox_norm = 2 [default = true];
bool CheckParameter::has_bbox_norm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CheckParameter::set_has_bbox_norm() {
  _has_bits_[0] |= 0x00000002u;
}
void CheckParameter::clear_has_bbox_norm() {
  _has_bits_[0] &= ~0x00000002u;
}
void CheckParameter::clear_bbox_norm() {
  bbox_norm_ = true;
  clear_has_bbox_norm();
}
bool CheckParameter::bbox_norm() const {
  // @@protoc_insertion_point(field_get:caffe.CheckParameter.bbox_norm)
  return bbox_norm_;
}
void CheckParameter::set_bbox_norm(bool value) {
  set_has_bbox_norm();
  bbox_norm_ = value;
  // @@protoc_insertion_point(field_set:caffe.CheckParameter.bbox_norm)
}

// optional float w_divider = 3;
bool CheckParameter::has_w_divider() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CheckParameter::set_has_w_divider() {
  _has_bits_[0] |= 0x00000004u;
}
void CheckParameter::clear_has_w_divider() {
  _has_bits_[0] &= ~0x00000004u;
}
void CheckParameter::clear_w_divider() {
  w_divider_ = 0;
  clear_has_w_divider();
}
float CheckParameter::w_divider() const {
  // @@protoc_insertion_point(field_get:caffe.CheckParameter.w_divider)
  return w_divider_;
}
void CheckParameter::set_w_divider(float value) {
  set_has_w_divider();
  w_divider_ = value;
  // @@protoc_insertion_point(field_set:caffe.CheckParameter.w_divider)
}

// optional float h_divider = 4;
bool CheckParameter::has_h_divider() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CheckParameter::set_has_h_divider() {
  _has_bits_[0] |= 0x00000008u;
}
void CheckParameter::clear_has_h_divider() {
  _has_bits_[0] &= ~0x00000008u;
}
void CheckParameter::clear_h_divider() {
  h_divider_ = 0;
  clear_has_h_divider();
}
float CheckParameter::h_divider() const {
  // @@protoc_insertion_point(field_get:caffe.CheckParameter.h_divider)
  return h_divider_;
}
void CheckParameter::set_h_divider(float value) {
  set_has_h_divider();
  h_divider_ = value;
  // @@protoc_insertion_point(field_set:caffe.CheckParameter.h_divider)
}

inline const CheckParameter* CheckParameter::internal_default_instance() {
  return &CheckParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MeanSubParameter::kMeanFileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MeanSubParameter::MeanSubParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.MeanSubParameter)
}

void MeanSubParameter::InitAsDefaultInstance() {
}

MeanSubParameter::MeanSubParameter(const MeanSubParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.MeanSubParameter)
}

void MeanSubParameter::SharedCtor() {
  _cached_size_ = 0;
  mean_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MeanSubParameter::~MeanSubParameter() {
  // @@protoc_insertion_point(destructor:caffe.MeanSubParameter)
  SharedDtor();
}

void MeanSubParameter::SharedDtor() {
  mean_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MeanSubParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MeanSubParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MeanSubParameter_descriptor_;
}

const MeanSubParameter& MeanSubParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MeanSubParameter> MeanSubParameter_default_instance_;

MeanSubParameter* MeanSubParameter::New(::google::protobuf::Arena* arena) const {
  MeanSubParameter* n = new MeanSubParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MeanSubParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.MeanSubParameter)
  if (has_mean_file()) {
    mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MeanSubParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.MeanSubParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string mean_file = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mean_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mean_file().data(), this->mean_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.MeanSubParameter.mean_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.MeanSubParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.MeanSubParameter)
  return false;
#undef DO_
}

void MeanSubParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.MeanSubParameter)
  // required string mean_file = 1;
  if (has_mean_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), this->mean_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.MeanSubParameter.mean_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mean_file(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.MeanSubParameter)
}

::google::protobuf::uint8* MeanSubParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.MeanSubParameter)
  // required string mean_file = 1;
  if (has_mean_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), this->mean_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.MeanSubParameter.mean_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mean_file(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.MeanSubParameter)
  return target;
}

size_t MeanSubParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.MeanSubParameter)
  size_t total_size = 0;

  // required string mean_file = 1;
  if (has_mean_file()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mean_file());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MeanSubParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.MeanSubParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MeanSubParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MeanSubParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.MeanSubParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.MeanSubParameter)
    UnsafeMergeFrom(*source);
  }
}

void MeanSubParameter::MergeFrom(const MeanSubParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.MeanSubParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MeanSubParameter::UnsafeMergeFrom(const MeanSubParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mean_file()) {
      set_has_mean_file();
      mean_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mean_file_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void MeanSubParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.MeanSubParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeanSubParameter::CopyFrom(const MeanSubParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.MeanSubParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MeanSubParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MeanSubParameter::Swap(MeanSubParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MeanSubParameter::InternalSwap(MeanSubParameter* other) {
  mean_file_.Swap(&other->mean_file_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MeanSubParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MeanSubParameter_descriptor_;
  metadata.reflection = MeanSubParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MeanSubParameter

// required string mean_file = 1;
bool MeanSubParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MeanSubParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000001u;
}
void MeanSubParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000001u;
}
void MeanSubParameter::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mean_file();
}
const ::std::string& MeanSubParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.MeanSubParameter.mean_file)
  return mean_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MeanSubParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.MeanSubParameter.mean_file)
}
void MeanSubParameter::set_mean_file(const char* value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.MeanSubParameter.mean_file)
}
void MeanSubParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.MeanSubParameter.mean_file)
}
::std::string* MeanSubParameter::mutable_mean_file() {
  set_has_mean_file();
  // @@protoc_insertion_point(field_mutable:caffe.MeanSubParameter.mean_file)
  return mean_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MeanSubParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:caffe.MeanSubParameter.mean_file)
  clear_has_mean_file();
  return mean_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MeanSubParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file != NULL) {
    set_has_mean_file();
  } else {
    clear_has_mean_file();
  }
  mean_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.MeanSubParameter.mean_file)
}

inline const MeanSubParameter* MeanSubParameter::internal_default_instance() {
  return &MeanSubParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnnoToSegParameter::kObjectnessFieldNumber;
const int AnnoToSegParameter::kNumLabelFieldNumber;
const int AnnoToSegParameter::kBboxNormalizedFieldNumber;
const int AnnoToSegParameter::kInWidthFieldNumber;
const int AnnoToSegParameter::kInHeightFieldNumber;
const int AnnoToSegParameter::kOutWidthFieldNumber;
const int AnnoToSegParameter::kOutHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnnoToSegParameter::AnnoToSegParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.AnnoToSegParameter)
}

void AnnoToSegParameter::InitAsDefaultInstance() {
}

AnnoToSegParameter::AnnoToSegParameter(const AnnoToSegParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.AnnoToSegParameter)
}

void AnnoToSegParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&num_label_, 0, reinterpret_cast<char*>(&out_height_) -
    reinterpret_cast<char*>(&num_label_) + sizeof(out_height_));
  in_width_ = 1u;
  in_height_ = 1u;
}

AnnoToSegParameter::~AnnoToSegParameter() {
  // @@protoc_insertion_point(destructor:caffe.AnnoToSegParameter)
  SharedDtor();
}

void AnnoToSegParameter::SharedDtor() {
}

void AnnoToSegParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnnoToSegParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnnoToSegParameter_descriptor_;
}

const AnnoToSegParameter& AnnoToSegParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AnnoToSegParameter> AnnoToSegParameter_default_instance_;

AnnoToSegParameter* AnnoToSegParameter::New(::google::protobuf::Arena* arena) const {
  AnnoToSegParameter* n = new AnnoToSegParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AnnoToSegParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.AnnoToSegParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AnnoToSegParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AnnoToSegParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(num_label_, out_height_);
    in_width_ = 1u;
    in_height_ = 1u;
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AnnoToSegParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.AnnoToSegParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool objectness = 1 [default = false];
      case 1: {
        if (tag == 8) {
          set_has_objectness();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &objectness_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_label;
        break;
      }

      // optional uint32 num_label = 2;
      case 2: {
        if (tag == 16) {
         parse_num_label:
          set_has_num_label();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_label_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bbox_normalized;
        break;
      }

      // optional bool bbox_normalized = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_bbox_normalized:
          set_has_bbox_normalized();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bbox_normalized_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_in_width;
        break;
      }

      // optional uint32 in_width = 4 [default = 1];
      case 4: {
        if (tag == 32) {
         parse_in_width:
          set_has_in_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &in_width_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_in_height;
        break;
      }

      // optional uint32 in_height = 5 [default = 1];
      case 5: {
        if (tag == 40) {
         parse_in_height:
          set_has_in_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &in_height_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_out_width;
        break;
      }

      // optional uint32 out_width = 6;
      case 6: {
        if (tag == 48) {
         parse_out_width:
          set_has_out_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &out_width_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_out_height;
        break;
      }

      // optional uint32 out_height = 7;
      case 7: {
        if (tag == 56) {
         parse_out_height:
          set_has_out_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &out_height_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.AnnoToSegParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.AnnoToSegParameter)
  return false;
#undef DO_
}

void AnnoToSegParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.AnnoToSegParameter)
  // optional bool objectness = 1 [default = false];
  if (has_objectness()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->objectness(), output);
  }

  // optional uint32 num_label = 2;
  if (has_num_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_label(), output);
  }

  // optional bool bbox_normalized = 3 [default = false];
  if (has_bbox_normalized()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bbox_normalized(), output);
  }

  // optional uint32 in_width = 4 [default = 1];
  if (has_in_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->in_width(), output);
  }

  // optional uint32 in_height = 5 [default = 1];
  if (has_in_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->in_height(), output);
  }

  // optional uint32 out_width = 6;
  if (has_out_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->out_width(), output);
  }

  // optional uint32 out_height = 7;
  if (has_out_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->out_height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.AnnoToSegParameter)
}

::google::protobuf::uint8* AnnoToSegParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.AnnoToSegParameter)
  // optional bool objectness = 1 [default = false];
  if (has_objectness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->objectness(), target);
  }

  // optional uint32 num_label = 2;
  if (has_num_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_label(), target);
  }

  // optional bool bbox_normalized = 3 [default = false];
  if (has_bbox_normalized()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bbox_normalized(), target);
  }

  // optional uint32 in_width = 4 [default = 1];
  if (has_in_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->in_width(), target);
  }

  // optional uint32 in_height = 5 [default = 1];
  if (has_in_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->in_height(), target);
  }

  // optional uint32 out_width = 6;
  if (has_out_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->out_width(), target);
  }

  // optional uint32 out_height = 7;
  if (has_out_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->out_height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.AnnoToSegParameter)
  return target;
}

size_t AnnoToSegParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.AnnoToSegParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional bool objectness = 1 [default = false];
    if (has_objectness()) {
      total_size += 1 + 1;
    }

    // optional uint32 num_label = 2;
    if (has_num_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_label());
    }

    // optional bool bbox_normalized = 3 [default = false];
    if (has_bbox_normalized()) {
      total_size += 1 + 1;
    }

    // optional uint32 in_width = 4 [default = 1];
    if (has_in_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->in_width());
    }

    // optional uint32 in_height = 5 [default = 1];
    if (has_in_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->in_height());
    }

    // optional uint32 out_width = 6;
    if (has_out_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->out_width());
    }

    // optional uint32 out_height = 7;
    if (has_out_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->out_height());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnnoToSegParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.AnnoToSegParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AnnoToSegParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnnoToSegParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.AnnoToSegParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.AnnoToSegParameter)
    UnsafeMergeFrom(*source);
  }
}

void AnnoToSegParameter::MergeFrom(const AnnoToSegParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.AnnoToSegParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AnnoToSegParameter::UnsafeMergeFrom(const AnnoToSegParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectness()) {
      set_objectness(from.objectness());
    }
    if (from.has_num_label()) {
      set_num_label(from.num_label());
    }
    if (from.has_bbox_normalized()) {
      set_bbox_normalized(from.bbox_normalized());
    }
    if (from.has_in_width()) {
      set_in_width(from.in_width());
    }
    if (from.has_in_height()) {
      set_in_height(from.in_height());
    }
    if (from.has_out_width()) {
      set_out_width(from.out_width());
    }
    if (from.has_out_height()) {
      set_out_height(from.out_height());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void AnnoToSegParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.AnnoToSegParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnnoToSegParameter::CopyFrom(const AnnoToSegParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.AnnoToSegParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AnnoToSegParameter::IsInitialized() const {

  return true;
}

void AnnoToSegParameter::Swap(AnnoToSegParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnnoToSegParameter::InternalSwap(AnnoToSegParameter* other) {
  std::swap(objectness_, other->objectness_);
  std::swap(num_label_, other->num_label_);
  std::swap(bbox_normalized_, other->bbox_normalized_);
  std::swap(in_width_, other->in_width_);
  std::swap(in_height_, other->in_height_);
  std::swap(out_width_, other->out_width_);
  std::swap(out_height_, other->out_height_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AnnoToSegParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnnoToSegParameter_descriptor_;
  metadata.reflection = AnnoToSegParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AnnoToSegParameter

// optional bool objectness = 1 [default = false];
bool AnnoToSegParameter::has_objectness() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AnnoToSegParameter::set_has_objectness() {
  _has_bits_[0] |= 0x00000001u;
}
void AnnoToSegParameter::clear_has_objectness() {
  _has_bits_[0] &= ~0x00000001u;
}
void AnnoToSegParameter::clear_objectness() {
  objectness_ = false;
  clear_has_objectness();
}
bool AnnoToSegParameter::objectness() const {
  // @@protoc_insertion_point(field_get:caffe.AnnoToSegParameter.objectness)
  return objectness_;
}
void AnnoToSegParameter::set_objectness(bool value) {
  set_has_objectness();
  objectness_ = value;
  // @@protoc_insertion_point(field_set:caffe.AnnoToSegParameter.objectness)
}

// optional uint32 num_label = 2;
bool AnnoToSegParameter::has_num_label() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AnnoToSegParameter::set_has_num_label() {
  _has_bits_[0] |= 0x00000002u;
}
void AnnoToSegParameter::clear_has_num_label() {
  _has_bits_[0] &= ~0x00000002u;
}
void AnnoToSegParameter::clear_num_label() {
  num_label_ = 0u;
  clear_has_num_label();
}
::google::protobuf::uint32 AnnoToSegParameter::num_label() const {
  // @@protoc_insertion_point(field_get:caffe.AnnoToSegParameter.num_label)
  return num_label_;
}
void AnnoToSegParameter::set_num_label(::google::protobuf::uint32 value) {
  set_has_num_label();
  num_label_ = value;
  // @@protoc_insertion_point(field_set:caffe.AnnoToSegParameter.num_label)
}

// optional bool bbox_normalized = 3 [default = false];
bool AnnoToSegParameter::has_bbox_normalized() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AnnoToSegParameter::set_has_bbox_normalized() {
  _has_bits_[0] |= 0x00000004u;
}
void AnnoToSegParameter::clear_has_bbox_normalized() {
  _has_bits_[0] &= ~0x00000004u;
}
void AnnoToSegParameter::clear_bbox_normalized() {
  bbox_normalized_ = false;
  clear_has_bbox_normalized();
}
bool AnnoToSegParameter::bbox_normalized() const {
  // @@protoc_insertion_point(field_get:caffe.AnnoToSegParameter.bbox_normalized)
  return bbox_normalized_;
}
void AnnoToSegParameter::set_bbox_normalized(bool value) {
  set_has_bbox_normalized();
  bbox_normalized_ = value;
  // @@protoc_insertion_point(field_set:caffe.AnnoToSegParameter.bbox_normalized)
}

// optional uint32 in_width = 4 [default = 1];
bool AnnoToSegParameter::has_in_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AnnoToSegParameter::set_has_in_width() {
  _has_bits_[0] |= 0x00000008u;
}
void AnnoToSegParameter::clear_has_in_width() {
  _has_bits_[0] &= ~0x00000008u;
}
void AnnoToSegParameter::clear_in_width() {
  in_width_ = 1u;
  clear_has_in_width();
}
::google::protobuf::uint32 AnnoToSegParameter::in_width() const {
  // @@protoc_insertion_point(field_get:caffe.AnnoToSegParameter.in_width)
  return in_width_;
}
void AnnoToSegParameter::set_in_width(::google::protobuf::uint32 value) {
  set_has_in_width();
  in_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.AnnoToSegParameter.in_width)
}

// optional uint32 in_height = 5 [default = 1];
bool AnnoToSegParameter::has_in_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AnnoToSegParameter::set_has_in_height() {
  _has_bits_[0] |= 0x00000010u;
}
void AnnoToSegParameter::clear_has_in_height() {
  _has_bits_[0] &= ~0x00000010u;
}
void AnnoToSegParameter::clear_in_height() {
  in_height_ = 1u;
  clear_has_in_height();
}
::google::protobuf::uint32 AnnoToSegParameter::in_height() const {
  // @@protoc_insertion_point(field_get:caffe.AnnoToSegParameter.in_height)
  return in_height_;
}
void AnnoToSegParameter::set_in_height(::google::protobuf::uint32 value) {
  set_has_in_height();
  in_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.AnnoToSegParameter.in_height)
}

// optional uint32 out_width = 6;
bool AnnoToSegParameter::has_out_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void AnnoToSegParameter::set_has_out_width() {
  _has_bits_[0] |= 0x00000020u;
}
void AnnoToSegParameter::clear_has_out_width() {
  _has_bits_[0] &= ~0x00000020u;
}
void AnnoToSegParameter::clear_out_width() {
  out_width_ = 0u;
  clear_has_out_width();
}
::google::protobuf::uint32 AnnoToSegParameter::out_width() const {
  // @@protoc_insertion_point(field_get:caffe.AnnoToSegParameter.out_width)
  return out_width_;
}
void AnnoToSegParameter::set_out_width(::google::protobuf::uint32 value) {
  set_has_out_width();
  out_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.AnnoToSegParameter.out_width)
}

// optional uint32 out_height = 7;
bool AnnoToSegParameter::has_out_height() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void AnnoToSegParameter::set_has_out_height() {
  _has_bits_[0] |= 0x00000040u;
}
void AnnoToSegParameter::clear_has_out_height() {
  _has_bits_[0] &= ~0x00000040u;
}
void AnnoToSegParameter::clear_out_height() {
  out_height_ = 0u;
  clear_has_out_height();
}
::google::protobuf::uint32 AnnoToSegParameter::out_height() const {
  // @@protoc_insertion_point(field_get:caffe.AnnoToSegParameter.out_height)
  return out_height_;
}
void AnnoToSegParameter::set_out_height(::google::protobuf::uint32 value) {
  set_has_out_height();
  out_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.AnnoToSegParameter.out_height)
}

inline const AnnoToSegParameter* AnnoToSegParameter::internal_default_instance() {
  return &AnnoToSegParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrainROIParameter::kImgWidthFieldNumber;
const int TrainROIParameter::kImgHeightFieldNumber;
const int TrainROIParameter::kRoiWidthFieldNumber;
const int TrainROIParameter::kRoiHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrainROIParameter::TrainROIParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.TrainROIParameter)
}

void TrainROIParameter::InitAsDefaultInstance() {
}

TrainROIParameter::TrainROIParameter(const TrainROIParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.TrainROIParameter)
}

void TrainROIParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&img_width_, 0, reinterpret_cast<char*>(&roi_height_) -
    reinterpret_cast<char*>(&img_width_) + sizeof(roi_height_));
}

TrainROIParameter::~TrainROIParameter() {
  // @@protoc_insertion_point(destructor:caffe.TrainROIParameter)
  SharedDtor();
}

void TrainROIParameter::SharedDtor() {
}

void TrainROIParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrainROIParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrainROIParameter_descriptor_;
}

const TrainROIParameter& TrainROIParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TrainROIParameter> TrainROIParameter_default_instance_;

TrainROIParameter* TrainROIParameter::New(::google::protobuf::Arena* arena) const {
  TrainROIParameter* n = new TrainROIParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrainROIParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.TrainROIParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TrainROIParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TrainROIParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(img_width_, roi_height_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TrainROIParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.TrainROIParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 img_width = 1;
      case 1: {
        if (tag == 8) {
          set_has_img_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &img_width_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_img_height;
        break;
      }

      // required uint32 img_height = 2;
      case 2: {
        if (tag == 16) {
         parse_img_height:
          set_has_img_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &img_height_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_roi_width;
        break;
      }

      // required uint32 roi_width = 3;
      case 3: {
        if (tag == 24) {
         parse_roi_width:
          set_has_roi_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roi_width_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_roi_height;
        break;
      }

      // required uint32 roi_height = 4;
      case 4: {
        if (tag == 32) {
         parse_roi_height:
          set_has_roi_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roi_height_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.TrainROIParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.TrainROIParameter)
  return false;
#undef DO_
}

void TrainROIParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.TrainROIParameter)
  // required uint32 img_width = 1;
  if (has_img_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->img_width(), output);
  }

  // required uint32 img_height = 2;
  if (has_img_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->img_height(), output);
  }

  // required uint32 roi_width = 3;
  if (has_roi_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->roi_width(), output);
  }

  // required uint32 roi_height = 4;
  if (has_roi_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->roi_height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.TrainROIParameter)
}

::google::protobuf::uint8* TrainROIParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.TrainROIParameter)
  // required uint32 img_width = 1;
  if (has_img_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->img_width(), target);
  }

  // required uint32 img_height = 2;
  if (has_img_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->img_height(), target);
  }

  // required uint32 roi_width = 3;
  if (has_roi_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->roi_width(), target);
  }

  // required uint32 roi_height = 4;
  if (has_roi_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->roi_height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.TrainROIParameter)
  return target;
}

size_t TrainROIParameter::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe.TrainROIParameter)
  size_t total_size = 0;

  if (has_img_width()) {
    // required uint32 img_width = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->img_width());
  }

  if (has_img_height()) {
    // required uint32 img_height = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->img_height());
  }

  if (has_roi_width()) {
    // required uint32 roi_width = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->roi_width());
  }

  if (has_roi_height()) {
    // required uint32 roi_height = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->roi_height());
  }

  return total_size;
}
size_t TrainROIParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.TrainROIParameter)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 img_width = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->img_width());

    // required uint32 img_height = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->img_height());

    // required uint32 roi_width = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->roi_width());

    // required uint32 roi_height = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->roi_height());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrainROIParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.TrainROIParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TrainROIParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrainROIParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.TrainROIParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.TrainROIParameter)
    UnsafeMergeFrom(*source);
  }
}

void TrainROIParameter::MergeFrom(const TrainROIParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.TrainROIParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TrainROIParameter::UnsafeMergeFrom(const TrainROIParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_img_width()) {
      set_img_width(from.img_width());
    }
    if (from.has_img_height()) {
      set_img_height(from.img_height());
    }
    if (from.has_roi_width()) {
      set_roi_width(from.roi_width());
    }
    if (from.has_roi_height()) {
      set_roi_height(from.roi_height());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void TrainROIParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.TrainROIParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainROIParameter::CopyFrom(const TrainROIParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.TrainROIParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TrainROIParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void TrainROIParameter::Swap(TrainROIParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrainROIParameter::InternalSwap(TrainROIParameter* other) {
  std::swap(img_width_, other->img_width_);
  std::swap(img_height_, other->img_height_);
  std::swap(roi_width_, other->roi_width_);
  std::swap(roi_height_, other->roi_height_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrainROIParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrainROIParameter_descriptor_;
  metadata.reflection = TrainROIParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrainROIParameter

// required uint32 img_width = 1;
bool TrainROIParameter::has_img_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrainROIParameter::set_has_img_width() {
  _has_bits_[0] |= 0x00000001u;
}
void TrainROIParameter::clear_has_img_width() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrainROIParameter::clear_img_width() {
  img_width_ = 0u;
  clear_has_img_width();
}
::google::protobuf::uint32 TrainROIParameter::img_width() const {
  // @@protoc_insertion_point(field_get:caffe.TrainROIParameter.img_width)
  return img_width_;
}
void TrainROIParameter::set_img_width(::google::protobuf::uint32 value) {
  set_has_img_width();
  img_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.TrainROIParameter.img_width)
}

// required uint32 img_height = 2;
bool TrainROIParameter::has_img_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TrainROIParameter::set_has_img_height() {
  _has_bits_[0] |= 0x00000002u;
}
void TrainROIParameter::clear_has_img_height() {
  _has_bits_[0] &= ~0x00000002u;
}
void TrainROIParameter::clear_img_height() {
  img_height_ = 0u;
  clear_has_img_height();
}
::google::protobuf::uint32 TrainROIParameter::img_height() const {
  // @@protoc_insertion_point(field_get:caffe.TrainROIParameter.img_height)
  return img_height_;
}
void TrainROIParameter::set_img_height(::google::protobuf::uint32 value) {
  set_has_img_height();
  img_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.TrainROIParameter.img_height)
}

// required uint32 roi_width = 3;
bool TrainROIParameter::has_roi_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TrainROIParameter::set_has_roi_width() {
  _has_bits_[0] |= 0x00000004u;
}
void TrainROIParameter::clear_has_roi_width() {
  _has_bits_[0] &= ~0x00000004u;
}
void TrainROIParameter::clear_roi_width() {
  roi_width_ = 0u;
  clear_has_roi_width();
}
::google::protobuf::uint32 TrainROIParameter::roi_width() const {
  // @@protoc_insertion_point(field_get:caffe.TrainROIParameter.roi_width)
  return roi_width_;
}
void TrainROIParameter::set_roi_width(::google::protobuf::uint32 value) {
  set_has_roi_width();
  roi_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.TrainROIParameter.roi_width)
}

// required uint32 roi_height = 4;
bool TrainROIParameter::has_roi_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TrainROIParameter::set_has_roi_height() {
  _has_bits_[0] |= 0x00000008u;
}
void TrainROIParameter::clear_has_roi_height() {
  _has_bits_[0] &= ~0x00000008u;
}
void TrainROIParameter::clear_roi_height() {
  roi_height_ = 0u;
  clear_has_roi_height();
}
::google::protobuf::uint32 TrainROIParameter::roi_height() const {
  // @@protoc_insertion_point(field_get:caffe.TrainROIParameter.roi_height)
  return roi_height_;
}
void TrainROIParameter::set_roi_height(::google::protobuf::uint32 value) {
  set_has_roi_height();
  roi_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.TrainROIParameter.roi_height)
}

inline const TrainROIParameter* TrainROIParameter::internal_default_instance() {
  return &TrainROIParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int YOLOV2LossParameter::kAnchorFieldNumber;
const int YOLOV2LossParameter::kNumClassFieldNumber;
const int YOLOV2LossParameter::kImgSizeFieldNumber;
const int YOLOV2LossParameter::kYoloMapSizeFieldNumber;
const int YOLOV2LossParameter::kOverlapThresholdFieldNumber;
const int YOLOV2LossParameter::kNoobjScaleFieldNumber;
const int YOLOV2LossParameter::kObjScaleFieldNumber;
const int YOLOV2LossParameter::kClsScaleFieldNumber;
const int YOLOV2LossParameter::kCoordScaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

YOLOV2LossParameter::YOLOV2LossParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.YOLOV2LossParameter)
}

void YOLOV2LossParameter::InitAsDefaultInstance() {
  img_size_ = const_cast< ::caffe::Size2i*>(
      ::caffe::Size2i::internal_default_instance());
  yolo_map_size_ = const_cast< ::caffe::Size2i*>(
      ::caffe::Size2i::internal_default_instance());
}

YOLOV2LossParameter::YOLOV2LossParameter(const YOLOV2LossParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.YOLOV2LossParameter)
}

void YOLOV2LossParameter::SharedCtor() {
  _cached_size_ = 0;
  img_size_ = NULL;
  yolo_map_size_ = NULL;
  num_class_ = 0u;
  coord_scale_ = 2;
  overlap_threshold_ = 0.3f;
  noobj_scale_ = 1;
  obj_scale_ = 3;
  cls_scale_ = 2;
}

YOLOV2LossParameter::~YOLOV2LossParameter() {
  // @@protoc_insertion_point(destructor:caffe.YOLOV2LossParameter)
  SharedDtor();
}

void YOLOV2LossParameter::SharedDtor() {
  if (this != &YOLOV2LossParameter_default_instance_.get()) {
    delete img_size_;
    delete yolo_map_size_;
  }
}

void YOLOV2LossParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YOLOV2LossParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YOLOV2LossParameter_descriptor_;
}

const YOLOV2LossParameter& YOLOV2LossParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<YOLOV2LossParameter> YOLOV2LossParameter_default_instance_;

YOLOV2LossParameter* YOLOV2LossParameter::New(::google::protobuf::Arena* arena) const {
  YOLOV2LossParameter* n = new YOLOV2LossParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YOLOV2LossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.YOLOV2LossParameter)
  if (_has_bits_[0 / 32] & 254u) {
    num_class_ = 0u;
    if (has_img_size()) {
      if (img_size_ != NULL) img_size_->::caffe::Size2i::Clear();
    }
    if (has_yolo_map_size()) {
      if (yolo_map_size_ != NULL) yolo_map_size_->::caffe::Size2i::Clear();
    }
    overlap_threshold_ = 0.3f;
    noobj_scale_ = 1;
    obj_scale_ = 3;
    cls_scale_ = 2;
  }
  coord_scale_ = 2;
  anchor_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool YOLOV2LossParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.YOLOV2LossParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .caffe.Rect2f anchor = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_anchor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_anchor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_anchor;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse_num_class;
        break;
      }

      // required uint32 num_class = 2;
      case 2: {
        if (tag == 16) {
         parse_num_class:
          set_has_num_class();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_class_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_img_size;
        break;
      }

      // required .caffe.Size2i img_size = 3;
      case 3: {
        if (tag == 26) {
         parse_img_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_img_size()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_yolo_map_size;
        break;
      }

      // required .caffe.Size2i yolo_map_size = 4;
      case 4: {
        if (tag == 34) {
         parse_yolo_map_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_yolo_map_size()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_overlap_threshold;
        break;
      }

      // optional float overlap_threshold = 5 [default = 0.3];
      case 5: {
        if (tag == 45) {
         parse_overlap_threshold:
          set_has_overlap_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &overlap_threshold_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_noobj_scale;
        break;
      }

      // optional float noobj_scale = 6 [default = 1];
      case 6: {
        if (tag == 53) {
         parse_noobj_scale:
          set_has_noobj_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &noobj_scale_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_obj_scale;
        break;
      }

      // optional float obj_scale = 7 [default = 3];
      case 7: {
        if (tag == 61) {
         parse_obj_scale:
          set_has_obj_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obj_scale_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_cls_scale;
        break;
      }

      // optional float cls_scale = 8 [default = 2];
      case 8: {
        if (tag == 69) {
         parse_cls_scale:
          set_has_cls_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cls_scale_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_coord_scale;
        break;
      }

      // optional float coord_scale = 9 [default = 2];
      case 9: {
        if (tag == 77) {
         parse_coord_scale:
          set_has_coord_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &coord_scale_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.YOLOV2LossParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.YOLOV2LossParameter)
  return false;
#undef DO_
}

void YOLOV2LossParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.YOLOV2LossParameter)
  // repeated .caffe.Rect2f anchor = 1;
  for (unsigned int i = 0, n = this->anchor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->anchor(i), output);
  }

  // required uint32 num_class = 2;
  if (has_num_class()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_class(), output);
  }

  // required .caffe.Size2i img_size = 3;
  if (has_img_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->img_size_, output);
  }

  // required .caffe.Size2i yolo_map_size = 4;
  if (has_yolo_map_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->yolo_map_size_, output);
  }

  // optional float overlap_threshold = 5 [default = 0.3];
  if (has_overlap_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->overlap_threshold(), output);
  }

  // optional float noobj_scale = 6 [default = 1];
  if (has_noobj_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->noobj_scale(), output);
  }

  // optional float obj_scale = 7 [default = 3];
  if (has_obj_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->obj_scale(), output);
  }

  // optional float cls_scale = 8 [default = 2];
  if (has_cls_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->cls_scale(), output);
  }

  // optional float coord_scale = 9 [default = 2];
  if (has_coord_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->coord_scale(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.YOLOV2LossParameter)
}

::google::protobuf::uint8* YOLOV2LossParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.YOLOV2LossParameter)
  // repeated .caffe.Rect2f anchor = 1;
  for (unsigned int i = 0, n = this->anchor_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->anchor(i), false, target);
  }

  // required uint32 num_class = 2;
  if (has_num_class()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_class(), target);
  }

  // required .caffe.Size2i img_size = 3;
  if (has_img_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->img_size_, false, target);
  }

  // required .caffe.Size2i yolo_map_size = 4;
  if (has_yolo_map_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->yolo_map_size_, false, target);
  }

  // optional float overlap_threshold = 5 [default = 0.3];
  if (has_overlap_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->overlap_threshold(), target);
  }

  // optional float noobj_scale = 6 [default = 1];
  if (has_noobj_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->noobj_scale(), target);
  }

  // optional float obj_scale = 7 [default = 3];
  if (has_obj_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->obj_scale(), target);
  }

  // optional float cls_scale = 8 [default = 2];
  if (has_cls_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->cls_scale(), target);
  }

  // optional float coord_scale = 9 [default = 2];
  if (has_coord_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->coord_scale(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.YOLOV2LossParameter)
  return target;
}

size_t YOLOV2LossParameter::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe.YOLOV2LossParameter)
  size_t total_size = 0;

  if (has_num_class()) {
    // required uint32 num_class = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_class());
  }

  if (has_img_size()) {
    // required .caffe.Size2i img_size = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->img_size_);
  }

  if (has_yolo_map_size()) {
    // required .caffe.Size2i yolo_map_size = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->yolo_map_size_);
  }

  return total_size;
}
size_t YOLOV2LossParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.YOLOV2LossParameter)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required uint32 num_class = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_class());

    // required .caffe.Size2i img_size = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->img_size_);

    // required .caffe.Size2i yolo_map_size = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->yolo_map_size_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[4 / 32] & 240u) {
    // optional float overlap_threshold = 5 [default = 0.3];
    if (has_overlap_threshold()) {
      total_size += 1 + 4;
    }

    // optional float noobj_scale = 6 [default = 1];
    if (has_noobj_scale()) {
      total_size += 1 + 4;
    }

    // optional float obj_scale = 7 [default = 3];
    if (has_obj_scale()) {
      total_size += 1 + 4;
    }

    // optional float cls_scale = 8 [default = 2];
    if (has_cls_scale()) {
      total_size += 1 + 4;
    }

  }
  // optional float coord_scale = 9 [default = 2];
  if (has_coord_scale()) {
    total_size += 1 + 4;
  }

  // repeated .caffe.Rect2f anchor = 1;
  {
    unsigned int count = this->anchor_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->anchor(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YOLOV2LossParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.YOLOV2LossParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const YOLOV2LossParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const YOLOV2LossParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.YOLOV2LossParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.YOLOV2LossParameter)
    UnsafeMergeFrom(*source);
  }
}

void YOLOV2LossParameter::MergeFrom(const YOLOV2LossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.YOLOV2LossParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void YOLOV2LossParameter::UnsafeMergeFrom(const YOLOV2LossParameter& from) {
  GOOGLE_DCHECK(&from != this);
  anchor_.MergeFrom(from.anchor_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_num_class()) {
      set_num_class(from.num_class());
    }
    if (from.has_img_size()) {
      mutable_img_size()->::caffe::Size2i::MergeFrom(from.img_size());
    }
    if (from.has_yolo_map_size()) {
      mutable_yolo_map_size()->::caffe::Size2i::MergeFrom(from.yolo_map_size());
    }
    if (from.has_overlap_threshold()) {
      set_overlap_threshold(from.overlap_threshold());
    }
    if (from.has_noobj_scale()) {
      set_noobj_scale(from.noobj_scale());
    }
    if (from.has_obj_scale()) {
      set_obj_scale(from.obj_scale());
    }
    if (from.has_cls_scale()) {
      set_cls_scale(from.cls_scale());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_coord_scale()) {
      set_coord_scale(from.coord_scale());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void YOLOV2LossParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.YOLOV2LossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YOLOV2LossParameter::CopyFrom(const YOLOV2LossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.YOLOV2LossParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool YOLOV2LossParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->anchor())) return false;
  if (has_img_size()) {
    if (!this->img_size_->IsInitialized()) return false;
  }
  if (has_yolo_map_size()) {
    if (!this->yolo_map_size_->IsInitialized()) return false;
  }
  return true;
}

void YOLOV2LossParameter::Swap(YOLOV2LossParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YOLOV2LossParameter::InternalSwap(YOLOV2LossParameter* other) {
  anchor_.UnsafeArenaSwap(&other->anchor_);
  std::swap(num_class_, other->num_class_);
  std::swap(img_size_, other->img_size_);
  std::swap(yolo_map_size_, other->yolo_map_size_);
  std::swap(overlap_threshold_, other->overlap_threshold_);
  std::swap(noobj_scale_, other->noobj_scale_);
  std::swap(obj_scale_, other->obj_scale_);
  std::swap(cls_scale_, other->cls_scale_);
  std::swap(coord_scale_, other->coord_scale_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata YOLOV2LossParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YOLOV2LossParameter_descriptor_;
  metadata.reflection = YOLOV2LossParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YOLOV2LossParameter

// repeated .caffe.Rect2f anchor = 1;
int YOLOV2LossParameter::anchor_size() const {
  return anchor_.size();
}
void YOLOV2LossParameter::clear_anchor() {
  anchor_.Clear();
}
const ::caffe::Rect2f& YOLOV2LossParameter::anchor(int index) const {
  // @@protoc_insertion_point(field_get:caffe.YOLOV2LossParameter.anchor)
  return anchor_.Get(index);
}
::caffe::Rect2f* YOLOV2LossParameter::mutable_anchor(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.YOLOV2LossParameter.anchor)
  return anchor_.Mutable(index);
}
::caffe::Rect2f* YOLOV2LossParameter::add_anchor() {
  // @@protoc_insertion_point(field_add:caffe.YOLOV2LossParameter.anchor)
  return anchor_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::Rect2f >*
YOLOV2LossParameter::mutable_anchor() {
  // @@protoc_insertion_point(field_mutable_list:caffe.YOLOV2LossParameter.anchor)
  return &anchor_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::Rect2f >&
YOLOV2LossParameter::anchor() const {
  // @@protoc_insertion_point(field_list:caffe.YOLOV2LossParameter.anchor)
  return anchor_;
}

// required uint32 num_class = 2;
bool YOLOV2LossParameter::has_num_class() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YOLOV2LossParameter::set_has_num_class() {
  _has_bits_[0] |= 0x00000002u;
}
void YOLOV2LossParameter::clear_has_num_class() {
  _has_bits_[0] &= ~0x00000002u;
}
void YOLOV2LossParameter::clear_num_class() {
  num_class_ = 0u;
  clear_has_num_class();
}
::google::protobuf::uint32 YOLOV2LossParameter::num_class() const {
  // @@protoc_insertion_point(field_get:caffe.YOLOV2LossParameter.num_class)
  return num_class_;
}
void YOLOV2LossParameter::set_num_class(::google::protobuf::uint32 value) {
  set_has_num_class();
  num_class_ = value;
  // @@protoc_insertion_point(field_set:caffe.YOLOV2LossParameter.num_class)
}

// required .caffe.Size2i img_size = 3;
bool YOLOV2LossParameter::has_img_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YOLOV2LossParameter::set_has_img_size() {
  _has_bits_[0] |= 0x00000004u;
}
void YOLOV2LossParameter::clear_has_img_size() {
  _has_bits_[0] &= ~0x00000004u;
}
void YOLOV2LossParameter::clear_img_size() {
  if (img_size_ != NULL) img_size_->::caffe::Size2i::Clear();
  clear_has_img_size();
}
const ::caffe::Size2i& YOLOV2LossParameter::img_size() const {
  // @@protoc_insertion_point(field_get:caffe.YOLOV2LossParameter.img_size)
  return img_size_ != NULL ? *img_size_
                         : *::caffe::Size2i::internal_default_instance();
}
::caffe::Size2i* YOLOV2LossParameter::mutable_img_size() {
  set_has_img_size();
  if (img_size_ == NULL) {
    img_size_ = new ::caffe::Size2i;
  }
  // @@protoc_insertion_point(field_mutable:caffe.YOLOV2LossParameter.img_size)
  return img_size_;
}
::caffe::Size2i* YOLOV2LossParameter::release_img_size() {
  // @@protoc_insertion_point(field_release:caffe.YOLOV2LossParameter.img_size)
  clear_has_img_size();
  ::caffe::Size2i* temp = img_size_;
  img_size_ = NULL;
  return temp;
}
void YOLOV2LossParameter::set_allocated_img_size(::caffe::Size2i* img_size) {
  delete img_size_;
  img_size_ = img_size;
  if (img_size) {
    set_has_img_size();
  } else {
    clear_has_img_size();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.YOLOV2LossParameter.img_size)
}

// required .caffe.Size2i yolo_map_size = 4;
bool YOLOV2LossParameter::has_yolo_map_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YOLOV2LossParameter::set_has_yolo_map_size() {
  _has_bits_[0] |= 0x00000008u;
}
void YOLOV2LossParameter::clear_has_yolo_map_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void YOLOV2LossParameter::clear_yolo_map_size() {
  if (yolo_map_size_ != NULL) yolo_map_size_->::caffe::Size2i::Clear();
  clear_has_yolo_map_size();
}
const ::caffe::Size2i& YOLOV2LossParameter::yolo_map_size() const {
  // @@protoc_insertion_point(field_get:caffe.YOLOV2LossParameter.yolo_map_size)
  return yolo_map_size_ != NULL ? *yolo_map_size_
                         : *::caffe::Size2i::internal_default_instance();
}
::caffe::Size2i* YOLOV2LossParameter::mutable_yolo_map_size() {
  set_has_yolo_map_size();
  if (yolo_map_size_ == NULL) {
    yolo_map_size_ = new ::caffe::Size2i;
  }
  // @@protoc_insertion_point(field_mutable:caffe.YOLOV2LossParameter.yolo_map_size)
  return yolo_map_size_;
}
::caffe::Size2i* YOLOV2LossParameter::release_yolo_map_size() {
  // @@protoc_insertion_point(field_release:caffe.YOLOV2LossParameter.yolo_map_size)
  clear_has_yolo_map_size();
  ::caffe::Size2i* temp = yolo_map_size_;
  yolo_map_size_ = NULL;
  return temp;
}
void YOLOV2LossParameter::set_allocated_yolo_map_size(::caffe::Size2i* yolo_map_size) {
  delete yolo_map_size_;
  yolo_map_size_ = yolo_map_size;
  if (yolo_map_size) {
    set_has_yolo_map_size();
  } else {
    clear_has_yolo_map_size();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.YOLOV2LossParameter.yolo_map_size)
}

// optional float overlap_threshold = 5 [default = 0.3];
bool YOLOV2LossParameter::has_overlap_threshold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YOLOV2LossParameter::set_has_overlap_threshold() {
  _has_bits_[0] |= 0x00000010u;
}
void YOLOV2LossParameter::clear_has_overlap_threshold() {
  _has_bits_[0] &= ~0x00000010u;
}
void YOLOV2LossParameter::clear_overlap_threshold() {
  overlap_threshold_ = 0.3f;
  clear_has_overlap_threshold();
}
float YOLOV2LossParameter::overlap_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.YOLOV2LossParameter.overlap_threshold)
  return overlap_threshold_;
}
void YOLOV2LossParameter::set_overlap_threshold(float value) {
  set_has_overlap_threshold();
  overlap_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.YOLOV2LossParameter.overlap_threshold)
}

// optional float noobj_scale = 6 [default = 1];
bool YOLOV2LossParameter::has_noobj_scale() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void YOLOV2LossParameter::set_has_noobj_scale() {
  _has_bits_[0] |= 0x00000020u;
}
void YOLOV2LossParameter::clear_has_noobj_scale() {
  _has_bits_[0] &= ~0x00000020u;
}
void YOLOV2LossParameter::clear_noobj_scale() {
  noobj_scale_ = 1;
  clear_has_noobj_scale();
}
float YOLOV2LossParameter::noobj_scale() const {
  // @@protoc_insertion_point(field_get:caffe.YOLOV2LossParameter.noobj_scale)
  return noobj_scale_;
}
void YOLOV2LossParameter::set_noobj_scale(float value) {
  set_has_noobj_scale();
  noobj_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.YOLOV2LossParameter.noobj_scale)
}

// optional float obj_scale = 7 [default = 3];
bool YOLOV2LossParameter::has_obj_scale() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void YOLOV2LossParameter::set_has_obj_scale() {
  _has_bits_[0] |= 0x00000040u;
}
void YOLOV2LossParameter::clear_has_obj_scale() {
  _has_bits_[0] &= ~0x00000040u;
}
void YOLOV2LossParameter::clear_obj_scale() {
  obj_scale_ = 3;
  clear_has_obj_scale();
}
float YOLOV2LossParameter::obj_scale() const {
  // @@protoc_insertion_point(field_get:caffe.YOLOV2LossParameter.obj_scale)
  return obj_scale_;
}
void YOLOV2LossParameter::set_obj_scale(float value) {
  set_has_obj_scale();
  obj_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.YOLOV2LossParameter.obj_scale)
}

// optional float cls_scale = 8 [default = 2];
bool YOLOV2LossParameter::has_cls_scale() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void YOLOV2LossParameter::set_has_cls_scale() {
  _has_bits_[0] |= 0x00000080u;
}
void YOLOV2LossParameter::clear_has_cls_scale() {
  _has_bits_[0] &= ~0x00000080u;
}
void YOLOV2LossParameter::clear_cls_scale() {
  cls_scale_ = 2;
  clear_has_cls_scale();
}
float YOLOV2LossParameter::cls_scale() const {
  // @@protoc_insertion_point(field_get:caffe.YOLOV2LossParameter.cls_scale)
  return cls_scale_;
}
void YOLOV2LossParameter::set_cls_scale(float value) {
  set_has_cls_scale();
  cls_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.YOLOV2LossParameter.cls_scale)
}

// optional float coord_scale = 9 [default = 2];
bool YOLOV2LossParameter::has_coord_scale() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void YOLOV2LossParameter::set_has_coord_scale() {
  _has_bits_[0] |= 0x00000100u;
}
void YOLOV2LossParameter::clear_has_coord_scale() {
  _has_bits_[0] &= ~0x00000100u;
}
void YOLOV2LossParameter::clear_coord_scale() {
  coord_scale_ = 2;
  clear_has_coord_scale();
}
float YOLOV2LossParameter::coord_scale() const {
  // @@protoc_insertion_point(field_get:caffe.YOLOV2LossParameter.coord_scale)
  return coord_scale_;
}
void YOLOV2LossParameter::set_coord_scale(float value) {
  set_has_coord_scale();
  coord_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.YOLOV2LossParameter.coord_scale)
}

inline const YOLOV2LossParameter* YOLOV2LossParameter::internal_default_instance() {
  return &YOLOV2LossParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int YOLOV2ResultParameter::kCellSizeFieldNumber;
const int YOLOV2ResultParameter::kNumClassFieldNumber;
const int YOLOV2ResultParameter::kAnchorFieldNumber;
const int YOLOV2ResultParameter::kNumDetectionFieldNumber;
const int YOLOV2ResultParameter::kDoNmsFieldNumber;
const int YOLOV2ResultParameter::kNmsOverlapThresholdFieldNumber;
const int YOLOV2ResultParameter::kConfThresholdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

YOLOV2ResultParameter::YOLOV2ResultParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.YOLOV2ResultParameter)
}

void YOLOV2ResultParameter::InitAsDefaultInstance() {
  cell_size_ = const_cast< ::caffe::Size2i*>(
      ::caffe::Size2i::internal_default_instance());
}

YOLOV2ResultParameter::YOLOV2ResultParameter(const YOLOV2ResultParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.YOLOV2ResultParameter)
}

void YOLOV2ResultParameter::SharedCtor() {
  _cached_size_ = 0;
  cell_size_ = NULL;
  ::memset(&num_class_, 0, reinterpret_cast<char*>(&num_detection_) -
    reinterpret_cast<char*>(&num_class_) + sizeof(num_detection_));
  conf_threshold_ = 0.5f;
  do_nms_ = true;
  nms_overlap_threshold_ = 0.5f;
}

YOLOV2ResultParameter::~YOLOV2ResultParameter() {
  // @@protoc_insertion_point(destructor:caffe.YOLOV2ResultParameter)
  SharedDtor();
}

void YOLOV2ResultParameter::SharedDtor() {
  if (this != &YOLOV2ResultParameter_default_instance_.get()) {
    delete cell_size_;
  }
}

void YOLOV2ResultParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YOLOV2ResultParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YOLOV2ResultParameter_descriptor_;
}

const YOLOV2ResultParameter& YOLOV2ResultParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<YOLOV2ResultParameter> YOLOV2ResultParameter_default_instance_;

YOLOV2ResultParameter* YOLOV2ResultParameter::New(::google::protobuf::Arena* arena) const {
  YOLOV2ResultParameter* n = new YOLOV2ResultParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YOLOV2ResultParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.YOLOV2ResultParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(YOLOV2ResultParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YOLOV2ResultParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 123u) {
    ZR_(num_class_, num_detection_);
    if (has_cell_size()) {
      if (cell_size_ != NULL) cell_size_->::caffe::Size2i::Clear();
    }
    do_nms_ = true;
    nms_overlap_threshold_ = 0.5f;
    conf_threshold_ = 0.5f;
  }

#undef ZR_HELPER_
#undef ZR_

  anchor_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool YOLOV2ResultParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.YOLOV2ResultParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .caffe.Size2i cell_size = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cell_size()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_class;
        break;
      }

      // required uint32 num_class = 2;
      case 2: {
        if (tag == 16) {
         parse_num_class:
          set_has_num_class();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_class_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_anchor;
        break;
      }

      // repeated .caffe.Rect2f anchor = 3;
      case 3: {
        if (tag == 26) {
         parse_anchor:
          DO_(input->IncrementRecursionDepth());
         parse_loop_anchor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_anchor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_anchor;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(32)) goto parse_num_detection;
        break;
      }

      // required uint32 num_detection = 4;
      case 4: {
        if (tag == 32) {
         parse_num_detection:
          set_has_num_detection();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_detection_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_do_nms;
        break;
      }

      // optional bool do_nms = 5 [default = true];
      case 5: {
        if (tag == 40) {
         parse_do_nms:
          set_has_do_nms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &do_nms_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_nms_overlap_threshold;
        break;
      }

      // optional float nms_overlap_threshold = 6 [default = 0.5];
      case 6: {
        if (tag == 53) {
         parse_nms_overlap_threshold:
          set_has_nms_overlap_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &nms_overlap_threshold_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_conf_threshold;
        break;
      }

      // optional float conf_threshold = 7 [default = 0.5];
      case 7: {
        if (tag == 61) {
         parse_conf_threshold:
          set_has_conf_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &conf_threshold_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.YOLOV2ResultParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.YOLOV2ResultParameter)
  return false;
#undef DO_
}

void YOLOV2ResultParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.YOLOV2ResultParameter)
  // required .caffe.Size2i cell_size = 1;
  if (has_cell_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->cell_size_, output);
  }

  // required uint32 num_class = 2;
  if (has_num_class()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_class(), output);
  }

  // repeated .caffe.Rect2f anchor = 3;
  for (unsigned int i = 0, n = this->anchor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->anchor(i), output);
  }

  // required uint32 num_detection = 4;
  if (has_num_detection()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num_detection(), output);
  }

  // optional bool do_nms = 5 [default = true];
  if (has_do_nms()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->do_nms(), output);
  }

  // optional float nms_overlap_threshold = 6 [default = 0.5];
  if (has_nms_overlap_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->nms_overlap_threshold(), output);
  }

  // optional float conf_threshold = 7 [default = 0.5];
  if (has_conf_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->conf_threshold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.YOLOV2ResultParameter)
}

::google::protobuf::uint8* YOLOV2ResultParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.YOLOV2ResultParameter)
  // required .caffe.Size2i cell_size = 1;
  if (has_cell_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->cell_size_, false, target);
  }

  // required uint32 num_class = 2;
  if (has_num_class()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_class(), target);
  }

  // repeated .caffe.Rect2f anchor = 3;
  for (unsigned int i = 0, n = this->anchor_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->anchor(i), false, target);
  }

  // required uint32 num_detection = 4;
  if (has_num_detection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num_detection(), target);
  }

  // optional bool do_nms = 5 [default = true];
  if (has_do_nms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->do_nms(), target);
  }

  // optional float nms_overlap_threshold = 6 [default = 0.5];
  if (has_nms_overlap_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->nms_overlap_threshold(), target);
  }

  // optional float conf_threshold = 7 [default = 0.5];
  if (has_conf_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->conf_threshold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.YOLOV2ResultParameter)
  return target;
}

size_t YOLOV2ResultParameter::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe.YOLOV2ResultParameter)
  size_t total_size = 0;

  if (has_cell_size()) {
    // required .caffe.Size2i cell_size = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cell_size_);
  }

  if (has_num_class()) {
    // required uint32 num_class = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_class());
  }

  if (has_num_detection()) {
    // required uint32 num_detection = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_detection());
  }

  return total_size;
}
size_t YOLOV2ResultParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.YOLOV2ResultParameter)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required .caffe.Size2i cell_size = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cell_size_);

    // required uint32 num_class = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_class());

    // required uint32 num_detection = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_detection());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[4 / 32] & 112u) {
    // optional bool do_nms = 5 [default = true];
    if (has_do_nms()) {
      total_size += 1 + 1;
    }

    // optional float nms_overlap_threshold = 6 [default = 0.5];
    if (has_nms_overlap_threshold()) {
      total_size += 1 + 4;
    }

    // optional float conf_threshold = 7 [default = 0.5];
    if (has_conf_threshold()) {
      total_size += 1 + 4;
    }

  }
  // repeated .caffe.Rect2f anchor = 3;
  {
    unsigned int count = this->anchor_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->anchor(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YOLOV2ResultParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.YOLOV2ResultParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const YOLOV2ResultParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const YOLOV2ResultParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.YOLOV2ResultParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.YOLOV2ResultParameter)
    UnsafeMergeFrom(*source);
  }
}

void YOLOV2ResultParameter::MergeFrom(const YOLOV2ResultParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.YOLOV2ResultParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void YOLOV2ResultParameter::UnsafeMergeFrom(const YOLOV2ResultParameter& from) {
  GOOGLE_DCHECK(&from != this);
  anchor_.MergeFrom(from.anchor_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cell_size()) {
      mutable_cell_size()->::caffe::Size2i::MergeFrom(from.cell_size());
    }
    if (from.has_num_class()) {
      set_num_class(from.num_class());
    }
    if (from.has_num_detection()) {
      set_num_detection(from.num_detection());
    }
    if (from.has_do_nms()) {
      set_do_nms(from.do_nms());
    }
    if (from.has_nms_overlap_threshold()) {
      set_nms_overlap_threshold(from.nms_overlap_threshold());
    }
    if (from.has_conf_threshold()) {
      set_conf_threshold(from.conf_threshold());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void YOLOV2ResultParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.YOLOV2ResultParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YOLOV2ResultParameter::CopyFrom(const YOLOV2ResultParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.YOLOV2ResultParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool YOLOV2ResultParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  if (has_cell_size()) {
    if (!this->cell_size_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->anchor())) return false;
  return true;
}

void YOLOV2ResultParameter::Swap(YOLOV2ResultParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YOLOV2ResultParameter::InternalSwap(YOLOV2ResultParameter* other) {
  std::swap(cell_size_, other->cell_size_);
  std::swap(num_class_, other->num_class_);
  anchor_.UnsafeArenaSwap(&other->anchor_);
  std::swap(num_detection_, other->num_detection_);
  std::swap(do_nms_, other->do_nms_);
  std::swap(nms_overlap_threshold_, other->nms_overlap_threshold_);
  std::swap(conf_threshold_, other->conf_threshold_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata YOLOV2ResultParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YOLOV2ResultParameter_descriptor_;
  metadata.reflection = YOLOV2ResultParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YOLOV2ResultParameter

// required .caffe.Size2i cell_size = 1;
bool YOLOV2ResultParameter::has_cell_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YOLOV2ResultParameter::set_has_cell_size() {
  _has_bits_[0] |= 0x00000001u;
}
void YOLOV2ResultParameter::clear_has_cell_size() {
  _has_bits_[0] &= ~0x00000001u;
}
void YOLOV2ResultParameter::clear_cell_size() {
  if (cell_size_ != NULL) cell_size_->::caffe::Size2i::Clear();
  clear_has_cell_size();
}
const ::caffe::Size2i& YOLOV2ResultParameter::cell_size() const {
  // @@protoc_insertion_point(field_get:caffe.YOLOV2ResultParameter.cell_size)
  return cell_size_ != NULL ? *cell_size_
                         : *::caffe::Size2i::internal_default_instance();
}
::caffe::Size2i* YOLOV2ResultParameter::mutable_cell_size() {
  set_has_cell_size();
  if (cell_size_ == NULL) {
    cell_size_ = new ::caffe::Size2i;
  }
  // @@protoc_insertion_point(field_mutable:caffe.YOLOV2ResultParameter.cell_size)
  return cell_size_;
}
::caffe::Size2i* YOLOV2ResultParameter::release_cell_size() {
  // @@protoc_insertion_point(field_release:caffe.YOLOV2ResultParameter.cell_size)
  clear_has_cell_size();
  ::caffe::Size2i* temp = cell_size_;
  cell_size_ = NULL;
  return temp;
}
void YOLOV2ResultParameter::set_allocated_cell_size(::caffe::Size2i* cell_size) {
  delete cell_size_;
  cell_size_ = cell_size;
  if (cell_size) {
    set_has_cell_size();
  } else {
    clear_has_cell_size();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.YOLOV2ResultParameter.cell_size)
}

// required uint32 num_class = 2;
bool YOLOV2ResultParameter::has_num_class() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YOLOV2ResultParameter::set_has_num_class() {
  _has_bits_[0] |= 0x00000002u;
}
void YOLOV2ResultParameter::clear_has_num_class() {
  _has_bits_[0] &= ~0x00000002u;
}
void YOLOV2ResultParameter::clear_num_class() {
  num_class_ = 0u;
  clear_has_num_class();
}
::google::protobuf::uint32 YOLOV2ResultParameter::num_class() const {
  // @@protoc_insertion_point(field_get:caffe.YOLOV2ResultParameter.num_class)
  return num_class_;
}
void YOLOV2ResultParameter::set_num_class(::google::protobuf::uint32 value) {
  set_has_num_class();
  num_class_ = value;
  // @@protoc_insertion_point(field_set:caffe.YOLOV2ResultParameter.num_class)
}

// repeated .caffe.Rect2f anchor = 3;
int YOLOV2ResultParameter::anchor_size() const {
  return anchor_.size();
}
void YOLOV2ResultParameter::clear_anchor() {
  anchor_.Clear();
}
const ::caffe::Rect2f& YOLOV2ResultParameter::anchor(int index) const {
  // @@protoc_insertion_point(field_get:caffe.YOLOV2ResultParameter.anchor)
  return anchor_.Get(index);
}
::caffe::Rect2f* YOLOV2ResultParameter::mutable_anchor(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.YOLOV2ResultParameter.anchor)
  return anchor_.Mutable(index);
}
::caffe::Rect2f* YOLOV2ResultParameter::add_anchor() {
  // @@protoc_insertion_point(field_add:caffe.YOLOV2ResultParameter.anchor)
  return anchor_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::Rect2f >*
YOLOV2ResultParameter::mutable_anchor() {
  // @@protoc_insertion_point(field_mutable_list:caffe.YOLOV2ResultParameter.anchor)
  return &anchor_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::Rect2f >&
YOLOV2ResultParameter::anchor() const {
  // @@protoc_insertion_point(field_list:caffe.YOLOV2ResultParameter.anchor)
  return anchor_;
}

// required uint32 num_detection = 4;
bool YOLOV2ResultParameter::has_num_detection() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YOLOV2ResultParameter::set_has_num_detection() {
  _has_bits_[0] |= 0x00000008u;
}
void YOLOV2ResultParameter::clear_has_num_detection() {
  _has_bits_[0] &= ~0x00000008u;
}
void YOLOV2ResultParameter::clear_num_detection() {
  num_detection_ = 0u;
  clear_has_num_detection();
}
::google::protobuf::uint32 YOLOV2ResultParameter::num_detection() const {
  // @@protoc_insertion_point(field_get:caffe.YOLOV2ResultParameter.num_detection)
  return num_detection_;
}
void YOLOV2ResultParameter::set_num_detection(::google::protobuf::uint32 value) {
  set_has_num_detection();
  num_detection_ = value;
  // @@protoc_insertion_point(field_set:caffe.YOLOV2ResultParameter.num_detection)
}

// optional bool do_nms = 5 [default = true];
bool YOLOV2ResultParameter::has_do_nms() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YOLOV2ResultParameter::set_has_do_nms() {
  _has_bits_[0] |= 0x00000010u;
}
void YOLOV2ResultParameter::clear_has_do_nms() {
  _has_bits_[0] &= ~0x00000010u;
}
void YOLOV2ResultParameter::clear_do_nms() {
  do_nms_ = true;
  clear_has_do_nms();
}
bool YOLOV2ResultParameter::do_nms() const {
  // @@protoc_insertion_point(field_get:caffe.YOLOV2ResultParameter.do_nms)
  return do_nms_;
}
void YOLOV2ResultParameter::set_do_nms(bool value) {
  set_has_do_nms();
  do_nms_ = value;
  // @@protoc_insertion_point(field_set:caffe.YOLOV2ResultParameter.do_nms)
}

// optional float nms_overlap_threshold = 6 [default = 0.5];
bool YOLOV2ResultParameter::has_nms_overlap_threshold() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void YOLOV2ResultParameter::set_has_nms_overlap_threshold() {
  _has_bits_[0] |= 0x00000020u;
}
void YOLOV2ResultParameter::clear_has_nms_overlap_threshold() {
  _has_bits_[0] &= ~0x00000020u;
}
void YOLOV2ResultParameter::clear_nms_overlap_threshold() {
  nms_overlap_threshold_ = 0.5f;
  clear_has_nms_overlap_threshold();
}
float YOLOV2ResultParameter::nms_overlap_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.YOLOV2ResultParameter.nms_overlap_threshold)
  return nms_overlap_threshold_;
}
void YOLOV2ResultParameter::set_nms_overlap_threshold(float value) {
  set_has_nms_overlap_threshold();
  nms_overlap_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.YOLOV2ResultParameter.nms_overlap_threshold)
}

// optional float conf_threshold = 7 [default = 0.5];
bool YOLOV2ResultParameter::has_conf_threshold() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void YOLOV2ResultParameter::set_has_conf_threshold() {
  _has_bits_[0] |= 0x00000040u;
}
void YOLOV2ResultParameter::clear_has_conf_threshold() {
  _has_bits_[0] &= ~0x00000040u;
}
void YOLOV2ResultParameter::clear_conf_threshold() {
  conf_threshold_ = 0.5f;
  clear_has_conf_threshold();
}
float YOLOV2ResultParameter::conf_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.YOLOV2ResultParameter.conf_threshold)
  return conf_threshold_;
}
void YOLOV2ResultParameter::set_conf_threshold(float value) {
  set_has_conf_threshold();
  conf_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.YOLOV2ResultParameter.conf_threshold)
}

inline const YOLOV2ResultParameter* YOLOV2ResultParameter::internal_default_instance() {
  return &YOLOV2ResultParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::std::string* DetectionCheckParameter::_default_log_path_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetectionCheckParameter::kEvalPerformanceFieldNumber;
const int DetectionCheckParameter::kDrawFieldNumber;
const int DetectionCheckParameter::kDetectionConfThresholdFieldNumber;
const int DetectionCheckParameter::kIouThresholdFieldNumber;
const int DetectionCheckParameter::kLogPathFieldNumber;
const int DetectionCheckParameter::kDetectionOnlyFieldNumber;
const int DetectionCheckParameter::kDoNmsFieldNumber;
const int DetectionCheckParameter::kNmsOverlapThresholdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetectionCheckParameter::DetectionCheckParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.DetectionCheckParameter)
}

void DetectionCheckParameter::InitAsDefaultInstance() {
}

DetectionCheckParameter::DetectionCheckParameter(const DetectionCheckParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.DetectionCheckParameter)
}

void DetectionCheckParameter::SharedCtor() {
  _cached_size_ = 0;
  log_path_.UnsafeSetDefault(_default_log_path_);
  ::memset(&detection_conf_threshold_, 0, reinterpret_cast<char*>(&detection_only_) -
    reinterpret_cast<char*>(&detection_conf_threshold_) + sizeof(detection_only_));
  nms_overlap_threshold_ = 0.5f;
  eval_performance_ = true;
  draw_ = true;
  do_nms_ = true;
  iou_threshold_ = 0.5f;
}

DetectionCheckParameter::~DetectionCheckParameter() {
  // @@protoc_insertion_point(destructor:caffe.DetectionCheckParameter)
  SharedDtor();
}

void DetectionCheckParameter::SharedDtor() {
  log_path_.DestroyNoArena(_default_log_path_);
}

void DetectionCheckParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectionCheckParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetectionCheckParameter_descriptor_;
}

const DetectionCheckParameter& DetectionCheckParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DetectionCheckParameter> DetectionCheckParameter_default_instance_;

DetectionCheckParameter* DetectionCheckParameter::New(::google::protobuf::Arena* arena) const {
  DetectionCheckParameter* n = new DetectionCheckParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DetectionCheckParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.DetectionCheckParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DetectionCheckParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DetectionCheckParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(detection_conf_threshold_, detection_only_);
    eval_performance_ = true;
    draw_ = true;
    iou_threshold_ = 0.5f;
    if (has_log_path()) {
      log_path_.ClearToDefaultNoArena(_default_log_path_);
    }
    do_nms_ = true;
    nms_overlap_threshold_ = 0.5f;
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DetectionCheckParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.DetectionCheckParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool eval_performance = 1 [default = true];
      case 1: {
        if (tag == 8) {
          set_has_eval_performance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &eval_performance_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_draw;
        break;
      }

      // optional bool draw = 2 [default = true];
      case 2: {
        if (tag == 16) {
         parse_draw:
          set_has_draw();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &draw_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_detection_conf_threshold;
        break;
      }

      // optional float detection_conf_threshold = 3 [default = 0];
      case 3: {
        if (tag == 29) {
         parse_detection_conf_threshold:
          set_has_detection_conf_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &detection_conf_threshold_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_iou_threshold;
        break;
      }

      // optional float iou_threshold = 4 [default = 0.5];
      case 4: {
        if (tag == 37) {
         parse_iou_threshold:
          set_has_iou_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &iou_threshold_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_log_path;
        break;
      }

      // optional string log_path = 5 [default = "./detection_log/"];
      case 5: {
        if (tag == 42) {
         parse_log_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->log_path().data(), this->log_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.DetectionCheckParameter.log_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_detection_only;
        break;
      }

      // optional bool detection_only = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_detection_only:
          set_has_detection_only();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &detection_only_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_do_nms;
        break;
      }

      // optional bool do_nms = 7 [default = true];
      case 7: {
        if (tag == 56) {
         parse_do_nms:
          set_has_do_nms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &do_nms_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_nms_overlap_threshold;
        break;
      }

      // optional float nms_overlap_threshold = 8 [default = 0.5];
      case 8: {
        if (tag == 69) {
         parse_nms_overlap_threshold:
          set_has_nms_overlap_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &nms_overlap_threshold_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.DetectionCheckParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.DetectionCheckParameter)
  return false;
#undef DO_
}

void DetectionCheckParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.DetectionCheckParameter)
  // optional bool eval_performance = 1 [default = true];
  if (has_eval_performance()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->eval_performance(), output);
  }

  // optional bool draw = 2 [default = true];
  if (has_draw()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->draw(), output);
  }

  // optional float detection_conf_threshold = 3 [default = 0];
  if (has_detection_conf_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->detection_conf_threshold(), output);
  }

  // optional float iou_threshold = 4 [default = 0.5];
  if (has_iou_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->iou_threshold(), output);
  }

  // optional string log_path = 5 [default = "./detection_log/"];
  if (has_log_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->log_path().data(), this->log_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.DetectionCheckParameter.log_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->log_path(), output);
  }

  // optional bool detection_only = 6 [default = false];
  if (has_detection_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->detection_only(), output);
  }

  // optional bool do_nms = 7 [default = true];
  if (has_do_nms()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->do_nms(), output);
  }

  // optional float nms_overlap_threshold = 8 [default = 0.5];
  if (has_nms_overlap_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->nms_overlap_threshold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.DetectionCheckParameter)
}

::google::protobuf::uint8* DetectionCheckParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.DetectionCheckParameter)
  // optional bool eval_performance = 1 [default = true];
  if (has_eval_performance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->eval_performance(), target);
  }

  // optional bool draw = 2 [default = true];
  if (has_draw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->draw(), target);
  }

  // optional float detection_conf_threshold = 3 [default = 0];
  if (has_detection_conf_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->detection_conf_threshold(), target);
  }

  // optional float iou_threshold = 4 [default = 0.5];
  if (has_iou_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->iou_threshold(), target);
  }

  // optional string log_path = 5 [default = "./detection_log/"];
  if (has_log_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->log_path().data(), this->log_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.DetectionCheckParameter.log_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->log_path(), target);
  }

  // optional bool detection_only = 6 [default = false];
  if (has_detection_only()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->detection_only(), target);
  }

  // optional bool do_nms = 7 [default = true];
  if (has_do_nms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->do_nms(), target);
  }

  // optional float nms_overlap_threshold = 8 [default = 0.5];
  if (has_nms_overlap_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->nms_overlap_threshold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.DetectionCheckParameter)
  return target;
}

size_t DetectionCheckParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.DetectionCheckParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional bool eval_performance = 1 [default = true];
    if (has_eval_performance()) {
      total_size += 1 + 1;
    }

    // optional bool draw = 2 [default = true];
    if (has_draw()) {
      total_size += 1 + 1;
    }

    // optional float detection_conf_threshold = 3 [default = 0];
    if (has_detection_conf_threshold()) {
      total_size += 1 + 4;
    }

    // optional float iou_threshold = 4 [default = 0.5];
    if (has_iou_threshold()) {
      total_size += 1 + 4;
    }

    // optional string log_path = 5 [default = "./detection_log/"];
    if (has_log_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->log_path());
    }

    // optional bool detection_only = 6 [default = false];
    if (has_detection_only()) {
      total_size += 1 + 1;
    }

    // optional bool do_nms = 7 [default = true];
    if (has_do_nms()) {
      total_size += 1 + 1;
    }

    // optional float nms_overlap_threshold = 8 [default = 0.5];
    if (has_nms_overlap_threshold()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectionCheckParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.DetectionCheckParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DetectionCheckParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DetectionCheckParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.DetectionCheckParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.DetectionCheckParameter)
    UnsafeMergeFrom(*source);
  }
}

void DetectionCheckParameter::MergeFrom(const DetectionCheckParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.DetectionCheckParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DetectionCheckParameter::UnsafeMergeFrom(const DetectionCheckParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eval_performance()) {
      set_eval_performance(from.eval_performance());
    }
    if (from.has_draw()) {
      set_draw(from.draw());
    }
    if (from.has_detection_conf_threshold()) {
      set_detection_conf_threshold(from.detection_conf_threshold());
    }
    if (from.has_iou_threshold()) {
      set_iou_threshold(from.iou_threshold());
    }
    if (from.has_log_path()) {
      set_has_log_path();
      log_path_.AssignWithDefault(_default_log_path_, from.log_path_);
    }
    if (from.has_detection_only()) {
      set_detection_only(from.detection_only());
    }
    if (from.has_do_nms()) {
      set_do_nms(from.do_nms());
    }
    if (from.has_nms_overlap_threshold()) {
      set_nms_overlap_threshold(from.nms_overlap_threshold());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void DetectionCheckParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.DetectionCheckParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectionCheckParameter::CopyFrom(const DetectionCheckParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.DetectionCheckParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DetectionCheckParameter::IsInitialized() const {

  return true;
}

void DetectionCheckParameter::Swap(DetectionCheckParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DetectionCheckParameter::InternalSwap(DetectionCheckParameter* other) {
  std::swap(eval_performance_, other->eval_performance_);
  std::swap(draw_, other->draw_);
  std::swap(detection_conf_threshold_, other->detection_conf_threshold_);
  std::swap(iou_threshold_, other->iou_threshold_);
  log_path_.Swap(&other->log_path_);
  std::swap(detection_only_, other->detection_only_);
  std::swap(do_nms_, other->do_nms_);
  std::swap(nms_overlap_threshold_, other->nms_overlap_threshold_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DetectionCheckParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetectionCheckParameter_descriptor_;
  metadata.reflection = DetectionCheckParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DetectionCheckParameter

// optional bool eval_performance = 1 [default = true];
bool DetectionCheckParameter::has_eval_performance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DetectionCheckParameter::set_has_eval_performance() {
  _has_bits_[0] |= 0x00000001u;
}
void DetectionCheckParameter::clear_has_eval_performance() {
  _has_bits_[0] &= ~0x00000001u;
}
void DetectionCheckParameter::clear_eval_performance() {
  eval_performance_ = true;
  clear_has_eval_performance();
}
bool DetectionCheckParameter::eval_performance() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionCheckParameter.eval_performance)
  return eval_performance_;
}
void DetectionCheckParameter::set_eval_performance(bool value) {
  set_has_eval_performance();
  eval_performance_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionCheckParameter.eval_performance)
}

// optional bool draw = 2 [default = true];
bool DetectionCheckParameter::has_draw() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DetectionCheckParameter::set_has_draw() {
  _has_bits_[0] |= 0x00000002u;
}
void DetectionCheckParameter::clear_has_draw() {
  _has_bits_[0] &= ~0x00000002u;
}
void DetectionCheckParameter::clear_draw() {
  draw_ = true;
  clear_has_draw();
}
bool DetectionCheckParameter::draw() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionCheckParameter.draw)
  return draw_;
}
void DetectionCheckParameter::set_draw(bool value) {
  set_has_draw();
  draw_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionCheckParameter.draw)
}

// optional float detection_conf_threshold = 3 [default = 0];
bool DetectionCheckParameter::has_detection_conf_threshold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DetectionCheckParameter::set_has_detection_conf_threshold() {
  _has_bits_[0] |= 0x00000004u;
}
void DetectionCheckParameter::clear_has_detection_conf_threshold() {
  _has_bits_[0] &= ~0x00000004u;
}
void DetectionCheckParameter::clear_detection_conf_threshold() {
  detection_conf_threshold_ = 0;
  clear_has_detection_conf_threshold();
}
float DetectionCheckParameter::detection_conf_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionCheckParameter.detection_conf_threshold)
  return detection_conf_threshold_;
}
void DetectionCheckParameter::set_detection_conf_threshold(float value) {
  set_has_detection_conf_threshold();
  detection_conf_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionCheckParameter.detection_conf_threshold)
}

// optional float iou_threshold = 4 [default = 0.5];
bool DetectionCheckParameter::has_iou_threshold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DetectionCheckParameter::set_has_iou_threshold() {
  _has_bits_[0] |= 0x00000008u;
}
void DetectionCheckParameter::clear_has_iou_threshold() {
  _has_bits_[0] &= ~0x00000008u;
}
void DetectionCheckParameter::clear_iou_threshold() {
  iou_threshold_ = 0.5f;
  clear_has_iou_threshold();
}
float DetectionCheckParameter::iou_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionCheckParameter.iou_threshold)
  return iou_threshold_;
}
void DetectionCheckParameter::set_iou_threshold(float value) {
  set_has_iou_threshold();
  iou_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionCheckParameter.iou_threshold)
}

// optional string log_path = 5 [default = "./detection_log/"];
bool DetectionCheckParameter::has_log_path() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DetectionCheckParameter::set_has_log_path() {
  _has_bits_[0] |= 0x00000010u;
}
void DetectionCheckParameter::clear_has_log_path() {
  _has_bits_[0] &= ~0x00000010u;
}
void DetectionCheckParameter::clear_log_path() {
  log_path_.ClearToDefaultNoArena(_default_log_path_);
  clear_has_log_path();
}
const ::std::string& DetectionCheckParameter::log_path() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionCheckParameter.log_path)
  return log_path_.GetNoArena(_default_log_path_);
}
void DetectionCheckParameter::set_log_path(const ::std::string& value) {
  set_has_log_path();
  log_path_.SetNoArena(_default_log_path_, value);
  // @@protoc_insertion_point(field_set:caffe.DetectionCheckParameter.log_path)
}
void DetectionCheckParameter::set_log_path(const char* value) {
  set_has_log_path();
  log_path_.SetNoArena(_default_log_path_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.DetectionCheckParameter.log_path)
}
void DetectionCheckParameter::set_log_path(const char* value, size_t size) {
  set_has_log_path();
  log_path_.SetNoArena(_default_log_path_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.DetectionCheckParameter.log_path)
}
::std::string* DetectionCheckParameter::mutable_log_path() {
  set_has_log_path();
  // @@protoc_insertion_point(field_mutable:caffe.DetectionCheckParameter.log_path)
  return log_path_.MutableNoArena(_default_log_path_);
}
::std::string* DetectionCheckParameter::release_log_path() {
  // @@protoc_insertion_point(field_release:caffe.DetectionCheckParameter.log_path)
  clear_has_log_path();
  return log_path_.ReleaseNoArena(_default_log_path_);
}
void DetectionCheckParameter::set_allocated_log_path(::std::string* log_path) {
  if (log_path != NULL) {
    set_has_log_path();
  } else {
    clear_has_log_path();
  }
  log_path_.SetAllocatedNoArena(_default_log_path_, log_path);
  // @@protoc_insertion_point(field_set_allocated:caffe.DetectionCheckParameter.log_path)
}

// optional bool detection_only = 6 [default = false];
bool DetectionCheckParameter::has_detection_only() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DetectionCheckParameter::set_has_detection_only() {
  _has_bits_[0] |= 0x00000020u;
}
void DetectionCheckParameter::clear_has_detection_only() {
  _has_bits_[0] &= ~0x00000020u;
}
void DetectionCheckParameter::clear_detection_only() {
  detection_only_ = false;
  clear_has_detection_only();
}
bool DetectionCheckParameter::detection_only() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionCheckParameter.detection_only)
  return detection_only_;
}
void DetectionCheckParameter::set_detection_only(bool value) {
  set_has_detection_only();
  detection_only_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionCheckParameter.detection_only)
}

// optional bool do_nms = 7 [default = true];
bool DetectionCheckParameter::has_do_nms() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DetectionCheckParameter::set_has_do_nms() {
  _has_bits_[0] |= 0x00000040u;
}
void DetectionCheckParameter::clear_has_do_nms() {
  _has_bits_[0] &= ~0x00000040u;
}
void DetectionCheckParameter::clear_do_nms() {
  do_nms_ = true;
  clear_has_do_nms();
}
bool DetectionCheckParameter::do_nms() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionCheckParameter.do_nms)
  return do_nms_;
}
void DetectionCheckParameter::set_do_nms(bool value) {
  set_has_do_nms();
  do_nms_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionCheckParameter.do_nms)
}

// optional float nms_overlap_threshold = 8 [default = 0.5];
bool DetectionCheckParameter::has_nms_overlap_threshold() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DetectionCheckParameter::set_has_nms_overlap_threshold() {
  _has_bits_[0] |= 0x00000080u;
}
void DetectionCheckParameter::clear_has_nms_overlap_threshold() {
  _has_bits_[0] &= ~0x00000080u;
}
void DetectionCheckParameter::clear_nms_overlap_threshold() {
  nms_overlap_threshold_ = 0.5f;
  clear_has_nms_overlap_threshold();
}
float DetectionCheckParameter::nms_overlap_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionCheckParameter.nms_overlap_threshold)
  return nms_overlap_threshold_;
}
void DetectionCheckParameter::set_nms_overlap_threshold(float value) {
  set_has_nms_overlap_threshold();
  nms_overlap_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionCheckParameter.nms_overlap_threshold)
}

inline const DetectionCheckParameter* DetectionCheckParameter::internal_default_instance() {
  return &DetectionCheckParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubwinOffsetParameter::kWinSizeFieldNumber;
const int SubwinOffsetParameter::kWinOffsetFieldNumber;
const int SubwinOffsetParameter::kGlobalDetectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubwinOffsetParameter::SubwinOffsetParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SubwinOffsetParameter)
}

void SubwinOffsetParameter::InitAsDefaultInstance() {
  win_size_ = const_cast< ::caffe::Size2i*>(
      ::caffe::Size2i::internal_default_instance());
}

SubwinOffsetParameter::SubwinOffsetParameter(const SubwinOffsetParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.SubwinOffsetParameter)
}

void SubwinOffsetParameter::SharedCtor() {
  _cached_size_ = 0;
  win_size_ = NULL;
  global_detection_ = true;
}

SubwinOffsetParameter::~SubwinOffsetParameter() {
  // @@protoc_insertion_point(destructor:caffe.SubwinOffsetParameter)
  SharedDtor();
}

void SubwinOffsetParameter::SharedDtor() {
  if (this != &SubwinOffsetParameter_default_instance_.get()) {
    delete win_size_;
  }
}

void SubwinOffsetParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubwinOffsetParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubwinOffsetParameter_descriptor_;
}

const SubwinOffsetParameter& SubwinOffsetParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SubwinOffsetParameter> SubwinOffsetParameter_default_instance_;

SubwinOffsetParameter* SubwinOffsetParameter::New(::google::protobuf::Arena* arena) const {
  SubwinOffsetParameter* n = new SubwinOffsetParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubwinOffsetParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SubwinOffsetParameter)
  if (_has_bits_[0 / 32] & 5u) {
    if (has_win_size()) {
      if (win_size_ != NULL) win_size_->::caffe::Size2i::Clear();
    }
    global_detection_ = true;
  }
  win_offset_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SubwinOffsetParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SubwinOffsetParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .caffe.Size2i win_size = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_win_size()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_win_offset;
        break;
      }

      // repeated .caffe.Point2i win_offset = 2;
      case 2: {
        if (tag == 18) {
         parse_win_offset:
          DO_(input->IncrementRecursionDepth());
         parse_loop_win_offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_win_offset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_win_offset;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_global_detection;
        break;
      }

      // optional bool global_detection = 3 [default = true];
      case 3: {
        if (tag == 24) {
         parse_global_detection:
          set_has_global_detection();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &global_detection_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SubwinOffsetParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SubwinOffsetParameter)
  return false;
#undef DO_
}

void SubwinOffsetParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SubwinOffsetParameter)
  // required .caffe.Size2i win_size = 1;
  if (has_win_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->win_size_, output);
  }

  // repeated .caffe.Point2i win_offset = 2;
  for (unsigned int i = 0, n = this->win_offset_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->win_offset(i), output);
  }

  // optional bool global_detection = 3 [default = true];
  if (has_global_detection()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->global_detection(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SubwinOffsetParameter)
}

::google::protobuf::uint8* SubwinOffsetParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SubwinOffsetParameter)
  // required .caffe.Size2i win_size = 1;
  if (has_win_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->win_size_, false, target);
  }

  // repeated .caffe.Point2i win_offset = 2;
  for (unsigned int i = 0, n = this->win_offset_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->win_offset(i), false, target);
  }

  // optional bool global_detection = 3 [default = true];
  if (has_global_detection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->global_detection(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SubwinOffsetParameter)
  return target;
}

size_t SubwinOffsetParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SubwinOffsetParameter)
  size_t total_size = 0;

  // required .caffe.Size2i win_size = 1;
  if (has_win_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->win_size_);
  }
  // optional bool global_detection = 3 [default = true];
  if (has_global_detection()) {
    total_size += 1 + 1;
  }

  // repeated .caffe.Point2i win_offset = 2;
  {
    unsigned int count = this->win_offset_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->win_offset(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubwinOffsetParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SubwinOffsetParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SubwinOffsetParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubwinOffsetParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SubwinOffsetParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SubwinOffsetParameter)
    UnsafeMergeFrom(*source);
  }
}

void SubwinOffsetParameter::MergeFrom(const SubwinOffsetParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SubwinOffsetParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SubwinOffsetParameter::UnsafeMergeFrom(const SubwinOffsetParameter& from) {
  GOOGLE_DCHECK(&from != this);
  win_offset_.MergeFrom(from.win_offset_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_win_size()) {
      mutable_win_size()->::caffe::Size2i::MergeFrom(from.win_size());
    }
    if (from.has_global_detection()) {
      set_global_detection(from.global_detection());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void SubwinOffsetParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SubwinOffsetParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubwinOffsetParameter::CopyFrom(const SubwinOffsetParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SubwinOffsetParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SubwinOffsetParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_win_size()) {
    if (!this->win_size_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->win_offset())) return false;
  return true;
}

void SubwinOffsetParameter::Swap(SubwinOffsetParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubwinOffsetParameter::InternalSwap(SubwinOffsetParameter* other) {
  std::swap(win_size_, other->win_size_);
  win_offset_.UnsafeArenaSwap(&other->win_offset_);
  std::swap(global_detection_, other->global_detection_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubwinOffsetParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubwinOffsetParameter_descriptor_;
  metadata.reflection = SubwinOffsetParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubwinOffsetParameter

// required .caffe.Size2i win_size = 1;
bool SubwinOffsetParameter::has_win_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SubwinOffsetParameter::set_has_win_size() {
  _has_bits_[0] |= 0x00000001u;
}
void SubwinOffsetParameter::clear_has_win_size() {
  _has_bits_[0] &= ~0x00000001u;
}
void SubwinOffsetParameter::clear_win_size() {
  if (win_size_ != NULL) win_size_->::caffe::Size2i::Clear();
  clear_has_win_size();
}
const ::caffe::Size2i& SubwinOffsetParameter::win_size() const {
  // @@protoc_insertion_point(field_get:caffe.SubwinOffsetParameter.win_size)
  return win_size_ != NULL ? *win_size_
                         : *::caffe::Size2i::internal_default_instance();
}
::caffe::Size2i* SubwinOffsetParameter::mutable_win_size() {
  set_has_win_size();
  if (win_size_ == NULL) {
    win_size_ = new ::caffe::Size2i;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SubwinOffsetParameter.win_size)
  return win_size_;
}
::caffe::Size2i* SubwinOffsetParameter::release_win_size() {
  // @@protoc_insertion_point(field_release:caffe.SubwinOffsetParameter.win_size)
  clear_has_win_size();
  ::caffe::Size2i* temp = win_size_;
  win_size_ = NULL;
  return temp;
}
void SubwinOffsetParameter::set_allocated_win_size(::caffe::Size2i* win_size) {
  delete win_size_;
  win_size_ = win_size;
  if (win_size) {
    set_has_win_size();
  } else {
    clear_has_win_size();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SubwinOffsetParameter.win_size)
}

// repeated .caffe.Point2i win_offset = 2;
int SubwinOffsetParameter::win_offset_size() const {
  return win_offset_.size();
}
void SubwinOffsetParameter::clear_win_offset() {
  win_offset_.Clear();
}
const ::caffe::Point2i& SubwinOffsetParameter::win_offset(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SubwinOffsetParameter.win_offset)
  return win_offset_.Get(index);
}
::caffe::Point2i* SubwinOffsetParameter::mutable_win_offset(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SubwinOffsetParameter.win_offset)
  return win_offset_.Mutable(index);
}
::caffe::Point2i* SubwinOffsetParameter::add_win_offset() {
  // @@protoc_insertion_point(field_add:caffe.SubwinOffsetParameter.win_offset)
  return win_offset_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::Point2i >*
SubwinOffsetParameter::mutable_win_offset() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SubwinOffsetParameter.win_offset)
  return &win_offset_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::Point2i >&
SubwinOffsetParameter::win_offset() const {
  // @@protoc_insertion_point(field_list:caffe.SubwinOffsetParameter.win_offset)
  return win_offset_;
}

// optional bool global_detection = 3 [default = true];
bool SubwinOffsetParameter::has_global_detection() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SubwinOffsetParameter::set_has_global_detection() {
  _has_bits_[0] |= 0x00000004u;
}
void SubwinOffsetParameter::clear_has_global_detection() {
  _has_bits_[0] &= ~0x00000004u;
}
void SubwinOffsetParameter::clear_global_detection() {
  global_detection_ = true;
  clear_has_global_detection();
}
bool SubwinOffsetParameter::global_detection() const {
  // @@protoc_insertion_point(field_get:caffe.SubwinOffsetParameter.global_detection)
  return global_detection_;
}
void SubwinOffsetParameter::set_global_detection(bool value) {
  set_has_global_detection();
  global_detection_ = value;
  // @@protoc_insertion_point(field_set:caffe.SubwinOffsetParameter.global_detection)
}

inline const SubwinOffsetParameter* SubwinOffsetParameter::internal_default_instance() {
  return &SubwinOffsetParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SizeRejectionParameter::kWMinFieldNumber;
const int SizeRejectionParameter::kWMaxFieldNumber;
const int SizeRejectionParameter::kHMinFieldNumber;
const int SizeRejectionParameter::kHMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SizeRejectionParameter::SizeRejectionParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SizeRejectionParameter)
}

void SizeRejectionParameter::InitAsDefaultInstance() {
}

SizeRejectionParameter::SizeRejectionParameter(const SizeRejectionParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.SizeRejectionParameter)
}

void SizeRejectionParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&w_min_, 0, reinterpret_cast<char*>(&h_max_) -
    reinterpret_cast<char*>(&w_min_) + sizeof(h_max_));
}

SizeRejectionParameter::~SizeRejectionParameter() {
  // @@protoc_insertion_point(destructor:caffe.SizeRejectionParameter)
  SharedDtor();
}

void SizeRejectionParameter::SharedDtor() {
}

void SizeRejectionParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SizeRejectionParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SizeRejectionParameter_descriptor_;
}

const SizeRejectionParameter& SizeRejectionParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SizeRejectionParameter> SizeRejectionParameter_default_instance_;

SizeRejectionParameter* SizeRejectionParameter::New(::google::protobuf::Arena* arena) const {
  SizeRejectionParameter* n = new SizeRejectionParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SizeRejectionParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SizeRejectionParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SizeRejectionParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SizeRejectionParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(w_min_, h_max_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SizeRejectionParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SizeRejectionParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float w_min = 1;
      case 1: {
        if (tag == 13) {
          set_has_w_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_min_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_w_max;
        break;
      }

      // optional float w_max = 2;
      case 2: {
        if (tag == 21) {
         parse_w_max:
          set_has_w_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_max_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_h_min;
        break;
      }

      // optional float h_min = 3;
      case 3: {
        if (tag == 29) {
         parse_h_min:
          set_has_h_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &h_min_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_h_max;
        break;
      }

      // optional float h_max = 4;
      case 4: {
        if (tag == 37) {
         parse_h_max:
          set_has_h_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &h_max_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SizeRejectionParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SizeRejectionParameter)
  return false;
#undef DO_
}

void SizeRejectionParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SizeRejectionParameter)
  // optional float w_min = 1;
  if (has_w_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->w_min(), output);
  }

  // optional float w_max = 2;
  if (has_w_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->w_max(), output);
  }

  // optional float h_min = 3;
  if (has_h_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->h_min(), output);
  }

  // optional float h_max = 4;
  if (has_h_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->h_max(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SizeRejectionParameter)
}

::google::protobuf::uint8* SizeRejectionParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SizeRejectionParameter)
  // optional float w_min = 1;
  if (has_w_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->w_min(), target);
  }

  // optional float w_max = 2;
  if (has_w_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->w_max(), target);
  }

  // optional float h_min = 3;
  if (has_h_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->h_min(), target);
  }

  // optional float h_max = 4;
  if (has_h_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->h_max(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SizeRejectionParameter)
  return target;
}

size_t SizeRejectionParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SizeRejectionParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional float w_min = 1;
    if (has_w_min()) {
      total_size += 1 + 4;
    }

    // optional float w_max = 2;
    if (has_w_max()) {
      total_size += 1 + 4;
    }

    // optional float h_min = 3;
    if (has_h_min()) {
      total_size += 1 + 4;
    }

    // optional float h_max = 4;
    if (has_h_max()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SizeRejectionParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SizeRejectionParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SizeRejectionParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SizeRejectionParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SizeRejectionParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SizeRejectionParameter)
    UnsafeMergeFrom(*source);
  }
}

void SizeRejectionParameter::MergeFrom(const SizeRejectionParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SizeRejectionParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SizeRejectionParameter::UnsafeMergeFrom(const SizeRejectionParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_w_min()) {
      set_w_min(from.w_min());
    }
    if (from.has_w_max()) {
      set_w_max(from.w_max());
    }
    if (from.has_h_min()) {
      set_h_min(from.h_min());
    }
    if (from.has_h_max()) {
      set_h_max(from.h_max());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void SizeRejectionParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SizeRejectionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SizeRejectionParameter::CopyFrom(const SizeRejectionParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SizeRejectionParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SizeRejectionParameter::IsInitialized() const {

  return true;
}

void SizeRejectionParameter::Swap(SizeRejectionParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SizeRejectionParameter::InternalSwap(SizeRejectionParameter* other) {
  std::swap(w_min_, other->w_min_);
  std::swap(w_max_, other->w_max_);
  std::swap(h_min_, other->h_min_);
  std::swap(h_max_, other->h_max_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SizeRejectionParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SizeRejectionParameter_descriptor_;
  metadata.reflection = SizeRejectionParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SizeRejectionParameter

// optional float w_min = 1;
bool SizeRejectionParameter::has_w_min() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SizeRejectionParameter::set_has_w_min() {
  _has_bits_[0] |= 0x00000001u;
}
void SizeRejectionParameter::clear_has_w_min() {
  _has_bits_[0] &= ~0x00000001u;
}
void SizeRejectionParameter::clear_w_min() {
  w_min_ = 0;
  clear_has_w_min();
}
float SizeRejectionParameter::w_min() const {
  // @@protoc_insertion_point(field_get:caffe.SizeRejectionParameter.w_min)
  return w_min_;
}
void SizeRejectionParameter::set_w_min(float value) {
  set_has_w_min();
  w_min_ = value;
  // @@protoc_insertion_point(field_set:caffe.SizeRejectionParameter.w_min)
}

// optional float w_max = 2;
bool SizeRejectionParameter::has_w_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SizeRejectionParameter::set_has_w_max() {
  _has_bits_[0] |= 0x00000002u;
}
void SizeRejectionParameter::clear_has_w_max() {
  _has_bits_[0] &= ~0x00000002u;
}
void SizeRejectionParameter::clear_w_max() {
  w_max_ = 0;
  clear_has_w_max();
}
float SizeRejectionParameter::w_max() const {
  // @@protoc_insertion_point(field_get:caffe.SizeRejectionParameter.w_max)
  return w_max_;
}
void SizeRejectionParameter::set_w_max(float value) {
  set_has_w_max();
  w_max_ = value;
  // @@protoc_insertion_point(field_set:caffe.SizeRejectionParameter.w_max)
}

// optional float h_min = 3;
bool SizeRejectionParameter::has_h_min() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SizeRejectionParameter::set_has_h_min() {
  _has_bits_[0] |= 0x00000004u;
}
void SizeRejectionParameter::clear_has_h_min() {
  _has_bits_[0] &= ~0x00000004u;
}
void SizeRejectionParameter::clear_h_min() {
  h_min_ = 0;
  clear_has_h_min();
}
float SizeRejectionParameter::h_min() const {
  // @@protoc_insertion_point(field_get:caffe.SizeRejectionParameter.h_min)
  return h_min_;
}
void SizeRejectionParameter::set_h_min(float value) {
  set_has_h_min();
  h_min_ = value;
  // @@protoc_insertion_point(field_set:caffe.SizeRejectionParameter.h_min)
}

// optional float h_max = 4;
bool SizeRejectionParameter::has_h_max() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SizeRejectionParameter::set_has_h_max() {
  _has_bits_[0] |= 0x00000008u;
}
void SizeRejectionParameter::clear_has_h_max() {
  _has_bits_[0] &= ~0x00000008u;
}
void SizeRejectionParameter::clear_h_max() {
  h_max_ = 0;
  clear_has_h_max();
}
float SizeRejectionParameter::h_max() const {
  // @@protoc_insertion_point(field_get:caffe.SizeRejectionParameter.h_max)
  return h_max_;
}
void SizeRejectionParameter::set_h_max(float value) {
  set_has_h_max();
  h_max_ = value;
  // @@protoc_insertion_point(field_set:caffe.SizeRejectionParameter.h_max)
}

inline const SizeRejectionParameter* SizeRejectionParameter::internal_default_instance() {
  return &SizeRejectionParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::std::string* ConfCheckParameter::_default_out_path_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfCheckParameter::kOutPathFieldNumber;
const int ConfCheckParameter::kDrawFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfCheckParameter::ConfCheckParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ConfCheckParameter)
}

void ConfCheckParameter::InitAsDefaultInstance() {
}

ConfCheckParameter::ConfCheckParameter(const ConfCheckParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ConfCheckParameter)
}

void ConfCheckParameter::SharedCtor() {
  _cached_size_ = 0;
  out_path_.UnsafeSetDefault(_default_out_path_);
  draw_ = false;
}

ConfCheckParameter::~ConfCheckParameter() {
  // @@protoc_insertion_point(destructor:caffe.ConfCheckParameter)
  SharedDtor();
}

void ConfCheckParameter::SharedDtor() {
  out_path_.DestroyNoArena(_default_out_path_);
}

void ConfCheckParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfCheckParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfCheckParameter_descriptor_;
}

const ConfCheckParameter& ConfCheckParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ConfCheckParameter> ConfCheckParameter_default_instance_;

ConfCheckParameter* ConfCheckParameter::New(::google::protobuf::Arena* arena) const {
  ConfCheckParameter* n = new ConfCheckParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConfCheckParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ConfCheckParameter)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_out_path()) {
      out_path_.ClearToDefaultNoArena(_default_out_path_);
    }
    draw_ = false;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ConfCheckParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ConfCheckParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string out_path = 1 [default = "."];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_out_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->out_path().data(), this->out_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.ConfCheckParameter.out_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_draw;
        break;
      }

      // optional bool draw = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_draw:
          set_has_draw();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &draw_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ConfCheckParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ConfCheckParameter)
  return false;
#undef DO_
}

void ConfCheckParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ConfCheckParameter)
  // optional string out_path = 1 [default = "."];
  if (has_out_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->out_path().data(), this->out_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ConfCheckParameter.out_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->out_path(), output);
  }

  // optional bool draw = 2 [default = false];
  if (has_draw()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->draw(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ConfCheckParameter)
}

::google::protobuf::uint8* ConfCheckParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ConfCheckParameter)
  // optional string out_path = 1 [default = "."];
  if (has_out_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->out_path().data(), this->out_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ConfCheckParameter.out_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->out_path(), target);
  }

  // optional bool draw = 2 [default = false];
  if (has_draw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->draw(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ConfCheckParameter)
  return target;
}

size_t ConfCheckParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ConfCheckParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string out_path = 1 [default = "."];
    if (has_out_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->out_path());
    }

    // optional bool draw = 2 [default = false];
    if (has_draw()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfCheckParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ConfCheckParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ConfCheckParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfCheckParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ConfCheckParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ConfCheckParameter)
    UnsafeMergeFrom(*source);
  }
}

void ConfCheckParameter::MergeFrom(const ConfCheckParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ConfCheckParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ConfCheckParameter::UnsafeMergeFrom(const ConfCheckParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_out_path()) {
      set_has_out_path();
      out_path_.AssignWithDefault(_default_out_path_, from.out_path_);
    }
    if (from.has_draw()) {
      set_draw(from.draw());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ConfCheckParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ConfCheckParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfCheckParameter::CopyFrom(const ConfCheckParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ConfCheckParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ConfCheckParameter::IsInitialized() const {

  return true;
}

void ConfCheckParameter::Swap(ConfCheckParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfCheckParameter::InternalSwap(ConfCheckParameter* other) {
  out_path_.Swap(&other->out_path_);
  std::swap(draw_, other->draw_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConfCheckParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfCheckParameter_descriptor_;
  metadata.reflection = ConfCheckParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConfCheckParameter

// optional string out_path = 1 [default = "."];
bool ConfCheckParameter::has_out_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConfCheckParameter::set_has_out_path() {
  _has_bits_[0] |= 0x00000001u;
}
void ConfCheckParameter::clear_has_out_path() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConfCheckParameter::clear_out_path() {
  out_path_.ClearToDefaultNoArena(_default_out_path_);
  clear_has_out_path();
}
const ::std::string& ConfCheckParameter::out_path() const {
  // @@protoc_insertion_point(field_get:caffe.ConfCheckParameter.out_path)
  return out_path_.GetNoArena(_default_out_path_);
}
void ConfCheckParameter::set_out_path(const ::std::string& value) {
  set_has_out_path();
  out_path_.SetNoArena(_default_out_path_, value);
  // @@protoc_insertion_point(field_set:caffe.ConfCheckParameter.out_path)
}
void ConfCheckParameter::set_out_path(const char* value) {
  set_has_out_path();
  out_path_.SetNoArena(_default_out_path_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ConfCheckParameter.out_path)
}
void ConfCheckParameter::set_out_path(const char* value, size_t size) {
  set_has_out_path();
  out_path_.SetNoArena(_default_out_path_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ConfCheckParameter.out_path)
}
::std::string* ConfCheckParameter::mutable_out_path() {
  set_has_out_path();
  // @@protoc_insertion_point(field_mutable:caffe.ConfCheckParameter.out_path)
  return out_path_.MutableNoArena(_default_out_path_);
}
::std::string* ConfCheckParameter::release_out_path() {
  // @@protoc_insertion_point(field_release:caffe.ConfCheckParameter.out_path)
  clear_has_out_path();
  return out_path_.ReleaseNoArena(_default_out_path_);
}
void ConfCheckParameter::set_allocated_out_path(::std::string* out_path) {
  if (out_path != NULL) {
    set_has_out_path();
  } else {
    clear_has_out_path();
  }
  out_path_.SetAllocatedNoArena(_default_out_path_, out_path);
  // @@protoc_insertion_point(field_set_allocated:caffe.ConfCheckParameter.out_path)
}

// optional bool draw = 2 [default = false];
bool ConfCheckParameter::has_draw() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConfCheckParameter::set_has_draw() {
  _has_bits_[0] |= 0x00000002u;
}
void ConfCheckParameter::clear_has_draw() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConfCheckParameter::clear_draw() {
  draw_ = false;
  clear_has_draw();
}
bool ConfCheckParameter::draw() const {
  // @@protoc_insertion_point(field_get:caffe.ConfCheckParameter.draw)
  return draw_;
}
void ConfCheckParameter::set_draw(bool value) {
  set_has_draw();
  draw_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConfCheckParameter.draw)
}

inline const ConfCheckParameter* ConfCheckParameter::internal_default_instance() {
  return &ConfCheckParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReorgParameter::kStrideFieldNumber;
const int ReorgParameter::kReverseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReorgParameter::ReorgParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ReorgParameter)
}

void ReorgParameter::InitAsDefaultInstance() {
}

ReorgParameter::ReorgParameter(const ReorgParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ReorgParameter)
}

void ReorgParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&stride_, 0, reinterpret_cast<char*>(&reverse_) -
    reinterpret_cast<char*>(&stride_) + sizeof(reverse_));
}

ReorgParameter::~ReorgParameter() {
  // @@protoc_insertion_point(destructor:caffe.ReorgParameter)
  SharedDtor();
}

void ReorgParameter::SharedDtor() {
}

void ReorgParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReorgParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReorgParameter_descriptor_;
}

const ReorgParameter& ReorgParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReorgParameter> ReorgParameter_default_instance_;

ReorgParameter* ReorgParameter::New(::google::protobuf::Arena* arena) const {
  ReorgParameter* n = new ReorgParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReorgParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ReorgParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReorgParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReorgParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(stride_, reverse_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReorgParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ReorgParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stride = 1;
      case 1: {
        if (tag == 8) {
          set_has_stride();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_reverse;
        break;
      }

      // optional bool reverse = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_reverse:
          set_has_reverse();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reverse_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ReorgParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ReorgParameter)
  return false;
#undef DO_
}

void ReorgParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ReorgParameter)
  // optional uint32 stride = 1;
  if (has_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stride(), output);
  }

  // optional bool reverse = 2 [default = false];
  if (has_reverse()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->reverse(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ReorgParameter)
}

::google::protobuf::uint8* ReorgParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ReorgParameter)
  // optional uint32 stride = 1;
  if (has_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stride(), target);
  }

  // optional bool reverse = 2 [default = false];
  if (has_reverse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->reverse(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ReorgParameter)
  return target;
}

size_t ReorgParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ReorgParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 stride = 1;
    if (has_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride());
    }

    // optional bool reverse = 2 [default = false];
    if (has_reverse()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReorgParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ReorgParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReorgParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReorgParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ReorgParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ReorgParameter)
    UnsafeMergeFrom(*source);
  }
}

void ReorgParameter::MergeFrom(const ReorgParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ReorgParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReorgParameter::UnsafeMergeFrom(const ReorgParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stride()) {
      set_stride(from.stride());
    }
    if (from.has_reverse()) {
      set_reverse(from.reverse());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ReorgParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ReorgParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReorgParameter::CopyFrom(const ReorgParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ReorgParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReorgParameter::IsInitialized() const {

  return true;
}

void ReorgParameter::Swap(ReorgParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReorgParameter::InternalSwap(ReorgParameter* other) {
  std::swap(stride_, other->stride_);
  std::swap(reverse_, other->reverse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReorgParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReorgParameter_descriptor_;
  metadata.reflection = ReorgParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReorgParameter

// optional uint32 stride = 1;
bool ReorgParameter::has_stride() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReorgParameter::set_has_stride() {
  _has_bits_[0] |= 0x00000001u;
}
void ReorgParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReorgParameter::clear_stride() {
  stride_ = 0u;
  clear_has_stride();
}
::google::protobuf::uint32 ReorgParameter::stride() const {
  // @@protoc_insertion_point(field_get:caffe.ReorgParameter.stride)
  return stride_;
}
void ReorgParameter::set_stride(::google::protobuf::uint32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReorgParameter.stride)
}

// optional bool reverse = 2 [default = false];
bool ReorgParameter::has_reverse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReorgParameter::set_has_reverse() {
  _has_bits_[0] |= 0x00000002u;
}
void ReorgParameter::clear_has_reverse() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReorgParameter::clear_reverse() {
  reverse_ = false;
  clear_has_reverse();
}
bool ReorgParameter::reverse() const {
  // @@protoc_insertion_point(field_get:caffe.ReorgParameter.reverse)
  return reverse_;
}
void ReorgParameter::set_reverse(bool value) {
  set_has_reverse();
  reverse_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReorgParameter.reverse)
}

inline const ReorgParameter* ReorgParameter::internal_default_instance() {
  return &ReorgParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchRejectionParameter::kRejectionByThresholdFieldNumber;
const int BatchRejectionParameter::kThresholdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchRejectionParameter::BatchRejectionParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.BatchRejectionParameter)
}

void BatchRejectionParameter::InitAsDefaultInstance() {
}

BatchRejectionParameter::BatchRejectionParameter(const BatchRejectionParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.BatchRejectionParameter)
}

void BatchRejectionParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&rejection_by_threshold_, 0, reinterpret_cast<char*>(&threshold_) -
    reinterpret_cast<char*>(&rejection_by_threshold_) + sizeof(threshold_));
}

BatchRejectionParameter::~BatchRejectionParameter() {
  // @@protoc_insertion_point(destructor:caffe.BatchRejectionParameter)
  SharedDtor();
}

void BatchRejectionParameter::SharedDtor() {
}

void BatchRejectionParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchRejectionParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchRejectionParameter_descriptor_;
}

const BatchRejectionParameter& BatchRejectionParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BatchRejectionParameter> BatchRejectionParameter_default_instance_;

BatchRejectionParameter* BatchRejectionParameter::New(::google::protobuf::Arena* arena) const {
  BatchRejectionParameter* n = new BatchRejectionParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchRejectionParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.BatchRejectionParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BatchRejectionParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BatchRejectionParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(rejection_by_threshold_, threshold_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BatchRejectionParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.BatchRejectionParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool rejection_by_threshold = 1 [default = false];
      case 1: {
        if (tag == 8) {
          set_has_rejection_by_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rejection_by_threshold_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_threshold;
        break;
      }

      // optional float threshold = 2;
      case 2: {
        if (tag == 21) {
         parse_threshold:
          set_has_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &threshold_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.BatchRejectionParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.BatchRejectionParameter)
  return false;
#undef DO_
}

void BatchRejectionParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.BatchRejectionParameter)
  // optional bool rejection_by_threshold = 1 [default = false];
  if (has_rejection_by_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->rejection_by_threshold(), output);
  }

  // optional float threshold = 2;
  if (has_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->threshold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.BatchRejectionParameter)
}

::google::protobuf::uint8* BatchRejectionParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.BatchRejectionParameter)
  // optional bool rejection_by_threshold = 1 [default = false];
  if (has_rejection_by_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->rejection_by_threshold(), target);
  }

  // optional float threshold = 2;
  if (has_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->threshold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.BatchRejectionParameter)
  return target;
}

size_t BatchRejectionParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.BatchRejectionParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional bool rejection_by_threshold = 1 [default = false];
    if (has_rejection_by_threshold()) {
      total_size += 1 + 1;
    }

    // optional float threshold = 2;
    if (has_threshold()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchRejectionParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.BatchRejectionParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BatchRejectionParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchRejectionParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.BatchRejectionParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.BatchRejectionParameter)
    UnsafeMergeFrom(*source);
  }
}

void BatchRejectionParameter::MergeFrom(const BatchRejectionParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.BatchRejectionParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BatchRejectionParameter::UnsafeMergeFrom(const BatchRejectionParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rejection_by_threshold()) {
      set_rejection_by_threshold(from.rejection_by_threshold());
    }
    if (from.has_threshold()) {
      set_threshold(from.threshold());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void BatchRejectionParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.BatchRejectionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchRejectionParameter::CopyFrom(const BatchRejectionParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.BatchRejectionParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BatchRejectionParameter::IsInitialized() const {

  return true;
}

void BatchRejectionParameter::Swap(BatchRejectionParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchRejectionParameter::InternalSwap(BatchRejectionParameter* other) {
  std::swap(rejection_by_threshold_, other->rejection_by_threshold_);
  std::swap(threshold_, other->threshold_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchRejectionParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchRejectionParameter_descriptor_;
  metadata.reflection = BatchRejectionParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchRejectionParameter

// optional bool rejection_by_threshold = 1 [default = false];
bool BatchRejectionParameter::has_rejection_by_threshold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BatchRejectionParameter::set_has_rejection_by_threshold() {
  _has_bits_[0] |= 0x00000001u;
}
void BatchRejectionParameter::clear_has_rejection_by_threshold() {
  _has_bits_[0] &= ~0x00000001u;
}
void BatchRejectionParameter::clear_rejection_by_threshold() {
  rejection_by_threshold_ = false;
  clear_has_rejection_by_threshold();
}
bool BatchRejectionParameter::rejection_by_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.BatchRejectionParameter.rejection_by_threshold)
  return rejection_by_threshold_;
}
void BatchRejectionParameter::set_rejection_by_threshold(bool value) {
  set_has_rejection_by_threshold();
  rejection_by_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchRejectionParameter.rejection_by_threshold)
}

// optional float threshold = 2;
bool BatchRejectionParameter::has_threshold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BatchRejectionParameter::set_has_threshold() {
  _has_bits_[0] |= 0x00000002u;
}
void BatchRejectionParameter::clear_has_threshold() {
  _has_bits_[0] &= ~0x00000002u;
}
void BatchRejectionParameter::clear_threshold() {
  threshold_ = 0;
  clear_has_threshold();
}
float BatchRejectionParameter::threshold() const {
  // @@protoc_insertion_point(field_get:caffe.BatchRejectionParameter.threshold)
  return threshold_;
}
void BatchRejectionParameter::set_threshold(float value) {
  set_has_threshold();
  threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchRejectionParameter.threshold)
}

inline const BatchRejectionParameter* BatchRejectionParameter::internal_default_instance() {
  return &BatchRejectionParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlobShape::kDimFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlobShape::BlobShape()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.BlobShape)
}

void BlobShape::InitAsDefaultInstance() {
}

BlobShape::BlobShape(const BlobShape& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.BlobShape)
}

void BlobShape::SharedCtor() {
  _cached_size_ = 0;
}

BlobShape::~BlobShape() {
  // @@protoc_insertion_point(destructor:caffe.BlobShape)
  SharedDtor();
}

void BlobShape::SharedDtor() {
}

void BlobShape::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobShape::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobShape_descriptor_;
}

const BlobShape& BlobShape::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BlobShape> BlobShape_default_instance_;

BlobShape* BlobShape::New(::google::protobuf::Arena* arena) const {
  BlobShape* n = new BlobShape;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlobShape::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.BlobShape)
  dim_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BlobShape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.BlobShape)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 dim = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_dim())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10, input, this->mutable_dim())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.BlobShape)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.BlobShape)
  return false;
#undef DO_
}

void BlobShape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.BlobShape)
  // repeated int64 dim = 1 [packed = true];
  if (this->dim_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_dim_cached_byte_size_);
  }
  for (int i = 0; i < this->dim_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->dim(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.BlobShape)
}

::google::protobuf::uint8* BlobShape::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.BlobShape)
  // repeated int64 dim = 1 [packed = true];
  if (this->dim_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _dim_cached_byte_size_, target);
  }
  for (int i = 0; i < this->dim_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->dim(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.BlobShape)
  return target;
}

size_t BlobShape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.BlobShape)
  size_t total_size = 0;

  // repeated int64 dim = 1 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = this->dim_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->dim(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dim_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobShape::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.BlobShape)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BlobShape* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlobShape>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.BlobShape)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.BlobShape)
    UnsafeMergeFrom(*source);
  }
}

void BlobShape::MergeFrom(const BlobShape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.BlobShape)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BlobShape::UnsafeMergeFrom(const BlobShape& from) {
  GOOGLE_DCHECK(&from != this);
  dim_.UnsafeMergeFrom(from.dim_);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void BlobShape::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.BlobShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobShape::CopyFrom(const BlobShape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.BlobShape)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BlobShape::IsInitialized() const {

  return true;
}

void BlobShape::Swap(BlobShape* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlobShape::InternalSwap(BlobShape* other) {
  dim_.UnsafeArenaSwap(&other->dim_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlobShape::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobShape_descriptor_;
  metadata.reflection = BlobShape_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlobShape

// repeated int64 dim = 1 [packed = true];
int BlobShape::dim_size() const {
  return dim_.size();
}
void BlobShape::clear_dim() {
  dim_.Clear();
}
::google::protobuf::int64 BlobShape::dim(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobShape.dim)
  return dim_.Get(index);
}
void BlobShape::set_dim(int index, ::google::protobuf::int64 value) {
  dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobShape.dim)
}
void BlobShape::add_dim(::google::protobuf::int64 value) {
  dim_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobShape.dim)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BlobShape::dim() const {
  // @@protoc_insertion_point(field_list:caffe.BlobShape.dim)
  return dim_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BlobShape::mutable_dim() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobShape.dim)
  return &dim_;
}

inline const BlobShape* BlobShape::internal_default_instance() {
  return &BlobShape_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlobProto::kShapeFieldNumber;
const int BlobProto::kDataFieldNumber;
const int BlobProto::kDiffFieldNumber;
const int BlobProto::kDoubleDataFieldNumber;
const int BlobProto::kDoubleDiffFieldNumber;
const int BlobProto::kNumFieldNumber;
const int BlobProto::kChannelsFieldNumber;
const int BlobProto::kHeightFieldNumber;
const int BlobProto::kWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlobProto::BlobProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.BlobProto)
}

void BlobProto::InitAsDefaultInstance() {
  shape_ = const_cast< ::caffe::BlobShape*>(
      ::caffe::BlobShape::internal_default_instance());
}

BlobProto::BlobProto(const BlobProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.BlobProto)
}

void BlobProto::SharedCtor() {
  _cached_size_ = 0;
  shape_ = NULL;
  ::memset(&num_, 0, reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&num_) + sizeof(width_));
}

BlobProto::~BlobProto() {
  // @@protoc_insertion_point(destructor:caffe.BlobProto)
  SharedDtor();
}

void BlobProto::SharedDtor() {
  if (this != &BlobProto_default_instance_.get()) {
    delete shape_;
  }
}

void BlobProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobProto_descriptor_;
}

const BlobProto& BlobProto::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BlobProto> BlobProto_default_instance_;

BlobProto* BlobProto::New(::google::protobuf::Arena* arena) const {
  BlobProto* n = new BlobProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlobProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.BlobProto)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BlobProto, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BlobProto*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 225u) {
    ZR_(num_, height_);
    if (has_shape()) {
      if (shape_ != NULL) shape_->::caffe::BlobShape::Clear();
    }
  }
  width_ = 0;

#undef ZR_HELPER_
#undef ZR_

  data_.Clear();
  diff_.Clear();
  double_data_.Clear();
  double_diff_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BlobProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.BlobProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          set_has_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_channels;
        break;
      }

      // optional int32 channels = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_channels:
          set_has_channels();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channels_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }

      // optional int32 height = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_height:
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_width;
        break;
      }

      // optional int32 width = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_width:
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // repeated float data = 5 [packed = true];
      case 5: {
        if (tag == 42) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data())));
        } else if (tag == 45) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 42, input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_diff;
        break;
      }

      // repeated float diff = 6 [packed = true];
      case 6: {
        if (tag == 50) {
         parse_diff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_diff())));
        } else if (tag == 53) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 50, input, this->mutable_diff())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_shape;
        break;
      }

      // optional .caffe.BlobShape shape = 7;
      case 7: {
        if (tag == 58) {
         parse_shape:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_double_data;
        break;
      }

      // repeated double double_data = 8 [packed = true];
      case 8: {
        if (tag == 66) {
         parse_double_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_double_data())));
        } else if (tag == 65) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 66, input, this->mutable_double_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_double_diff;
        break;
      }

      // repeated double double_diff = 9 [packed = true];
      case 9: {
        if (tag == 74) {
         parse_double_diff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_double_diff())));
        } else if (tag == 73) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 74, input, this->mutable_double_diff())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.BlobProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.BlobProto)
  return false;
#undef DO_
}

void BlobProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.BlobProto)
  // optional int32 num = 1 [default = 0];
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // optional int32 channels = 2 [default = 0];
  if (has_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channels(), output);
  }

  // optional int32 height = 3 [default = 0];
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }

  // optional int32 width = 4 [default = 0];
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->width(), output);
  }

  // repeated float data = 5 [packed = true];
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_data_cached_byte_size_);
  }
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->data(i), output);
  }

  // repeated float diff = 6 [packed = true];
  if (this->diff_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_diff_cached_byte_size_);
  }
  for (int i = 0; i < this->diff_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->diff(i), output);
  }

  // optional .caffe.BlobShape shape = 7;
  if (has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->shape_, output);
  }

  // repeated double double_data = 8 [packed = true];
  if (this->double_data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_double_data_cached_byte_size_);
  }
  for (int i = 0; i < this->double_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->double_data(i), output);
  }

  // repeated double double_diff = 9 [packed = true];
  if (this->double_diff_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_double_diff_cached_byte_size_);
  }
  for (int i = 0; i < this->double_diff_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->double_diff(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.BlobProto)
}

::google::protobuf::uint8* BlobProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.BlobProto)
  // optional int32 num = 1 [default = 0];
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // optional int32 channels = 2 [default = 0];
  if (has_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channels(), target);
  }

  // optional int32 height = 3 [default = 0];
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
  }

  // optional int32 width = 4 [default = 0];
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->width(), target);
  }

  // repeated float data = 5 [packed = true];
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->data(i), target);
  }

  // repeated float diff = 6 [packed = true];
  if (this->diff_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _diff_cached_byte_size_, target);
  }
  for (int i = 0; i < this->diff_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->diff(i), target);
  }

  // optional .caffe.BlobShape shape = 7;
  if (has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->shape_, false, target);
  }

  // repeated double double_data = 8 [packed = true];
  if (this->double_data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _double_data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->double_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->double_data(i), target);
  }

  // repeated double double_diff = 9 [packed = true];
  if (this->double_diff_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _double_diff_cached_byte_size_, target);
  }
  for (int i = 0; i < this->double_diff_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->double_diff(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.BlobProto)
  return target;
}

size_t BlobProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.BlobProto)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 225u) {
    // optional .caffe.BlobShape shape = 7;
    if (has_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->shape_);
    }

    // optional int32 num = 1 [default = 0];
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 channels = 2 [default = 0];
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channels());
    }

    // optional int32 height = 3 [default = 0];
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

  }
  // optional int32 width = 4 [default = 0];
  if (has_width()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // repeated float data = 5 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = this->data_size();
    data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float diff = 6 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = this->diff_size();
    data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _diff_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double double_data = 8 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = this->double_data_size();
    data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _double_data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double double_diff = 9 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = this->double_diff_size();
    data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _double_diff_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.BlobProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BlobProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlobProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.BlobProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.BlobProto)
    UnsafeMergeFrom(*source);
  }
}

void BlobProto::MergeFrom(const BlobProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.BlobProto)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BlobProto::UnsafeMergeFrom(const BlobProto& from) {
  GOOGLE_DCHECK(&from != this);
  data_.UnsafeMergeFrom(from.data_);
  diff_.UnsafeMergeFrom(from.diff_);
  double_data_.UnsafeMergeFrom(from.double_data_);
  double_diff_.UnsafeMergeFrom(from.double_diff_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shape()) {
      mutable_shape()->::caffe::BlobShape::MergeFrom(from.shape());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_channels()) {
      set_channels(from.channels());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void BlobProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.BlobProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobProto::CopyFrom(const BlobProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.BlobProto)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BlobProto::IsInitialized() const {

  return true;
}

void BlobProto::Swap(BlobProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlobProto::InternalSwap(BlobProto* other) {
  std::swap(shape_, other->shape_);
  data_.UnsafeArenaSwap(&other->data_);
  diff_.UnsafeArenaSwap(&other->diff_);
  double_data_.UnsafeArenaSwap(&other->double_data_);
  double_diff_.UnsafeArenaSwap(&other->double_diff_);
  std::swap(num_, other->num_);
  std::swap(channels_, other->channels_);
  std::swap(height_, other->height_);
  std::swap(width_, other->width_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlobProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobProto_descriptor_;
  metadata.reflection = BlobProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlobProto

// optional .caffe.BlobShape shape = 7;
bool BlobProto::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BlobProto::set_has_shape() {
  _has_bits_[0] |= 0x00000001u;
}
void BlobProto::clear_has_shape() {
  _has_bits_[0] &= ~0x00000001u;
}
void BlobProto::clear_shape() {
  if (shape_ != NULL) shape_->::caffe::BlobShape::Clear();
  clear_has_shape();
}
const ::caffe::BlobShape& BlobProto::shape() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.shape)
  return shape_ != NULL ? *shape_
                         : *::caffe::BlobShape::internal_default_instance();
}
::caffe::BlobShape* BlobProto::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) {
    shape_ = new ::caffe::BlobShape;
  }
  // @@protoc_insertion_point(field_mutable:caffe.BlobProto.shape)
  return shape_;
}
::caffe::BlobShape* BlobProto::release_shape() {
  // @@protoc_insertion_point(field_release:caffe.BlobProto.shape)
  clear_has_shape();
  ::caffe::BlobShape* temp = shape_;
  shape_ = NULL;
  return temp;
}
void BlobProto::set_allocated_shape(::caffe::BlobShape* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.BlobProto.shape)
}

// repeated float data = 5 [packed = true];
int BlobProto::data_size() const {
  return data_.size();
}
void BlobProto::clear_data() {
  data_.Clear();
}
float BlobProto::data(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.data)
  return data_.Get(index);
}
void BlobProto::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.data)
}
void BlobProto::add_data(float value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.data)
}
const ::google::protobuf::RepeatedField< float >&
BlobProto::data() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.data)
  return data_;
}
::google::protobuf::RepeatedField< float >*
BlobProto::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.data)
  return &data_;
}

// repeated float diff = 6 [packed = true];
int BlobProto::diff_size() const {
  return diff_.size();
}
void BlobProto::clear_diff() {
  diff_.Clear();
}
float BlobProto::diff(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.diff)
  return diff_.Get(index);
}
void BlobProto::set_diff(int index, float value) {
  diff_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.diff)
}
void BlobProto::add_diff(float value) {
  diff_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.diff)
}
const ::google::protobuf::RepeatedField< float >&
BlobProto::diff() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.diff)
  return diff_;
}
::google::protobuf::RepeatedField< float >*
BlobProto::mutable_diff() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.diff)
  return &diff_;
}

// repeated double double_data = 8 [packed = true];
int BlobProto::double_data_size() const {
  return double_data_.size();
}
void BlobProto::clear_double_data() {
  double_data_.Clear();
}
double BlobProto::double_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.double_data)
  return double_data_.Get(index);
}
void BlobProto::set_double_data(int index, double value) {
  double_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.double_data)
}
void BlobProto::add_double_data(double value) {
  double_data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.double_data)
}
const ::google::protobuf::RepeatedField< double >&
BlobProto::double_data() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.double_data)
  return double_data_;
}
::google::protobuf::RepeatedField< double >*
BlobProto::mutable_double_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.double_data)
  return &double_data_;
}

// repeated double double_diff = 9 [packed = true];
int BlobProto::double_diff_size() const {
  return double_diff_.size();
}
void BlobProto::clear_double_diff() {
  double_diff_.Clear();
}
double BlobProto::double_diff(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.double_diff)
  return double_diff_.Get(index);
}
void BlobProto::set_double_diff(int index, double value) {
  double_diff_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.double_diff)
}
void BlobProto::add_double_diff(double value) {
  double_diff_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.double_diff)
}
const ::google::protobuf::RepeatedField< double >&
BlobProto::double_diff() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.double_diff)
  return double_diff_;
}
::google::protobuf::RepeatedField< double >*
BlobProto::mutable_double_diff() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.double_diff)
  return &double_diff_;
}

// optional int32 num = 1 [default = 0];
bool BlobProto::has_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BlobProto::set_has_num() {
  _has_bits_[0] |= 0x00000020u;
}
void BlobProto::clear_has_num() {
  _has_bits_[0] &= ~0x00000020u;
}
void BlobProto::clear_num() {
  num_ = 0;
  clear_has_num();
}
::google::protobuf::int32 BlobProto::num() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.num)
  return num_;
}
void BlobProto::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.num)
}

// optional int32 channels = 2 [default = 0];
bool BlobProto::has_channels() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BlobProto::set_has_channels() {
  _has_bits_[0] |= 0x00000040u;
}
void BlobProto::clear_has_channels() {
  _has_bits_[0] &= ~0x00000040u;
}
void BlobProto::clear_channels() {
  channels_ = 0;
  clear_has_channels();
}
::google::protobuf::int32 BlobProto::channels() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.channels)
  return channels_;
}
void BlobProto::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.channels)
}

// optional int32 height = 3 [default = 0];
bool BlobProto::has_height() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BlobProto::set_has_height() {
  _has_bits_[0] |= 0x00000080u;
}
void BlobProto::clear_has_height() {
  _has_bits_[0] &= ~0x00000080u;
}
void BlobProto::clear_height() {
  height_ = 0;
  clear_has_height();
}
::google::protobuf::int32 BlobProto::height() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.height)
  return height_;
}
void BlobProto::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.height)
}

// optional int32 width = 4 [default = 0];
bool BlobProto::has_width() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void BlobProto::set_has_width() {
  _has_bits_[0] |= 0x00000100u;
}
void BlobProto::clear_has_width() {
  _has_bits_[0] &= ~0x00000100u;
}
void BlobProto::clear_width() {
  width_ = 0;
  clear_has_width();
}
::google::protobuf::int32 BlobProto::width() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.width)
  return width_;
}
void BlobProto::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.width)
}

inline const BlobProto* BlobProto::internal_default_instance() {
  return &BlobProto_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlobProtoVector::kBlobsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlobProtoVector::BlobProtoVector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.BlobProtoVector)
}

void BlobProtoVector::InitAsDefaultInstance() {
}

BlobProtoVector::BlobProtoVector(const BlobProtoVector& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.BlobProtoVector)
}

void BlobProtoVector::SharedCtor() {
  _cached_size_ = 0;
}

BlobProtoVector::~BlobProtoVector() {
  // @@protoc_insertion_point(destructor:caffe.BlobProtoVector)
  SharedDtor();
}

void BlobProtoVector::SharedDtor() {
}

void BlobProtoVector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobProtoVector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobProtoVector_descriptor_;
}

const BlobProtoVector& BlobProtoVector::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BlobProtoVector> BlobProtoVector_default_instance_;

BlobProtoVector* BlobProtoVector::New(::google::protobuf::Arena* arena) const {
  BlobProtoVector* n = new BlobProtoVector;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlobProtoVector::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.BlobProtoVector)
  blobs_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BlobProtoVector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.BlobProtoVector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .caffe.BlobProto blobs = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_blobs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_blobs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_blobs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.BlobProtoVector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.BlobProtoVector)
  return false;
#undef DO_
}

void BlobProtoVector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.BlobProtoVector)
  // repeated .caffe.BlobProto blobs = 1;
  for (unsigned int i = 0, n = this->blobs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->blobs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.BlobProtoVector)
}

::google::protobuf::uint8* BlobProtoVector::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.BlobProtoVector)
  // repeated .caffe.BlobProto blobs = 1;
  for (unsigned int i = 0, n = this->blobs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->blobs(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.BlobProtoVector)
  return target;
}

size_t BlobProtoVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.BlobProtoVector)
  size_t total_size = 0;

  // repeated .caffe.BlobProto blobs = 1;
  {
    unsigned int count = this->blobs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blobs(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobProtoVector::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.BlobProtoVector)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BlobProtoVector* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlobProtoVector>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.BlobProtoVector)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.BlobProtoVector)
    UnsafeMergeFrom(*source);
  }
}

void BlobProtoVector::MergeFrom(const BlobProtoVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.BlobProtoVector)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BlobProtoVector::UnsafeMergeFrom(const BlobProtoVector& from) {
  GOOGLE_DCHECK(&from != this);
  blobs_.MergeFrom(from.blobs_);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void BlobProtoVector::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.BlobProtoVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobProtoVector::CopyFrom(const BlobProtoVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.BlobProtoVector)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BlobProtoVector::IsInitialized() const {

  return true;
}

void BlobProtoVector::Swap(BlobProtoVector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlobProtoVector::InternalSwap(BlobProtoVector* other) {
  blobs_.UnsafeArenaSwap(&other->blobs_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlobProtoVector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobProtoVector_descriptor_;
  metadata.reflection = BlobProtoVector_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlobProtoVector

// repeated .caffe.BlobProto blobs = 1;
int BlobProtoVector::blobs_size() const {
  return blobs_.size();
}
void BlobProtoVector::clear_blobs() {
  blobs_.Clear();
}
const ::caffe::BlobProto& BlobProtoVector::blobs(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProtoVector.blobs)
  return blobs_.Get(index);
}
::caffe::BlobProto* BlobProtoVector::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.BlobProtoVector.blobs)
  return blobs_.Mutable(index);
}
::caffe::BlobProto* BlobProtoVector::add_blobs() {
  // @@protoc_insertion_point(field_add:caffe.BlobProtoVector.blobs)
  return blobs_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
BlobProtoVector::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProtoVector.blobs)
  return &blobs_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
BlobProtoVector::blobs() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProtoVector.blobs)
  return blobs_;
}

inline const BlobProtoVector* BlobProtoVector::internal_default_instance() {
  return &BlobProtoVector_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Datum::kChannelsFieldNumber;
const int Datum::kHeightFieldNumber;
const int Datum::kWidthFieldNumber;
const int Datum::kDataFieldNumber;
const int Datum::kLabelFieldNumber;
const int Datum::kFloatDataFieldNumber;
const int Datum::kEncodedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Datum::Datum()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.Datum)
}

void Datum::InitAsDefaultInstance() {
}

Datum::Datum(const Datum& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.Datum)
}

void Datum::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&channels_, 0, reinterpret_cast<char*>(&encoded_) -
    reinterpret_cast<char*>(&channels_) + sizeof(encoded_));
}

Datum::~Datum() {
  // @@protoc_insertion_point(destructor:caffe.Datum)
  SharedDtor();
}

void Datum::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Datum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Datum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Datum_descriptor_;
}

const Datum& Datum::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Datum> Datum_default_instance_;

Datum* Datum::New(::google::protobuf::Arena* arena) const {
  Datum* n = new Datum;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Datum::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.Datum)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Datum, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Datum*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 95u) {
    ZR_(channels_, encoded_);
    if (has_data()) {
      data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  float_data_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Datum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.Datum)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 channels = 1;
      case 1: {
        if (tag == 8) {
          set_has_channels();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channels_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }

      // optional int32 height = 2;
      case 2: {
        if (tag == 16) {
         parse_height:
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_width;
        break;
      }

      // optional int32 width = 3;
      case 3: {
        if (tag == 24) {
         parse_width:
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_label;
        break;
      }

      // optional int32 label = 5;
      case 5: {
        if (tag == 40) {
         parse_label:
          set_has_label();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &label_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_float_data;
        break;
      }

      // repeated float float_data = 6;
      case 6: {
        if (tag == 53) {
         parse_float_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 53, input, this->mutable_float_data())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_float_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_float_data;
        if (input->ExpectTag(56)) goto parse_encoded;
        break;
      }

      // optional bool encoded = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_encoded:
          set_has_encoded();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encoded_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.Datum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.Datum)
  return false;
#undef DO_
}

void Datum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.Datum)
  // optional int32 channels = 1;
  if (has_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->channels(), output);
  }

  // optional int32 height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  // optional int32 width = 3;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // optional bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // optional int32 label = 5;
  if (has_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->label(), output);
  }

  // repeated float float_data = 6;
  for (int i = 0; i < this->float_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      6, this->float_data(i), output);
  }

  // optional bool encoded = 7 [default = false];
  if (has_encoded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->encoded(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.Datum)
}

::google::protobuf::uint8* Datum::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.Datum)
  // optional int32 channels = 1;
  if (has_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->channels(), target);
  }

  // optional int32 height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->height(), target);
  }

  // optional int32 width = 3;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }

  // optional bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // optional int32 label = 5;
  if (has_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->label(), target);
  }

  // repeated float float_data = 6;
  for (int i = 0; i < this->float_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(6, this->float_data(i), target);
  }

  // optional bool encoded = 7 [default = false];
  if (has_encoded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->encoded(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.Datum)
  return target;
}

size_t Datum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.Datum)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 95u) {
    // optional int32 channels = 1;
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channels());
    }

    // optional int32 height = 2;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 width = 3;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional int32 label = 5;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->label());
    }

    // optional bool encoded = 7 [default = false];
    if (has_encoded()) {
      total_size += 1 + 1;
    }

  }
  // repeated float float_data = 6;
  {
    size_t data_size = 0;
    unsigned int count = this->float_data_size();
    data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->float_data_size());
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Datum::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.Datum)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Datum* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Datum>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.Datum)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.Datum)
    UnsafeMergeFrom(*source);
  }
}

void Datum::MergeFrom(const Datum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.Datum)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Datum::UnsafeMergeFrom(const Datum& from) {
  GOOGLE_DCHECK(&from != this);
  float_data_.UnsafeMergeFrom(from.float_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channels()) {
      set_channels(from.channels());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (from.has_label()) {
      set_label(from.label());
    }
    if (from.has_encoded()) {
      set_encoded(from.encoded());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Datum::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.Datum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Datum::CopyFrom(const Datum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.Datum)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Datum::IsInitialized() const {

  return true;
}

void Datum::Swap(Datum* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Datum::InternalSwap(Datum* other) {
  std::swap(channels_, other->channels_);
  std::swap(height_, other->height_);
  std::swap(width_, other->width_);
  data_.Swap(&other->data_);
  std::swap(label_, other->label_);
  float_data_.UnsafeArenaSwap(&other->float_data_);
  std::swap(encoded_, other->encoded_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Datum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Datum_descriptor_;
  metadata.reflection = Datum_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Datum

// optional int32 channels = 1;
bool Datum::has_channels() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Datum::set_has_channels() {
  _has_bits_[0] |= 0x00000001u;
}
void Datum::clear_has_channels() {
  _has_bits_[0] &= ~0x00000001u;
}
void Datum::clear_channels() {
  channels_ = 0;
  clear_has_channels();
}
::google::protobuf::int32 Datum::channels() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.channels)
  return channels_;
}
void Datum::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.channels)
}

// optional int32 height = 2;
bool Datum::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Datum::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
void Datum::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
void Datum::clear_height() {
  height_ = 0;
  clear_has_height();
}
::google::protobuf::int32 Datum::height() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.height)
  return height_;
}
void Datum::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.height)
}

// optional int32 width = 3;
bool Datum::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Datum::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
void Datum::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
void Datum::clear_width() {
  width_ = 0;
  clear_has_width();
}
::google::protobuf::int32 Datum::width() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.width)
  return width_;
}
void Datum::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.width)
}

// optional bytes data = 4;
bool Datum::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Datum::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
void Datum::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
void Datum::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& Datum::data() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Datum::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.Datum.data)
}
void Datum::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.Datum.data)
}
void Datum::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.Datum.data)
}
::std::string* Datum::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:caffe.Datum.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Datum::release_data() {
  // @@protoc_insertion_point(field_release:caffe.Datum.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Datum::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:caffe.Datum.data)
}

// optional int32 label = 5;
bool Datum::has_label() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Datum::set_has_label() {
  _has_bits_[0] |= 0x00000010u;
}
void Datum::clear_has_label() {
  _has_bits_[0] &= ~0x00000010u;
}
void Datum::clear_label() {
  label_ = 0;
  clear_has_label();
}
::google::protobuf::int32 Datum::label() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.label)
  return label_;
}
void Datum::set_label(::google::protobuf::int32 value) {
  set_has_label();
  label_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.label)
}

// repeated float float_data = 6;
int Datum::float_data_size() const {
  return float_data_.size();
}
void Datum::clear_float_data() {
  float_data_.Clear();
}
float Datum::float_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe.Datum.float_data)
  return float_data_.Get(index);
}
void Datum::set_float_data(int index, float value) {
  float_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.Datum.float_data)
}
void Datum::add_float_data(float value) {
  float_data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.Datum.float_data)
}
const ::google::protobuf::RepeatedField< float >&
Datum::float_data() const {
  // @@protoc_insertion_point(field_list:caffe.Datum.float_data)
  return float_data_;
}
::google::protobuf::RepeatedField< float >*
Datum::mutable_float_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe.Datum.float_data)
  return &float_data_;
}

// optional bool encoded = 7 [default = false];
bool Datum::has_encoded() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Datum::set_has_encoded() {
  _has_bits_[0] |= 0x00000040u;
}
void Datum::clear_has_encoded() {
  _has_bits_[0] &= ~0x00000040u;
}
void Datum::clear_encoded() {
  encoded_ = false;
  clear_has_encoded();
}
bool Datum::encoded() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.encoded)
  return encoded_;
}
void Datum::set_encoded(bool value) {
  set_has_encoded();
  encoded_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.encoded)
}

inline const Datum* Datum::internal_default_instance() {
  return &Datum_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* FillerParameter_VarianceNorm_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FillerParameter_VarianceNorm_descriptor_;
}
bool FillerParameter_VarianceNorm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FillerParameter_VarianceNorm FillerParameter::FAN_IN;
const FillerParameter_VarianceNorm FillerParameter::FAN_OUT;
const FillerParameter_VarianceNorm FillerParameter::AVERAGE;
const FillerParameter_VarianceNorm FillerParameter::VarianceNorm_MIN;
const FillerParameter_VarianceNorm FillerParameter::VarianceNorm_MAX;
const int FillerParameter::VarianceNorm_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
::std::string* FillerParameter::_default_type_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FillerParameter::kTypeFieldNumber;
const int FillerParameter::kValueFieldNumber;
const int FillerParameter::kMinFieldNumber;
const int FillerParameter::kMaxFieldNumber;
const int FillerParameter::kMeanFieldNumber;
const int FillerParameter::kStdFieldNumber;
const int FillerParameter::kSparseFieldNumber;
const int FillerParameter::kVarianceNormFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FillerParameter::FillerParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.FillerParameter)
}

void FillerParameter::InitAsDefaultInstance() {
}

FillerParameter::FillerParameter(const FillerParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.FillerParameter)
}

void FillerParameter::SharedCtor() {
  _cached_size_ = 0;
  type_.UnsafeSetDefault(_default_type_);
  ::memset(&value_, 0, reinterpret_cast<char*>(&variance_norm_) -
    reinterpret_cast<char*>(&value_) + sizeof(variance_norm_));
  sparse_ = -1;
  max_ = 1;
  std_ = 1;
}

FillerParameter::~FillerParameter() {
  // @@protoc_insertion_point(destructor:caffe.FillerParameter)
  SharedDtor();
}

void FillerParameter::SharedDtor() {
  type_.DestroyNoArena(_default_type_);
}

void FillerParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FillerParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FillerParameter_descriptor_;
}

const FillerParameter& FillerParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<FillerParameter> FillerParameter_default_instance_;

FillerParameter* FillerParameter::New(::google::protobuf::Arena* arena) const {
  FillerParameter* n = new FillerParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FillerParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.FillerParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FillerParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FillerParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(value_, variance_norm_);
    if (has_type()) {
      type_.ClearToDefaultNoArena(_default_type_);
    }
    max_ = 1;
    std_ = 1;
    sparse_ = -1;
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FillerParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.FillerParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1 [default = "constant"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.FillerParameter.type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_value;
        break;
      }

      // optional float value = 2 [default = 0];
      case 2: {
        if (tag == 21) {
         parse_value:
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_min;
        break;
      }

      // optional float min = 3 [default = 0];
      case 3: {
        if (tag == 29) {
         parse_min:
          set_has_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_max;
        break;
      }

      // optional float max = 4 [default = 1];
      case 4: {
        if (tag == 37) {
         parse_max:
          set_has_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_mean;
        break;
      }

      // optional float mean = 5 [default = 0];
      case 5: {
        if (tag == 45) {
         parse_mean:
          set_has_mean();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_std;
        break;
      }

      // optional float std = 6 [default = 1];
      case 6: {
        if (tag == 53) {
         parse_std:
          set_has_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &std_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_sparse;
        break;
      }

      // optional int32 sparse = 7 [default = -1];
      case 7: {
        if (tag == 56) {
         parse_sparse:
          set_has_sparse();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sparse_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_variance_norm;
        break;
      }

      // optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
      case 8: {
        if (tag == 64) {
         parse_variance_norm:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::FillerParameter_VarianceNorm_IsValid(value)) {
            set_variance_norm(static_cast< ::caffe::FillerParameter_VarianceNorm >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.FillerParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.FillerParameter)
  return false;
#undef DO_
}

void FillerParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.FillerParameter)
  // optional string type = 1 [default = "constant"];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.FillerParameter.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional float value = 2 [default = 0];
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value(), output);
  }

  // optional float min = 3 [default = 0];
  if (has_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->min(), output);
  }

  // optional float max = 4 [default = 1];
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->max(), output);
  }

  // optional float mean = 5 [default = 0];
  if (has_mean()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->mean(), output);
  }

  // optional float std = 6 [default = 1];
  if (has_std()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->std(), output);
  }

  // optional int32 sparse = 7 [default = -1];
  if (has_sparse()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sparse(), output);
  }

  // optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
  if (has_variance_norm()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->variance_norm(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.FillerParameter)
}

::google::protobuf::uint8* FillerParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.FillerParameter)
  // optional string type = 1 [default = "constant"];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.FillerParameter.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional float value = 2 [default = 0];
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value(), target);
  }

  // optional float min = 3 [default = 0];
  if (has_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->min(), target);
  }

  // optional float max = 4 [default = 1];
  if (has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->max(), target);
  }

  // optional float mean = 5 [default = 0];
  if (has_mean()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->mean(), target);
  }

  // optional float std = 6 [default = 1];
  if (has_std()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->std(), target);
  }

  // optional int32 sparse = 7 [default = -1];
  if (has_sparse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->sparse(), target);
  }

  // optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
  if (has_variance_norm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->variance_norm(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.FillerParameter)
  return target;
}

size_t FillerParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.FillerParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string type = 1 [default = "constant"];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional float value = 2 [default = 0];
    if (has_value()) {
      total_size += 1 + 4;
    }

    // optional float min = 3 [default = 0];
    if (has_min()) {
      total_size += 1 + 4;
    }

    // optional float max = 4 [default = 1];
    if (has_max()) {
      total_size += 1 + 4;
    }

    // optional float mean = 5 [default = 0];
    if (has_mean()) {
      total_size += 1 + 4;
    }

    // optional float std = 6 [default = 1];
    if (has_std()) {
      total_size += 1 + 4;
    }

    // optional int32 sparse = 7 [default = -1];
    if (has_sparse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sparse());
    }

    // optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
    if (has_variance_norm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->variance_norm());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FillerParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.FillerParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FillerParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FillerParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.FillerParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.FillerParameter)
    UnsafeMergeFrom(*source);
  }
}

void FillerParameter::MergeFrom(const FillerParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.FillerParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void FillerParameter::UnsafeMergeFrom(const FillerParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(_default_type_, from.type_);
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_min()) {
      set_min(from.min());
    }
    if (from.has_max()) {
      set_max(from.max());
    }
    if (from.has_mean()) {
      set_mean(from.mean());
    }
    if (from.has_std()) {
      set_std(from.std());
    }
    if (from.has_sparse()) {
      set_sparse(from.sparse());
    }
    if (from.has_variance_norm()) {
      set_variance_norm(from.variance_norm());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void FillerParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.FillerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FillerParameter::CopyFrom(const FillerParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.FillerParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool FillerParameter::IsInitialized() const {

  return true;
}

void FillerParameter::Swap(FillerParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FillerParameter::InternalSwap(FillerParameter* other) {
  type_.Swap(&other->type_);
  std::swap(value_, other->value_);
  std::swap(min_, other->min_);
  std::swap(max_, other->max_);
  std::swap(mean_, other->mean_);
  std::swap(std_, other->std_);
  std::swap(sparse_, other->sparse_);
  std::swap(variance_norm_, other->variance_norm_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FillerParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FillerParameter_descriptor_;
  metadata.reflection = FillerParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FillerParameter

// optional string type = 1 [default = "constant"];
bool FillerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FillerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void FillerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void FillerParameter::clear_type() {
  type_.ClearToDefaultNoArena(_default_type_);
  clear_has_type();
}
const ::std::string& FillerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.type)
  return type_.GetNoArena(_default_type_);
}
void FillerParameter::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(_default_type_, value);
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.type)
}
void FillerParameter::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(_default_type_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.FillerParameter.type)
}
void FillerParameter::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(_default_type_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.FillerParameter.type)
}
::std::string* FillerParameter::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe.FillerParameter.type)
  return type_.MutableNoArena(_default_type_);
}
::std::string* FillerParameter::release_type() {
  // @@protoc_insertion_point(field_release:caffe.FillerParameter.type)
  clear_has_type();
  return type_.ReleaseNoArena(_default_type_);
}
void FillerParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(_default_type_, type);
  // @@protoc_insertion_point(field_set_allocated:caffe.FillerParameter.type)
}

// optional float value = 2 [default = 0];
bool FillerParameter::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FillerParameter::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void FillerParameter::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void FillerParameter::clear_value() {
  value_ = 0;
  clear_has_value();
}
float FillerParameter::value() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.value)
  return value_;
}
void FillerParameter::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.value)
}

// optional float min = 3 [default = 0];
bool FillerParameter::has_min() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FillerParameter::set_has_min() {
  _has_bits_[0] |= 0x00000004u;
}
void FillerParameter::clear_has_min() {
  _has_bits_[0] &= ~0x00000004u;
}
void FillerParameter::clear_min() {
  min_ = 0;
  clear_has_min();
}
float FillerParameter::min() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.min)
  return min_;
}
void FillerParameter::set_min(float value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.min)
}

// optional float max = 4 [default = 1];
bool FillerParameter::has_max() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FillerParameter::set_has_max() {
  _has_bits_[0] |= 0x00000008u;
}
void FillerParameter::clear_has_max() {
  _has_bits_[0] &= ~0x00000008u;
}
void FillerParameter::clear_max() {
  max_ = 1;
  clear_has_max();
}
float FillerParameter::max() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.max)
  return max_;
}
void FillerParameter::set_max(float value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.max)
}

// optional float mean = 5 [default = 0];
bool FillerParameter::has_mean() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FillerParameter::set_has_mean() {
  _has_bits_[0] |= 0x00000010u;
}
void FillerParameter::clear_has_mean() {
  _has_bits_[0] &= ~0x00000010u;
}
void FillerParameter::clear_mean() {
  mean_ = 0;
  clear_has_mean();
}
float FillerParameter::mean() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.mean)
  return mean_;
}
void FillerParameter::set_mean(float value) {
  set_has_mean();
  mean_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.mean)
}

// optional float std = 6 [default = 1];
bool FillerParameter::has_std() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FillerParameter::set_has_std() {
  _has_bits_[0] |= 0x00000020u;
}
void FillerParameter::clear_has_std() {
  _has_bits_[0] &= ~0x00000020u;
}
void FillerParameter::clear_std() {
  std_ = 1;
  clear_has_std();
}
float FillerParameter::std() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.std)
  return std_;
}
void FillerParameter::set_std(float value) {
  set_has_std();
  std_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.std)
}

// optional int32 sparse = 7 [default = -1];
bool FillerParameter::has_sparse() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void FillerParameter::set_has_sparse() {
  _has_bits_[0] |= 0x00000040u;
}
void FillerParameter::clear_has_sparse() {
  _has_bits_[0] &= ~0x00000040u;
}
void FillerParameter::clear_sparse() {
  sparse_ = -1;
  clear_has_sparse();
}
::google::protobuf::int32 FillerParameter::sparse() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.sparse)
  return sparse_;
}
void FillerParameter::set_sparse(::google::protobuf::int32 value) {
  set_has_sparse();
  sparse_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.sparse)
}

// optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
bool FillerParameter::has_variance_norm() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void FillerParameter::set_has_variance_norm() {
  _has_bits_[0] |= 0x00000080u;
}
void FillerParameter::clear_has_variance_norm() {
  _has_bits_[0] &= ~0x00000080u;
}
void FillerParameter::clear_variance_norm() {
  variance_norm_ = 0;
  clear_has_variance_norm();
}
::caffe::FillerParameter_VarianceNorm FillerParameter::variance_norm() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.variance_norm)
  return static_cast< ::caffe::FillerParameter_VarianceNorm >(variance_norm_);
}
void FillerParameter::set_variance_norm(::caffe::FillerParameter_VarianceNorm value) {
  assert(::caffe::FillerParameter_VarianceNorm_IsValid(value));
  set_has_variance_norm();
  variance_norm_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.variance_norm)
}

inline const FillerParameter* FillerParameter::internal_default_instance() {
  return &FillerParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetParameter::kNameFieldNumber;
const int NetParameter::kInputFieldNumber;
const int NetParameter::kInputShapeFieldNumber;
const int NetParameter::kInputDimFieldNumber;
const int NetParameter::kForceBackwardFieldNumber;
const int NetParameter::kStateFieldNumber;
const int NetParameter::kDebugInfoFieldNumber;
const int NetParameter::kLayerFieldNumber;
const int NetParameter::kLayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetParameter::NetParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.NetParameter)
}

void NetParameter::InitAsDefaultInstance() {
  state_ = const_cast< ::caffe::NetState*>(
      ::caffe::NetState::internal_default_instance());
}

NetParameter::NetParameter(const NetParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.NetParameter)
}

void NetParameter::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = NULL;
  ::memset(&force_backward_, 0, reinterpret_cast<char*>(&debug_info_) -
    reinterpret_cast<char*>(&force_backward_) + sizeof(debug_info_));
}

NetParameter::~NetParameter() {
  // @@protoc_insertion_point(destructor:caffe.NetParameter)
  SharedDtor();
}

void NetParameter::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &NetParameter_default_instance_.get()) {
    delete state_;
  }
}

void NetParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetParameter_descriptor_;
}

const NetParameter& NetParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NetParameter> NetParameter_default_instance_;

NetParameter* NetParameter::New(::google::protobuf::Arena* arena) const {
  NetParameter* n = new NetParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.NetParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NetParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NetParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 113u) {
    ZR_(force_backward_, debug_info_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_state()) {
      if (state_ != NULL) state_->::caffe::NetState::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  input_.Clear();
  input_shape_.Clear();
  input_dim_.Clear();
  layer_.Clear();
  layers_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NetParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.NetParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.NetParameter.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_layers;
        break;
      }

      // repeated .caffe.V1LayerParameter layers = 2;
      case 2: {
        if (tag == 18) {
         parse_layers:
          DO_(input->IncrementRecursionDepth());
         parse_loop_layers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_layers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_layers;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_input;
        break;
      }

      // repeated string input = 3;
      case 3: {
        if (tag == 26) {
         parse_input:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_input()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->input(this->input_size() - 1).data(),
            this->input(this->input_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.NetParameter.input");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_input;
        if (input->ExpectTag(32)) goto parse_input_dim;
        break;
      }

      // repeated int32 input_dim = 4;
      case 4: {
        if (tag == 32) {
         parse_input_dim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_input_dim())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_input_dim())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_input_dim;
        if (input->ExpectTag(40)) goto parse_force_backward;
        break;
      }

      // optional bool force_backward = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_force_backward:
          set_has_force_backward();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_backward_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_state;
        break;
      }

      // optional .caffe.NetState state = 6;
      case 6: {
        if (tag == 50) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_debug_info;
        break;
      }

      // optional bool debug_info = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_debug_info:
          set_has_debug_info();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &debug_info_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_input_shape;
        break;
      }

      // repeated .caffe.BlobShape input_shape = 8;
      case 8: {
        if (tag == 66) {
         parse_input_shape:
          DO_(input->IncrementRecursionDepth());
         parse_loop_input_shape:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_input_shape()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_input_shape;
        if (input->ExpectTag(802)) goto parse_loop_layer;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .caffe.LayerParameter layer = 100;
      case 100: {
        if (tag == 802) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_layer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_layer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_loop_layer;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.NetParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.NetParameter)
  return false;
#undef DO_
}

void NetParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.NetParameter)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetParameter.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .caffe.V1LayerParameter layers = 2;
  for (unsigned int i = 0, n = this->layers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->layers(i), output);
  }

  // repeated string input = 3;
  for (int i = 0; i < this->input_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input(i).data(), this->input(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetParameter.input");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->input(i), output);
  }

  // repeated int32 input_dim = 4;
  for (int i = 0; i < this->input_dim_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->input_dim(i), output);
  }

  // optional bool force_backward = 5 [default = false];
  if (has_force_backward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->force_backward(), output);
  }

  // optional .caffe.NetState state = 6;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->state_, output);
  }

  // optional bool debug_info = 7 [default = false];
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->debug_info(), output);
  }

  // repeated .caffe.BlobShape input_shape = 8;
  for (unsigned int i = 0, n = this->input_shape_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->input_shape(i), output);
  }

  // repeated .caffe.LayerParameter layer = 100;
  for (unsigned int i = 0, n = this->layer_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->layer(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.NetParameter)
}

::google::protobuf::uint8* NetParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.NetParameter)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetParameter.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .caffe.V1LayerParameter layers = 2;
  for (unsigned int i = 0, n = this->layers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->layers(i), false, target);
  }

  // repeated string input = 3;
  for (int i = 0; i < this->input_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input(i).data(), this->input(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetParameter.input");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->input(i), target);
  }

  // repeated int32 input_dim = 4;
  for (int i = 0; i < this->input_dim_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->input_dim(i), target);
  }

  // optional bool force_backward = 5 [default = false];
  if (has_force_backward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->force_backward(), target);
  }

  // optional .caffe.NetState state = 6;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->state_, false, target);
  }

  // optional bool debug_info = 7 [default = false];
  if (has_debug_info()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->debug_info(), target);
  }

  // repeated .caffe.BlobShape input_shape = 8;
  for (unsigned int i = 0, n = this->input_shape_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->input_shape(i), false, target);
  }

  // repeated .caffe.LayerParameter layer = 100;
  for (unsigned int i = 0, n = this->layer_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        100, this->layer(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.NetParameter)
  return target;
}

size_t NetParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.NetParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 113u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool force_backward = 5 [default = false];
    if (has_force_backward()) {
      total_size += 1 + 1;
    }

    // optional .caffe.NetState state = 6;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->state_);
    }

    // optional bool debug_info = 7 [default = false];
    if (has_debug_info()) {
      total_size += 1 + 1;
    }

  }
  // repeated string input = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->input_size());
  for (int i = 0; i < this->input_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->input(i));
  }

  // repeated .caffe.BlobShape input_shape = 8;
  {
    unsigned int count = this->input_shape_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->input_shape(i));
    }
  }

  // repeated int32 input_dim = 4;
  {
    size_t data_size = 0;
    unsigned int count = this->input_dim_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->input_dim(i));
    }
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->input_dim_size());
    total_size += data_size;
  }

  // repeated .caffe.LayerParameter layer = 100;
  {
    unsigned int count = this->layer_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->layer(i));
    }
  }

  // repeated .caffe.V1LayerParameter layers = 2;
  {
    unsigned int count = this->layers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->layers(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.NetParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NetParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.NetParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.NetParameter)
    UnsafeMergeFrom(*source);
  }
}

void NetParameter::MergeFrom(const NetParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.NetParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NetParameter::UnsafeMergeFrom(const NetParameter& from) {
  GOOGLE_DCHECK(&from != this);
  input_.UnsafeMergeFrom(from.input_);
  input_shape_.MergeFrom(from.input_shape_);
  input_dim_.UnsafeMergeFrom(from.input_dim_);
  layer_.MergeFrom(from.layer_);
  layers_.MergeFrom(from.layers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_force_backward()) {
      set_force_backward(from.force_backward());
    }
    if (from.has_state()) {
      mutable_state()->::caffe::NetState::MergeFrom(from.state());
    }
    if (from.has_debug_info()) {
      set_debug_info(from.debug_info());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void NetParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.NetParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetParameter::CopyFrom(const NetParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.NetParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NetParameter::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->layer())) return false;
  return true;
}

void NetParameter::Swap(NetParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetParameter::InternalSwap(NetParameter* other) {
  name_.Swap(&other->name_);
  input_.UnsafeArenaSwap(&other->input_);
  input_shape_.UnsafeArenaSwap(&other->input_shape_);
  input_dim_.UnsafeArenaSwap(&other->input_dim_);
  std::swap(force_backward_, other->force_backward_);
  std::swap(state_, other->state_);
  std::swap(debug_info_, other->debug_info_);
  layer_.UnsafeArenaSwap(&other->layer_);
  layers_.UnsafeArenaSwap(&other->layers_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetParameter_descriptor_;
  metadata.reflection = NetParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetParameter

// optional string name = 1;
bool NetParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void NetParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void NetParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& NetParameter::name() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetParameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.NetParameter.name)
}
void NetParameter::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.NetParameter.name)
}
void NetParameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.NetParameter.name)
}
::std::string* NetParameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetParameter::release_name() {
  // @@protoc_insertion_point(field_release:caffe.NetParameter.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.NetParameter.name)
}

// repeated string input = 3;
int NetParameter::input_size() const {
  return input_.size();
}
void NetParameter::clear_input() {
  input_.Clear();
}
const ::std::string& NetParameter::input(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.input)
  return input_.Get(index);
}
::std::string* NetParameter::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.input)
  return input_.Mutable(index);
}
void NetParameter::set_input(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetParameter.input)
  input_.Mutable(index)->assign(value);
}
void NetParameter::set_input(int index, const char* value) {
  input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetParameter.input)
}
void NetParameter::set_input(int index, const char* value, size_t size) {
  input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetParameter.input)
}
::std::string* NetParameter::add_input() {
  // @@protoc_insertion_point(field_add_mutable:caffe.NetParameter.input)
  return input_.Add();
}
void NetParameter::add_input(const ::std::string& value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetParameter.input)
}
void NetParameter::add_input(const char* value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetParameter.input)
}
void NetParameter::add_input(const char* value, size_t size) {
  input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetParameter.input)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetParameter::input() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.input)
  return input_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
NetParameter::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.input)
  return &input_;
}

// repeated .caffe.BlobShape input_shape = 8;
int NetParameter::input_shape_size() const {
  return input_shape_.size();
}
void NetParameter::clear_input_shape() {
  input_shape_.Clear();
}
const ::caffe::BlobShape& NetParameter::input_shape(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.input_shape)
  return input_shape_.Get(index);
}
::caffe::BlobShape* NetParameter::mutable_input_shape(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.input_shape)
  return input_shape_.Mutable(index);
}
::caffe::BlobShape* NetParameter::add_input_shape() {
  // @@protoc_insertion_point(field_add:caffe.NetParameter.input_shape)
  return input_shape_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
NetParameter::mutable_input_shape() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.input_shape)
  return &input_shape_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
NetParameter::input_shape() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.input_shape)
  return input_shape_;
}

// repeated int32 input_dim = 4;
int NetParameter::input_dim_size() const {
  return input_dim_.size();
}
void NetParameter::clear_input_dim() {
  input_dim_.Clear();
}
::google::protobuf::int32 NetParameter::input_dim(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.input_dim)
  return input_dim_.Get(index);
}
void NetParameter::set_input_dim(int index, ::google::protobuf::int32 value) {
  input_dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.NetParameter.input_dim)
}
void NetParameter::add_input_dim(::google::protobuf::int32 value) {
  input_dim_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.NetParameter.input_dim)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetParameter::input_dim() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.input_dim)
  return input_dim_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetParameter::mutable_input_dim() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.input_dim)
  return &input_dim_;
}

// optional bool force_backward = 5 [default = false];
bool NetParameter::has_force_backward() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NetParameter::set_has_force_backward() {
  _has_bits_[0] |= 0x00000010u;
}
void NetParameter::clear_has_force_backward() {
  _has_bits_[0] &= ~0x00000010u;
}
void NetParameter::clear_force_backward() {
  force_backward_ = false;
  clear_has_force_backward();
}
bool NetParameter::force_backward() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.force_backward)
  return force_backward_;
}
void NetParameter::set_force_backward(bool value) {
  set_has_force_backward();
  force_backward_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetParameter.force_backward)
}

// optional .caffe.NetState state = 6;
bool NetParameter::has_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void NetParameter::set_has_state() {
  _has_bits_[0] |= 0x00000020u;
}
void NetParameter::clear_has_state() {
  _has_bits_[0] &= ~0x00000020u;
}
void NetParameter::clear_state() {
  if (state_ != NULL) state_->::caffe::NetState::Clear();
  clear_has_state();
}
const ::caffe::NetState& NetParameter::state() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.state)
  return state_ != NULL ? *state_
                         : *::caffe::NetState::internal_default_instance();
}
::caffe::NetState* NetParameter::mutable_state() {
  set_has_state();
  if (state_ == NULL) {
    state_ = new ::caffe::NetState;
  }
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.state)
  return state_;
}
::caffe::NetState* NetParameter::release_state() {
  // @@protoc_insertion_point(field_release:caffe.NetParameter.state)
  clear_has_state();
  ::caffe::NetState* temp = state_;
  state_ = NULL;
  return temp;
}
void NetParameter::set_allocated_state(::caffe::NetState* state) {
  delete state_;
  state_ = state;
  if (state) {
    set_has_state();
  } else {
    clear_has_state();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.NetParameter.state)
}

// optional bool debug_info = 7 [default = false];
bool NetParameter::has_debug_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void NetParameter::set_has_debug_info() {
  _has_bits_[0] |= 0x00000040u;
}
void NetParameter::clear_has_debug_info() {
  _has_bits_[0] &= ~0x00000040u;
}
void NetParameter::clear_debug_info() {
  debug_info_ = false;
  clear_has_debug_info();
}
bool NetParameter::debug_info() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.debug_info)
  return debug_info_;
}
void NetParameter::set_debug_info(bool value) {
  set_has_debug_info();
  debug_info_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetParameter.debug_info)
}

// repeated .caffe.LayerParameter layer = 100;
int NetParameter::layer_size() const {
  return layer_.size();
}
void NetParameter::clear_layer() {
  layer_.Clear();
}
const ::caffe::LayerParameter& NetParameter::layer(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.layer)
  return layer_.Get(index);
}
::caffe::LayerParameter* NetParameter::mutable_layer(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.layer)
  return layer_.Mutable(index);
}
::caffe::LayerParameter* NetParameter::add_layer() {
  // @@protoc_insertion_point(field_add:caffe.NetParameter.layer)
  return layer_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter >*
NetParameter::mutable_layer() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.layer)
  return &layer_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter >&
NetParameter::layer() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.layer)
  return layer_;
}

// repeated .caffe.V1LayerParameter layers = 2;
int NetParameter::layers_size() const {
  return layers_.size();
}
void NetParameter::clear_layers() {
  layers_.Clear();
}
const ::caffe::V1LayerParameter& NetParameter::layers(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.layers)
  return layers_.Get(index);
}
::caffe::V1LayerParameter* NetParameter::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.layers)
  return layers_.Mutable(index);
}
::caffe::V1LayerParameter* NetParameter::add_layers() {
  // @@protoc_insertion_point(field_add:caffe.NetParameter.layers)
  return layers_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::V1LayerParameter >*
NetParameter::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.layers)
  return &layers_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::V1LayerParameter >&
NetParameter::layers() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.layers)
  return layers_;
}

inline const NetParameter* NetParameter::internal_default_instance() {
  return &NetParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* SolverParameter_SnapshotFormat_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SolverParameter_SnapshotFormat_descriptor_;
}
bool SolverParameter_SnapshotFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SolverParameter_SnapshotFormat SolverParameter::HDF5;
const SolverParameter_SnapshotFormat SolverParameter::BINARYPROTO;
const SolverParameter_SnapshotFormat SolverParameter::SnapshotFormat_MIN;
const SolverParameter_SnapshotFormat SolverParameter::SnapshotFormat_MAX;
const int SolverParameter::SnapshotFormat_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SolverParameter_SolverMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SolverParameter_SolverMode_descriptor_;
}
bool SolverParameter_SolverMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SolverParameter_SolverMode SolverParameter::CPU;
const SolverParameter_SolverMode SolverParameter::GPU;
const SolverParameter_SolverMode SolverParameter::SolverMode_MIN;
const SolverParameter_SolverMode SolverParameter::SolverMode_MAX;
const int SolverParameter::SolverMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SolverParameter_SolverType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SolverParameter_SolverType_descriptor_;
}
bool SolverParameter_SolverType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SolverParameter_SolverType SolverParameter::SGD;
const SolverParameter_SolverType SolverParameter::NESTEROV;
const SolverParameter_SolverType SolverParameter::ADAGRAD;
const SolverParameter_SolverType SolverParameter::RMSPROP;
const SolverParameter_SolverType SolverParameter::ADADELTA;
const SolverParameter_SolverType SolverParameter::ADAM;
const SolverParameter_SolverType SolverParameter::SolverType_MIN;
const SolverParameter_SolverType SolverParameter::SolverType_MAX;
const int SolverParameter::SolverType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
::std::string* SolverParameter::_default_regularization_type_ = NULL;
::std::string* SolverParameter::_default_type_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SolverParameter::kNetFieldNumber;
const int SolverParameter::kNetParamFieldNumber;
const int SolverParameter::kTrainNetFieldNumber;
const int SolverParameter::kTestNetFieldNumber;
const int SolverParameter::kTrainNetParamFieldNumber;
const int SolverParameter::kTestNetParamFieldNumber;
const int SolverParameter::kTrainStateFieldNumber;
const int SolverParameter::kTestStateFieldNumber;
const int SolverParameter::kTestIterFieldNumber;
const int SolverParameter::kTestIntervalFieldNumber;
const int SolverParameter::kTestComputeLossFieldNumber;
const int SolverParameter::kTestInitializationFieldNumber;
const int SolverParameter::kBaseLrFieldNumber;
const int SolverParameter::kDisplayFieldNumber;
const int SolverParameter::kAverageLossFieldNumber;
const int SolverParameter::kMaxIterFieldNumber;
const int SolverParameter::kIterSizeFieldNumber;
const int SolverParameter::kLrPolicyFieldNumber;
const int SolverParameter::kGammaFieldNumber;
const int SolverParameter::kPowerFieldNumber;
const int SolverParameter::kMomentumFieldNumber;
const int SolverParameter::kWeightDecayFieldNumber;
const int SolverParameter::kRegularizationTypeFieldNumber;
const int SolverParameter::kStepsizeFieldNumber;
const int SolverParameter::kStepvalueFieldNumber;
const int SolverParameter::kClipGradientsFieldNumber;
const int SolverParameter::kSnapshotFieldNumber;
const int SolverParameter::kSnapshotPrefixFieldNumber;
const int SolverParameter::kSnapshotDiffFieldNumber;
const int SolverParameter::kSnapshotFormatFieldNumber;
const int SolverParameter::kSolverModeFieldNumber;
const int SolverParameter::kDeviceIdFieldNumber;
const int SolverParameter::kRandomSeedFieldNumber;
const int SolverParameter::kTypeFieldNumber;
const int SolverParameter::kDeltaFieldNumber;
const int SolverParameter::kMomentum2FieldNumber;
const int SolverParameter::kRmsDecayFieldNumber;
const int SolverParameter::kDebugInfoFieldNumber;
const int SolverParameter::kSnapshotAfterTrainFieldNumber;
const int SolverParameter::kSolverTypeFieldNumber;
const int SolverParameter::kLayerWiseReduceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SolverParameter::SolverParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SolverParameter)
}

void SolverParameter::InitAsDefaultInstance() {
  net_param_ = const_cast< ::caffe::NetParameter*>(
      ::caffe::NetParameter::internal_default_instance());
  train_net_param_ = const_cast< ::caffe::NetParameter*>(
      ::caffe::NetParameter::internal_default_instance());
  train_state_ = const_cast< ::caffe::NetState*>(
      ::caffe::NetState::internal_default_instance());
}

SolverParameter::SolverParameter(const SolverParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.SolverParameter)
}

void SolverParameter::SharedCtor() {
  net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  train_net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lr_policy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  regularization_type_.UnsafeSetDefault(_default_regularization_type_);
  snapshot_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(_default_type_);
  net_param_ = NULL;
  train_net_param_ = NULL;
  train_state_ = NULL;
  ::memset(&test_interval_, 0, reinterpret_cast<char*>(&solver_type_) -
    reinterpret_cast<char*>(&test_interval_) + sizeof(solver_type_));
  rms_decay_ = 0.99f;
  average_loss_ = 1;
  iter_size_ = 1;
  clip_gradients_ = -1;
  snapshot_format_ = 1;
  test_initialization_ = true;
  snapshot_after_train_ = true;
  layer_wise_reduce_ = true;
  solver_mode_ = 1;
  random_seed_ = GOOGLE_LONGLONG(-1);
  delta_ = 1e-008f;
  momentum2_ = 0.999f;
  _cached_size_ = 0;
}

SolverParameter::~SolverParameter() {
  // @@protoc_insertion_point(destructor:caffe.SolverParameter)
  SharedDtor();
}

void SolverParameter::SharedDtor() {
  net_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  train_net_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lr_policy_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  regularization_type_.DestroyNoArena(_default_regularization_type_);
  snapshot_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(_default_type_);
  if (this != &SolverParameter_default_instance_.get()) {
    delete net_param_;
    delete train_net_param_;
    delete train_state_;
  }
}

void SolverParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SolverParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SolverParameter_descriptor_;
}

const SolverParameter& SolverParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SolverParameter> SolverParameter_default_instance_;

SolverParameter* SolverParameter::New(::google::protobuf::Arena* arena) const {
  SolverParameter* n = new SolverParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SolverParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SolverParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SolverParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SolverParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 87u) {
    if (has_net()) {
      net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_net_param()) {
      if (net_param_ != NULL) net_param_->::caffe::NetParameter::Clear();
    }
    if (has_train_net()) {
      train_net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_train_net_param()) {
      if (train_net_param_ != NULL) train_net_param_->::caffe::NetParameter::Clear();
    }
    if (has_train_state()) {
      if (train_state_ != NULL) train_state_->::caffe::NetState::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65024u) {
    ZR_(test_interval_, max_iter_);
    test_compute_loss_ = false;
    test_initialization_ = true;
    average_loss_ = 1;
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ZR_(gamma_, stepsize_);
    iter_size_ = 1;
    if (has_lr_policy()) {
      lr_policy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_regularization_type()) {
      regularization_type_.ClearToDefaultNoArena(_default_regularization_type_);
    }
  }
  if (_has_bits_[24 / 32] & 4261412864u) {
    ZR_(snapshot_, device_id_);
    clip_gradients_ = -1;
    if (has_snapshot_prefix()) {
      snapshot_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    snapshot_diff_ = false;
    snapshot_format_ = 1;
    solver_mode_ = 1;
  }
  if (_has_bits_[32 / 32] & 255u) {
    random_seed_ = GOOGLE_LONGLONG(-1);
    if (has_type()) {
      type_.ClearToDefaultNoArena(_default_type_);
    }
    delta_ = 1e-008f;
    momentum2_ = 0.999f;
    rms_decay_ = 0.99f;
    debug_info_ = false;
    snapshot_after_train_ = true;
    solver_type_ = 0;
  }
  layer_wise_reduce_ = true;

#undef ZR_HELPER_
#undef ZR_

  test_net_.Clear();
  test_net_param_.Clear();
  test_state_.Clear();
  test_iter_.Clear();
  stepvalue_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SolverParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SolverParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string train_net = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_train_net()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->train_net().data(), this->train_net().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverParameter.train_net");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_test_net;
        break;
      }

      // repeated string test_net = 2;
      case 2: {
        if (tag == 18) {
         parse_test_net:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_test_net()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->test_net(this->test_net_size() - 1).data(),
            this->test_net(this->test_net_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverParameter.test_net");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_test_net;
        if (input->ExpectTag(24)) goto parse_test_iter;
        break;
      }

      // repeated int32 test_iter = 3;
      case 3: {
        if (tag == 24) {
         parse_test_iter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_test_iter())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_test_iter())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_test_iter;
        if (input->ExpectTag(32)) goto parse_test_interval;
        break;
      }

      // optional int32 test_interval = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_test_interval:
          set_has_test_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &test_interval_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_base_lr;
        break;
      }

      // optional float base_lr = 5;
      case 5: {
        if (tag == 45) {
         parse_base_lr:
          set_has_base_lr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &base_lr_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_display;
        break;
      }

      // optional int32 display = 6;
      case 6: {
        if (tag == 48) {
         parse_display:
          set_has_display();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &display_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_max_iter;
        break;
      }

      // optional int32 max_iter = 7;
      case 7: {
        if (tag == 56) {
         parse_max_iter:
          set_has_max_iter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_iter_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_lr_policy;
        break;
      }

      // optional string lr_policy = 8;
      case 8: {
        if (tag == 66) {
         parse_lr_policy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lr_policy()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lr_policy().data(), this->lr_policy().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverParameter.lr_policy");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_gamma;
        break;
      }

      // optional float gamma = 9;
      case 9: {
        if (tag == 77) {
         parse_gamma:
          set_has_gamma();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gamma_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_power;
        break;
      }

      // optional float power = 10;
      case 10: {
        if (tag == 85) {
         parse_power:
          set_has_power();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &power_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_momentum;
        break;
      }

      // optional float momentum = 11;
      case 11: {
        if (tag == 93) {
         parse_momentum:
          set_has_momentum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &momentum_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_weight_decay;
        break;
      }

      // optional float weight_decay = 12;
      case 12: {
        if (tag == 101) {
         parse_weight_decay:
          set_has_weight_decay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_decay_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_stepsize;
        break;
      }

      // optional int32 stepsize = 13;
      case 13: {
        if (tag == 104) {
         parse_stepsize:
          set_has_stepsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stepsize_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_snapshot;
        break;
      }

      // optional int32 snapshot = 14 [default = 0];
      case 14: {
        if (tag == 112) {
         parse_snapshot:
          set_has_snapshot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &snapshot_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_snapshot_prefix;
        break;
      }

      // optional string snapshot_prefix = 15;
      case 15: {
        if (tag == 122) {
         parse_snapshot_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snapshot_prefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->snapshot_prefix().data(), this->snapshot_prefix().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverParameter.snapshot_prefix");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_snapshot_diff;
        break;
      }

      // optional bool snapshot_diff = 16 [default = false];
      case 16: {
        if (tag == 128) {
         parse_snapshot_diff:
          set_has_snapshot_diff();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &snapshot_diff_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_solver_mode;
        break;
      }

      // optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
      case 17: {
        if (tag == 136) {
         parse_solver_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::SolverParameter_SolverMode_IsValid(value)) {
            set_solver_mode(static_cast< ::caffe::SolverParameter_SolverMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(17, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_device_id;
        break;
      }

      // optional int32 device_id = 18 [default = 0];
      case 18: {
        if (tag == 144) {
         parse_device_id:
          set_has_device_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &device_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_test_compute_loss;
        break;
      }

      // optional bool test_compute_loss = 19 [default = false];
      case 19: {
        if (tag == 152) {
         parse_test_compute_loss:
          set_has_test_compute_loss();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &test_compute_loss_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_random_seed;
        break;
      }

      // optional int64 random_seed = 20 [default = -1];
      case 20: {
        if (tag == 160) {
         parse_random_seed:
          set_has_random_seed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &random_seed_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_train_net_param;
        break;
      }

      // optional .caffe.NetParameter train_net_param = 21;
      case 21: {
        if (tag == 170) {
         parse_train_net_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_train_net_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_test_net_param;
        break;
      }

      // repeated .caffe.NetParameter test_net_param = 22;
      case 22: {
        if (tag == 178) {
         parse_test_net_param:
          DO_(input->IncrementRecursionDepth());
         parse_loop_test_net_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_test_net_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_loop_test_net_param;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(184)) goto parse_debug_info;
        break;
      }

      // optional bool debug_info = 23 [default = false];
      case 23: {
        if (tag == 184) {
         parse_debug_info:
          set_has_debug_info();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &debug_info_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_net;
        break;
      }

      // optional string net = 24;
      case 24: {
        if (tag == 194) {
         parse_net:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_net()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->net().data(), this->net().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverParameter.net");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_net_param;
        break;
      }

      // optional .caffe.NetParameter net_param = 25;
      case 25: {
        if (tag == 202) {
         parse_net_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_net_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_train_state;
        break;
      }

      // optional .caffe.NetState train_state = 26;
      case 26: {
        if (tag == 210) {
         parse_train_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_train_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_test_state;
        break;
      }

      // repeated .caffe.NetState test_state = 27;
      case 27: {
        if (tag == 218) {
         parse_test_state:
          DO_(input->IncrementRecursionDepth());
         parse_loop_test_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_test_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_loop_test_state;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(224)) goto parse_snapshot_after_train;
        break;
      }

      // optional bool snapshot_after_train = 28 [default = true];
      case 28: {
        if (tag == 224) {
         parse_snapshot_after_train:
          set_has_snapshot_after_train();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &snapshot_after_train_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_regularization_type;
        break;
      }

      // optional string regularization_type = 29 [default = "L2"];
      case 29: {
        if (tag == 234) {
         parse_regularization_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_regularization_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->regularization_type().data(), this->regularization_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverParameter.regularization_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_solver_type;
        break;
      }

      // optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
      case 30: {
        if (tag == 240) {
         parse_solver_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::SolverParameter_SolverType_IsValid(value)) {
            set_solver_type(static_cast< ::caffe::SolverParameter_SolverType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(30, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(253)) goto parse_delta;
        break;
      }

      // optional float delta = 31 [default = 1e-008];
      case 31: {
        if (tag == 253) {
         parse_delta:
          set_has_delta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delta_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_test_initialization;
        break;
      }

      // optional bool test_initialization = 32 [default = true];
      case 32: {
        if (tag == 256) {
         parse_test_initialization:
          set_has_test_initialization();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &test_initialization_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_average_loss;
        break;
      }

      // optional int32 average_loss = 33 [default = 1];
      case 33: {
        if (tag == 264) {
         parse_average_loss:
          set_has_average_loss();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &average_loss_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_stepvalue;
        break;
      }

      // repeated int32 stepvalue = 34;
      case 34: {
        if (tag == 272) {
         parse_stepvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 272, input, this->mutable_stepvalue())));
        } else if (tag == 274) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_stepvalue())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_stepvalue;
        if (input->ExpectTag(285)) goto parse_clip_gradients;
        break;
      }

      // optional float clip_gradients = 35 [default = -1];
      case 35: {
        if (tag == 285) {
         parse_clip_gradients:
          set_has_clip_gradients();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &clip_gradients_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_iter_size;
        break;
      }

      // optional int32 iter_size = 36 [default = 1];
      case 36: {
        if (tag == 288) {
         parse_iter_size:
          set_has_iter_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iter_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_snapshot_format;
        break;
      }

      // optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
      case 37: {
        if (tag == 296) {
         parse_snapshot_format:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::SolverParameter_SnapshotFormat_IsValid(value)) {
            set_snapshot_format(static_cast< ::caffe::SolverParameter_SnapshotFormat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(37, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(309)) goto parse_rms_decay;
        break;
      }

      // optional float rms_decay = 38 [default = 0.99];
      case 38: {
        if (tag == 309) {
         parse_rms_decay:
          set_has_rms_decay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rms_decay_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(317)) goto parse_momentum2;
        break;
      }

      // optional float momentum2 = 39 [default = 0.999];
      case 39: {
        if (tag == 317) {
         parse_momentum2:
          set_has_momentum2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &momentum2_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(322)) goto parse_type;
        break;
      }

      // optional string type = 40 [default = "SGD"];
      case 40: {
        if (tag == 322) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverParameter.type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_layer_wise_reduce;
        break;
      }

      // optional bool layer_wise_reduce = 41 [default = true];
      case 41: {
        if (tag == 328) {
         parse_layer_wise_reduce:
          set_has_layer_wise_reduce();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &layer_wise_reduce_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SolverParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SolverParameter)
  return false;
#undef DO_
}

void SolverParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SolverParameter)
  // optional string train_net = 1;
  if (has_train_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->train_net().data(), this->train_net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.train_net");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->train_net(), output);
  }

  // repeated string test_net = 2;
  for (int i = 0; i < this->test_net_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->test_net(i).data(), this->test_net(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.test_net");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->test_net(i), output);
  }

  // repeated int32 test_iter = 3;
  for (int i = 0; i < this->test_iter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->test_iter(i), output);
  }

  // optional int32 test_interval = 4 [default = 0];
  if (has_test_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->test_interval(), output);
  }

  // optional float base_lr = 5;
  if (has_base_lr()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->base_lr(), output);
  }

  // optional int32 display = 6;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->display(), output);
  }

  // optional int32 max_iter = 7;
  if (has_max_iter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->max_iter(), output);
  }

  // optional string lr_policy = 8;
  if (has_lr_policy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lr_policy().data(), this->lr_policy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.lr_policy");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->lr_policy(), output);
  }

  // optional float gamma = 9;
  if (has_gamma()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->gamma(), output);
  }

  // optional float power = 10;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->power(), output);
  }

  // optional float momentum = 11;
  if (has_momentum()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->momentum(), output);
  }

  // optional float weight_decay = 12;
  if (has_weight_decay()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->weight_decay(), output);
  }

  // optional int32 stepsize = 13;
  if (has_stepsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->stepsize(), output);
  }

  // optional int32 snapshot = 14 [default = 0];
  if (has_snapshot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->snapshot(), output);
  }

  // optional string snapshot_prefix = 15;
  if (has_snapshot_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->snapshot_prefix().data(), this->snapshot_prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.snapshot_prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->snapshot_prefix(), output);
  }

  // optional bool snapshot_diff = 16 [default = false];
  if (has_snapshot_diff()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->snapshot_diff(), output);
  }

  // optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
  if (has_solver_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->solver_mode(), output);
  }

  // optional int32 device_id = 18 [default = 0];
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->device_id(), output);
  }

  // optional bool test_compute_loss = 19 [default = false];
  if (has_test_compute_loss()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->test_compute_loss(), output);
  }

  // optional int64 random_seed = 20 [default = -1];
  if (has_random_seed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->random_seed(), output);
  }

  // optional .caffe.NetParameter train_net_param = 21;
  if (has_train_net_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->train_net_param_, output);
  }

  // repeated .caffe.NetParameter test_net_param = 22;
  for (unsigned int i = 0, n = this->test_net_param_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->test_net_param(i), output);
  }

  // optional bool debug_info = 23 [default = false];
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->debug_info(), output);
  }

  // optional string net = 24;
  if (has_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->net().data(), this->net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.net");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->net(), output);
  }

  // optional .caffe.NetParameter net_param = 25;
  if (has_net_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, *this->net_param_, output);
  }

  // optional .caffe.NetState train_state = 26;
  if (has_train_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, *this->train_state_, output);
  }

  // repeated .caffe.NetState test_state = 27;
  for (unsigned int i = 0, n = this->test_state_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->test_state(i), output);
  }

  // optional bool snapshot_after_train = 28 [default = true];
  if (has_snapshot_after_train()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->snapshot_after_train(), output);
  }

  // optional string regularization_type = 29 [default = "L2"];
  if (has_regularization_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regularization_type().data(), this->regularization_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.regularization_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->regularization_type(), output);
  }

  // optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
  if (has_solver_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      30, this->solver_type(), output);
  }

  // optional float delta = 31 [default = 1e-008];
  if (has_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->delta(), output);
  }

  // optional bool test_initialization = 32 [default = true];
  if (has_test_initialization()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->test_initialization(), output);
  }

  // optional int32 average_loss = 33 [default = 1];
  if (has_average_loss()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->average_loss(), output);
  }

  // repeated int32 stepvalue = 34;
  for (int i = 0; i < this->stepvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      34, this->stepvalue(i), output);
  }

  // optional float clip_gradients = 35 [default = -1];
  if (has_clip_gradients()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(35, this->clip_gradients(), output);
  }

  // optional int32 iter_size = 36 [default = 1];
  if (has_iter_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->iter_size(), output);
  }

  // optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
  if (has_snapshot_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      37, this->snapshot_format(), output);
  }

  // optional float rms_decay = 38 [default = 0.99];
  if (has_rms_decay()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(38, this->rms_decay(), output);
  }

  // optional float momentum2 = 39 [default = 0.999];
  if (has_momentum2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(39, this->momentum2(), output);
  }

  // optional string type = 40 [default = "SGD"];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      40, this->type(), output);
  }

  // optional bool layer_wise_reduce = 41 [default = true];
  if (has_layer_wise_reduce()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(41, this->layer_wise_reduce(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SolverParameter)
}

::google::protobuf::uint8* SolverParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SolverParameter)
  // optional string train_net = 1;
  if (has_train_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->train_net().data(), this->train_net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.train_net");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->train_net(), target);
  }

  // repeated string test_net = 2;
  for (int i = 0; i < this->test_net_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->test_net(i).data(), this->test_net(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.test_net");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->test_net(i), target);
  }

  // repeated int32 test_iter = 3;
  for (int i = 0; i < this->test_iter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->test_iter(i), target);
  }

  // optional int32 test_interval = 4 [default = 0];
  if (has_test_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->test_interval(), target);
  }

  // optional float base_lr = 5;
  if (has_base_lr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->base_lr(), target);
  }

  // optional int32 display = 6;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->display(), target);
  }

  // optional int32 max_iter = 7;
  if (has_max_iter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->max_iter(), target);
  }

  // optional string lr_policy = 8;
  if (has_lr_policy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lr_policy().data(), this->lr_policy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.lr_policy");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->lr_policy(), target);
  }

  // optional float gamma = 9;
  if (has_gamma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->gamma(), target);
  }

  // optional float power = 10;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->power(), target);
  }

  // optional float momentum = 11;
  if (has_momentum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->momentum(), target);
  }

  // optional float weight_decay = 12;
  if (has_weight_decay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->weight_decay(), target);
  }

  // optional int32 stepsize = 13;
  if (has_stepsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->stepsize(), target);
  }

  // optional int32 snapshot = 14 [default = 0];
  if (has_snapshot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->snapshot(), target);
  }

  // optional string snapshot_prefix = 15;
  if (has_snapshot_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->snapshot_prefix().data(), this->snapshot_prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.snapshot_prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->snapshot_prefix(), target);
  }

  // optional bool snapshot_diff = 16 [default = false];
  if (has_snapshot_diff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->snapshot_diff(), target);
  }

  // optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
  if (has_solver_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->solver_mode(), target);
  }

  // optional int32 device_id = 18 [default = 0];
  if (has_device_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->device_id(), target);
  }

  // optional bool test_compute_loss = 19 [default = false];
  if (has_test_compute_loss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->test_compute_loss(), target);
  }

  // optional int64 random_seed = 20 [default = -1];
  if (has_random_seed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->random_seed(), target);
  }

  // optional .caffe.NetParameter train_net_param = 21;
  if (has_train_net_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->train_net_param_, false, target);
  }

  // repeated .caffe.NetParameter test_net_param = 22;
  for (unsigned int i = 0, n = this->test_net_param_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, this->test_net_param(i), false, target);
  }

  // optional bool debug_info = 23 [default = false];
  if (has_debug_info()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->debug_info(), target);
  }

  // optional string net = 24;
  if (has_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->net().data(), this->net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.net");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->net(), target);
  }

  // optional .caffe.NetParameter net_param = 25;
  if (has_net_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        25, *this->net_param_, false, target);
  }

  // optional .caffe.NetState train_state = 26;
  if (has_train_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        26, *this->train_state_, false, target);
  }

  // repeated .caffe.NetState test_state = 27;
  for (unsigned int i = 0, n = this->test_state_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        27, this->test_state(i), false, target);
  }

  // optional bool snapshot_after_train = 28 [default = true];
  if (has_snapshot_after_train()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->snapshot_after_train(), target);
  }

  // optional string regularization_type = 29 [default = "L2"];
  if (has_regularization_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regularization_type().data(), this->regularization_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.regularization_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->regularization_type(), target);
  }

  // optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
  if (has_solver_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      30, this->solver_type(), target);
  }

  // optional float delta = 31 [default = 1e-008];
  if (has_delta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(31, this->delta(), target);
  }

  // optional bool test_initialization = 32 [default = true];
  if (has_test_initialization()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->test_initialization(), target);
  }

  // optional int32 average_loss = 33 [default = 1];
  if (has_average_loss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->average_loss(), target);
  }

  // repeated int32 stepvalue = 34;
  for (int i = 0; i < this->stepvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(34, this->stepvalue(i), target);
  }

  // optional float clip_gradients = 35 [default = -1];
  if (has_clip_gradients()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(35, this->clip_gradients(), target);
  }

  // optional int32 iter_size = 36 [default = 1];
  if (has_iter_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->iter_size(), target);
  }

  // optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
  if (has_snapshot_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      37, this->snapshot_format(), target);
  }

  // optional float rms_decay = 38 [default = 0.99];
  if (has_rms_decay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(38, this->rms_decay(), target);
  }

  // optional float momentum2 = 39 [default = 0.999];
  if (has_momentum2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(39, this->momentum2(), target);
  }

  // optional string type = 40 [default = "SGD"];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->type(), target);
  }

  // optional bool layer_wise_reduce = 41 [default = true];
  if (has_layer_wise_reduce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(41, this->layer_wise_reduce(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SolverParameter)
  return target;
}

size_t SolverParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SolverParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 87u) {
    // optional string net = 24;
    if (has_net()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->net());
    }

    // optional .caffe.NetParameter net_param = 25;
    if (has_net_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->net_param_);
    }

    // optional string train_net = 1;
    if (has_train_net()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->train_net());
    }

    // optional .caffe.NetParameter train_net_param = 21;
    if (has_train_net_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->train_net_param_);
    }

    // optional .caffe.NetState train_state = 26;
    if (has_train_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->train_state_);
    }

  }
  if (_has_bits_[9 / 32] & 65024u) {
    // optional int32 test_interval = 4 [default = 0];
    if (has_test_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->test_interval());
    }

    // optional bool test_compute_loss = 19 [default = false];
    if (has_test_compute_loss()) {
      total_size += 2 + 1;
    }

    // optional bool test_initialization = 32 [default = true];
    if (has_test_initialization()) {
      total_size += 2 + 1;
    }

    // optional float base_lr = 5;
    if (has_base_lr()) {
      total_size += 1 + 4;
    }

    // optional int32 display = 6;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->display());
    }

    // optional int32 average_loss = 33 [default = 1];
    if (has_average_loss()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->average_loss());
    }

    // optional int32 max_iter = 7;
    if (has_max_iter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_iter());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional int32 iter_size = 36 [default = 1];
    if (has_iter_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iter_size());
    }

    // optional string lr_policy = 8;
    if (has_lr_policy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lr_policy());
    }

    // optional float gamma = 9;
    if (has_gamma()) {
      total_size += 1 + 4;
    }

    // optional float power = 10;
    if (has_power()) {
      total_size += 1 + 4;
    }

    // optional float momentum = 11;
    if (has_momentum()) {
      total_size += 1 + 4;
    }

    // optional float weight_decay = 12;
    if (has_weight_decay()) {
      total_size += 1 + 4;
    }

    // optional string regularization_type = 29 [default = "L2"];
    if (has_regularization_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->regularization_type());
    }

    // optional int32 stepsize = 13;
    if (has_stepsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stepsize());
    }

  }
  if (_has_bits_[25 / 32] & 4261412864u) {
    // optional float clip_gradients = 35 [default = -1];
    if (has_clip_gradients()) {
      total_size += 2 + 4;
    }

    // optional int32 snapshot = 14 [default = 0];
    if (has_snapshot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->snapshot());
    }

    // optional string snapshot_prefix = 15;
    if (has_snapshot_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->snapshot_prefix());
    }

    // optional bool snapshot_diff = 16 [default = false];
    if (has_snapshot_diff()) {
      total_size += 2 + 1;
    }

    // optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
    if (has_snapshot_format()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->snapshot_format());
    }

    // optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
    if (has_solver_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->solver_mode());
    }

    // optional int32 device_id = 18 [default = 0];
    if (has_device_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->device_id());
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional int64 random_seed = 20 [default = -1];
    if (has_random_seed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->random_seed());
    }

    // optional string type = 40 [default = "SGD"];
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional float delta = 31 [default = 1e-008];
    if (has_delta()) {
      total_size += 2 + 4;
    }

    // optional float momentum2 = 39 [default = 0.999];
    if (has_momentum2()) {
      total_size += 2 + 4;
    }

    // optional float rms_decay = 38 [default = 0.99];
    if (has_rms_decay()) {
      total_size += 2 + 4;
    }

    // optional bool debug_info = 23 [default = false];
    if (has_debug_info()) {
      total_size += 2 + 1;
    }

    // optional bool snapshot_after_train = 28 [default = true];
    if (has_snapshot_after_train()) {
      total_size += 2 + 1;
    }

    // optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
    if (has_solver_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->solver_type());
    }

  }
  // optional bool layer_wise_reduce = 41 [default = true];
  if (has_layer_wise_reduce()) {
    total_size += 2 + 1;
  }

  // repeated string test_net = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->test_net_size());
  for (int i = 0; i < this->test_net_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->test_net(i));
  }

  // repeated .caffe.NetParameter test_net_param = 22;
  {
    unsigned int count = this->test_net_param_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->test_net_param(i));
    }
  }

  // repeated .caffe.NetState test_state = 27;
  {
    unsigned int count = this->test_state_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->test_state(i));
    }
  }

  // repeated int32 test_iter = 3;
  {
    size_t data_size = 0;
    unsigned int count = this->test_iter_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->test_iter(i));
    }
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->test_iter_size());
    total_size += data_size;
  }

  // repeated int32 stepvalue = 34;
  {
    size_t data_size = 0;
    unsigned int count = this->stepvalue_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->stepvalue(i));
    }
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->stepvalue_size());
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SolverParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SolverParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SolverParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SolverParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SolverParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SolverParameter)
    UnsafeMergeFrom(*source);
  }
}

void SolverParameter::MergeFrom(const SolverParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SolverParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SolverParameter::UnsafeMergeFrom(const SolverParameter& from) {
  GOOGLE_DCHECK(&from != this);
  test_net_.UnsafeMergeFrom(from.test_net_);
  test_net_param_.MergeFrom(from.test_net_param_);
  test_state_.MergeFrom(from.test_state_);
  test_iter_.UnsafeMergeFrom(from.test_iter_);
  stepvalue_.UnsafeMergeFrom(from.stepvalue_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_net()) {
      set_has_net();
      net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_);
    }
    if (from.has_net_param()) {
      mutable_net_param()->::caffe::NetParameter::MergeFrom(from.net_param());
    }
    if (from.has_train_net()) {
      set_has_train_net();
      train_net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.train_net_);
    }
    if (from.has_train_net_param()) {
      mutable_train_net_param()->::caffe::NetParameter::MergeFrom(from.train_net_param());
    }
    if (from.has_train_state()) {
      mutable_train_state()->::caffe::NetState::MergeFrom(from.train_state());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_test_interval()) {
      set_test_interval(from.test_interval());
    }
    if (from.has_test_compute_loss()) {
      set_test_compute_loss(from.test_compute_loss());
    }
    if (from.has_test_initialization()) {
      set_test_initialization(from.test_initialization());
    }
    if (from.has_base_lr()) {
      set_base_lr(from.base_lr());
    }
    if (from.has_display()) {
      set_display(from.display());
    }
    if (from.has_average_loss()) {
      set_average_loss(from.average_loss());
    }
    if (from.has_max_iter()) {
      set_max_iter(from.max_iter());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_iter_size()) {
      set_iter_size(from.iter_size());
    }
    if (from.has_lr_policy()) {
      set_has_lr_policy();
      lr_policy_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lr_policy_);
    }
    if (from.has_gamma()) {
      set_gamma(from.gamma());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_momentum()) {
      set_momentum(from.momentum());
    }
    if (from.has_weight_decay()) {
      set_weight_decay(from.weight_decay());
    }
    if (from.has_regularization_type()) {
      set_has_regularization_type();
      regularization_type_.AssignWithDefault(_default_regularization_type_, from.regularization_type_);
    }
    if (from.has_stepsize()) {
      set_stepsize(from.stepsize());
    }
  }
  if (from._has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    if (from.has_clip_gradients()) {
      set_clip_gradients(from.clip_gradients());
    }
    if (from.has_snapshot()) {
      set_snapshot(from.snapshot());
    }
    if (from.has_snapshot_prefix()) {
      set_has_snapshot_prefix();
      snapshot_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snapshot_prefix_);
    }
    if (from.has_snapshot_diff()) {
      set_snapshot_diff(from.snapshot_diff());
    }
    if (from.has_snapshot_format()) {
      set_snapshot_format(from.snapshot_format());
    }
    if (from.has_solver_mode()) {
      set_solver_mode(from.solver_mode());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_random_seed()) {
      set_random_seed(from.random_seed());
    }
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(_default_type_, from.type_);
    }
    if (from.has_delta()) {
      set_delta(from.delta());
    }
    if (from.has_momentum2()) {
      set_momentum2(from.momentum2());
    }
    if (from.has_rms_decay()) {
      set_rms_decay(from.rms_decay());
    }
    if (from.has_debug_info()) {
      set_debug_info(from.debug_info());
    }
    if (from.has_snapshot_after_train()) {
      set_snapshot_after_train(from.snapshot_after_train());
    }
    if (from.has_solver_type()) {
      set_solver_type(from.solver_type());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_layer_wise_reduce()) {
      set_layer_wise_reduce(from.layer_wise_reduce());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void SolverParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SolverParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolverParameter::CopyFrom(const SolverParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SolverParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SolverParameter::IsInitialized() const {

  if (has_net_param()) {
    if (!this->net_param_->IsInitialized()) return false;
  }
  if (has_train_net_param()) {
    if (!this->train_net_param_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->test_net_param())) return false;
  return true;
}

void SolverParameter::Swap(SolverParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SolverParameter::InternalSwap(SolverParameter* other) {
  net_.Swap(&other->net_);
  std::swap(net_param_, other->net_param_);
  train_net_.Swap(&other->train_net_);
  test_net_.UnsafeArenaSwap(&other->test_net_);
  std::swap(train_net_param_, other->train_net_param_);
  test_net_param_.UnsafeArenaSwap(&other->test_net_param_);
  std::swap(train_state_, other->train_state_);
  test_state_.UnsafeArenaSwap(&other->test_state_);
  test_iter_.UnsafeArenaSwap(&other->test_iter_);
  std::swap(test_interval_, other->test_interval_);
  std::swap(test_compute_loss_, other->test_compute_loss_);
  std::swap(test_initialization_, other->test_initialization_);
  std::swap(base_lr_, other->base_lr_);
  std::swap(display_, other->display_);
  std::swap(average_loss_, other->average_loss_);
  std::swap(max_iter_, other->max_iter_);
  std::swap(iter_size_, other->iter_size_);
  lr_policy_.Swap(&other->lr_policy_);
  std::swap(gamma_, other->gamma_);
  std::swap(power_, other->power_);
  std::swap(momentum_, other->momentum_);
  std::swap(weight_decay_, other->weight_decay_);
  regularization_type_.Swap(&other->regularization_type_);
  std::swap(stepsize_, other->stepsize_);
  stepvalue_.UnsafeArenaSwap(&other->stepvalue_);
  std::swap(clip_gradients_, other->clip_gradients_);
  std::swap(snapshot_, other->snapshot_);
  snapshot_prefix_.Swap(&other->snapshot_prefix_);
  std::swap(snapshot_diff_, other->snapshot_diff_);
  std::swap(snapshot_format_, other->snapshot_format_);
  std::swap(solver_mode_, other->solver_mode_);
  std::swap(device_id_, other->device_id_);
  std::swap(random_seed_, other->random_seed_);
  type_.Swap(&other->type_);
  std::swap(delta_, other->delta_);
  std::swap(momentum2_, other->momentum2_);
  std::swap(rms_decay_, other->rms_decay_);
  std::swap(debug_info_, other->debug_info_);
  std::swap(snapshot_after_train_, other->snapshot_after_train_);
  std::swap(solver_type_, other->solver_type_);
  std::swap(layer_wise_reduce_, other->layer_wise_reduce_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SolverParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SolverParameter_descriptor_;
  metadata.reflection = SolverParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SolverParameter

// optional string net = 24;
bool SolverParameter::has_net() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SolverParameter::set_has_net() {
  _has_bits_[0] |= 0x00000001u;
}
void SolverParameter::clear_has_net() {
  _has_bits_[0] &= ~0x00000001u;
}
void SolverParameter::clear_net() {
  net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_net();
}
const ::std::string& SolverParameter::net() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.net)
  return net_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SolverParameter::set_net(const ::std::string& value) {
  set_has_net();
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.net)
}
void SolverParameter::set_net(const char* value) {
  set_has_net();
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.net)
}
void SolverParameter::set_net(const char* value, size_t size) {
  set_has_net();
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.net)
}
::std::string* SolverParameter::mutable_net() {
  set_has_net();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.net)
  return net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SolverParameter::release_net() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.net)
  clear_has_net();
  return net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SolverParameter::set_allocated_net(::std::string* net) {
  if (net != NULL) {
    set_has_net();
  } else {
    clear_has_net();
  }
  net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), net);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.net)
}

// optional .caffe.NetParameter net_param = 25;
bool SolverParameter::has_net_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SolverParameter::set_has_net_param() {
  _has_bits_[0] |= 0x00000002u;
}
void SolverParameter::clear_has_net_param() {
  _has_bits_[0] &= ~0x00000002u;
}
void SolverParameter::clear_net_param() {
  if (net_param_ != NULL) net_param_->::caffe::NetParameter::Clear();
  clear_has_net_param();
}
const ::caffe::NetParameter& SolverParameter::net_param() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.net_param)
  return net_param_ != NULL ? *net_param_
                         : *::caffe::NetParameter::internal_default_instance();
}
::caffe::NetParameter* SolverParameter::mutable_net_param() {
  set_has_net_param();
  if (net_param_ == NULL) {
    net_param_ = new ::caffe::NetParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.net_param)
  return net_param_;
}
::caffe::NetParameter* SolverParameter::release_net_param() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.net_param)
  clear_has_net_param();
  ::caffe::NetParameter* temp = net_param_;
  net_param_ = NULL;
  return temp;
}
void SolverParameter::set_allocated_net_param(::caffe::NetParameter* net_param) {
  delete net_param_;
  net_param_ = net_param;
  if (net_param) {
    set_has_net_param();
  } else {
    clear_has_net_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.net_param)
}

// optional string train_net = 1;
bool SolverParameter::has_train_net() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SolverParameter::set_has_train_net() {
  _has_bits_[0] |= 0x00000004u;
}
void SolverParameter::clear_has_train_net() {
  _has_bits_[0] &= ~0x00000004u;
}
void SolverParameter::clear_train_net() {
  train_net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_train_net();
}
const ::std::string& SolverParameter::train_net() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.train_net)
  return train_net_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SolverParameter::set_train_net(const ::std::string& value) {
  set_has_train_net();
  train_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.train_net)
}
void SolverParameter::set_train_net(const char* value) {
  set_has_train_net();
  train_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.train_net)
}
void SolverParameter::set_train_net(const char* value, size_t size) {
  set_has_train_net();
  train_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.train_net)
}
::std::string* SolverParameter::mutable_train_net() {
  set_has_train_net();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.train_net)
  return train_net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SolverParameter::release_train_net() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.train_net)
  clear_has_train_net();
  return train_net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SolverParameter::set_allocated_train_net(::std::string* train_net) {
  if (train_net != NULL) {
    set_has_train_net();
  } else {
    clear_has_train_net();
  }
  train_net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), train_net);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.train_net)
}

// repeated string test_net = 2;
int SolverParameter::test_net_size() const {
  return test_net_.size();
}
void SolverParameter::clear_test_net() {
  test_net_.Clear();
}
const ::std::string& SolverParameter::test_net(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_net)
  return test_net_.Get(index);
}
::std::string* SolverParameter::mutable_test_net(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.test_net)
  return test_net_.Mutable(index);
}
void SolverParameter::set_test_net(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_net)
  test_net_.Mutable(index)->assign(value);
}
void SolverParameter::set_test_net(int index, const char* value) {
  test_net_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.test_net)
}
void SolverParameter::set_test_net(int index, const char* value, size_t size) {
  test_net_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.test_net)
}
::std::string* SolverParameter::add_test_net() {
  // @@protoc_insertion_point(field_add_mutable:caffe.SolverParameter.test_net)
  return test_net_.Add();
}
void SolverParameter::add_test_net(const ::std::string& value) {
  test_net_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.test_net)
}
void SolverParameter::add_test_net(const char* value) {
  test_net_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.SolverParameter.test_net)
}
void SolverParameter::add_test_net(const char* value, size_t size) {
  test_net_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.SolverParameter.test_net)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SolverParameter::test_net() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.test_net)
  return test_net_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SolverParameter::mutable_test_net() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.test_net)
  return &test_net_;
}

// optional .caffe.NetParameter train_net_param = 21;
bool SolverParameter::has_train_net_param() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SolverParameter::set_has_train_net_param() {
  _has_bits_[0] |= 0x00000010u;
}
void SolverParameter::clear_has_train_net_param() {
  _has_bits_[0] &= ~0x00000010u;
}
void SolverParameter::clear_train_net_param() {
  if (train_net_param_ != NULL) train_net_param_->::caffe::NetParameter::Clear();
  clear_has_train_net_param();
}
const ::caffe::NetParameter& SolverParameter::train_net_param() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.train_net_param)
  return train_net_param_ != NULL ? *train_net_param_
                         : *::caffe::NetParameter::internal_default_instance();
}
::caffe::NetParameter* SolverParameter::mutable_train_net_param() {
  set_has_train_net_param();
  if (train_net_param_ == NULL) {
    train_net_param_ = new ::caffe::NetParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.train_net_param)
  return train_net_param_;
}
::caffe::NetParameter* SolverParameter::release_train_net_param() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.train_net_param)
  clear_has_train_net_param();
  ::caffe::NetParameter* temp = train_net_param_;
  train_net_param_ = NULL;
  return temp;
}
void SolverParameter::set_allocated_train_net_param(::caffe::NetParameter* train_net_param) {
  delete train_net_param_;
  train_net_param_ = train_net_param;
  if (train_net_param) {
    set_has_train_net_param();
  } else {
    clear_has_train_net_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.train_net_param)
}

// repeated .caffe.NetParameter test_net_param = 22;
int SolverParameter::test_net_param_size() const {
  return test_net_param_.size();
}
void SolverParameter::clear_test_net_param() {
  test_net_param_.Clear();
}
const ::caffe::NetParameter& SolverParameter::test_net_param(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_net_param)
  return test_net_param_.Get(index);
}
::caffe::NetParameter* SolverParameter::mutable_test_net_param(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.test_net_param)
  return test_net_param_.Mutable(index);
}
::caffe::NetParameter* SolverParameter::add_test_net_param() {
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.test_net_param)
  return test_net_param_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::NetParameter >*
SolverParameter::mutable_test_net_param() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.test_net_param)
  return &test_net_param_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::NetParameter >&
SolverParameter::test_net_param() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.test_net_param)
  return test_net_param_;
}

// optional .caffe.NetState train_state = 26;
bool SolverParameter::has_train_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SolverParameter::set_has_train_state() {
  _has_bits_[0] |= 0x00000040u;
}
void SolverParameter::clear_has_train_state() {
  _has_bits_[0] &= ~0x00000040u;
}
void SolverParameter::clear_train_state() {
  if (train_state_ != NULL) train_state_->::caffe::NetState::Clear();
  clear_has_train_state();
}
const ::caffe::NetState& SolverParameter::train_state() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.train_state)
  return train_state_ != NULL ? *train_state_
                         : *::caffe::NetState::internal_default_instance();
}
::caffe::NetState* SolverParameter::mutable_train_state() {
  set_has_train_state();
  if (train_state_ == NULL) {
    train_state_ = new ::caffe::NetState;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.train_state)
  return train_state_;
}
::caffe::NetState* SolverParameter::release_train_state() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.train_state)
  clear_has_train_state();
  ::caffe::NetState* temp = train_state_;
  train_state_ = NULL;
  return temp;
}
void SolverParameter::set_allocated_train_state(::caffe::NetState* train_state) {
  delete train_state_;
  train_state_ = train_state;
  if (train_state) {
    set_has_train_state();
  } else {
    clear_has_train_state();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.train_state)
}

// repeated .caffe.NetState test_state = 27;
int SolverParameter::test_state_size() const {
  return test_state_.size();
}
void SolverParameter::clear_test_state() {
  test_state_.Clear();
}
const ::caffe::NetState& SolverParameter::test_state(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_state)
  return test_state_.Get(index);
}
::caffe::NetState* SolverParameter::mutable_test_state(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.test_state)
  return test_state_.Mutable(index);
}
::caffe::NetState* SolverParameter::add_test_state() {
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.test_state)
  return test_state_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::NetState >*
SolverParameter::mutable_test_state() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.test_state)
  return &test_state_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::NetState >&
SolverParameter::test_state() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.test_state)
  return test_state_;
}

// repeated int32 test_iter = 3;
int SolverParameter::test_iter_size() const {
  return test_iter_.size();
}
void SolverParameter::clear_test_iter() {
  test_iter_.Clear();
}
::google::protobuf::int32 SolverParameter::test_iter(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_iter)
  return test_iter_.Get(index);
}
void SolverParameter::set_test_iter(int index, ::google::protobuf::int32 value) {
  test_iter_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_iter)
}
void SolverParameter::add_test_iter(::google::protobuf::int32 value) {
  test_iter_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.test_iter)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SolverParameter::test_iter() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.test_iter)
  return test_iter_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SolverParameter::mutable_test_iter() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.test_iter)
  return &test_iter_;
}

// optional int32 test_interval = 4 [default = 0];
bool SolverParameter::has_test_interval() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SolverParameter::set_has_test_interval() {
  _has_bits_[0] |= 0x00000200u;
}
void SolverParameter::clear_has_test_interval() {
  _has_bits_[0] &= ~0x00000200u;
}
void SolverParameter::clear_test_interval() {
  test_interval_ = 0;
  clear_has_test_interval();
}
::google::protobuf::int32 SolverParameter::test_interval() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_interval)
  return test_interval_;
}
void SolverParameter::set_test_interval(::google::protobuf::int32 value) {
  set_has_test_interval();
  test_interval_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_interval)
}

// optional bool test_compute_loss = 19 [default = false];
bool SolverParameter::has_test_compute_loss() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SolverParameter::set_has_test_compute_loss() {
  _has_bits_[0] |= 0x00000400u;
}
void SolverParameter::clear_has_test_compute_loss() {
  _has_bits_[0] &= ~0x00000400u;
}
void SolverParameter::clear_test_compute_loss() {
  test_compute_loss_ = false;
  clear_has_test_compute_loss();
}
bool SolverParameter::test_compute_loss() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_compute_loss)
  return test_compute_loss_;
}
void SolverParameter::set_test_compute_loss(bool value) {
  set_has_test_compute_loss();
  test_compute_loss_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_compute_loss)
}

// optional bool test_initialization = 32 [default = true];
bool SolverParameter::has_test_initialization() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SolverParameter::set_has_test_initialization() {
  _has_bits_[0] |= 0x00000800u;
}
void SolverParameter::clear_has_test_initialization() {
  _has_bits_[0] &= ~0x00000800u;
}
void SolverParameter::clear_test_initialization() {
  test_initialization_ = true;
  clear_has_test_initialization();
}
bool SolverParameter::test_initialization() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_initialization)
  return test_initialization_;
}
void SolverParameter::set_test_initialization(bool value) {
  set_has_test_initialization();
  test_initialization_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_initialization)
}

// optional float base_lr = 5;
bool SolverParameter::has_base_lr() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SolverParameter::set_has_base_lr() {
  _has_bits_[0] |= 0x00001000u;
}
void SolverParameter::clear_has_base_lr() {
  _has_bits_[0] &= ~0x00001000u;
}
void SolverParameter::clear_base_lr() {
  base_lr_ = 0;
  clear_has_base_lr();
}
float SolverParameter::base_lr() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.base_lr)
  return base_lr_;
}
void SolverParameter::set_base_lr(float value) {
  set_has_base_lr();
  base_lr_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.base_lr)
}

// optional int32 display = 6;
bool SolverParameter::has_display() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void SolverParameter::set_has_display() {
  _has_bits_[0] |= 0x00002000u;
}
void SolverParameter::clear_has_display() {
  _has_bits_[0] &= ~0x00002000u;
}
void SolverParameter::clear_display() {
  display_ = 0;
  clear_has_display();
}
::google::protobuf::int32 SolverParameter::display() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.display)
  return display_;
}
void SolverParameter::set_display(::google::protobuf::int32 value) {
  set_has_display();
  display_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.display)
}

// optional int32 average_loss = 33 [default = 1];
bool SolverParameter::has_average_loss() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void SolverParameter::set_has_average_loss() {
  _has_bits_[0] |= 0x00004000u;
}
void SolverParameter::clear_has_average_loss() {
  _has_bits_[0] &= ~0x00004000u;
}
void SolverParameter::clear_average_loss() {
  average_loss_ = 1;
  clear_has_average_loss();
}
::google::protobuf::int32 SolverParameter::average_loss() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.average_loss)
  return average_loss_;
}
void SolverParameter::set_average_loss(::google::protobuf::int32 value) {
  set_has_average_loss();
  average_loss_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.average_loss)
}

// optional int32 max_iter = 7;
bool SolverParameter::has_max_iter() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void SolverParameter::set_has_max_iter() {
  _has_bits_[0] |= 0x00008000u;
}
void SolverParameter::clear_has_max_iter() {
  _has_bits_[0] &= ~0x00008000u;
}
void SolverParameter::clear_max_iter() {
  max_iter_ = 0;
  clear_has_max_iter();
}
::google::protobuf::int32 SolverParameter::max_iter() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.max_iter)
  return max_iter_;
}
void SolverParameter::set_max_iter(::google::protobuf::int32 value) {
  set_has_max_iter();
  max_iter_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.max_iter)
}

// optional int32 iter_size = 36 [default = 1];
bool SolverParameter::has_iter_size() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void SolverParameter::set_has_iter_size() {
  _has_bits_[0] |= 0x00010000u;
}
void SolverParameter::clear_has_iter_size() {
  _has_bits_[0] &= ~0x00010000u;
}
void SolverParameter::clear_iter_size() {
  iter_size_ = 1;
  clear_has_iter_size();
}
::google::protobuf::int32 SolverParameter::iter_size() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.iter_size)
  return iter_size_;
}
void SolverParameter::set_iter_size(::google::protobuf::int32 value) {
  set_has_iter_size();
  iter_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.iter_size)
}

// optional string lr_policy = 8;
bool SolverParameter::has_lr_policy() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void SolverParameter::set_has_lr_policy() {
  _has_bits_[0] |= 0x00020000u;
}
void SolverParameter::clear_has_lr_policy() {
  _has_bits_[0] &= ~0x00020000u;
}
void SolverParameter::clear_lr_policy() {
  lr_policy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lr_policy();
}
const ::std::string& SolverParameter::lr_policy() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.lr_policy)
  return lr_policy_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SolverParameter::set_lr_policy(const ::std::string& value) {
  set_has_lr_policy();
  lr_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.lr_policy)
}
void SolverParameter::set_lr_policy(const char* value) {
  set_has_lr_policy();
  lr_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.lr_policy)
}
void SolverParameter::set_lr_policy(const char* value, size_t size) {
  set_has_lr_policy();
  lr_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.lr_policy)
}
::std::string* SolverParameter::mutable_lr_policy() {
  set_has_lr_policy();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.lr_policy)
  return lr_policy_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SolverParameter::release_lr_policy() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.lr_policy)
  clear_has_lr_policy();
  return lr_policy_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SolverParameter::set_allocated_lr_policy(::std::string* lr_policy) {
  if (lr_policy != NULL) {
    set_has_lr_policy();
  } else {
    clear_has_lr_policy();
  }
  lr_policy_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lr_policy);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.lr_policy)
}

// optional float gamma = 9;
bool SolverParameter::has_gamma() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void SolverParameter::set_has_gamma() {
  _has_bits_[0] |= 0x00040000u;
}
void SolverParameter::clear_has_gamma() {
  _has_bits_[0] &= ~0x00040000u;
}
void SolverParameter::clear_gamma() {
  gamma_ = 0;
  clear_has_gamma();
}
float SolverParameter::gamma() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.gamma)
  return gamma_;
}
void SolverParameter::set_gamma(float value) {
  set_has_gamma();
  gamma_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.gamma)
}

// optional float power = 10;
bool SolverParameter::has_power() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void SolverParameter::set_has_power() {
  _has_bits_[0] |= 0x00080000u;
}
void SolverParameter::clear_has_power() {
  _has_bits_[0] &= ~0x00080000u;
}
void SolverParameter::clear_power() {
  power_ = 0;
  clear_has_power();
}
float SolverParameter::power() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.power)
  return power_;
}
void SolverParameter::set_power(float value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.power)
}

// optional float momentum = 11;
bool SolverParameter::has_momentum() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void SolverParameter::set_has_momentum() {
  _has_bits_[0] |= 0x00100000u;
}
void SolverParameter::clear_has_momentum() {
  _has_bits_[0] &= ~0x00100000u;
}
void SolverParameter::clear_momentum() {
  momentum_ = 0;
  clear_has_momentum();
}
float SolverParameter::momentum() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.momentum)
  return momentum_;
}
void SolverParameter::set_momentum(float value) {
  set_has_momentum();
  momentum_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.momentum)
}

// optional float weight_decay = 12;
bool SolverParameter::has_weight_decay() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void SolverParameter::set_has_weight_decay() {
  _has_bits_[0] |= 0x00200000u;
}
void SolverParameter::clear_has_weight_decay() {
  _has_bits_[0] &= ~0x00200000u;
}
void SolverParameter::clear_weight_decay() {
  weight_decay_ = 0;
  clear_has_weight_decay();
}
float SolverParameter::weight_decay() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.weight_decay)
  return weight_decay_;
}
void SolverParameter::set_weight_decay(float value) {
  set_has_weight_decay();
  weight_decay_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.weight_decay)
}

// optional string regularization_type = 29 [default = "L2"];
bool SolverParameter::has_regularization_type() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void SolverParameter::set_has_regularization_type() {
  _has_bits_[0] |= 0x00400000u;
}
void SolverParameter::clear_has_regularization_type() {
  _has_bits_[0] &= ~0x00400000u;
}
void SolverParameter::clear_regularization_type() {
  regularization_type_.ClearToDefaultNoArena(_default_regularization_type_);
  clear_has_regularization_type();
}
const ::std::string& SolverParameter::regularization_type() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.regularization_type)
  return regularization_type_.GetNoArena(_default_regularization_type_);
}
void SolverParameter::set_regularization_type(const ::std::string& value) {
  set_has_regularization_type();
  regularization_type_.SetNoArena(_default_regularization_type_, value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.regularization_type)
}
void SolverParameter::set_regularization_type(const char* value) {
  set_has_regularization_type();
  regularization_type_.SetNoArena(_default_regularization_type_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.regularization_type)
}
void SolverParameter::set_regularization_type(const char* value, size_t size) {
  set_has_regularization_type();
  regularization_type_.SetNoArena(_default_regularization_type_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.regularization_type)
}
::std::string* SolverParameter::mutable_regularization_type() {
  set_has_regularization_type();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.regularization_type)
  return regularization_type_.MutableNoArena(_default_regularization_type_);
}
::std::string* SolverParameter::release_regularization_type() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.regularization_type)
  clear_has_regularization_type();
  return regularization_type_.ReleaseNoArena(_default_regularization_type_);
}
void SolverParameter::set_allocated_regularization_type(::std::string* regularization_type) {
  if (regularization_type != NULL) {
    set_has_regularization_type();
  } else {
    clear_has_regularization_type();
  }
  regularization_type_.SetAllocatedNoArena(_default_regularization_type_, regularization_type);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.regularization_type)
}

// optional int32 stepsize = 13;
bool SolverParameter::has_stepsize() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void SolverParameter::set_has_stepsize() {
  _has_bits_[0] |= 0x00800000u;
}
void SolverParameter::clear_has_stepsize() {
  _has_bits_[0] &= ~0x00800000u;
}
void SolverParameter::clear_stepsize() {
  stepsize_ = 0;
  clear_has_stepsize();
}
::google::protobuf::int32 SolverParameter::stepsize() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.stepsize)
  return stepsize_;
}
void SolverParameter::set_stepsize(::google::protobuf::int32 value) {
  set_has_stepsize();
  stepsize_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.stepsize)
}

// repeated int32 stepvalue = 34;
int SolverParameter::stepvalue_size() const {
  return stepvalue_.size();
}
void SolverParameter::clear_stepvalue() {
  stepvalue_.Clear();
}
::google::protobuf::int32 SolverParameter::stepvalue(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.stepvalue)
  return stepvalue_.Get(index);
}
void SolverParameter::set_stepvalue(int index, ::google::protobuf::int32 value) {
  stepvalue_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.stepvalue)
}
void SolverParameter::add_stepvalue(::google::protobuf::int32 value) {
  stepvalue_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.stepvalue)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SolverParameter::stepvalue() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.stepvalue)
  return stepvalue_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SolverParameter::mutable_stepvalue() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.stepvalue)
  return &stepvalue_;
}

// optional float clip_gradients = 35 [default = -1];
bool SolverParameter::has_clip_gradients() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void SolverParameter::set_has_clip_gradients() {
  _has_bits_[0] |= 0x02000000u;
}
void SolverParameter::clear_has_clip_gradients() {
  _has_bits_[0] &= ~0x02000000u;
}
void SolverParameter::clear_clip_gradients() {
  clip_gradients_ = -1;
  clear_has_clip_gradients();
}
float SolverParameter::clip_gradients() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.clip_gradients)
  return clip_gradients_;
}
void SolverParameter::set_clip_gradients(float value) {
  set_has_clip_gradients();
  clip_gradients_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.clip_gradients)
}

// optional int32 snapshot = 14 [default = 0];
bool SolverParameter::has_snapshot() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void SolverParameter::set_has_snapshot() {
  _has_bits_[0] |= 0x04000000u;
}
void SolverParameter::clear_has_snapshot() {
  _has_bits_[0] &= ~0x04000000u;
}
void SolverParameter::clear_snapshot() {
  snapshot_ = 0;
  clear_has_snapshot();
}
::google::protobuf::int32 SolverParameter::snapshot() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot)
  return snapshot_;
}
void SolverParameter::set_snapshot(::google::protobuf::int32 value) {
  set_has_snapshot();
  snapshot_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot)
}

// optional string snapshot_prefix = 15;
bool SolverParameter::has_snapshot_prefix() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void SolverParameter::set_has_snapshot_prefix() {
  _has_bits_[0] |= 0x08000000u;
}
void SolverParameter::clear_has_snapshot_prefix() {
  _has_bits_[0] &= ~0x08000000u;
}
void SolverParameter::clear_snapshot_prefix() {
  snapshot_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_snapshot_prefix();
}
const ::std::string& SolverParameter::snapshot_prefix() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot_prefix)
  return snapshot_prefix_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SolverParameter::set_snapshot_prefix(const ::std::string& value) {
  set_has_snapshot_prefix();
  snapshot_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot_prefix)
}
void SolverParameter::set_snapshot_prefix(const char* value) {
  set_has_snapshot_prefix();
  snapshot_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.snapshot_prefix)
}
void SolverParameter::set_snapshot_prefix(const char* value, size_t size) {
  set_has_snapshot_prefix();
  snapshot_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.snapshot_prefix)
}
::std::string* SolverParameter::mutable_snapshot_prefix() {
  set_has_snapshot_prefix();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.snapshot_prefix)
  return snapshot_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SolverParameter::release_snapshot_prefix() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.snapshot_prefix)
  clear_has_snapshot_prefix();
  return snapshot_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SolverParameter::set_allocated_snapshot_prefix(::std::string* snapshot_prefix) {
  if (snapshot_prefix != NULL) {
    set_has_snapshot_prefix();
  } else {
    clear_has_snapshot_prefix();
  }
  snapshot_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snapshot_prefix);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.snapshot_prefix)
}

// optional bool snapshot_diff = 16 [default = false];
bool SolverParameter::has_snapshot_diff() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void SolverParameter::set_has_snapshot_diff() {
  _has_bits_[0] |= 0x10000000u;
}
void SolverParameter::clear_has_snapshot_diff() {
  _has_bits_[0] &= ~0x10000000u;
}
void SolverParameter::clear_snapshot_diff() {
  snapshot_diff_ = false;
  clear_has_snapshot_diff();
}
bool SolverParameter::snapshot_diff() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot_diff)
  return snapshot_diff_;
}
void SolverParameter::set_snapshot_diff(bool value) {
  set_has_snapshot_diff();
  snapshot_diff_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot_diff)
}

// optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
bool SolverParameter::has_snapshot_format() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void SolverParameter::set_has_snapshot_format() {
  _has_bits_[0] |= 0x20000000u;
}
void SolverParameter::clear_has_snapshot_format() {
  _has_bits_[0] &= ~0x20000000u;
}
void SolverParameter::clear_snapshot_format() {
  snapshot_format_ = 1;
  clear_has_snapshot_format();
}
::caffe::SolverParameter_SnapshotFormat SolverParameter::snapshot_format() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot_format)
  return static_cast< ::caffe::SolverParameter_SnapshotFormat >(snapshot_format_);
}
void SolverParameter::set_snapshot_format(::caffe::SolverParameter_SnapshotFormat value) {
  assert(::caffe::SolverParameter_SnapshotFormat_IsValid(value));
  set_has_snapshot_format();
  snapshot_format_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot_format)
}

// optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
bool SolverParameter::has_solver_mode() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void SolverParameter::set_has_solver_mode() {
  _has_bits_[0] |= 0x40000000u;
}
void SolverParameter::clear_has_solver_mode() {
  _has_bits_[0] &= ~0x40000000u;
}
void SolverParameter::clear_solver_mode() {
  solver_mode_ = 1;
  clear_has_solver_mode();
}
::caffe::SolverParameter_SolverMode SolverParameter::solver_mode() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.solver_mode)
  return static_cast< ::caffe::SolverParameter_SolverMode >(solver_mode_);
}
void SolverParameter::set_solver_mode(::caffe::SolverParameter_SolverMode value) {
  assert(::caffe::SolverParameter_SolverMode_IsValid(value));
  set_has_solver_mode();
  solver_mode_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.solver_mode)
}

// optional int32 device_id = 18 [default = 0];
bool SolverParameter::has_device_id() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void SolverParameter::set_has_device_id() {
  _has_bits_[0] |= 0x80000000u;
}
void SolverParameter::clear_has_device_id() {
  _has_bits_[0] &= ~0x80000000u;
}
void SolverParameter::clear_device_id() {
  device_id_ = 0;
  clear_has_device_id();
}
::google::protobuf::int32 SolverParameter::device_id() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.device_id)
  return device_id_;
}
void SolverParameter::set_device_id(::google::protobuf::int32 value) {
  set_has_device_id();
  device_id_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.device_id)
}

// optional int64 random_seed = 20 [default = -1];
bool SolverParameter::has_random_seed() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void SolverParameter::set_has_random_seed() {
  _has_bits_[1] |= 0x00000001u;
}
void SolverParameter::clear_has_random_seed() {
  _has_bits_[1] &= ~0x00000001u;
}
void SolverParameter::clear_random_seed() {
  random_seed_ = GOOGLE_LONGLONG(-1);
  clear_has_random_seed();
}
::google::protobuf::int64 SolverParameter::random_seed() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.random_seed)
  return random_seed_;
}
void SolverParameter::set_random_seed(::google::protobuf::int64 value) {
  set_has_random_seed();
  random_seed_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.random_seed)
}

// optional string type = 40 [default = "SGD"];
bool SolverParameter::has_type() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void SolverParameter::set_has_type() {
  _has_bits_[1] |= 0x00000002u;
}
void SolverParameter::clear_has_type() {
  _has_bits_[1] &= ~0x00000002u;
}
void SolverParameter::clear_type() {
  type_.ClearToDefaultNoArena(_default_type_);
  clear_has_type();
}
const ::std::string& SolverParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.type)
  return type_.GetNoArena(_default_type_);
}
void SolverParameter::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(_default_type_, value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.type)
}
void SolverParameter::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(_default_type_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.type)
}
void SolverParameter::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(_default_type_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.type)
}
::std::string* SolverParameter::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.type)
  return type_.MutableNoArena(_default_type_);
}
::std::string* SolverParameter::release_type() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.type)
  clear_has_type();
  return type_.ReleaseNoArena(_default_type_);
}
void SolverParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(_default_type_, type);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.type)
}

// optional float delta = 31 [default = 1e-008];
bool SolverParameter::has_delta() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void SolverParameter::set_has_delta() {
  _has_bits_[1] |= 0x00000004u;
}
void SolverParameter::clear_has_delta() {
  _has_bits_[1] &= ~0x00000004u;
}
void SolverParameter::clear_delta() {
  delta_ = 1e-008f;
  clear_has_delta();
}
float SolverParameter::delta() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.delta)
  return delta_;
}
void SolverParameter::set_delta(float value) {
  set_has_delta();
  delta_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.delta)
}

// optional float momentum2 = 39 [default = 0.999];
bool SolverParameter::has_momentum2() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void SolverParameter::set_has_momentum2() {
  _has_bits_[1] |= 0x00000008u;
}
void SolverParameter::clear_has_momentum2() {
  _has_bits_[1] &= ~0x00000008u;
}
void SolverParameter::clear_momentum2() {
  momentum2_ = 0.999f;
  clear_has_momentum2();
}
float SolverParameter::momentum2() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.momentum2)
  return momentum2_;
}
void SolverParameter::set_momentum2(float value) {
  set_has_momentum2();
  momentum2_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.momentum2)
}

// optional float rms_decay = 38 [default = 0.99];
bool SolverParameter::has_rms_decay() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void SolverParameter::set_has_rms_decay() {
  _has_bits_[1] |= 0x00000010u;
}
void SolverParameter::clear_has_rms_decay() {
  _has_bits_[1] &= ~0x00000010u;
}
void SolverParameter::clear_rms_decay() {
  rms_decay_ = 0.99f;
  clear_has_rms_decay();
}
float SolverParameter::rms_decay() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.rms_decay)
  return rms_decay_;
}
void SolverParameter::set_rms_decay(float value) {
  set_has_rms_decay();
  rms_decay_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.rms_decay)
}

// optional bool debug_info = 23 [default = false];
bool SolverParameter::has_debug_info() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void SolverParameter::set_has_debug_info() {
  _has_bits_[1] |= 0x00000020u;
}
void SolverParameter::clear_has_debug_info() {
  _has_bits_[1] &= ~0x00000020u;
}
void SolverParameter::clear_debug_info() {
  debug_info_ = false;
  clear_has_debug_info();
}
bool SolverParameter::debug_info() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.debug_info)
  return debug_info_;
}
void SolverParameter::set_debug_info(bool value) {
  set_has_debug_info();
  debug_info_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.debug_info)
}

// optional bool snapshot_after_train = 28 [default = true];
bool SolverParameter::has_snapshot_after_train() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void SolverParameter::set_has_snapshot_after_train() {
  _has_bits_[1] |= 0x00000040u;
}
void SolverParameter::clear_has_snapshot_after_train() {
  _has_bits_[1] &= ~0x00000040u;
}
void SolverParameter::clear_snapshot_after_train() {
  snapshot_after_train_ = true;
  clear_has_snapshot_after_train();
}
bool SolverParameter::snapshot_after_train() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot_after_train)
  return snapshot_after_train_;
}
void SolverParameter::set_snapshot_after_train(bool value) {
  set_has_snapshot_after_train();
  snapshot_after_train_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot_after_train)
}

// optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
bool SolverParameter::has_solver_type() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void SolverParameter::set_has_solver_type() {
  _has_bits_[1] |= 0x00000080u;
}
void SolverParameter::clear_has_solver_type() {
  _has_bits_[1] &= ~0x00000080u;
}
void SolverParameter::clear_solver_type() {
  solver_type_ = 0;
  clear_has_solver_type();
}
::caffe::SolverParameter_SolverType SolverParameter::solver_type() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.solver_type)
  return static_cast< ::caffe::SolverParameter_SolverType >(solver_type_);
}
void SolverParameter::set_solver_type(::caffe::SolverParameter_SolverType value) {
  assert(::caffe::SolverParameter_SolverType_IsValid(value));
  set_has_solver_type();
  solver_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.solver_type)
}

// optional bool layer_wise_reduce = 41 [default = true];
bool SolverParameter::has_layer_wise_reduce() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void SolverParameter::set_has_layer_wise_reduce() {
  _has_bits_[1] |= 0x00000100u;
}
void SolverParameter::clear_has_layer_wise_reduce() {
  _has_bits_[1] &= ~0x00000100u;
}
void SolverParameter::clear_layer_wise_reduce() {
  layer_wise_reduce_ = true;
  clear_has_layer_wise_reduce();
}
bool SolverParameter::layer_wise_reduce() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.layer_wise_reduce)
  return layer_wise_reduce_;
}
void SolverParameter::set_layer_wise_reduce(bool value) {
  set_has_layer_wise_reduce();
  layer_wise_reduce_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.layer_wise_reduce)
}

inline const SolverParameter* SolverParameter::internal_default_instance() {
  return &SolverParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SolverState::kIterFieldNumber;
const int SolverState::kLearnedNetFieldNumber;
const int SolverState::kHistoryFieldNumber;
const int SolverState::kCurrentStepFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SolverState::SolverState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SolverState)
}

void SolverState::InitAsDefaultInstance() {
}

SolverState::SolverState(const SolverState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.SolverState)
}

void SolverState::SharedCtor() {
  _cached_size_ = 0;
  learned_net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&iter_, 0, reinterpret_cast<char*>(&current_step_) -
    reinterpret_cast<char*>(&iter_) + sizeof(current_step_));
}

SolverState::~SolverState() {
  // @@protoc_insertion_point(destructor:caffe.SolverState)
  SharedDtor();
}

void SolverState::SharedDtor() {
  learned_net_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SolverState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SolverState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SolverState_descriptor_;
}

const SolverState& SolverState::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SolverState> SolverState_default_instance_;

SolverState* SolverState::New(::google::protobuf::Arena* arena) const {
  SolverState* n = new SolverState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SolverState::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SolverState)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SolverState, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SolverState*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 11u) {
    ZR_(iter_, current_step_);
    if (has_learned_net()) {
      learned_net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  history_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SolverState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SolverState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iter = 1;
      case 1: {
        if (tag == 8) {
          set_has_iter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iter_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_learned_net;
        break;
      }

      // optional string learned_net = 2;
      case 2: {
        if (tag == 18) {
         parse_learned_net:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_learned_net()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->learned_net().data(), this->learned_net().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverState.learned_net");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_history;
        break;
      }

      // repeated .caffe.BlobProto history = 3;
      case 3: {
        if (tag == 26) {
         parse_history:
          DO_(input->IncrementRecursionDepth());
         parse_loop_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_history()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_history;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(32)) goto parse_current_step;
        break;
      }

      // optional int32 current_step = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_current_step:
          set_has_current_step();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_step_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SolverState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SolverState)
  return false;
#undef DO_
}

void SolverState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SolverState)
  // optional int32 iter = 1;
  if (has_iter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iter(), output);
  }

  // optional string learned_net = 2;
  if (has_learned_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->learned_net().data(), this->learned_net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverState.learned_net");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->learned_net(), output);
  }

  // repeated .caffe.BlobProto history = 3;
  for (unsigned int i = 0, n = this->history_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->history(i), output);
  }

  // optional int32 current_step = 4 [default = 0];
  if (has_current_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->current_step(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SolverState)
}

::google::protobuf::uint8* SolverState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SolverState)
  // optional int32 iter = 1;
  if (has_iter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iter(), target);
  }

  // optional string learned_net = 2;
  if (has_learned_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->learned_net().data(), this->learned_net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverState.learned_net");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->learned_net(), target);
  }

  // repeated .caffe.BlobProto history = 3;
  for (unsigned int i = 0, n = this->history_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->history(i), false, target);
  }

  // optional int32 current_step = 4 [default = 0];
  if (has_current_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->current_step(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SolverState)
  return target;
}

size_t SolverState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SolverState)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 11u) {
    // optional int32 iter = 1;
    if (has_iter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iter());
    }

    // optional string learned_net = 2;
    if (has_learned_net()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->learned_net());
    }

    // optional int32 current_step = 4 [default = 0];
    if (has_current_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_step());
    }

  }
  // repeated .caffe.BlobProto history = 3;
  {
    unsigned int count = this->history_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->history(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SolverState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SolverState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SolverState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SolverState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SolverState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SolverState)
    UnsafeMergeFrom(*source);
  }
}

void SolverState::MergeFrom(const SolverState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SolverState)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SolverState::UnsafeMergeFrom(const SolverState& from) {
  GOOGLE_DCHECK(&from != this);
  history_.MergeFrom(from.history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iter()) {
      set_iter(from.iter());
    }
    if (from.has_learned_net()) {
      set_has_learned_net();
      learned_net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.learned_net_);
    }
    if (from.has_current_step()) {
      set_current_step(from.current_step());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void SolverState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SolverState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolverState::CopyFrom(const SolverState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SolverState)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SolverState::IsInitialized() const {

  return true;
}

void SolverState::Swap(SolverState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SolverState::InternalSwap(SolverState* other) {
  std::swap(iter_, other->iter_);
  learned_net_.Swap(&other->learned_net_);
  history_.UnsafeArenaSwap(&other->history_);
  std::swap(current_step_, other->current_step_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SolverState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SolverState_descriptor_;
  metadata.reflection = SolverState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SolverState

// optional int32 iter = 1;
bool SolverState::has_iter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SolverState::set_has_iter() {
  _has_bits_[0] |= 0x00000001u;
}
void SolverState::clear_has_iter() {
  _has_bits_[0] &= ~0x00000001u;
}
void SolverState::clear_iter() {
  iter_ = 0;
  clear_has_iter();
}
::google::protobuf::int32 SolverState::iter() const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.iter)
  return iter_;
}
void SolverState::set_iter(::google::protobuf::int32 value) {
  set_has_iter();
  iter_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverState.iter)
}

// optional string learned_net = 2;
bool SolverState::has_learned_net() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SolverState::set_has_learned_net() {
  _has_bits_[0] |= 0x00000002u;
}
void SolverState::clear_has_learned_net() {
  _has_bits_[0] &= ~0x00000002u;
}
void SolverState::clear_learned_net() {
  learned_net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_learned_net();
}
const ::std::string& SolverState::learned_net() const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.learned_net)
  return learned_net_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SolverState::set_learned_net(const ::std::string& value) {
  set_has_learned_net();
  learned_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverState.learned_net)
}
void SolverState::set_learned_net(const char* value) {
  set_has_learned_net();
  learned_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverState.learned_net)
}
void SolverState::set_learned_net(const char* value, size_t size) {
  set_has_learned_net();
  learned_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverState.learned_net)
}
::std::string* SolverState::mutable_learned_net() {
  set_has_learned_net();
  // @@protoc_insertion_point(field_mutable:caffe.SolverState.learned_net)
  return learned_net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SolverState::release_learned_net() {
  // @@protoc_insertion_point(field_release:caffe.SolverState.learned_net)
  clear_has_learned_net();
  return learned_net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SolverState::set_allocated_learned_net(::std::string* learned_net) {
  if (learned_net != NULL) {
    set_has_learned_net();
  } else {
    clear_has_learned_net();
  }
  learned_net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), learned_net);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverState.learned_net)
}

// repeated .caffe.BlobProto history = 3;
int SolverState::history_size() const {
  return history_.size();
}
void SolverState::clear_history() {
  history_.Clear();
}
const ::caffe::BlobProto& SolverState::history(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.history)
  return history_.Get(index);
}
::caffe::BlobProto* SolverState::mutable_history(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverState.history)
  return history_.Mutable(index);
}
::caffe::BlobProto* SolverState::add_history() {
  // @@protoc_insertion_point(field_add:caffe.SolverState.history)
  return history_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
SolverState::mutable_history() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverState.history)
  return &history_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
SolverState::history() const {
  // @@protoc_insertion_point(field_list:caffe.SolverState.history)
  return history_;
}

// optional int32 current_step = 4 [default = 0];
bool SolverState::has_current_step() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SolverState::set_has_current_step() {
  _has_bits_[0] |= 0x00000008u;
}
void SolverState::clear_has_current_step() {
  _has_bits_[0] &= ~0x00000008u;
}
void SolverState::clear_current_step() {
  current_step_ = 0;
  clear_has_current_step();
}
::google::protobuf::int32 SolverState::current_step() const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.current_step)
  return current_step_;
}
void SolverState::set_current_step(::google::protobuf::int32 value) {
  set_has_current_step();
  current_step_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverState.current_step)
}

inline const SolverState* SolverState::internal_default_instance() {
  return &SolverState_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetState::kPhaseFieldNumber;
const int NetState::kLevelFieldNumber;
const int NetState::kStageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetState::NetState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.NetState)
}

void NetState::InitAsDefaultInstance() {
}

NetState::NetState(const NetState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.NetState)
}

void NetState::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  phase_ = 1;
}

NetState::~NetState() {
  // @@protoc_insertion_point(destructor:caffe.NetState)
  SharedDtor();
}

void NetState::SharedDtor() {
}

void NetState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetState_descriptor_;
}

const NetState& NetState::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NetState> NetState_default_instance_;

NetState* NetState::New(::google::protobuf::Arena* arena) const {
  NetState* n = new NetState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetState::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.NetState)
  if (_has_bits_[0 / 32] & 3u) {
    phase_ = 1;
    level_ = 0;
  }
  stage_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NetState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.NetState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.Phase phase = 1 [default = TEST];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::Phase_IsValid(value)) {
            set_phase(static_cast< ::caffe::Phase >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_level:
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_stage;
        break;
      }

      // repeated string stage = 3;
      case 3: {
        if (tag == 26) {
         parse_stage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_stage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stage(this->stage_size() - 1).data(),
            this->stage(this->stage_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.NetState.stage");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_stage;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.NetState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.NetState)
  return false;
#undef DO_
}

void NetState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.NetState)
  // optional .caffe.Phase phase = 1 [default = TEST];
  if (has_phase()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->phase(), output);
  }

  // optional int32 level = 2 [default = 0];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // repeated string stage = 3;
  for (int i = 0; i < this->stage_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stage(i).data(), this->stage(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetState.stage");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->stage(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.NetState)
}

::google::protobuf::uint8* NetState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.NetState)
  // optional .caffe.Phase phase = 1 [default = TEST];
  if (has_phase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->phase(), target);
  }

  // optional int32 level = 2 [default = 0];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // repeated string stage = 3;
  for (int i = 0; i < this->stage_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stage(i).data(), this->stage(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetState.stage");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->stage(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.NetState)
  return target;
}

size_t NetState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.NetState)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .caffe.Phase phase = 1 [default = TEST];
    if (has_phase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->phase());
    }

    // optional int32 level = 2 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  // repeated string stage = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->stage_size());
  for (int i = 0; i < this->stage_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->stage(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.NetState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NetState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.NetState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.NetState)
    UnsafeMergeFrom(*source);
  }
}

void NetState::MergeFrom(const NetState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.NetState)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NetState::UnsafeMergeFrom(const NetState& from) {
  GOOGLE_DCHECK(&from != this);
  stage_.UnsafeMergeFrom(from.stage_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phase()) {
      set_phase(from.phase());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void NetState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.NetState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetState::CopyFrom(const NetState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.NetState)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NetState::IsInitialized() const {

  return true;
}

void NetState::Swap(NetState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetState::InternalSwap(NetState* other) {
  std::swap(phase_, other->phase_);
  std::swap(level_, other->level_);
  stage_.UnsafeArenaSwap(&other->stage_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetState_descriptor_;
  metadata.reflection = NetState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetState

// optional .caffe.Phase phase = 1 [default = TEST];
bool NetState::has_phase() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetState::set_has_phase() {
  _has_bits_[0] |= 0x00000001u;
}
void NetState::clear_has_phase() {
  _has_bits_[0] &= ~0x00000001u;
}
void NetState::clear_phase() {
  phase_ = 1;
  clear_has_phase();
}
::caffe::Phase NetState::phase() const {
  // @@protoc_insertion_point(field_get:caffe.NetState.phase)
  return static_cast< ::caffe::Phase >(phase_);
}
void NetState::set_phase(::caffe::Phase value) {
  assert(::caffe::Phase_IsValid(value));
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetState.phase)
}

// optional int32 level = 2 [default = 0];
bool NetState::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NetState::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
void NetState::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
void NetState::clear_level() {
  level_ = 0;
  clear_has_level();
}
::google::protobuf::int32 NetState::level() const {
  // @@protoc_insertion_point(field_get:caffe.NetState.level)
  return level_;
}
void NetState::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetState.level)
}

// repeated string stage = 3;
int NetState::stage_size() const {
  return stage_.size();
}
void NetState::clear_stage() {
  stage_.Clear();
}
const ::std::string& NetState::stage(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetState.stage)
  return stage_.Get(index);
}
::std::string* NetState::mutable_stage(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetState.stage)
  return stage_.Mutable(index);
}
void NetState::set_stage(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetState.stage)
  stage_.Mutable(index)->assign(value);
}
void NetState::set_stage(int index, const char* value) {
  stage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetState.stage)
}
void NetState::set_stage(int index, const char* value, size_t size) {
  stage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetState.stage)
}
::std::string* NetState::add_stage() {
  // @@protoc_insertion_point(field_add_mutable:caffe.NetState.stage)
  return stage_.Add();
}
void NetState::add_stage(const ::std::string& value) {
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetState.stage)
}
void NetState::add_stage(const char* value) {
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetState.stage)
}
void NetState::add_stage(const char* value, size_t size) {
  stage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetState.stage)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetState::stage() const {
  // @@protoc_insertion_point(field_list:caffe.NetState.stage)
  return stage_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
NetState::mutable_stage() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetState.stage)
  return &stage_;
}

inline const NetState* NetState::internal_default_instance() {
  return &NetState_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetStateRule::kPhaseFieldNumber;
const int NetStateRule::kMinLevelFieldNumber;
const int NetStateRule::kMaxLevelFieldNumber;
const int NetStateRule::kStageFieldNumber;
const int NetStateRule::kNotStageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetStateRule::NetStateRule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.NetStateRule)
}

void NetStateRule::InitAsDefaultInstance() {
}

NetStateRule::NetStateRule(const NetStateRule& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.NetStateRule)
}

void NetStateRule::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&phase_, 0, reinterpret_cast<char*>(&max_level_) -
    reinterpret_cast<char*>(&phase_) + sizeof(max_level_));
}

NetStateRule::~NetStateRule() {
  // @@protoc_insertion_point(destructor:caffe.NetStateRule)
  SharedDtor();
}

void NetStateRule::SharedDtor() {
}

void NetStateRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetStateRule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetStateRule_descriptor_;
}

const NetStateRule& NetStateRule::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NetStateRule> NetStateRule_default_instance_;

NetStateRule* NetStateRule::New(::google::protobuf::Arena* arena) const {
  NetStateRule* n = new NetStateRule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetStateRule::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.NetStateRule)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NetStateRule, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NetStateRule*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(phase_, max_level_);

#undef ZR_HELPER_
#undef ZR_

  stage_.Clear();
  not_stage_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NetStateRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.NetStateRule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.Phase phase = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::Phase_IsValid(value)) {
            set_phase(static_cast< ::caffe::Phase >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_min_level;
        break;
      }

      // optional int32 min_level = 2;
      case 2: {
        if (tag == 16) {
         parse_min_level:
          set_has_min_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_level_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_max_level;
        break;
      }

      // optional int32 max_level = 3;
      case 3: {
        if (tag == 24) {
         parse_max_level:
          set_has_max_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_level_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_stage;
        break;
      }

      // repeated string stage = 4;
      case 4: {
        if (tag == 34) {
         parse_stage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_stage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stage(this->stage_size() - 1).data(),
            this->stage(this->stage_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.NetStateRule.stage");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_stage;
        if (input->ExpectTag(42)) goto parse_not_stage;
        break;
      }

      // repeated string not_stage = 5;
      case 5: {
        if (tag == 42) {
         parse_not_stage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_not_stage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->not_stage(this->not_stage_size() - 1).data(),
            this->not_stage(this->not_stage_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.NetStateRule.not_stage");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_not_stage;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.NetStateRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.NetStateRule)
  return false;
#undef DO_
}

void NetStateRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.NetStateRule)
  // optional .caffe.Phase phase = 1;
  if (has_phase()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->phase(), output);
  }

  // optional int32 min_level = 2;
  if (has_min_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->min_level(), output);
  }

  // optional int32 max_level = 3;
  if (has_max_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_level(), output);
  }

  // repeated string stage = 4;
  for (int i = 0; i < this->stage_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stage(i).data(), this->stage(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetStateRule.stage");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->stage(i), output);
  }

  // repeated string not_stage = 5;
  for (int i = 0; i < this->not_stage_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->not_stage(i).data(), this->not_stage(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetStateRule.not_stage");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->not_stage(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.NetStateRule)
}

::google::protobuf::uint8* NetStateRule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.NetStateRule)
  // optional .caffe.Phase phase = 1;
  if (has_phase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->phase(), target);
  }

  // optional int32 min_level = 2;
  if (has_min_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->min_level(), target);
  }

  // optional int32 max_level = 3;
  if (has_max_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_level(), target);
  }

  // repeated string stage = 4;
  for (int i = 0; i < this->stage_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stage(i).data(), this->stage(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetStateRule.stage");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->stage(i), target);
  }

  // repeated string not_stage = 5;
  for (int i = 0; i < this->not_stage_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->not_stage(i).data(), this->not_stage(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetStateRule.not_stage");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->not_stage(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.NetStateRule)
  return target;
}

size_t NetStateRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.NetStateRule)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .caffe.Phase phase = 1;
    if (has_phase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->phase());
    }

    // optional int32 min_level = 2;
    if (has_min_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_level());
    }

    // optional int32 max_level = 3;
    if (has_max_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_level());
    }

  }
  // repeated string stage = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->stage_size());
  for (int i = 0; i < this->stage_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->stage(i));
  }

  // repeated string not_stage = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->not_stage_size());
  for (int i = 0; i < this->not_stage_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->not_stage(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetStateRule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.NetStateRule)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NetStateRule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetStateRule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.NetStateRule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.NetStateRule)
    UnsafeMergeFrom(*source);
  }
}

void NetStateRule::MergeFrom(const NetStateRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.NetStateRule)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NetStateRule::UnsafeMergeFrom(const NetStateRule& from) {
  GOOGLE_DCHECK(&from != this);
  stage_.UnsafeMergeFrom(from.stage_);
  not_stage_.UnsafeMergeFrom(from.not_stage_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phase()) {
      set_phase(from.phase());
    }
    if (from.has_min_level()) {
      set_min_level(from.min_level());
    }
    if (from.has_max_level()) {
      set_max_level(from.max_level());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void NetStateRule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.NetStateRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetStateRule::CopyFrom(const NetStateRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.NetStateRule)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NetStateRule::IsInitialized() const {

  return true;
}

void NetStateRule::Swap(NetStateRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetStateRule::InternalSwap(NetStateRule* other) {
  std::swap(phase_, other->phase_);
  std::swap(min_level_, other->min_level_);
  std::swap(max_level_, other->max_level_);
  stage_.UnsafeArenaSwap(&other->stage_);
  not_stage_.UnsafeArenaSwap(&other->not_stage_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetStateRule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetStateRule_descriptor_;
  metadata.reflection = NetStateRule_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetStateRule

// optional .caffe.Phase phase = 1;
bool NetStateRule::has_phase() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetStateRule::set_has_phase() {
  _has_bits_[0] |= 0x00000001u;
}
void NetStateRule::clear_has_phase() {
  _has_bits_[0] &= ~0x00000001u;
}
void NetStateRule::clear_phase() {
  phase_ = 0;
  clear_has_phase();
}
::caffe::Phase NetStateRule::phase() const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.phase)
  return static_cast< ::caffe::Phase >(phase_);
}
void NetStateRule::set_phase(::caffe::Phase value) {
  assert(::caffe::Phase_IsValid(value));
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.phase)
}

// optional int32 min_level = 2;
bool NetStateRule::has_min_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NetStateRule::set_has_min_level() {
  _has_bits_[0] |= 0x00000002u;
}
void NetStateRule::clear_has_min_level() {
  _has_bits_[0] &= ~0x00000002u;
}
void NetStateRule::clear_min_level() {
  min_level_ = 0;
  clear_has_min_level();
}
::google::protobuf::int32 NetStateRule::min_level() const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.min_level)
  return min_level_;
}
void NetStateRule::set_min_level(::google::protobuf::int32 value) {
  set_has_min_level();
  min_level_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.min_level)
}

// optional int32 max_level = 3;
bool NetStateRule::has_max_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NetStateRule::set_has_max_level() {
  _has_bits_[0] |= 0x00000004u;
}
void NetStateRule::clear_has_max_level() {
  _has_bits_[0] &= ~0x00000004u;
}
void NetStateRule::clear_max_level() {
  max_level_ = 0;
  clear_has_max_level();
}
::google::protobuf::int32 NetStateRule::max_level() const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.max_level)
  return max_level_;
}
void NetStateRule::set_max_level(::google::protobuf::int32 value) {
  set_has_max_level();
  max_level_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.max_level)
}

// repeated string stage = 4;
int NetStateRule::stage_size() const {
  return stage_.size();
}
void NetStateRule::clear_stage() {
  stage_.Clear();
}
const ::std::string& NetStateRule::stage(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.stage)
  return stage_.Get(index);
}
::std::string* NetStateRule::mutable_stage(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetStateRule.stage)
  return stage_.Mutable(index);
}
void NetStateRule::set_stage(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.stage)
  stage_.Mutable(index)->assign(value);
}
void NetStateRule::set_stage(int index, const char* value) {
  stage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetStateRule.stage)
}
void NetStateRule::set_stage(int index, const char* value, size_t size) {
  stage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetStateRule.stage)
}
::std::string* NetStateRule::add_stage() {
  // @@protoc_insertion_point(field_add_mutable:caffe.NetStateRule.stage)
  return stage_.Add();
}
void NetStateRule::add_stage(const ::std::string& value) {
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetStateRule.stage)
}
void NetStateRule::add_stage(const char* value) {
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetStateRule.stage)
}
void NetStateRule::add_stage(const char* value, size_t size) {
  stage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetStateRule.stage)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetStateRule::stage() const {
  // @@protoc_insertion_point(field_list:caffe.NetStateRule.stage)
  return stage_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
NetStateRule::mutable_stage() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetStateRule.stage)
  return &stage_;
}

// repeated string not_stage = 5;
int NetStateRule::not_stage_size() const {
  return not_stage_.size();
}
void NetStateRule::clear_not_stage() {
  not_stage_.Clear();
}
const ::std::string& NetStateRule::not_stage(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.not_stage)
  return not_stage_.Get(index);
}
::std::string* NetStateRule::mutable_not_stage(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetStateRule.not_stage)
  return not_stage_.Mutable(index);
}
void NetStateRule::set_not_stage(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.not_stage)
  not_stage_.Mutable(index)->assign(value);
}
void NetStateRule::set_not_stage(int index, const char* value) {
  not_stage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetStateRule.not_stage)
}
void NetStateRule::set_not_stage(int index, const char* value, size_t size) {
  not_stage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetStateRule.not_stage)
}
::std::string* NetStateRule::add_not_stage() {
  // @@protoc_insertion_point(field_add_mutable:caffe.NetStateRule.not_stage)
  return not_stage_.Add();
}
void NetStateRule::add_not_stage(const ::std::string& value) {
  not_stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetStateRule.not_stage)
}
void NetStateRule::add_not_stage(const char* value) {
  not_stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetStateRule.not_stage)
}
void NetStateRule::add_not_stage(const char* value, size_t size) {
  not_stage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetStateRule.not_stage)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetStateRule::not_stage() const {
  // @@protoc_insertion_point(field_list:caffe.NetStateRule.not_stage)
  return not_stage_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
NetStateRule::mutable_not_stage() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetStateRule.not_stage)
  return &not_stage_;
}

inline const NetStateRule* NetStateRule::internal_default_instance() {
  return &NetStateRule_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ParamSpec_DimCheckMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParamSpec_DimCheckMode_descriptor_;
}
bool ParamSpec_DimCheckMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ParamSpec_DimCheckMode ParamSpec::STRICT;
const ParamSpec_DimCheckMode ParamSpec::PERMISSIVE;
const ParamSpec_DimCheckMode ParamSpec::DimCheckMode_MIN;
const ParamSpec_DimCheckMode ParamSpec::DimCheckMode_MAX;
const int ParamSpec::DimCheckMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParamSpec::kNameFieldNumber;
const int ParamSpec::kShareModeFieldNumber;
const int ParamSpec::kLrMultFieldNumber;
const int ParamSpec::kDecayMultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParamSpec::ParamSpec()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ParamSpec)
}

void ParamSpec::InitAsDefaultInstance() {
}

ParamSpec::ParamSpec(const ParamSpec& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ParamSpec)
}

void ParamSpec::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  share_mode_ = 0;
  lr_mult_ = 1;
  decay_mult_ = 1;
}

ParamSpec::~ParamSpec() {
  // @@protoc_insertion_point(destructor:caffe.ParamSpec)
  SharedDtor();
}

void ParamSpec::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ParamSpec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParamSpec::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParamSpec_descriptor_;
}

const ParamSpec& ParamSpec::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ParamSpec> ParamSpec_default_instance_;

ParamSpec* ParamSpec::New(::google::protobuf::Arena* arena) const {
  ParamSpec* n = new ParamSpec;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ParamSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ParamSpec)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    share_mode_ = 0;
    lr_mult_ = 1;
    decay_mult_ = 1;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ParamSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ParamSpec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.ParamSpec.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_share_mode;
        break;
      }

      // optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
      case 2: {
        if (tag == 16) {
         parse_share_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::ParamSpec_DimCheckMode_IsValid(value)) {
            set_share_mode(static_cast< ::caffe::ParamSpec_DimCheckMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_lr_mult;
        break;
      }

      // optional float lr_mult = 3 [default = 1];
      case 3: {
        if (tag == 29) {
         parse_lr_mult:
          set_has_lr_mult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lr_mult_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_decay_mult;
        break;
      }

      // optional float decay_mult = 4 [default = 1];
      case 4: {
        if (tag == 37) {
         parse_decay_mult:
          set_has_decay_mult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &decay_mult_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ParamSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ParamSpec)
  return false;
#undef DO_
}

void ParamSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ParamSpec)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ParamSpec.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
  if (has_share_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->share_mode(), output);
  }

  // optional float lr_mult = 3 [default = 1];
  if (has_lr_mult()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->lr_mult(), output);
  }

  // optional float decay_mult = 4 [default = 1];
  if (has_decay_mult()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->decay_mult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ParamSpec)
}

::google::protobuf::uint8* ParamSpec::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ParamSpec)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ParamSpec.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
  if (has_share_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->share_mode(), target);
  }

  // optional float lr_mult = 3 [default = 1];
  if (has_lr_mult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->lr_mult(), target);
  }

  // optional float decay_mult = 4 [default = 1];
  if (has_decay_mult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->decay_mult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ParamSpec)
  return target;
}

size_t ParamSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ParamSpec)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
    if (has_share_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->share_mode());
    }

    // optional float lr_mult = 3 [default = 1];
    if (has_lr_mult()) {
      total_size += 1 + 4;
    }

    // optional float decay_mult = 4 [default = 1];
    if (has_decay_mult()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParamSpec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ParamSpec)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ParamSpec* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ParamSpec>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ParamSpec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ParamSpec)
    UnsafeMergeFrom(*source);
  }
}

void ParamSpec::MergeFrom(const ParamSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ParamSpec)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ParamSpec::UnsafeMergeFrom(const ParamSpec& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_share_mode()) {
      set_share_mode(from.share_mode());
    }
    if (from.has_lr_mult()) {
      set_lr_mult(from.lr_mult());
    }
    if (from.has_decay_mult()) {
      set_decay_mult(from.decay_mult());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ParamSpec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ParamSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParamSpec::CopyFrom(const ParamSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ParamSpec)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ParamSpec::IsInitialized() const {

  return true;
}

void ParamSpec::Swap(ParamSpec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParamSpec::InternalSwap(ParamSpec* other) {
  name_.Swap(&other->name_);
  std::swap(share_mode_, other->share_mode_);
  std::swap(lr_mult_, other->lr_mult_);
  std::swap(decay_mult_, other->decay_mult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParamSpec::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParamSpec_descriptor_;
  metadata.reflection = ParamSpec_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ParamSpec

// optional string name = 1;
bool ParamSpec::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ParamSpec::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ParamSpec::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ParamSpec::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& ParamSpec::name() const {
  // @@protoc_insertion_point(field_get:caffe.ParamSpec.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ParamSpec::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ParamSpec.name)
}
void ParamSpec::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ParamSpec.name)
}
void ParamSpec::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ParamSpec.name)
}
::std::string* ParamSpec::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.ParamSpec.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ParamSpec::release_name() {
  // @@protoc_insertion_point(field_release:caffe.ParamSpec.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ParamSpec::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.ParamSpec.name)
}

// optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
bool ParamSpec::has_share_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ParamSpec::set_has_share_mode() {
  _has_bits_[0] |= 0x00000002u;
}
void ParamSpec::clear_has_share_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
void ParamSpec::clear_share_mode() {
  share_mode_ = 0;
  clear_has_share_mode();
}
::caffe::ParamSpec_DimCheckMode ParamSpec::share_mode() const {
  // @@protoc_insertion_point(field_get:caffe.ParamSpec.share_mode)
  return static_cast< ::caffe::ParamSpec_DimCheckMode >(share_mode_);
}
void ParamSpec::set_share_mode(::caffe::ParamSpec_DimCheckMode value) {
  assert(::caffe::ParamSpec_DimCheckMode_IsValid(value));
  set_has_share_mode();
  share_mode_ = value;
  // @@protoc_insertion_point(field_set:caffe.ParamSpec.share_mode)
}

// optional float lr_mult = 3 [default = 1];
bool ParamSpec::has_lr_mult() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ParamSpec::set_has_lr_mult() {
  _has_bits_[0] |= 0x00000004u;
}
void ParamSpec::clear_has_lr_mult() {
  _has_bits_[0] &= ~0x00000004u;
}
void ParamSpec::clear_lr_mult() {
  lr_mult_ = 1;
  clear_has_lr_mult();
}
float ParamSpec::lr_mult() const {
  // @@protoc_insertion_point(field_get:caffe.ParamSpec.lr_mult)
  return lr_mult_;
}
void ParamSpec::set_lr_mult(float value) {
  set_has_lr_mult();
  lr_mult_ = value;
  // @@protoc_insertion_point(field_set:caffe.ParamSpec.lr_mult)
}

// optional float decay_mult = 4 [default = 1];
bool ParamSpec::has_decay_mult() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ParamSpec::set_has_decay_mult() {
  _has_bits_[0] |= 0x00000008u;
}
void ParamSpec::clear_has_decay_mult() {
  _has_bits_[0] &= ~0x00000008u;
}
void ParamSpec::clear_decay_mult() {
  decay_mult_ = 1;
  clear_has_decay_mult();
}
float ParamSpec::decay_mult() const {
  // @@protoc_insertion_point(field_get:caffe.ParamSpec.decay_mult)
  return decay_mult_;
}
void ParamSpec::set_decay_mult(float value) {
  set_has_decay_mult();
  decay_mult_ = value;
  // @@protoc_insertion_point(field_set:caffe.ParamSpec.decay_mult)
}

inline const ParamSpec* ParamSpec::internal_default_instance() {
  return &ParamSpec_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LayerParameter::kNameFieldNumber;
const int LayerParameter::kTypeFieldNumber;
const int LayerParameter::kBottomFieldNumber;
const int LayerParameter::kTopFieldNumber;
const int LayerParameter::kPhaseFieldNumber;
const int LayerParameter::kLossWeightFieldNumber;
const int LayerParameter::kParamFieldNumber;
const int LayerParameter::kBlobsFieldNumber;
const int LayerParameter::kPropagateDownFieldNumber;
const int LayerParameter::kIncludeFieldNumber;
const int LayerParameter::kExcludeFieldNumber;
const int LayerParameter::kTransformParamFieldNumber;
const int LayerParameter::kLossParamFieldNumber;
const int LayerParameter::kAccuracyParamFieldNumber;
const int LayerParameter::kArgmaxParamFieldNumber;
const int LayerParameter::kBatchNormParamFieldNumber;
const int LayerParameter::kBiasParamFieldNumber;
const int LayerParameter::kConcatParamFieldNumber;
const int LayerParameter::kContrastiveLossParamFieldNumber;
const int LayerParameter::kConvolutionParamFieldNumber;
const int LayerParameter::kCropParamFieldNumber;
const int LayerParameter::kDataParamFieldNumber;
const int LayerParameter::kDropoutParamFieldNumber;
const int LayerParameter::kDummyDataParamFieldNumber;
const int LayerParameter::kEltwiseParamFieldNumber;
const int LayerParameter::kEluParamFieldNumber;
const int LayerParameter::kEmbedParamFieldNumber;
const int LayerParameter::kExpParamFieldNumber;
const int LayerParameter::kFlattenParamFieldNumber;
const int LayerParameter::kHdf5DataParamFieldNumber;
const int LayerParameter::kHdf5OutputParamFieldNumber;
const int LayerParameter::kHingeLossParamFieldNumber;
const int LayerParameter::kImageDataParamFieldNumber;
const int LayerParameter::kInfogainLossParamFieldNumber;
const int LayerParameter::kInnerProductParamFieldNumber;
const int LayerParameter::kInputParamFieldNumber;
const int LayerParameter::kLogParamFieldNumber;
const int LayerParameter::kLrnParamFieldNumber;
const int LayerParameter::kMemoryDataParamFieldNumber;
const int LayerParameter::kMvnParamFieldNumber;
const int LayerParameter::kParameterParamFieldNumber;
const int LayerParameter::kPoolingParamFieldNumber;
const int LayerParameter::kPowerParamFieldNumber;
const int LayerParameter::kPreluParamFieldNumber;
const int LayerParameter::kPythonParamFieldNumber;
const int LayerParameter::kRecurrentParamFieldNumber;
const int LayerParameter::kReductionParamFieldNumber;
const int LayerParameter::kReluParamFieldNumber;
const int LayerParameter::kReshapeParamFieldNumber;
const int LayerParameter::kScaleParamFieldNumber;
const int LayerParameter::kSigmoidParamFieldNumber;
const int LayerParameter::kSoftmaxParamFieldNumber;
const int LayerParameter::kSppParamFieldNumber;
const int LayerParameter::kSliceParamFieldNumber;
const int LayerParameter::kTanhParamFieldNumber;
const int LayerParameter::kThresholdParamFieldNumber;
const int LayerParameter::kTileParamFieldNumber;
const int LayerParameter::kWindowDataParamFieldNumber;
const int LayerParameter::kImgBboxAnnoParamFieldNumber;
const int LayerParameter::kHeatmapConcatParamFieldNumber;
const int LayerParameter::kBboxAnnoMapParamFieldNumber;
const int LayerParameter::kLabelParamFieldNumber;
const int LayerParameter::kPatchDataParamFieldNumber;
const int LayerParameter::kLabelRemapParamFieldNumber;
const int LayerParameter::kBboxParamFieldNumber;
const int LayerParameter::kSlidingWindowParamFieldNumber;
const int LayerParameter::kBboxToGridAndSizeParamFieldNumber;
const int LayerParameter::kSizeUnitParamFieldNumber;
const int LayerParameter::kPaddingParamFieldNumber;
const int LayerParameter::kGtMapDataParamFieldNumber;
const int LayerParameter::kLabelDiffIgnoreParamFieldNumber;
const int LayerParameter::kGtSubmapDataParamFieldNumber;
const int LayerParameter::kTopSubmapDataParamFieldNumber;
const int LayerParameter::kYololikeLossParamFieldNumber;
const int LayerParameter::kWeightedSoftmaxLossParamFieldNumber;
const int LayerParameter::kGridProposalLossParamFieldNumber;
const int LayerParameter::kBgSynthesisDataParamFieldNumber;
const int LayerParameter::kSizeFilterParamFieldNumber;
const int LayerParameter::kAugmentationParamFieldNumber;
const int LayerParameter::kHeatmapParamFieldNumber;
const int LayerParameter::kCheckParamFieldNumber;
const int LayerParameter::kMeanSubParamFieldNumber;
const int LayerParameter::kMinibatchDataParamFieldNumber;
const int LayerParameter::kRcpTransformParamFieldNumber;
const int LayerParameter::kAnnoToSegParamFieldNumber;
const int LayerParameter::kTrainRoiParamFieldNumber;
const int LayerParameter::kYoloV2LossParamFieldNumber;
const int LayerParameter::kYoloV2ResultParamFieldNumber;
const int LayerParameter::kDetectionCheckParamFieldNumber;
const int LayerParameter::kSubwinOffsetParamFieldNumber;
const int LayerParameter::kSizeRejectionParamFieldNumber;
const int LayerParameter::kConfCheckParamFieldNumber;
const int LayerParameter::kReorgParamFieldNumber;
const int LayerParameter::kBatchRejectionParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LayerParameter::LayerParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.LayerParameter)
}

void LayerParameter::InitAsDefaultInstance() {
  transform_param_ = const_cast< ::caffe::TransformationParameter*>(
      ::caffe::TransformationParameter::internal_default_instance());
  loss_param_ = const_cast< ::caffe::LossParameter*>(
      ::caffe::LossParameter::internal_default_instance());
  accuracy_param_ = const_cast< ::caffe::AccuracyParameter*>(
      ::caffe::AccuracyParameter::internal_default_instance());
  argmax_param_ = const_cast< ::caffe::ArgMaxParameter*>(
      ::caffe::ArgMaxParameter::internal_default_instance());
  batch_norm_param_ = const_cast< ::caffe::BatchNormParameter*>(
      ::caffe::BatchNormParameter::internal_default_instance());
  bias_param_ = const_cast< ::caffe::BiasParameter*>(
      ::caffe::BiasParameter::internal_default_instance());
  concat_param_ = const_cast< ::caffe::ConcatParameter*>(
      ::caffe::ConcatParameter::internal_default_instance());
  contrastive_loss_param_ = const_cast< ::caffe::ContrastiveLossParameter*>(
      ::caffe::ContrastiveLossParameter::internal_default_instance());
  convolution_param_ = const_cast< ::caffe::ConvolutionParameter*>(
      ::caffe::ConvolutionParameter::internal_default_instance());
  crop_param_ = const_cast< ::caffe::CropParameter*>(
      ::caffe::CropParameter::internal_default_instance());
  data_param_ = const_cast< ::caffe::DataParameter*>(
      ::caffe::DataParameter::internal_default_instance());
  dropout_param_ = const_cast< ::caffe::DropoutParameter*>(
      ::caffe::DropoutParameter::internal_default_instance());
  dummy_data_param_ = const_cast< ::caffe::DummyDataParameter*>(
      ::caffe::DummyDataParameter::internal_default_instance());
  eltwise_param_ = const_cast< ::caffe::EltwiseParameter*>(
      ::caffe::EltwiseParameter::internal_default_instance());
  elu_param_ = const_cast< ::caffe::ELUParameter*>(
      ::caffe::ELUParameter::internal_default_instance());
  embed_param_ = const_cast< ::caffe::EmbedParameter*>(
      ::caffe::EmbedParameter::internal_default_instance());
  exp_param_ = const_cast< ::caffe::ExpParameter*>(
      ::caffe::ExpParameter::internal_default_instance());
  flatten_param_ = const_cast< ::caffe::FlattenParameter*>(
      ::caffe::FlattenParameter::internal_default_instance());
  hdf5_data_param_ = const_cast< ::caffe::HDF5DataParameter*>(
      ::caffe::HDF5DataParameter::internal_default_instance());
  hdf5_output_param_ = const_cast< ::caffe::HDF5OutputParameter*>(
      ::caffe::HDF5OutputParameter::internal_default_instance());
  hinge_loss_param_ = const_cast< ::caffe::HingeLossParameter*>(
      ::caffe::HingeLossParameter::internal_default_instance());
  image_data_param_ = const_cast< ::caffe::ImageDataParameter*>(
      ::caffe::ImageDataParameter::internal_default_instance());
  infogain_loss_param_ = const_cast< ::caffe::InfogainLossParameter*>(
      ::caffe::InfogainLossParameter::internal_default_instance());
  inner_product_param_ = const_cast< ::caffe::InnerProductParameter*>(
      ::caffe::InnerProductParameter::internal_default_instance());
  input_param_ = const_cast< ::caffe::InputParameter*>(
      ::caffe::InputParameter::internal_default_instance());
  log_param_ = const_cast< ::caffe::LogParameter*>(
      ::caffe::LogParameter::internal_default_instance());
  lrn_param_ = const_cast< ::caffe::LRNParameter*>(
      ::caffe::LRNParameter::internal_default_instance());
  memory_data_param_ = const_cast< ::caffe::MemoryDataParameter*>(
      ::caffe::MemoryDataParameter::internal_default_instance());
  mvn_param_ = const_cast< ::caffe::MVNParameter*>(
      ::caffe::MVNParameter::internal_default_instance());
  parameter_param_ = const_cast< ::caffe::ParameterParameter*>(
      ::caffe::ParameterParameter::internal_default_instance());
  pooling_param_ = const_cast< ::caffe::PoolingParameter*>(
      ::caffe::PoolingParameter::internal_default_instance());
  power_param_ = const_cast< ::caffe::PowerParameter*>(
      ::caffe::PowerParameter::internal_default_instance());
  prelu_param_ = const_cast< ::caffe::PReLUParameter*>(
      ::caffe::PReLUParameter::internal_default_instance());
  python_param_ = const_cast< ::caffe::PythonParameter*>(
      ::caffe::PythonParameter::internal_default_instance());
  recurrent_param_ = const_cast< ::caffe::RecurrentParameter*>(
      ::caffe::RecurrentParameter::internal_default_instance());
  reduction_param_ = const_cast< ::caffe::ReductionParameter*>(
      ::caffe::ReductionParameter::internal_default_instance());
  relu_param_ = const_cast< ::caffe::ReLUParameter*>(
      ::caffe::ReLUParameter::internal_default_instance());
  reshape_param_ = const_cast< ::caffe::ReshapeParameter*>(
      ::caffe::ReshapeParameter::internal_default_instance());
  scale_param_ = const_cast< ::caffe::ScaleParameter*>(
      ::caffe::ScaleParameter::internal_default_instance());
  sigmoid_param_ = const_cast< ::caffe::SigmoidParameter*>(
      ::caffe::SigmoidParameter::internal_default_instance());
  softmax_param_ = const_cast< ::caffe::SoftmaxParameter*>(
      ::caffe::SoftmaxParameter::internal_default_instance());
  spp_param_ = const_cast< ::caffe::SPPParameter*>(
      ::caffe::SPPParameter::internal_default_instance());
  slice_param_ = const_cast< ::caffe::SliceParameter*>(
      ::caffe::SliceParameter::internal_default_instance());
  tanh_param_ = const_cast< ::caffe::TanHParameter*>(
      ::caffe::TanHParameter::internal_default_instance());
  threshold_param_ = const_cast< ::caffe::ThresholdParameter*>(
      ::caffe::ThresholdParameter::internal_default_instance());
  tile_param_ = const_cast< ::caffe::TileParameter*>(
      ::caffe::TileParameter::internal_default_instance());
  window_data_param_ = const_cast< ::caffe::WindowDataParameter*>(
      ::caffe::WindowDataParameter::internal_default_instance());
  img_bbox_anno_param_ = const_cast< ::caffe::ImgBBoxAnnoParameter*>(
      ::caffe::ImgBBoxAnnoParameter::internal_default_instance());
  heatmap_concat_param_ = const_cast< ::caffe::HeatmapConcatParameter*>(
      ::caffe::HeatmapConcatParameter::internal_default_instance());
  bbox_anno_map_param_ = const_cast< ::caffe::BBoxAnnoMapParameter*>(
      ::caffe::BBoxAnnoMapParameter::internal_default_instance());
  label_param_ = const_cast< ::caffe::LabelParameter*>(
      ::caffe::LabelParameter::internal_default_instance());
  patch_data_param_ = const_cast< ::caffe::PatchDataParameter*>(
      ::caffe::PatchDataParameter::internal_default_instance());
  label_remap_param_ = const_cast< ::caffe::LabelRemapParameter*>(
      ::caffe::LabelRemapParameter::internal_default_instance());
  bbox_param_ = const_cast< ::caffe::BBoxParameter*>(
      ::caffe::BBoxParameter::internal_default_instance());
  sliding_window_param_ = const_cast< ::caffe::SlidingWindowInputParameter*>(
      ::caffe::SlidingWindowInputParameter::internal_default_instance());
  bbox_to_grid_and_size_param_ = const_cast< ::caffe::BBoxToGridAndSizeParameter*>(
      ::caffe::BBoxToGridAndSizeParameter::internal_default_instance());
  size_unit_param_ = const_cast< ::caffe::SizeUnitParameter*>(
      ::caffe::SizeUnitParameter::internal_default_instance());
  padding_param_ = const_cast< ::caffe::PaddingParameter*>(
      ::caffe::PaddingParameter::internal_default_instance());
  gt_map_data_param_ = const_cast< ::caffe::GTMapDataParameter*>(
      ::caffe::GTMapDataParameter::internal_default_instance());
  label_diff_ignore_param_ = const_cast< ::caffe::LabelDiffIgnoreParameter*>(
      ::caffe::LabelDiffIgnoreParameter::internal_default_instance());
  gt_submap_data_param_ = const_cast< ::caffe::GTSubmapDataParameter*>(
      ::caffe::GTSubmapDataParameter::internal_default_instance());
  top_submap_data_param_ = const_cast< ::caffe::TopSubmapDataParameter*>(
      ::caffe::TopSubmapDataParameter::internal_default_instance());
  yololike_loss_param_ = const_cast< ::caffe::YOLOLikeLossParameter*>(
      ::caffe::YOLOLikeLossParameter::internal_default_instance());
  weighted_softmax_loss_param_ = const_cast< ::caffe::WeightedSoftmaxLossParameter*>(
      ::caffe::WeightedSoftmaxLossParameter::internal_default_instance());
  grid_proposal_loss_param_ = const_cast< ::caffe::GridProposalLossParameter*>(
      ::caffe::GridProposalLossParameter::internal_default_instance());
  bg_synthesis_data_param_ = const_cast< ::caffe::BGSynthesisDataParameter*>(
      ::caffe::BGSynthesisDataParameter::internal_default_instance());
  size_filter_param_ = const_cast< ::caffe::SizeFilterParameter*>(
      ::caffe::SizeFilterParameter::internal_default_instance());
  augmentation_param_ = const_cast< ::caffe::AugmentationParameter*>(
      ::caffe::AugmentationParameter::internal_default_instance());
  heatmap_param_ = const_cast< ::caffe::HeatmapParameter*>(
      ::caffe::HeatmapParameter::internal_default_instance());
  check_param_ = const_cast< ::caffe::CheckParameter*>(
      ::caffe::CheckParameter::internal_default_instance());
  mean_sub_param_ = const_cast< ::caffe::MeanSubParameter*>(
      ::caffe::MeanSubParameter::internal_default_instance());
  minibatch_data_param_ = const_cast< ::caffe::MinibatchDataParameter*>(
      ::caffe::MinibatchDataParameter::internal_default_instance());
  rcp_transform_param_ = const_cast< ::caffe::RowColProposalTransformParameter*>(
      ::caffe::RowColProposalTransformParameter::internal_default_instance());
  anno_to_seg_param_ = const_cast< ::caffe::AnnoToSegParameter*>(
      ::caffe::AnnoToSegParameter::internal_default_instance());
  train_roi_param_ = const_cast< ::caffe::TrainROIParameter*>(
      ::caffe::TrainROIParameter::internal_default_instance());
  yolo_v2_loss_param_ = const_cast< ::caffe::YOLOV2LossParameter*>(
      ::caffe::YOLOV2LossParameter::internal_default_instance());
  yolo_v2_result_param_ = const_cast< ::caffe::YOLOV2ResultParameter*>(
      ::caffe::YOLOV2ResultParameter::internal_default_instance());
  detection_check_param_ = const_cast< ::caffe::DetectionCheckParameter*>(
      ::caffe::DetectionCheckParameter::internal_default_instance());
  subwin_offset_param_ = const_cast< ::caffe::SubwinOffsetParameter*>(
      ::caffe::SubwinOffsetParameter::internal_default_instance());
  size_rejection_param_ = const_cast< ::caffe::SizeRejectionParameter*>(
      ::caffe::SizeRejectionParameter::internal_default_instance());
  conf_check_param_ = const_cast< ::caffe::ConfCheckParameter*>(
      ::caffe::ConfCheckParameter::internal_default_instance());
  reorg_param_ = const_cast< ::caffe::ReorgParameter*>(
      ::caffe::ReorgParameter::internal_default_instance());
  batch_rejection_param_ = const_cast< ::caffe::BatchRejectionParameter*>(
      ::caffe::BatchRejectionParameter::internal_default_instance());
}

LayerParameter::LayerParameter(const LayerParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.LayerParameter)
}

void LayerParameter::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transform_param_ = NULL;
  loss_param_ = NULL;
  accuracy_param_ = NULL;
  argmax_param_ = NULL;
  batch_norm_param_ = NULL;
  bias_param_ = NULL;
  concat_param_ = NULL;
  contrastive_loss_param_ = NULL;
  convolution_param_ = NULL;
  crop_param_ = NULL;
  data_param_ = NULL;
  dropout_param_ = NULL;
  dummy_data_param_ = NULL;
  eltwise_param_ = NULL;
  elu_param_ = NULL;
  embed_param_ = NULL;
  exp_param_ = NULL;
  flatten_param_ = NULL;
  hdf5_data_param_ = NULL;
  hdf5_output_param_ = NULL;
  hinge_loss_param_ = NULL;
  image_data_param_ = NULL;
  infogain_loss_param_ = NULL;
  inner_product_param_ = NULL;
  input_param_ = NULL;
  log_param_ = NULL;
  lrn_param_ = NULL;
  memory_data_param_ = NULL;
  mvn_param_ = NULL;
  parameter_param_ = NULL;
  pooling_param_ = NULL;
  power_param_ = NULL;
  prelu_param_ = NULL;
  python_param_ = NULL;
  recurrent_param_ = NULL;
  reduction_param_ = NULL;
  relu_param_ = NULL;
  reshape_param_ = NULL;
  scale_param_ = NULL;
  sigmoid_param_ = NULL;
  softmax_param_ = NULL;
  spp_param_ = NULL;
  slice_param_ = NULL;
  tanh_param_ = NULL;
  threshold_param_ = NULL;
  tile_param_ = NULL;
  window_data_param_ = NULL;
  img_bbox_anno_param_ = NULL;
  heatmap_concat_param_ = NULL;
  bbox_anno_map_param_ = NULL;
  label_param_ = NULL;
  patch_data_param_ = NULL;
  label_remap_param_ = NULL;
  bbox_param_ = NULL;
  sliding_window_param_ = NULL;
  bbox_to_grid_and_size_param_ = NULL;
  size_unit_param_ = NULL;
  padding_param_ = NULL;
  gt_map_data_param_ = NULL;
  label_diff_ignore_param_ = NULL;
  gt_submap_data_param_ = NULL;
  top_submap_data_param_ = NULL;
  yololike_loss_param_ = NULL;
  weighted_softmax_loss_param_ = NULL;
  grid_proposal_loss_param_ = NULL;
  bg_synthesis_data_param_ = NULL;
  size_filter_param_ = NULL;
  augmentation_param_ = NULL;
  heatmap_param_ = NULL;
  check_param_ = NULL;
  mean_sub_param_ = NULL;
  minibatch_data_param_ = NULL;
  rcp_transform_param_ = NULL;
  anno_to_seg_param_ = NULL;
  train_roi_param_ = NULL;
  yolo_v2_loss_param_ = NULL;
  yolo_v2_result_param_ = NULL;
  detection_check_param_ = NULL;
  subwin_offset_param_ = NULL;
  size_rejection_param_ = NULL;
  conf_check_param_ = NULL;
  reorg_param_ = NULL;
  batch_rejection_param_ = NULL;
  phase_ = 0;
}

LayerParameter::~LayerParameter() {
  // @@protoc_insertion_point(destructor:caffe.LayerParameter)
  SharedDtor();
}

void LayerParameter::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &LayerParameter_default_instance_.get()) {
    delete transform_param_;
    delete loss_param_;
    delete accuracy_param_;
    delete argmax_param_;
    delete batch_norm_param_;
    delete bias_param_;
    delete concat_param_;
    delete contrastive_loss_param_;
    delete convolution_param_;
    delete crop_param_;
    delete data_param_;
    delete dropout_param_;
    delete dummy_data_param_;
    delete eltwise_param_;
    delete elu_param_;
    delete embed_param_;
    delete exp_param_;
    delete flatten_param_;
    delete hdf5_data_param_;
    delete hdf5_output_param_;
    delete hinge_loss_param_;
    delete image_data_param_;
    delete infogain_loss_param_;
    delete inner_product_param_;
    delete input_param_;
    delete log_param_;
    delete lrn_param_;
    delete memory_data_param_;
    delete mvn_param_;
    delete parameter_param_;
    delete pooling_param_;
    delete power_param_;
    delete prelu_param_;
    delete python_param_;
    delete recurrent_param_;
    delete reduction_param_;
    delete relu_param_;
    delete reshape_param_;
    delete scale_param_;
    delete sigmoid_param_;
    delete softmax_param_;
    delete spp_param_;
    delete slice_param_;
    delete tanh_param_;
    delete threshold_param_;
    delete tile_param_;
    delete window_data_param_;
    delete img_bbox_anno_param_;
    delete heatmap_concat_param_;
    delete bbox_anno_map_param_;
    delete label_param_;
    delete patch_data_param_;
    delete label_remap_param_;
    delete bbox_param_;
    delete sliding_window_param_;
    delete bbox_to_grid_and_size_param_;
    delete size_unit_param_;
    delete padding_param_;
    delete gt_map_data_param_;
    delete label_diff_ignore_param_;
    delete gt_submap_data_param_;
    delete top_submap_data_param_;
    delete yololike_loss_param_;
    delete weighted_softmax_loss_param_;
    delete grid_proposal_loss_param_;
    delete bg_synthesis_data_param_;
    delete size_filter_param_;
    delete augmentation_param_;
    delete heatmap_param_;
    delete check_param_;
    delete mean_sub_param_;
    delete minibatch_data_param_;
    delete rcp_transform_param_;
    delete anno_to_seg_param_;
    delete train_roi_param_;
    delete yolo_v2_loss_param_;
    delete yolo_v2_result_param_;
    delete detection_check_param_;
    delete subwin_offset_param_;
    delete size_rejection_param_;
    delete conf_check_param_;
    delete reorg_param_;
    delete batch_rejection_param_;
  }
}

void LayerParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LayerParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LayerParameter_descriptor_;
}

const LayerParameter& LayerParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<LayerParameter> LayerParameter_default_instance_;

LayerParameter* LayerParameter::New(::google::protobuf::Arena* arena) const {
  LayerParameter* n = new LayerParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LayerParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.LayerParameter)
  if (_has_bits_[0 / 32] & 19u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_type()) {
      type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    phase_ = 0;
  }
  if (_has_bits_[8 / 32] & 63488u) {
    if (has_transform_param()) {
      if (transform_param_ != NULL) transform_param_->::caffe::TransformationParameter::Clear();
    }
    if (has_loss_param()) {
      if (loss_param_ != NULL) loss_param_->::caffe::LossParameter::Clear();
    }
    if (has_accuracy_param()) {
      if (accuracy_param_ != NULL) accuracy_param_->::caffe::AccuracyParameter::Clear();
    }
    if (has_argmax_param()) {
      if (argmax_param_ != NULL) argmax_param_->::caffe::ArgMaxParameter::Clear();
    }
    if (has_batch_norm_param()) {
      if (batch_norm_param_ != NULL) batch_norm_param_->::caffe::BatchNormParameter::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    if (has_bias_param()) {
      if (bias_param_ != NULL) bias_param_->::caffe::BiasParameter::Clear();
    }
    if (has_concat_param()) {
      if (concat_param_ != NULL) concat_param_->::caffe::ConcatParameter::Clear();
    }
    if (has_contrastive_loss_param()) {
      if (contrastive_loss_param_ != NULL) contrastive_loss_param_->::caffe::ContrastiveLossParameter::Clear();
    }
    if (has_convolution_param()) {
      if (convolution_param_ != NULL) convolution_param_->::caffe::ConvolutionParameter::Clear();
    }
    if (has_crop_param()) {
      if (crop_param_ != NULL) crop_param_->::caffe::CropParameter::Clear();
    }
    if (has_data_param()) {
      if (data_param_ != NULL) data_param_->::caffe::DataParameter::Clear();
    }
    if (has_dropout_param()) {
      if (dropout_param_ != NULL) dropout_param_->::caffe::DropoutParameter::Clear();
    }
    if (has_dummy_data_param()) {
      if (dummy_data_param_ != NULL) dummy_data_param_->::caffe::DummyDataParameter::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    if (has_eltwise_param()) {
      if (eltwise_param_ != NULL) eltwise_param_->::caffe::EltwiseParameter::Clear();
    }
    if (has_elu_param()) {
      if (elu_param_ != NULL) elu_param_->::caffe::ELUParameter::Clear();
    }
    if (has_embed_param()) {
      if (embed_param_ != NULL) embed_param_->::caffe::EmbedParameter::Clear();
    }
    if (has_exp_param()) {
      if (exp_param_ != NULL) exp_param_->::caffe::ExpParameter::Clear();
    }
    if (has_flatten_param()) {
      if (flatten_param_ != NULL) flatten_param_->::caffe::FlattenParameter::Clear();
    }
    if (has_hdf5_data_param()) {
      if (hdf5_data_param_ != NULL) hdf5_data_param_->::caffe::HDF5DataParameter::Clear();
    }
    if (has_hdf5_output_param()) {
      if (hdf5_output_param_ != NULL) hdf5_output_param_->::caffe::HDF5OutputParameter::Clear();
    }
    if (has_hinge_loss_param()) {
      if (hinge_loss_param_ != NULL) hinge_loss_param_->::caffe::HingeLossParameter::Clear();
    }
  }
  if (_has_bits_[32 / 32] & 255u) {
    if (has_image_data_param()) {
      if (image_data_param_ != NULL) image_data_param_->::caffe::ImageDataParameter::Clear();
    }
    if (has_infogain_loss_param()) {
      if (infogain_loss_param_ != NULL) infogain_loss_param_->::caffe::InfogainLossParameter::Clear();
    }
    if (has_inner_product_param()) {
      if (inner_product_param_ != NULL) inner_product_param_->::caffe::InnerProductParameter::Clear();
    }
    if (has_input_param()) {
      if (input_param_ != NULL) input_param_->::caffe::InputParameter::Clear();
    }
    if (has_log_param()) {
      if (log_param_ != NULL) log_param_->::caffe::LogParameter::Clear();
    }
    if (has_lrn_param()) {
      if (lrn_param_ != NULL) lrn_param_->::caffe::LRNParameter::Clear();
    }
    if (has_memory_data_param()) {
      if (memory_data_param_ != NULL) memory_data_param_->::caffe::MemoryDataParameter::Clear();
    }
    if (has_mvn_param()) {
      if (mvn_param_ != NULL) mvn_param_->::caffe::MVNParameter::Clear();
    }
  }
  if (_has_bits_[40 / 32] & 65280u) {
    if (has_parameter_param()) {
      if (parameter_param_ != NULL) parameter_param_->::caffe::ParameterParameter::Clear();
    }
    if (has_pooling_param()) {
      if (pooling_param_ != NULL) pooling_param_->::caffe::PoolingParameter::Clear();
    }
    if (has_power_param()) {
      if (power_param_ != NULL) power_param_->::caffe::PowerParameter::Clear();
    }
    if (has_prelu_param()) {
      if (prelu_param_ != NULL) prelu_param_->::caffe::PReLUParameter::Clear();
    }
    if (has_python_param()) {
      if (python_param_ != NULL) python_param_->::caffe::PythonParameter::Clear();
    }
    if (has_recurrent_param()) {
      if (recurrent_param_ != NULL) recurrent_param_->::caffe::RecurrentParameter::Clear();
    }
    if (has_reduction_param()) {
      if (reduction_param_ != NULL) reduction_param_->::caffe::ReductionParameter::Clear();
    }
    if (has_relu_param()) {
      if (relu_param_ != NULL) relu_param_->::caffe::ReLUParameter::Clear();
    }
  }
  if (_has_bits_[48 / 32] & 16711680u) {
    if (has_reshape_param()) {
      if (reshape_param_ != NULL) reshape_param_->::caffe::ReshapeParameter::Clear();
    }
    if (has_scale_param()) {
      if (scale_param_ != NULL) scale_param_->::caffe::ScaleParameter::Clear();
    }
    if (has_sigmoid_param()) {
      if (sigmoid_param_ != NULL) sigmoid_param_->::caffe::SigmoidParameter::Clear();
    }
    if (has_softmax_param()) {
      if (softmax_param_ != NULL) softmax_param_->::caffe::SoftmaxParameter::Clear();
    }
    if (has_spp_param()) {
      if (spp_param_ != NULL) spp_param_->::caffe::SPPParameter::Clear();
    }
    if (has_slice_param()) {
      if (slice_param_ != NULL) slice_param_->::caffe::SliceParameter::Clear();
    }
    if (has_tanh_param()) {
      if (tanh_param_ != NULL) tanh_param_->::caffe::TanHParameter::Clear();
    }
    if (has_threshold_param()) {
      if (threshold_param_ != NULL) threshold_param_->::caffe::ThresholdParameter::Clear();
    }
  }
  if (_has_bits_[56 / 32] & 4278190080u) {
    if (has_tile_param()) {
      if (tile_param_ != NULL) tile_param_->::caffe::TileParameter::Clear();
    }
    if (has_window_data_param()) {
      if (window_data_param_ != NULL) window_data_param_->::caffe::WindowDataParameter::Clear();
    }
    if (has_img_bbox_anno_param()) {
      if (img_bbox_anno_param_ != NULL) img_bbox_anno_param_->::caffe::ImgBBoxAnnoParameter::Clear();
    }
    if (has_heatmap_concat_param()) {
      if (heatmap_concat_param_ != NULL) heatmap_concat_param_->::caffe::HeatmapConcatParameter::Clear();
    }
    if (has_bbox_anno_map_param()) {
      if (bbox_anno_map_param_ != NULL) bbox_anno_map_param_->::caffe::BBoxAnnoMapParameter::Clear();
    }
    if (has_label_param()) {
      if (label_param_ != NULL) label_param_->::caffe::LabelParameter::Clear();
    }
    if (has_patch_data_param()) {
      if (patch_data_param_ != NULL) patch_data_param_->::caffe::PatchDataParameter::Clear();
    }
    if (has_label_remap_param()) {
      if (label_remap_param_ != NULL) label_remap_param_->::caffe::LabelRemapParameter::Clear();
    }
  }
  if (_has_bits_[64 / 32] & 255u) {
    if (has_bbox_param()) {
      if (bbox_param_ != NULL) bbox_param_->::caffe::BBoxParameter::Clear();
    }
    if (has_sliding_window_param()) {
      if (sliding_window_param_ != NULL) sliding_window_param_->::caffe::SlidingWindowInputParameter::Clear();
    }
    if (has_bbox_to_grid_and_size_param()) {
      if (bbox_to_grid_and_size_param_ != NULL) bbox_to_grid_and_size_param_->::caffe::BBoxToGridAndSizeParameter::Clear();
    }
    if (has_size_unit_param()) {
      if (size_unit_param_ != NULL) size_unit_param_->::caffe::SizeUnitParameter::Clear();
    }
    if (has_padding_param()) {
      if (padding_param_ != NULL) padding_param_->::caffe::PaddingParameter::Clear();
    }
    if (has_gt_map_data_param()) {
      if (gt_map_data_param_ != NULL) gt_map_data_param_->::caffe::GTMapDataParameter::Clear();
    }
    if (has_label_diff_ignore_param()) {
      if (label_diff_ignore_param_ != NULL) label_diff_ignore_param_->::caffe::LabelDiffIgnoreParameter::Clear();
    }
    if (has_gt_submap_data_param()) {
      if (gt_submap_data_param_ != NULL) gt_submap_data_param_->::caffe::GTSubmapDataParameter::Clear();
    }
  }
  if (_has_bits_[72 / 32] & 65280u) {
    if (has_top_submap_data_param()) {
      if (top_submap_data_param_ != NULL) top_submap_data_param_->::caffe::TopSubmapDataParameter::Clear();
    }
    if (has_yololike_loss_param()) {
      if (yololike_loss_param_ != NULL) yololike_loss_param_->::caffe::YOLOLikeLossParameter::Clear();
    }
    if (has_weighted_softmax_loss_param()) {
      if (weighted_softmax_loss_param_ != NULL) weighted_softmax_loss_param_->::caffe::WeightedSoftmaxLossParameter::Clear();
    }
    if (has_grid_proposal_loss_param()) {
      if (grid_proposal_loss_param_ != NULL) grid_proposal_loss_param_->::caffe::GridProposalLossParameter::Clear();
    }
    if (has_bg_synthesis_data_param()) {
      if (bg_synthesis_data_param_ != NULL) bg_synthesis_data_param_->::caffe::BGSynthesisDataParameter::Clear();
    }
    if (has_size_filter_param()) {
      if (size_filter_param_ != NULL) size_filter_param_->::caffe::SizeFilterParameter::Clear();
    }
    if (has_augmentation_param()) {
      if (augmentation_param_ != NULL) augmentation_param_->::caffe::AugmentationParameter::Clear();
    }
    if (has_heatmap_param()) {
      if (heatmap_param_ != NULL) heatmap_param_->::caffe::HeatmapParameter::Clear();
    }
  }
  if (_has_bits_[80 / 32] & 16711680u) {
    if (has_check_param()) {
      if (check_param_ != NULL) check_param_->::caffe::CheckParameter::Clear();
    }
    if (has_mean_sub_param()) {
      if (mean_sub_param_ != NULL) mean_sub_param_->::caffe::MeanSubParameter::Clear();
    }
    if (has_minibatch_data_param()) {
      if (minibatch_data_param_ != NULL) minibatch_data_param_->::caffe::MinibatchDataParameter::Clear();
    }
    if (has_rcp_transform_param()) {
      if (rcp_transform_param_ != NULL) rcp_transform_param_->::caffe::RowColProposalTransformParameter::Clear();
    }
    if (has_anno_to_seg_param()) {
      if (anno_to_seg_param_ != NULL) anno_to_seg_param_->::caffe::AnnoToSegParameter::Clear();
    }
    if (has_train_roi_param()) {
      if (train_roi_param_ != NULL) train_roi_param_->::caffe::TrainROIParameter::Clear();
    }
    if (has_yolo_v2_loss_param()) {
      if (yolo_v2_loss_param_ != NULL) yolo_v2_loss_param_->::caffe::YOLOV2LossParameter::Clear();
    }
    if (has_yolo_v2_result_param()) {
      if (yolo_v2_result_param_ != NULL) yolo_v2_result_param_->::caffe::YOLOV2ResultParameter::Clear();
    }
  }
  if (_has_bits_[88 / 32] & 1056964608u) {
    if (has_detection_check_param()) {
      if (detection_check_param_ != NULL) detection_check_param_->::caffe::DetectionCheckParameter::Clear();
    }
    if (has_subwin_offset_param()) {
      if (subwin_offset_param_ != NULL) subwin_offset_param_->::caffe::SubwinOffsetParameter::Clear();
    }
    if (has_size_rejection_param()) {
      if (size_rejection_param_ != NULL) size_rejection_param_->::caffe::SizeRejectionParameter::Clear();
    }
    if (has_conf_check_param()) {
      if (conf_check_param_ != NULL) conf_check_param_->::caffe::ConfCheckParameter::Clear();
    }
    if (has_reorg_param()) {
      if (reorg_param_ != NULL) reorg_param_->::caffe::ReorgParameter::Clear();
    }
    if (has_batch_rejection_param()) {
      if (batch_rejection_param_ != NULL) batch_rejection_param_->::caffe::BatchRejectionParameter::Clear();
    }
  }
  bottom_.Clear();
  top_.Clear();
  loss_weight_.Clear();
  param_.Clear();
  blobs_.Clear();
  propagate_down_.Clear();
  include_.Clear();
  exclude_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LayerParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.LayerParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.LayerParameter.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional string type = 2;
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.LayerParameter.type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bottom;
        break;
      }

      // repeated string bottom = 3;
      case 3: {
        if (tag == 26) {
         parse_bottom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_bottom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bottom(this->bottom_size() - 1).data(),
            this->bottom(this->bottom_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.LayerParameter.bottom");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bottom;
        if (input->ExpectTag(34)) goto parse_top;
        break;
      }

      // repeated string top = 4;
      case 4: {
        if (tag == 34) {
         parse_top:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_top()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->top(this->top_size() - 1).data(),
            this->top(this->top_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.LayerParameter.top");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_top;
        if (input->ExpectTag(45)) goto parse_loss_weight;
        break;
      }

      // repeated float loss_weight = 5;
      case 5: {
        if (tag == 45) {
         parse_loss_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45, input, this->mutable_loss_weight())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_loss_weight())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_loss_weight;
        if (input->ExpectTag(50)) goto parse_param;
        break;
      }

      // repeated .caffe.ParamSpec param = 6;
      case 6: {
        if (tag == 50) {
         parse_param:
          DO_(input->IncrementRecursionDepth());
         parse_loop_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_param;
        if (input->ExpectTag(58)) goto parse_loop_blobs;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .caffe.BlobProto blobs = 7;
      case 7: {
        if (tag == 58) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_blobs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_blobs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_blobs;
        if (input->ExpectTag(66)) goto parse_loop_include;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .caffe.NetStateRule include = 8;
      case 8: {
        if (tag == 66) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_include:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_include()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_include;
        if (input->ExpectTag(74)) goto parse_loop_exclude;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .caffe.NetStateRule exclude = 9;
      case 9: {
        if (tag == 74) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_exclude:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_exclude()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_exclude;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(80)) goto parse_phase;
        break;
      }

      // optional .caffe.Phase phase = 10;
      case 10: {
        if (tag == 80) {
         parse_phase:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::Phase_IsValid(value)) {
            set_phase(static_cast< ::caffe::Phase >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_propagate_down;
        break;
      }

      // repeated bool propagate_down = 11;
      case 11: {
        if (tag == 88) {
         parse_propagate_down:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 88, input, this->mutable_propagate_down())));
        } else if (tag == 90) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_propagate_down())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_propagate_down;
        if (input->ExpectTag(802)) goto parse_transform_param;
        break;
      }

      // optional .caffe.TransformationParameter transform_param = 100;
      case 100: {
        if (tag == 802) {
         parse_transform_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_loss_param;
        break;
      }

      // optional .caffe.LossParameter loss_param = 101;
      case 101: {
        if (tag == 810) {
         parse_loss_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loss_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(818)) goto parse_accuracy_param;
        break;
      }

      // optional .caffe.AccuracyParameter accuracy_param = 102;
      case 102: {
        if (tag == 818) {
         parse_accuracy_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accuracy_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(826)) goto parse_argmax_param;
        break;
      }

      // optional .caffe.ArgMaxParameter argmax_param = 103;
      case 103: {
        if (tag == 826) {
         parse_argmax_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_argmax_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(834)) goto parse_concat_param;
        break;
      }

      // optional .caffe.ConcatParameter concat_param = 104;
      case 104: {
        if (tag == 834) {
         parse_concat_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_concat_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(842)) goto parse_contrastive_loss_param;
        break;
      }

      // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;
      case 105: {
        if (tag == 842) {
         parse_contrastive_loss_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contrastive_loss_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(850)) goto parse_convolution_param;
        break;
      }

      // optional .caffe.ConvolutionParameter convolution_param = 106;
      case 106: {
        if (tag == 850) {
         parse_convolution_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_convolution_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(858)) goto parse_data_param;
        break;
      }

      // optional .caffe.DataParameter data_param = 107;
      case 107: {
        if (tag == 858) {
         parse_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(866)) goto parse_dropout_param;
        break;
      }

      // optional .caffe.DropoutParameter dropout_param = 108;
      case 108: {
        if (tag == 866) {
         parse_dropout_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dropout_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(874)) goto parse_dummy_data_param;
        break;
      }

      // optional .caffe.DummyDataParameter dummy_data_param = 109;
      case 109: {
        if (tag == 874) {
         parse_dummy_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dummy_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(882)) goto parse_eltwise_param;
        break;
      }

      // optional .caffe.EltwiseParameter eltwise_param = 110;
      case 110: {
        if (tag == 882) {
         parse_eltwise_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eltwise_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(890)) goto parse_exp_param;
        break;
      }

      // optional .caffe.ExpParameter exp_param = 111;
      case 111: {
        if (tag == 890) {
         parse_exp_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exp_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(898)) goto parse_hdf5_data_param;
        break;
      }

      // optional .caffe.HDF5DataParameter hdf5_data_param = 112;
      case 112: {
        if (tag == 898) {
         parse_hdf5_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hdf5_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(906)) goto parse_hdf5_output_param;
        break;
      }

      // optional .caffe.HDF5OutputParameter hdf5_output_param = 113;
      case 113: {
        if (tag == 906) {
         parse_hdf5_output_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hdf5_output_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(914)) goto parse_hinge_loss_param;
        break;
      }

      // optional .caffe.HingeLossParameter hinge_loss_param = 114;
      case 114: {
        if (tag == 914) {
         parse_hinge_loss_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hinge_loss_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(922)) goto parse_image_data_param;
        break;
      }

      // optional .caffe.ImageDataParameter image_data_param = 115;
      case 115: {
        if (tag == 922) {
         parse_image_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(930)) goto parse_infogain_loss_param;
        break;
      }

      // optional .caffe.InfogainLossParameter infogain_loss_param = 116;
      case 116: {
        if (tag == 930) {
         parse_infogain_loss_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_infogain_loss_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(938)) goto parse_inner_product_param;
        break;
      }

      // optional .caffe.InnerProductParameter inner_product_param = 117;
      case 117: {
        if (tag == 938) {
         parse_inner_product_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inner_product_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(946)) goto parse_lrn_param;
        break;
      }

      // optional .caffe.LRNParameter lrn_param = 118;
      case 118: {
        if (tag == 946) {
         parse_lrn_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lrn_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(954)) goto parse_memory_data_param;
        break;
      }

      // optional .caffe.MemoryDataParameter memory_data_param = 119;
      case 119: {
        if (tag == 954) {
         parse_memory_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memory_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(962)) goto parse_mvn_param;
        break;
      }

      // optional .caffe.MVNParameter mvn_param = 120;
      case 120: {
        if (tag == 962) {
         parse_mvn_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mvn_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(970)) goto parse_pooling_param;
        break;
      }

      // optional .caffe.PoolingParameter pooling_param = 121;
      case 121: {
        if (tag == 970) {
         parse_pooling_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pooling_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(978)) goto parse_power_param;
        break;
      }

      // optional .caffe.PowerParameter power_param = 122;
      case 122: {
        if (tag == 978) {
         parse_power_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_power_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(986)) goto parse_relu_param;
        break;
      }

      // optional .caffe.ReLUParameter relu_param = 123;
      case 123: {
        if (tag == 986) {
         parse_relu_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relu_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(994)) goto parse_sigmoid_param;
        break;
      }

      // optional .caffe.SigmoidParameter sigmoid_param = 124;
      case 124: {
        if (tag == 994) {
         parse_sigmoid_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sigmoid_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1002)) goto parse_softmax_param;
        break;
      }

      // optional .caffe.SoftmaxParameter softmax_param = 125;
      case 125: {
        if (tag == 1002) {
         parse_softmax_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_softmax_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1010)) goto parse_slice_param;
        break;
      }

      // optional .caffe.SliceParameter slice_param = 126;
      case 126: {
        if (tag == 1010) {
         parse_slice_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slice_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1018)) goto parse_tanh_param;
        break;
      }

      // optional .caffe.TanHParameter tanh_param = 127;
      case 127: {
        if (tag == 1018) {
         parse_tanh_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tanh_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1026)) goto parse_threshold_param;
        break;
      }

      // optional .caffe.ThresholdParameter threshold_param = 128;
      case 128: {
        if (tag == 1026) {
         parse_threshold_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_threshold_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1034)) goto parse_window_data_param;
        break;
      }

      // optional .caffe.WindowDataParameter window_data_param = 129;
      case 129: {
        if (tag == 1034) {
         parse_window_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_window_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1042)) goto parse_python_param;
        break;
      }

      // optional .caffe.PythonParameter python_param = 130;
      case 130: {
        if (tag == 1042) {
         parse_python_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_python_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1050)) goto parse_prelu_param;
        break;
      }

      // optional .caffe.PReLUParameter prelu_param = 131;
      case 131: {
        if (tag == 1050) {
         parse_prelu_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prelu_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1058)) goto parse_spp_param;
        break;
      }

      // optional .caffe.SPPParameter spp_param = 132;
      case 132: {
        if (tag == 1058) {
         parse_spp_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spp_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1066)) goto parse_reshape_param;
        break;
      }

      // optional .caffe.ReshapeParameter reshape_param = 133;
      case 133: {
        if (tag == 1066) {
         parse_reshape_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reshape_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1074)) goto parse_log_param;
        break;
      }

      // optional .caffe.LogParameter log_param = 134;
      case 134: {
        if (tag == 1074) {
         parse_log_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_log_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1082)) goto parse_flatten_param;
        break;
      }

      // optional .caffe.FlattenParameter flatten_param = 135;
      case 135: {
        if (tag == 1082) {
         parse_flatten_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flatten_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1090)) goto parse_reduction_param;
        break;
      }

      // optional .caffe.ReductionParameter reduction_param = 136;
      case 136: {
        if (tag == 1090) {
         parse_reduction_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reduction_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1098)) goto parse_embed_param;
        break;
      }

      // optional .caffe.EmbedParameter embed_param = 137;
      case 137: {
        if (tag == 1098) {
         parse_embed_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_embed_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1106)) goto parse_tile_param;
        break;
      }

      // optional .caffe.TileParameter tile_param = 138;
      case 138: {
        if (tag == 1106) {
         parse_tile_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tile_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1114)) goto parse_batch_norm_param;
        break;
      }

      // optional .caffe.BatchNormParameter batch_norm_param = 139;
      case 139: {
        if (tag == 1114) {
         parse_batch_norm_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_batch_norm_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1122)) goto parse_elu_param;
        break;
      }

      // optional .caffe.ELUParameter elu_param = 140;
      case 140: {
        if (tag == 1122) {
         parse_elu_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_elu_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1130)) goto parse_bias_param;
        break;
      }

      // optional .caffe.BiasParameter bias_param = 141;
      case 141: {
        if (tag == 1130) {
         parse_bias_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1138)) goto parse_scale_param;
        break;
      }

      // optional .caffe.ScaleParameter scale_param = 142;
      case 142: {
        if (tag == 1138) {
         parse_scale_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1146)) goto parse_input_param;
        break;
      }

      // optional .caffe.InputParameter input_param = 143;
      case 143: {
        if (tag == 1146) {
         parse_input_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_input_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1154)) goto parse_crop_param;
        break;
      }

      // optional .caffe.CropParameter crop_param = 144;
      case 144: {
        if (tag == 1154) {
         parse_crop_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crop_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1162)) goto parse_parameter_param;
        break;
      }

      // optional .caffe.ParameterParameter parameter_param = 145;
      case 145: {
        if (tag == 1162) {
         parse_parameter_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parameter_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1170)) goto parse_recurrent_param;
        break;
      }

      // optional .caffe.RecurrentParameter recurrent_param = 146;
      case 146: {
        if (tag == 1170) {
         parse_recurrent_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recurrent_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8010)) goto parse_img_bbox_anno_param;
        break;
      }

      // optional .caffe.ImgBBoxAnnoParameter img_bbox_anno_param = 1001;
      case 1001: {
        if (tag == 8010) {
         parse_img_bbox_anno_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_img_bbox_anno_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8018)) goto parse_heatmap_concat_param;
        break;
      }

      // optional .caffe.HeatmapConcatParameter heatmap_concat_param = 1002;
      case 1002: {
        if (tag == 8018) {
         parse_heatmap_concat_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heatmap_concat_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8026)) goto parse_bbox_anno_map_param;
        break;
      }

      // optional .caffe.BBoxAnnoMapParameter bbox_anno_map_param = 1003;
      case 1003: {
        if (tag == 8026) {
         parse_bbox_anno_map_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bbox_anno_map_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8034)) goto parse_label_param;
        break;
      }

      // optional .caffe.LabelParameter label_param = 1004;
      case 1004: {
        if (tag == 8034) {
         parse_label_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_label_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8042)) goto parse_patch_data_param;
        break;
      }

      // optional .caffe.PatchDataParameter patch_data_param = 1005;
      case 1005: {
        if (tag == 8042) {
         parse_patch_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_patch_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8050)) goto parse_label_remap_param;
        break;
      }

      // optional .caffe.LabelRemapParameter label_remap_param = 1006;
      case 1006: {
        if (tag == 8050) {
         parse_label_remap_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_label_remap_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8058)) goto parse_bbox_param;
        break;
      }

      // optional .caffe.BBoxParameter bbox_param = 1007;
      case 1007: {
        if (tag == 8058) {
         parse_bbox_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bbox_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8066)) goto parse_sliding_window_param;
        break;
      }

      // optional .caffe.SlidingWindowInputParameter sliding_window_param = 1008;
      case 1008: {
        if (tag == 8066) {
         parse_sliding_window_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sliding_window_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8074)) goto parse_bbox_to_grid_and_size_param;
        break;
      }

      // optional .caffe.BBoxToGridAndSizeParameter bbox_to_grid_and_size_param = 1009;
      case 1009: {
        if (tag == 8074) {
         parse_bbox_to_grid_and_size_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bbox_to_grid_and_size_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8082)) goto parse_size_unit_param;
        break;
      }

      // optional .caffe.SizeUnitParameter size_unit_param = 1010;
      case 1010: {
        if (tag == 8082) {
         parse_size_unit_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_size_unit_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8090)) goto parse_padding_param;
        break;
      }

      // optional .caffe.PaddingParameter padding_param = 1011;
      case 1011: {
        if (tag == 8090) {
         parse_padding_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_padding_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8098)) goto parse_gt_map_data_param;
        break;
      }

      // optional .caffe.GTMapDataParameter gt_map_data_param = 1012;
      case 1012: {
        if (tag == 8098) {
         parse_gt_map_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gt_map_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8106)) goto parse_label_diff_ignore_param;
        break;
      }

      // optional .caffe.LabelDiffIgnoreParameter label_diff_ignore_param = 1013;
      case 1013: {
        if (tag == 8106) {
         parse_label_diff_ignore_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_label_diff_ignore_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8114)) goto parse_gt_submap_data_param;
        break;
      }

      // optional .caffe.GTSubmapDataParameter gt_submap_data_param = 1014;
      case 1014: {
        if (tag == 8114) {
         parse_gt_submap_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gt_submap_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8122)) goto parse_top_submap_data_param;
        break;
      }

      // optional .caffe.TopSubmapDataParameter top_submap_data_param = 1015;
      case 1015: {
        if (tag == 8122) {
         parse_top_submap_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_top_submap_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8130)) goto parse_yololike_loss_param;
        break;
      }

      // optional .caffe.YOLOLikeLossParameter yololike_loss_param = 1016;
      case 1016: {
        if (tag == 8130) {
         parse_yololike_loss_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_yololike_loss_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8138)) goto parse_weighted_softmax_loss_param;
        break;
      }

      // optional .caffe.WeightedSoftmaxLossParameter weighted_softmax_loss_param = 1017;
      case 1017: {
        if (tag == 8138) {
         parse_weighted_softmax_loss_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weighted_softmax_loss_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8146)) goto parse_grid_proposal_loss_param;
        break;
      }

      // optional .caffe.GridProposalLossParameter grid_proposal_loss_param = 1018;
      case 1018: {
        if (tag == 8146) {
         parse_grid_proposal_loss_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_grid_proposal_loss_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8154)) goto parse_bg_synthesis_data_param;
        break;
      }

      // optional .caffe.BGSynthesisDataParameter bg_synthesis_data_param = 1019;
      case 1019: {
        if (tag == 8154) {
         parse_bg_synthesis_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bg_synthesis_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8162)) goto parse_size_filter_param;
        break;
      }

      // optional .caffe.SizeFilterParameter size_filter_param = 1020;
      case 1020: {
        if (tag == 8162) {
         parse_size_filter_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_size_filter_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8170)) goto parse_augmentation_param;
        break;
      }

      // optional .caffe.AugmentationParameter augmentation_param = 1021;
      case 1021: {
        if (tag == 8170) {
         parse_augmentation_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_augmentation_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8178)) goto parse_heatmap_param;
        break;
      }

      // optional .caffe.HeatmapParameter heatmap_param = 1022;
      case 1022: {
        if (tag == 8178) {
         parse_heatmap_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heatmap_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8186)) goto parse_check_param;
        break;
      }

      // optional .caffe.CheckParameter check_param = 1023;
      case 1023: {
        if (tag == 8186) {
         parse_check_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_check_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8194)) goto parse_mean_sub_param;
        break;
      }

      // optional .caffe.MeanSubParameter mean_sub_param = 1024;
      case 1024: {
        if (tag == 8194) {
         parse_mean_sub_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mean_sub_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8202)) goto parse_minibatch_data_param;
        break;
      }

      // optional .caffe.MinibatchDataParameter minibatch_data_param = 1025;
      case 1025: {
        if (tag == 8202) {
         parse_minibatch_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_minibatch_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8210)) goto parse_rcp_transform_param;
        break;
      }

      // optional .caffe.RowColProposalTransformParameter rcp_transform_param = 1026;
      case 1026: {
        if (tag == 8210) {
         parse_rcp_transform_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rcp_transform_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8218)) goto parse_anno_to_seg_param;
        break;
      }

      // optional .caffe.AnnoToSegParameter anno_to_seg_param = 1027;
      case 1027: {
        if (tag == 8218) {
         parse_anno_to_seg_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_anno_to_seg_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8226)) goto parse_train_roi_param;
        break;
      }

      // optional .caffe.TrainROIParameter train_roi_param = 1028;
      case 1028: {
        if (tag == 8226) {
         parse_train_roi_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_train_roi_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8234)) goto parse_yolo_v2_loss_param;
        break;
      }

      // optional .caffe.YOLOV2LossParameter yolo_v2_loss_param = 1029;
      case 1029: {
        if (tag == 8234) {
         parse_yolo_v2_loss_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_yolo_v2_loss_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8242)) goto parse_yolo_v2_result_param;
        break;
      }

      // optional .caffe.YOLOV2ResultParameter yolo_v2_result_param = 1030;
      case 1030: {
        if (tag == 8242) {
         parse_yolo_v2_result_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_yolo_v2_result_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8250)) goto parse_detection_check_param;
        break;
      }

      // optional .caffe.DetectionCheckParameter detection_check_param = 1031;
      case 1031: {
        if (tag == 8250) {
         parse_detection_check_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detection_check_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8258)) goto parse_subwin_offset_param;
        break;
      }

      // optional .caffe.SubwinOffsetParameter subwin_offset_param = 1032;
      case 1032: {
        if (tag == 8258) {
         parse_subwin_offset_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subwin_offset_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8266)) goto parse_size_rejection_param;
        break;
      }

      // optional .caffe.SizeRejectionParameter size_rejection_param = 1033;
      case 1033: {
        if (tag == 8266) {
         parse_size_rejection_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_size_rejection_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8274)) goto parse_conf_check_param;
        break;
      }

      // optional .caffe.ConfCheckParameter conf_check_param = 1034;
      case 1034: {
        if (tag == 8274) {
         parse_conf_check_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conf_check_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8282)) goto parse_reorg_param;
        break;
      }

      // optional .caffe.ReorgParameter reorg_param = 1035;
      case 1035: {
        if (tag == 8282) {
         parse_reorg_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reorg_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8290)) goto parse_batch_rejection_param;
        break;
      }

      // optional .caffe.BatchRejectionParameter batch_rejection_param = 1036;
      case 1036: {
        if (tag == 8290) {
         parse_batch_rejection_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_batch_rejection_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.LayerParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.LayerParameter)
  return false;
#undef DO_
}

void LayerParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.LayerParameter)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerParameter.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerParameter.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // repeated string bottom = 3;
  for (int i = 0; i < this->bottom_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bottom(i).data(), this->bottom(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerParameter.bottom");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->bottom(i), output);
  }

  // repeated string top = 4;
  for (int i = 0; i < this->top_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->top(i).data(), this->top(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerParameter.top");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->top(i), output);
  }

  // repeated float loss_weight = 5;
  for (int i = 0; i < this->loss_weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->loss_weight(i), output);
  }

  // repeated .caffe.ParamSpec param = 6;
  for (unsigned int i = 0, n = this->param_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->param(i), output);
  }

  // repeated .caffe.BlobProto blobs = 7;
  for (unsigned int i = 0, n = this->blobs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->blobs(i), output);
  }

  // repeated .caffe.NetStateRule include = 8;
  for (unsigned int i = 0, n = this->include_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->include(i), output);
  }

  // repeated .caffe.NetStateRule exclude = 9;
  for (unsigned int i = 0, n = this->exclude_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->exclude(i), output);
  }

  // optional .caffe.Phase phase = 10;
  if (has_phase()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->phase(), output);
  }

  // repeated bool propagate_down = 11;
  for (int i = 0; i < this->propagate_down_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      11, this->propagate_down(i), output);
  }

  // optional .caffe.TransformationParameter transform_param = 100;
  if (has_transform_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, *this->transform_param_, output);
  }

  // optional .caffe.LossParameter loss_param = 101;
  if (has_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, *this->loss_param_, output);
  }

  // optional .caffe.AccuracyParameter accuracy_param = 102;
  if (has_accuracy_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, *this->accuracy_param_, output);
  }

  // optional .caffe.ArgMaxParameter argmax_param = 103;
  if (has_argmax_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, *this->argmax_param_, output);
  }

  // optional .caffe.ConcatParameter concat_param = 104;
  if (has_concat_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      104, *this->concat_param_, output);
  }

  // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;
  if (has_contrastive_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      105, *this->contrastive_loss_param_, output);
  }

  // optional .caffe.ConvolutionParameter convolution_param = 106;
  if (has_convolution_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      106, *this->convolution_param_, output);
  }

  // optional .caffe.DataParameter data_param = 107;
  if (has_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      107, *this->data_param_, output);
  }

  // optional .caffe.DropoutParameter dropout_param = 108;
  if (has_dropout_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      108, *this->dropout_param_, output);
  }

  // optional .caffe.DummyDataParameter dummy_data_param = 109;
  if (has_dummy_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      109, *this->dummy_data_param_, output);
  }

  // optional .caffe.EltwiseParameter eltwise_param = 110;
  if (has_eltwise_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      110, *this->eltwise_param_, output);
  }

  // optional .caffe.ExpParameter exp_param = 111;
  if (has_exp_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      111, *this->exp_param_, output);
  }

  // optional .caffe.HDF5DataParameter hdf5_data_param = 112;
  if (has_hdf5_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      112, *this->hdf5_data_param_, output);
  }

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 113;
  if (has_hdf5_output_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      113, *this->hdf5_output_param_, output);
  }

  // optional .caffe.HingeLossParameter hinge_loss_param = 114;
  if (has_hinge_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      114, *this->hinge_loss_param_, output);
  }

  // optional .caffe.ImageDataParameter image_data_param = 115;
  if (has_image_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      115, *this->image_data_param_, output);
  }

  // optional .caffe.InfogainLossParameter infogain_loss_param = 116;
  if (has_infogain_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      116, *this->infogain_loss_param_, output);
  }

  // optional .caffe.InnerProductParameter inner_product_param = 117;
  if (has_inner_product_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      117, *this->inner_product_param_, output);
  }

  // optional .caffe.LRNParameter lrn_param = 118;
  if (has_lrn_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      118, *this->lrn_param_, output);
  }

  // optional .caffe.MemoryDataParameter memory_data_param = 119;
  if (has_memory_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      119, *this->memory_data_param_, output);
  }

  // optional .caffe.MVNParameter mvn_param = 120;
  if (has_mvn_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      120, *this->mvn_param_, output);
  }

  // optional .caffe.PoolingParameter pooling_param = 121;
  if (has_pooling_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      121, *this->pooling_param_, output);
  }

  // optional .caffe.PowerParameter power_param = 122;
  if (has_power_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      122, *this->power_param_, output);
  }

  // optional .caffe.ReLUParameter relu_param = 123;
  if (has_relu_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      123, *this->relu_param_, output);
  }

  // optional .caffe.SigmoidParameter sigmoid_param = 124;
  if (has_sigmoid_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      124, *this->sigmoid_param_, output);
  }

  // optional .caffe.SoftmaxParameter softmax_param = 125;
  if (has_softmax_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      125, *this->softmax_param_, output);
  }

  // optional .caffe.SliceParameter slice_param = 126;
  if (has_slice_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      126, *this->slice_param_, output);
  }

  // optional .caffe.TanHParameter tanh_param = 127;
  if (has_tanh_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      127, *this->tanh_param_, output);
  }

  // optional .caffe.ThresholdParameter threshold_param = 128;
  if (has_threshold_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      128, *this->threshold_param_, output);
  }

  // optional .caffe.WindowDataParameter window_data_param = 129;
  if (has_window_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      129, *this->window_data_param_, output);
  }

  // optional .caffe.PythonParameter python_param = 130;
  if (has_python_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      130, *this->python_param_, output);
  }

  // optional .caffe.PReLUParameter prelu_param = 131;
  if (has_prelu_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      131, *this->prelu_param_, output);
  }

  // optional .caffe.SPPParameter spp_param = 132;
  if (has_spp_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      132, *this->spp_param_, output);
  }

  // optional .caffe.ReshapeParameter reshape_param = 133;
  if (has_reshape_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      133, *this->reshape_param_, output);
  }

  // optional .caffe.LogParameter log_param = 134;
  if (has_log_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      134, *this->log_param_, output);
  }

  // optional .caffe.FlattenParameter flatten_param = 135;
  if (has_flatten_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      135, *this->flatten_param_, output);
  }

  // optional .caffe.ReductionParameter reduction_param = 136;
  if (has_reduction_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      136, *this->reduction_param_, output);
  }

  // optional .caffe.EmbedParameter embed_param = 137;
  if (has_embed_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      137, *this->embed_param_, output);
  }

  // optional .caffe.TileParameter tile_param = 138;
  if (has_tile_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      138, *this->tile_param_, output);
  }

  // optional .caffe.BatchNormParameter batch_norm_param = 139;
  if (has_batch_norm_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      139, *this->batch_norm_param_, output);
  }

  // optional .caffe.ELUParameter elu_param = 140;
  if (has_elu_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      140, *this->elu_param_, output);
  }

  // optional .caffe.BiasParameter bias_param = 141;
  if (has_bias_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      141, *this->bias_param_, output);
  }

  // optional .caffe.ScaleParameter scale_param = 142;
  if (has_scale_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      142, *this->scale_param_, output);
  }

  // optional .caffe.InputParameter input_param = 143;
  if (has_input_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      143, *this->input_param_, output);
  }

  // optional .caffe.CropParameter crop_param = 144;
  if (has_crop_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      144, *this->crop_param_, output);
  }

  // optional .caffe.ParameterParameter parameter_param = 145;
  if (has_parameter_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      145, *this->parameter_param_, output);
  }

  // optional .caffe.RecurrentParameter recurrent_param = 146;
  if (has_recurrent_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      146, *this->recurrent_param_, output);
  }

  // optional .caffe.ImgBBoxAnnoParameter img_bbox_anno_param = 1001;
  if (has_img_bbox_anno_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1001, *this->img_bbox_anno_param_, output);
  }

  // optional .caffe.HeatmapConcatParameter heatmap_concat_param = 1002;
  if (has_heatmap_concat_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1002, *this->heatmap_concat_param_, output);
  }

  // optional .caffe.BBoxAnnoMapParameter bbox_anno_map_param = 1003;
  if (has_bbox_anno_map_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1003, *this->bbox_anno_map_param_, output);
  }

  // optional .caffe.LabelParameter label_param = 1004;
  if (has_label_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1004, *this->label_param_, output);
  }

  // optional .caffe.PatchDataParameter patch_data_param = 1005;
  if (has_patch_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1005, *this->patch_data_param_, output);
  }

  // optional .caffe.LabelRemapParameter label_remap_param = 1006;
  if (has_label_remap_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1006, *this->label_remap_param_, output);
  }

  // optional .caffe.BBoxParameter bbox_param = 1007;
  if (has_bbox_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1007, *this->bbox_param_, output);
  }

  // optional .caffe.SlidingWindowInputParameter sliding_window_param = 1008;
  if (has_sliding_window_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1008, *this->sliding_window_param_, output);
  }

  // optional .caffe.BBoxToGridAndSizeParameter bbox_to_grid_and_size_param = 1009;
  if (has_bbox_to_grid_and_size_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1009, *this->bbox_to_grid_and_size_param_, output);
  }

  // optional .caffe.SizeUnitParameter size_unit_param = 1010;
  if (has_size_unit_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1010, *this->size_unit_param_, output);
  }

  // optional .caffe.PaddingParameter padding_param = 1011;
  if (has_padding_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1011, *this->padding_param_, output);
  }

  // optional .caffe.GTMapDataParameter gt_map_data_param = 1012;
  if (has_gt_map_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1012, *this->gt_map_data_param_, output);
  }

  // optional .caffe.LabelDiffIgnoreParameter label_diff_ignore_param = 1013;
  if (has_label_diff_ignore_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1013, *this->label_diff_ignore_param_, output);
  }

  // optional .caffe.GTSubmapDataParameter gt_submap_data_param = 1014;
  if (has_gt_submap_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1014, *this->gt_submap_data_param_, output);
  }

  // optional .caffe.TopSubmapDataParameter top_submap_data_param = 1015;
  if (has_top_submap_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1015, *this->top_submap_data_param_, output);
  }

  // optional .caffe.YOLOLikeLossParameter yololike_loss_param = 1016;
  if (has_yololike_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1016, *this->yololike_loss_param_, output);
  }

  // optional .caffe.WeightedSoftmaxLossParameter weighted_softmax_loss_param = 1017;
  if (has_weighted_softmax_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1017, *this->weighted_softmax_loss_param_, output);
  }

  // optional .caffe.GridProposalLossParameter grid_proposal_loss_param = 1018;
  if (has_grid_proposal_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1018, *this->grid_proposal_loss_param_, output);
  }

  // optional .caffe.BGSynthesisDataParameter bg_synthesis_data_param = 1019;
  if (has_bg_synthesis_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1019, *this->bg_synthesis_data_param_, output);
  }

  // optional .caffe.SizeFilterParameter size_filter_param = 1020;
  if (has_size_filter_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1020, *this->size_filter_param_, output);
  }

  // optional .caffe.AugmentationParameter augmentation_param = 1021;
  if (has_augmentation_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1021, *this->augmentation_param_, output);
  }

  // optional .caffe.HeatmapParameter heatmap_param = 1022;
  if (has_heatmap_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1022, *this->heatmap_param_, output);
  }

  // optional .caffe.CheckParameter check_param = 1023;
  if (has_check_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1023, *this->check_param_, output);
  }

  // optional .caffe.MeanSubParameter mean_sub_param = 1024;
  if (has_mean_sub_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1024, *this->mean_sub_param_, output);
  }

  // optional .caffe.MinibatchDataParameter minibatch_data_param = 1025;
  if (has_minibatch_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1025, *this->minibatch_data_param_, output);
  }

  // optional .caffe.RowColProposalTransformParameter rcp_transform_param = 1026;
  if (has_rcp_transform_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1026, *this->rcp_transform_param_, output);
  }

  // optional .caffe.AnnoToSegParameter anno_to_seg_param = 1027;
  if (has_anno_to_seg_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1027, *this->anno_to_seg_param_, output);
  }

  // optional .caffe.TrainROIParameter train_roi_param = 1028;
  if (has_train_roi_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1028, *this->train_roi_param_, output);
  }

  // optional .caffe.YOLOV2LossParameter yolo_v2_loss_param = 1029;
  if (has_yolo_v2_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1029, *this->yolo_v2_loss_param_, output);
  }

  // optional .caffe.YOLOV2ResultParameter yolo_v2_result_param = 1030;
  if (has_yolo_v2_result_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1030, *this->yolo_v2_result_param_, output);
  }

  // optional .caffe.DetectionCheckParameter detection_check_param = 1031;
  if (has_detection_check_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1031, *this->detection_check_param_, output);
  }

  // optional .caffe.SubwinOffsetParameter subwin_offset_param = 1032;
  if (has_subwin_offset_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1032, *this->subwin_offset_param_, output);
  }

  // optional .caffe.SizeRejectionParameter size_rejection_param = 1033;
  if (has_size_rejection_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1033, *this->size_rejection_param_, output);
  }

  // optional .caffe.ConfCheckParameter conf_check_param = 1034;
  if (has_conf_check_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1034, *this->conf_check_param_, output);
  }

  // optional .caffe.ReorgParameter reorg_param = 1035;
  if (has_reorg_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1035, *this->reorg_param_, output);
  }

  // optional .caffe.BatchRejectionParameter batch_rejection_param = 1036;
  if (has_batch_rejection_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1036, *this->batch_rejection_param_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.LayerParameter)
}

::google::protobuf::uint8* LayerParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.LayerParameter)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerParameter.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerParameter.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // repeated string bottom = 3;
  for (int i = 0; i < this->bottom_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bottom(i).data(), this->bottom(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerParameter.bottom");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->bottom(i), target);
  }

  // repeated string top = 4;
  for (int i = 0; i < this->top_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->top(i).data(), this->top(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerParameter.top");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->top(i), target);
  }

  // repeated float loss_weight = 5;
  for (int i = 0; i < this->loss_weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(5, this->loss_weight(i), target);
  }

  // repeated .caffe.ParamSpec param = 6;
  for (unsigned int i = 0, n = this->param_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->param(i), false, target);
  }

  // repeated .caffe.BlobProto blobs = 7;
  for (unsigned int i = 0, n = this->blobs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->blobs(i), false, target);
  }

  // repeated .caffe.NetStateRule include = 8;
  for (unsigned int i = 0, n = this->include_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->include(i), false, target);
  }

  // repeated .caffe.NetStateRule exclude = 9;
  for (unsigned int i = 0, n = this->exclude_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->exclude(i), false, target);
  }

  // optional .caffe.Phase phase = 10;
  if (has_phase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->phase(), target);
  }

  // repeated bool propagate_down = 11;
  for (int i = 0; i < this->propagate_down_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(11, this->propagate_down(i), target);
  }

  // optional .caffe.TransformationParameter transform_param = 100;
  if (has_transform_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        100, *this->transform_param_, false, target);
  }

  // optional .caffe.LossParameter loss_param = 101;
  if (has_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        101, *this->loss_param_, false, target);
  }

  // optional .caffe.AccuracyParameter accuracy_param = 102;
  if (has_accuracy_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        102, *this->accuracy_param_, false, target);
  }

  // optional .caffe.ArgMaxParameter argmax_param = 103;
  if (has_argmax_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        103, *this->argmax_param_, false, target);
  }

  // optional .caffe.ConcatParameter concat_param = 104;
  if (has_concat_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        104, *this->concat_param_, false, target);
  }

  // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;
  if (has_contrastive_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        105, *this->contrastive_loss_param_, false, target);
  }

  // optional .caffe.ConvolutionParameter convolution_param = 106;
  if (has_convolution_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        106, *this->convolution_param_, false, target);
  }

  // optional .caffe.DataParameter data_param = 107;
  if (has_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        107, *this->data_param_, false, target);
  }

  // optional .caffe.DropoutParameter dropout_param = 108;
  if (has_dropout_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        108, *this->dropout_param_, false, target);
  }

  // optional .caffe.DummyDataParameter dummy_data_param = 109;
  if (has_dummy_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        109, *this->dummy_data_param_, false, target);
  }

  // optional .caffe.EltwiseParameter eltwise_param = 110;
  if (has_eltwise_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        110, *this->eltwise_param_, false, target);
  }

  // optional .caffe.ExpParameter exp_param = 111;
  if (has_exp_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        111, *this->exp_param_, false, target);
  }

  // optional .caffe.HDF5DataParameter hdf5_data_param = 112;
  if (has_hdf5_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        112, *this->hdf5_data_param_, false, target);
  }

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 113;
  if (has_hdf5_output_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        113, *this->hdf5_output_param_, false, target);
  }

  // optional .caffe.HingeLossParameter hinge_loss_param = 114;
  if (has_hinge_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        114, *this->hinge_loss_param_, false, target);
  }

  // optional .caffe.ImageDataParameter image_data_param = 115;
  if (has_image_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        115, *this->image_data_param_, false, target);
  }

  // optional .caffe.InfogainLossParameter infogain_loss_param = 116;
  if (has_infogain_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        116, *this->infogain_loss_param_, false, target);
  }

  // optional .caffe.InnerProductParameter inner_product_param = 117;
  if (has_inner_product_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        117, *this->inner_product_param_, false, target);
  }

  // optional .caffe.LRNParameter lrn_param = 118;
  if (has_lrn_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        118, *this->lrn_param_, false, target);
  }

  // optional .caffe.MemoryDataParameter memory_data_param = 119;
  if (has_memory_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        119, *this->memory_data_param_, false, target);
  }

  // optional .caffe.MVNParameter mvn_param = 120;
  if (has_mvn_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        120, *this->mvn_param_, false, target);
  }

  // optional .caffe.PoolingParameter pooling_param = 121;
  if (has_pooling_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        121, *this->pooling_param_, false, target);
  }

  // optional .caffe.PowerParameter power_param = 122;
  if (has_power_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        122, *this->power_param_, false, target);
  }

  // optional .caffe.ReLUParameter relu_param = 123;
  if (has_relu_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        123, *this->relu_param_, false, target);
  }

  // optional .caffe.SigmoidParameter sigmoid_param = 124;
  if (has_sigmoid_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        124, *this->sigmoid_param_, false, target);
  }

  // optional .caffe.SoftmaxParameter softmax_param = 125;
  if (has_softmax_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        125, *this->softmax_param_, false, target);
  }

  // optional .caffe.SliceParameter slice_param = 126;
  if (has_slice_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        126, *this->slice_param_, false, target);
  }

  // optional .caffe.TanHParameter tanh_param = 127;
  if (has_tanh_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        127, *this->tanh_param_, false, target);
  }

  // optional .caffe.ThresholdParameter threshold_param = 128;
  if (has_threshold_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        128, *this->threshold_param_, false, target);
  }

  // optional .caffe.WindowDataParameter window_data_param = 129;
  if (has_window_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        129, *this->window_data_param_, false, target);
  }

  // optional .caffe.PythonParameter python_param = 130;
  if (has_python_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        130, *this->python_param_, false, target);
  }

  // optional .caffe.PReLUParameter prelu_param = 131;
  if (has_prelu_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        131, *this->prelu_param_, false, target);
  }

  // optional .caffe.SPPParameter spp_param = 132;
  if (has_spp_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        132, *this->spp_param_, false, target);
  }

  // optional .caffe.ReshapeParameter reshape_param = 133;
  if (has_reshape_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        133, *this->reshape_param_, false, target);
  }

  // optional .caffe.LogParameter log_param = 134;
  if (has_log_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        134, *this->log_param_, false, target);
  }

  // optional .caffe.FlattenParameter flatten_param = 135;
  if (has_flatten_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        135, *this->flatten_param_, false, target);
  }

  // optional .caffe.ReductionParameter reduction_param = 136;
  if (has_reduction_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        136, *this->reduction_param_, false, target);
  }

  // optional .caffe.EmbedParameter embed_param = 137;
  if (has_embed_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        137, *this->embed_param_, false, target);
  }

  // optional .caffe.TileParameter tile_param = 138;
  if (has_tile_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        138, *this->tile_param_, false, target);
  }

  // optional .caffe.BatchNormParameter batch_norm_param = 139;
  if (has_batch_norm_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        139, *this->batch_norm_param_, false, target);
  }

  // optional .caffe.ELUParameter elu_param = 140;
  if (has_elu_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        140, *this->elu_param_, false, target);
  }

  // optional .caffe.BiasParameter bias_param = 141;
  if (has_bias_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        141, *this->bias_param_, false, target);
  }

  // optional .caffe.ScaleParameter scale_param = 142;
  if (has_scale_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        142, *this->scale_param_, false, target);
  }

  // optional .caffe.InputParameter input_param = 143;
  if (has_input_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        143, *this->input_param_, false, target);
  }

  // optional .caffe.CropParameter crop_param = 144;
  if (has_crop_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        144, *this->crop_param_, false, target);
  }

  // optional .caffe.ParameterParameter parameter_param = 145;
  if (has_parameter_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        145, *this->parameter_param_, false, target);
  }

  // optional .caffe.RecurrentParameter recurrent_param = 146;
  if (has_recurrent_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        146, *this->recurrent_param_, false, target);
  }

  // optional .caffe.ImgBBoxAnnoParameter img_bbox_anno_param = 1001;
  if (has_img_bbox_anno_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1001, *this->img_bbox_anno_param_, false, target);
  }

  // optional .caffe.HeatmapConcatParameter heatmap_concat_param = 1002;
  if (has_heatmap_concat_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1002, *this->heatmap_concat_param_, false, target);
  }

  // optional .caffe.BBoxAnnoMapParameter bbox_anno_map_param = 1003;
  if (has_bbox_anno_map_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1003, *this->bbox_anno_map_param_, false, target);
  }

  // optional .caffe.LabelParameter label_param = 1004;
  if (has_label_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1004, *this->label_param_, false, target);
  }

  // optional .caffe.PatchDataParameter patch_data_param = 1005;
  if (has_patch_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1005, *this->patch_data_param_, false, target);
  }

  // optional .caffe.LabelRemapParameter label_remap_param = 1006;
  if (has_label_remap_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1006, *this->label_remap_param_, false, target);
  }

  // optional .caffe.BBoxParameter bbox_param = 1007;
  if (has_bbox_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1007, *this->bbox_param_, false, target);
  }

  // optional .caffe.SlidingWindowInputParameter sliding_window_param = 1008;
  if (has_sliding_window_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1008, *this->sliding_window_param_, false, target);
  }

  // optional .caffe.BBoxToGridAndSizeParameter bbox_to_grid_and_size_param = 1009;
  if (has_bbox_to_grid_and_size_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1009, *this->bbox_to_grid_and_size_param_, false, target);
  }

  // optional .caffe.SizeUnitParameter size_unit_param = 1010;
  if (has_size_unit_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1010, *this->size_unit_param_, false, target);
  }

  // optional .caffe.PaddingParameter padding_param = 1011;
  if (has_padding_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1011, *this->padding_param_, false, target);
  }

  // optional .caffe.GTMapDataParameter gt_map_data_param = 1012;
  if (has_gt_map_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1012, *this->gt_map_data_param_, false, target);
  }

  // optional .caffe.LabelDiffIgnoreParameter label_diff_ignore_param = 1013;
  if (has_label_diff_ignore_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1013, *this->label_diff_ignore_param_, false, target);
  }

  // optional .caffe.GTSubmapDataParameter gt_submap_data_param = 1014;
  if (has_gt_submap_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1014, *this->gt_submap_data_param_, false, target);
  }

  // optional .caffe.TopSubmapDataParameter top_submap_data_param = 1015;
  if (has_top_submap_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1015, *this->top_submap_data_param_, false, target);
  }

  // optional .caffe.YOLOLikeLossParameter yololike_loss_param = 1016;
  if (has_yololike_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1016, *this->yololike_loss_param_, false, target);
  }

  // optional .caffe.WeightedSoftmaxLossParameter weighted_softmax_loss_param = 1017;
  if (has_weighted_softmax_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1017, *this->weighted_softmax_loss_param_, false, target);
  }

  // optional .caffe.GridProposalLossParameter grid_proposal_loss_param = 1018;
  if (has_grid_proposal_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1018, *this->grid_proposal_loss_param_, false, target);
  }

  // optional .caffe.BGSynthesisDataParameter bg_synthesis_data_param = 1019;
  if (has_bg_synthesis_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1019, *this->bg_synthesis_data_param_, false, target);
  }

  // optional .caffe.SizeFilterParameter size_filter_param = 1020;
  if (has_size_filter_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1020, *this->size_filter_param_, false, target);
  }

  // optional .caffe.AugmentationParameter augmentation_param = 1021;
  if (has_augmentation_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1021, *this->augmentation_param_, false, target);
  }

  // optional .caffe.HeatmapParameter heatmap_param = 1022;
  if (has_heatmap_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1022, *this->heatmap_param_, false, target);
  }

  // optional .caffe.CheckParameter check_param = 1023;
  if (has_check_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1023, *this->check_param_, false, target);
  }

  // optional .caffe.MeanSubParameter mean_sub_param = 1024;
  if (has_mean_sub_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1024, *this->mean_sub_param_, false, target);
  }

  // optional .caffe.MinibatchDataParameter minibatch_data_param = 1025;
  if (has_minibatch_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1025, *this->minibatch_data_param_, false, target);
  }

  // optional .caffe.RowColProposalTransformParameter rcp_transform_param = 1026;
  if (has_rcp_transform_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1026, *this->rcp_transform_param_, false, target);
  }

  // optional .caffe.AnnoToSegParameter anno_to_seg_param = 1027;
  if (has_anno_to_seg_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1027, *this->anno_to_seg_param_, false, target);
  }

  // optional .caffe.TrainROIParameter train_roi_param = 1028;
  if (has_train_roi_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1028, *this->train_roi_param_, false, target);
  }

  // optional .caffe.YOLOV2LossParameter yolo_v2_loss_param = 1029;
  if (has_yolo_v2_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1029, *this->yolo_v2_loss_param_, false, target);
  }

  // optional .caffe.YOLOV2ResultParameter yolo_v2_result_param = 1030;
  if (has_yolo_v2_result_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1030, *this->yolo_v2_result_param_, false, target);
  }

  // optional .caffe.DetectionCheckParameter detection_check_param = 1031;
  if (has_detection_check_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1031, *this->detection_check_param_, false, target);
  }

  // optional .caffe.SubwinOffsetParameter subwin_offset_param = 1032;
  if (has_subwin_offset_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1032, *this->subwin_offset_param_, false, target);
  }

  // optional .caffe.SizeRejectionParameter size_rejection_param = 1033;
  if (has_size_rejection_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1033, *this->size_rejection_param_, false, target);
  }

  // optional .caffe.ConfCheckParameter conf_check_param = 1034;
  if (has_conf_check_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1034, *this->conf_check_param_, false, target);
  }

  // optional .caffe.ReorgParameter reorg_param = 1035;
  if (has_reorg_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1035, *this->reorg_param_, false, target);
  }

  // optional .caffe.BatchRejectionParameter batch_rejection_param = 1036;
  if (has_batch_rejection_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1036, *this->batch_rejection_param_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.LayerParameter)
  return target;
}

size_t LayerParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.LayerParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 19u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional .caffe.Phase phase = 10;
    if (has_phase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->phase());
    }

  }
  if (_has_bits_[11 / 32] & 63488u) {
    // optional .caffe.TransformationParameter transform_param = 100;
    if (has_transform_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->transform_param_);
    }

    // optional .caffe.LossParameter loss_param = 101;
    if (has_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->loss_param_);
    }

    // optional .caffe.AccuracyParameter accuracy_param = 102;
    if (has_accuracy_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->accuracy_param_);
    }

    // optional .caffe.ArgMaxParameter argmax_param = 103;
    if (has_argmax_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->argmax_param_);
    }

    // optional .caffe.BatchNormParameter batch_norm_param = 139;
    if (has_batch_norm_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->batch_norm_param_);
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional .caffe.BiasParameter bias_param = 141;
    if (has_bias_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bias_param_);
    }

    // optional .caffe.ConcatParameter concat_param = 104;
    if (has_concat_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->concat_param_);
    }

    // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;
    if (has_contrastive_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->contrastive_loss_param_);
    }

    // optional .caffe.ConvolutionParameter convolution_param = 106;
    if (has_convolution_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->convolution_param_);
    }

    // optional .caffe.CropParameter crop_param = 144;
    if (has_crop_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->crop_param_);
    }

    // optional .caffe.DataParameter data_param = 107;
    if (has_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->data_param_);
    }

    // optional .caffe.DropoutParameter dropout_param = 108;
    if (has_dropout_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dropout_param_);
    }

    // optional .caffe.DummyDataParameter dummy_data_param = 109;
    if (has_dummy_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dummy_data_param_);
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional .caffe.EltwiseParameter eltwise_param = 110;
    if (has_eltwise_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->eltwise_param_);
    }

    // optional .caffe.ELUParameter elu_param = 140;
    if (has_elu_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->elu_param_);
    }

    // optional .caffe.EmbedParameter embed_param = 137;
    if (has_embed_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->embed_param_);
    }

    // optional .caffe.ExpParameter exp_param = 111;
    if (has_exp_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->exp_param_);
    }

    // optional .caffe.FlattenParameter flatten_param = 135;
    if (has_flatten_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->flatten_param_);
    }

    // optional .caffe.HDF5DataParameter hdf5_data_param = 112;
    if (has_hdf5_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hdf5_data_param_);
    }

    // optional .caffe.HDF5OutputParameter hdf5_output_param = 113;
    if (has_hdf5_output_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hdf5_output_param_);
    }

    // optional .caffe.HingeLossParameter hinge_loss_param = 114;
    if (has_hinge_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hinge_loss_param_);
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional .caffe.ImageDataParameter image_data_param = 115;
    if (has_image_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->image_data_param_);
    }

    // optional .caffe.InfogainLossParameter infogain_loss_param = 116;
    if (has_infogain_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->infogain_loss_param_);
    }

    // optional .caffe.InnerProductParameter inner_product_param = 117;
    if (has_inner_product_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->inner_product_param_);
    }

    // optional .caffe.InputParameter input_param = 143;
    if (has_input_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->input_param_);
    }

    // optional .caffe.LogParameter log_param = 134;
    if (has_log_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->log_param_);
    }

    // optional .caffe.LRNParameter lrn_param = 118;
    if (has_lrn_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lrn_param_);
    }

    // optional .caffe.MemoryDataParameter memory_data_param = 119;
    if (has_memory_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->memory_data_param_);
    }

    // optional .caffe.MVNParameter mvn_param = 120;
    if (has_mvn_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mvn_param_);
    }

  }
  if (_has_bits_[40 / 32] & 65280u) {
    // optional .caffe.ParameterParameter parameter_param = 145;
    if (has_parameter_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->parameter_param_);
    }

    // optional .caffe.PoolingParameter pooling_param = 121;
    if (has_pooling_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pooling_param_);
    }

    // optional .caffe.PowerParameter power_param = 122;
    if (has_power_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->power_param_);
    }

    // optional .caffe.PReLUParameter prelu_param = 131;
    if (has_prelu_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->prelu_param_);
    }

    // optional .caffe.PythonParameter python_param = 130;
    if (has_python_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->python_param_);
    }

    // optional .caffe.RecurrentParameter recurrent_param = 146;
    if (has_recurrent_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->recurrent_param_);
    }

    // optional .caffe.ReductionParameter reduction_param = 136;
    if (has_reduction_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reduction_param_);
    }

    // optional .caffe.ReLUParameter relu_param = 123;
    if (has_relu_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->relu_param_);
    }

  }
  if (_has_bits_[48 / 32] & 16711680u) {
    // optional .caffe.ReshapeParameter reshape_param = 133;
    if (has_reshape_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reshape_param_);
    }

    // optional .caffe.ScaleParameter scale_param = 142;
    if (has_scale_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->scale_param_);
    }

    // optional .caffe.SigmoidParameter sigmoid_param = 124;
    if (has_sigmoid_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sigmoid_param_);
    }

    // optional .caffe.SoftmaxParameter softmax_param = 125;
    if (has_softmax_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->softmax_param_);
    }

    // optional .caffe.SPPParameter spp_param = 132;
    if (has_spp_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->spp_param_);
    }

    // optional .caffe.SliceParameter slice_param = 126;
    if (has_slice_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->slice_param_);
    }

    // optional .caffe.TanHParameter tanh_param = 127;
    if (has_tanh_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tanh_param_);
    }

    // optional .caffe.ThresholdParameter threshold_param = 128;
    if (has_threshold_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->threshold_param_);
    }

  }
  if (_has_bits_[56 / 32] & 4278190080u) {
    // optional .caffe.TileParameter tile_param = 138;
    if (has_tile_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tile_param_);
    }

    // optional .caffe.WindowDataParameter window_data_param = 129;
    if (has_window_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->window_data_param_);
    }

    // optional .caffe.ImgBBoxAnnoParameter img_bbox_anno_param = 1001;
    if (has_img_bbox_anno_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->img_bbox_anno_param_);
    }

    // optional .caffe.HeatmapConcatParameter heatmap_concat_param = 1002;
    if (has_heatmap_concat_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->heatmap_concat_param_);
    }

    // optional .caffe.BBoxAnnoMapParameter bbox_anno_map_param = 1003;
    if (has_bbox_anno_map_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bbox_anno_map_param_);
    }

    // optional .caffe.LabelParameter label_param = 1004;
    if (has_label_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->label_param_);
    }

    // optional .caffe.PatchDataParameter patch_data_param = 1005;
    if (has_patch_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->patch_data_param_);
    }

    // optional .caffe.LabelRemapParameter label_remap_param = 1006;
    if (has_label_remap_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->label_remap_param_);
    }

  }
  if (_has_bits_[64 / 32] & 255u) {
    // optional .caffe.BBoxParameter bbox_param = 1007;
    if (has_bbox_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bbox_param_);
    }

    // optional .caffe.SlidingWindowInputParameter sliding_window_param = 1008;
    if (has_sliding_window_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sliding_window_param_);
    }

    // optional .caffe.BBoxToGridAndSizeParameter bbox_to_grid_and_size_param = 1009;
    if (has_bbox_to_grid_and_size_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bbox_to_grid_and_size_param_);
    }

    // optional .caffe.SizeUnitParameter size_unit_param = 1010;
    if (has_size_unit_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->size_unit_param_);
    }

    // optional .caffe.PaddingParameter padding_param = 1011;
    if (has_padding_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->padding_param_);
    }

    // optional .caffe.GTMapDataParameter gt_map_data_param = 1012;
    if (has_gt_map_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gt_map_data_param_);
    }

    // optional .caffe.LabelDiffIgnoreParameter label_diff_ignore_param = 1013;
    if (has_label_diff_ignore_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->label_diff_ignore_param_);
    }

    // optional .caffe.GTSubmapDataParameter gt_submap_data_param = 1014;
    if (has_gt_submap_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gt_submap_data_param_);
    }

  }
  if (_has_bits_[72 / 32] & 65280u) {
    // optional .caffe.TopSubmapDataParameter top_submap_data_param = 1015;
    if (has_top_submap_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->top_submap_data_param_);
    }

    // optional .caffe.YOLOLikeLossParameter yololike_loss_param = 1016;
    if (has_yololike_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->yololike_loss_param_);
    }

    // optional .caffe.WeightedSoftmaxLossParameter weighted_softmax_loss_param = 1017;
    if (has_weighted_softmax_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->weighted_softmax_loss_param_);
    }

    // optional .caffe.GridProposalLossParameter grid_proposal_loss_param = 1018;
    if (has_grid_proposal_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->grid_proposal_loss_param_);
    }

    // optional .caffe.BGSynthesisDataParameter bg_synthesis_data_param = 1019;
    if (has_bg_synthesis_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bg_synthesis_data_param_);
    }

    // optional .caffe.SizeFilterParameter size_filter_param = 1020;
    if (has_size_filter_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->size_filter_param_);
    }

    // optional .caffe.AugmentationParameter augmentation_param = 1021;
    if (has_augmentation_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->augmentation_param_);
    }

    // optional .caffe.HeatmapParameter heatmap_param = 1022;
    if (has_heatmap_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->heatmap_param_);
    }

  }
  if (_has_bits_[80 / 32] & 16711680u) {
    // optional .caffe.CheckParameter check_param = 1023;
    if (has_check_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->check_param_);
    }

    // optional .caffe.MeanSubParameter mean_sub_param = 1024;
    if (has_mean_sub_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mean_sub_param_);
    }

    // optional .caffe.MinibatchDataParameter minibatch_data_param = 1025;
    if (has_minibatch_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->minibatch_data_param_);
    }

    // optional .caffe.RowColProposalTransformParameter rcp_transform_param = 1026;
    if (has_rcp_transform_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rcp_transform_param_);
    }

    // optional .caffe.AnnoToSegParameter anno_to_seg_param = 1027;
    if (has_anno_to_seg_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->anno_to_seg_param_);
    }

    // optional .caffe.TrainROIParameter train_roi_param = 1028;
    if (has_train_roi_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->train_roi_param_);
    }

    // optional .caffe.YOLOV2LossParameter yolo_v2_loss_param = 1029;
    if (has_yolo_v2_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->yolo_v2_loss_param_);
    }

    // optional .caffe.YOLOV2ResultParameter yolo_v2_result_param = 1030;
    if (has_yolo_v2_result_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->yolo_v2_result_param_);
    }

  }
  if (_has_bits_[88 / 32] & 1056964608u) {
    // optional .caffe.DetectionCheckParameter detection_check_param = 1031;
    if (has_detection_check_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->detection_check_param_);
    }

    // optional .caffe.SubwinOffsetParameter subwin_offset_param = 1032;
    if (has_subwin_offset_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->subwin_offset_param_);
    }

    // optional .caffe.SizeRejectionParameter size_rejection_param = 1033;
    if (has_size_rejection_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->size_rejection_param_);
    }

    // optional .caffe.ConfCheckParameter conf_check_param = 1034;
    if (has_conf_check_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->conf_check_param_);
    }

    // optional .caffe.ReorgParameter reorg_param = 1035;
    if (has_reorg_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reorg_param_);
    }

    // optional .caffe.BatchRejectionParameter batch_rejection_param = 1036;
    if (has_batch_rejection_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->batch_rejection_param_);
    }

  }
  // repeated string bottom = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->bottom_size());
  for (int i = 0; i < this->bottom_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->bottom(i));
  }

  // repeated string top = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->top_size());
  for (int i = 0; i < this->top_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->top(i));
  }

  // repeated float loss_weight = 5;
  {
    size_t data_size = 0;
    unsigned int count = this->loss_weight_size();
    data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->loss_weight_size());
    total_size += data_size;
  }

  // repeated .caffe.ParamSpec param = 6;
  {
    unsigned int count = this->param_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->param(i));
    }
  }

  // repeated .caffe.BlobProto blobs = 7;
  {
    unsigned int count = this->blobs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blobs(i));
    }
  }

  // repeated bool propagate_down = 11;
  {
    size_t data_size = 0;
    unsigned int count = this->propagate_down_size();
    data_size = 1UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->propagate_down_size());
    total_size += data_size;
  }

  // repeated .caffe.NetStateRule include = 8;
  {
    unsigned int count = this->include_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->include(i));
    }
  }

  // repeated .caffe.NetStateRule exclude = 9;
  {
    unsigned int count = this->exclude_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->exclude(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LayerParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.LayerParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LayerParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LayerParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.LayerParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.LayerParameter)
    UnsafeMergeFrom(*source);
  }
}

void LayerParameter::MergeFrom(const LayerParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.LayerParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void LayerParameter::UnsafeMergeFrom(const LayerParameter& from) {
  GOOGLE_DCHECK(&from != this);
  bottom_.UnsafeMergeFrom(from.bottom_);
  top_.UnsafeMergeFrom(from.top_);
  loss_weight_.UnsafeMergeFrom(from.loss_weight_);
  param_.MergeFrom(from.param_);
  blobs_.MergeFrom(from.blobs_);
  propagate_down_.UnsafeMergeFrom(from.propagate_down_);
  include_.MergeFrom(from.include_);
  exclude_.MergeFrom(from.exclude_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (from.has_phase()) {
      set_phase(from.phase());
    }
  }
  if (from._has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (from.has_transform_param()) {
      mutable_transform_param()->::caffe::TransformationParameter::MergeFrom(from.transform_param());
    }
    if (from.has_loss_param()) {
      mutable_loss_param()->::caffe::LossParameter::MergeFrom(from.loss_param());
    }
    if (from.has_accuracy_param()) {
      mutable_accuracy_param()->::caffe::AccuracyParameter::MergeFrom(from.accuracy_param());
    }
    if (from.has_argmax_param()) {
      mutable_argmax_param()->::caffe::ArgMaxParameter::MergeFrom(from.argmax_param());
    }
    if (from.has_batch_norm_param()) {
      mutable_batch_norm_param()->::caffe::BatchNormParameter::MergeFrom(from.batch_norm_param());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_bias_param()) {
      mutable_bias_param()->::caffe::BiasParameter::MergeFrom(from.bias_param());
    }
    if (from.has_concat_param()) {
      mutable_concat_param()->::caffe::ConcatParameter::MergeFrom(from.concat_param());
    }
    if (from.has_contrastive_loss_param()) {
      mutable_contrastive_loss_param()->::caffe::ContrastiveLossParameter::MergeFrom(from.contrastive_loss_param());
    }
    if (from.has_convolution_param()) {
      mutable_convolution_param()->::caffe::ConvolutionParameter::MergeFrom(from.convolution_param());
    }
    if (from.has_crop_param()) {
      mutable_crop_param()->::caffe::CropParameter::MergeFrom(from.crop_param());
    }
    if (from.has_data_param()) {
      mutable_data_param()->::caffe::DataParameter::MergeFrom(from.data_param());
    }
    if (from.has_dropout_param()) {
      mutable_dropout_param()->::caffe::DropoutParameter::MergeFrom(from.dropout_param());
    }
    if (from.has_dummy_data_param()) {
      mutable_dummy_data_param()->::caffe::DummyDataParameter::MergeFrom(from.dummy_data_param());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_eltwise_param()) {
      mutable_eltwise_param()->::caffe::EltwiseParameter::MergeFrom(from.eltwise_param());
    }
    if (from.has_elu_param()) {
      mutable_elu_param()->::caffe::ELUParameter::MergeFrom(from.elu_param());
    }
    if (from.has_embed_param()) {
      mutable_embed_param()->::caffe::EmbedParameter::MergeFrom(from.embed_param());
    }
    if (from.has_exp_param()) {
      mutable_exp_param()->::caffe::ExpParameter::MergeFrom(from.exp_param());
    }
    if (from.has_flatten_param()) {
      mutable_flatten_param()->::caffe::FlattenParameter::MergeFrom(from.flatten_param());
    }
    if (from.has_hdf5_data_param()) {
      mutable_hdf5_data_param()->::caffe::HDF5DataParameter::MergeFrom(from.hdf5_data_param());
    }
    if (from.has_hdf5_output_param()) {
      mutable_hdf5_output_param()->::caffe::HDF5OutputParameter::MergeFrom(from.hdf5_output_param());
    }
    if (from.has_hinge_loss_param()) {
      mutable_hinge_loss_param()->::caffe::HingeLossParameter::MergeFrom(from.hinge_loss_param());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_image_data_param()) {
      mutable_image_data_param()->::caffe::ImageDataParameter::MergeFrom(from.image_data_param());
    }
    if (from.has_infogain_loss_param()) {
      mutable_infogain_loss_param()->::caffe::InfogainLossParameter::MergeFrom(from.infogain_loss_param());
    }
    if (from.has_inner_product_param()) {
      mutable_inner_product_param()->::caffe::InnerProductParameter::MergeFrom(from.inner_product_param());
    }
    if (from.has_input_param()) {
      mutable_input_param()->::caffe::InputParameter::MergeFrom(from.input_param());
    }
    if (from.has_log_param()) {
      mutable_log_param()->::caffe::LogParameter::MergeFrom(from.log_param());
    }
    if (from.has_lrn_param()) {
      mutable_lrn_param()->::caffe::LRNParameter::MergeFrom(from.lrn_param());
    }
    if (from.has_memory_data_param()) {
      mutable_memory_data_param()->::caffe::MemoryDataParameter::MergeFrom(from.memory_data_param());
    }
    if (from.has_mvn_param()) {
      mutable_mvn_param()->::caffe::MVNParameter::MergeFrom(from.mvn_param());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_parameter_param()) {
      mutable_parameter_param()->::caffe::ParameterParameter::MergeFrom(from.parameter_param());
    }
    if (from.has_pooling_param()) {
      mutable_pooling_param()->::caffe::PoolingParameter::MergeFrom(from.pooling_param());
    }
    if (from.has_power_param()) {
      mutable_power_param()->::caffe::PowerParameter::MergeFrom(from.power_param());
    }
    if (from.has_prelu_param()) {
      mutable_prelu_param()->::caffe::PReLUParameter::MergeFrom(from.prelu_param());
    }
    if (from.has_python_param()) {
      mutable_python_param()->::caffe::PythonParameter::MergeFrom(from.python_param());
    }
    if (from.has_recurrent_param()) {
      mutable_recurrent_param()->::caffe::RecurrentParameter::MergeFrom(from.recurrent_param());
    }
    if (from.has_reduction_param()) {
      mutable_reduction_param()->::caffe::ReductionParameter::MergeFrom(from.reduction_param());
    }
    if (from.has_relu_param()) {
      mutable_relu_param()->::caffe::ReLUParameter::MergeFrom(from.relu_param());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_reshape_param()) {
      mutable_reshape_param()->::caffe::ReshapeParameter::MergeFrom(from.reshape_param());
    }
    if (from.has_scale_param()) {
      mutable_scale_param()->::caffe::ScaleParameter::MergeFrom(from.scale_param());
    }
    if (from.has_sigmoid_param()) {
      mutable_sigmoid_param()->::caffe::SigmoidParameter::MergeFrom(from.sigmoid_param());
    }
    if (from.has_softmax_param()) {
      mutable_softmax_param()->::caffe::SoftmaxParameter::MergeFrom(from.softmax_param());
    }
    if (from.has_spp_param()) {
      mutable_spp_param()->::caffe::SPPParameter::MergeFrom(from.spp_param());
    }
    if (from.has_slice_param()) {
      mutable_slice_param()->::caffe::SliceParameter::MergeFrom(from.slice_param());
    }
    if (from.has_tanh_param()) {
      mutable_tanh_param()->::caffe::TanHParameter::MergeFrom(from.tanh_param());
    }
    if (from.has_threshold_param()) {
      mutable_threshold_param()->::caffe::ThresholdParameter::MergeFrom(from.threshold_param());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_tile_param()) {
      mutable_tile_param()->::caffe::TileParameter::MergeFrom(from.tile_param());
    }
    if (from.has_window_data_param()) {
      mutable_window_data_param()->::caffe::WindowDataParameter::MergeFrom(from.window_data_param());
    }
    if (from.has_img_bbox_anno_param()) {
      mutable_img_bbox_anno_param()->::caffe::ImgBBoxAnnoParameter::MergeFrom(from.img_bbox_anno_param());
    }
    if (from.has_heatmap_concat_param()) {
      mutable_heatmap_concat_param()->::caffe::HeatmapConcatParameter::MergeFrom(from.heatmap_concat_param());
    }
    if (from.has_bbox_anno_map_param()) {
      mutable_bbox_anno_map_param()->::caffe::BBoxAnnoMapParameter::MergeFrom(from.bbox_anno_map_param());
    }
    if (from.has_label_param()) {
      mutable_label_param()->::caffe::LabelParameter::MergeFrom(from.label_param());
    }
    if (from.has_patch_data_param()) {
      mutable_patch_data_param()->::caffe::PatchDataParameter::MergeFrom(from.patch_data_param());
    }
    if (from.has_label_remap_param()) {
      mutable_label_remap_param()->::caffe::LabelRemapParameter::MergeFrom(from.label_remap_param());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_bbox_param()) {
      mutable_bbox_param()->::caffe::BBoxParameter::MergeFrom(from.bbox_param());
    }
    if (from.has_sliding_window_param()) {
      mutable_sliding_window_param()->::caffe::SlidingWindowInputParameter::MergeFrom(from.sliding_window_param());
    }
    if (from.has_bbox_to_grid_and_size_param()) {
      mutable_bbox_to_grid_and_size_param()->::caffe::BBoxToGridAndSizeParameter::MergeFrom(from.bbox_to_grid_and_size_param());
    }
    if (from.has_size_unit_param()) {
      mutable_size_unit_param()->::caffe::SizeUnitParameter::MergeFrom(from.size_unit_param());
    }
    if (from.has_padding_param()) {
      mutable_padding_param()->::caffe::PaddingParameter::MergeFrom(from.padding_param());
    }
    if (from.has_gt_map_data_param()) {
      mutable_gt_map_data_param()->::caffe::GTMapDataParameter::MergeFrom(from.gt_map_data_param());
    }
    if (from.has_label_diff_ignore_param()) {
      mutable_label_diff_ignore_param()->::caffe::LabelDiffIgnoreParameter::MergeFrom(from.label_diff_ignore_param());
    }
    if (from.has_gt_submap_data_param()) {
      mutable_gt_submap_data_param()->::caffe::GTSubmapDataParameter::MergeFrom(from.gt_submap_data_param());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from.has_top_submap_data_param()) {
      mutable_top_submap_data_param()->::caffe::TopSubmapDataParameter::MergeFrom(from.top_submap_data_param());
    }
    if (from.has_yololike_loss_param()) {
      mutable_yololike_loss_param()->::caffe::YOLOLikeLossParameter::MergeFrom(from.yololike_loss_param());
    }
    if (from.has_weighted_softmax_loss_param()) {
      mutable_weighted_softmax_loss_param()->::caffe::WeightedSoftmaxLossParameter::MergeFrom(from.weighted_softmax_loss_param());
    }
    if (from.has_grid_proposal_loss_param()) {
      mutable_grid_proposal_loss_param()->::caffe::GridProposalLossParameter::MergeFrom(from.grid_proposal_loss_param());
    }
    if (from.has_bg_synthesis_data_param()) {
      mutable_bg_synthesis_data_param()->::caffe::BGSynthesisDataParameter::MergeFrom(from.bg_synthesis_data_param());
    }
    if (from.has_size_filter_param()) {
      mutable_size_filter_param()->::caffe::SizeFilterParameter::MergeFrom(from.size_filter_param());
    }
    if (from.has_augmentation_param()) {
      mutable_augmentation_param()->::caffe::AugmentationParameter::MergeFrom(from.augmentation_param());
    }
    if (from.has_heatmap_param()) {
      mutable_heatmap_param()->::caffe::HeatmapParameter::MergeFrom(from.heatmap_param());
    }
  }
  if (from._has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    if (from.has_check_param()) {
      mutable_check_param()->::caffe::CheckParameter::MergeFrom(from.check_param());
    }
    if (from.has_mean_sub_param()) {
      mutable_mean_sub_param()->::caffe::MeanSubParameter::MergeFrom(from.mean_sub_param());
    }
    if (from.has_minibatch_data_param()) {
      mutable_minibatch_data_param()->::caffe::MinibatchDataParameter::MergeFrom(from.minibatch_data_param());
    }
    if (from.has_rcp_transform_param()) {
      mutable_rcp_transform_param()->::caffe::RowColProposalTransformParameter::MergeFrom(from.rcp_transform_param());
    }
    if (from.has_anno_to_seg_param()) {
      mutable_anno_to_seg_param()->::caffe::AnnoToSegParameter::MergeFrom(from.anno_to_seg_param());
    }
    if (from.has_train_roi_param()) {
      mutable_train_roi_param()->::caffe::TrainROIParameter::MergeFrom(from.train_roi_param());
    }
    if (from.has_yolo_v2_loss_param()) {
      mutable_yolo_v2_loss_param()->::caffe::YOLOV2LossParameter::MergeFrom(from.yolo_v2_loss_param());
    }
    if (from.has_yolo_v2_result_param()) {
      mutable_yolo_v2_result_param()->::caffe::YOLOV2ResultParameter::MergeFrom(from.yolo_v2_result_param());
    }
  }
  if (from._has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    if (from.has_detection_check_param()) {
      mutable_detection_check_param()->::caffe::DetectionCheckParameter::MergeFrom(from.detection_check_param());
    }
    if (from.has_subwin_offset_param()) {
      mutable_subwin_offset_param()->::caffe::SubwinOffsetParameter::MergeFrom(from.subwin_offset_param());
    }
    if (from.has_size_rejection_param()) {
      mutable_size_rejection_param()->::caffe::SizeRejectionParameter::MergeFrom(from.size_rejection_param());
    }
    if (from.has_conf_check_param()) {
      mutable_conf_check_param()->::caffe::ConfCheckParameter::MergeFrom(from.conf_check_param());
    }
    if (from.has_reorg_param()) {
      mutable_reorg_param()->::caffe::ReorgParameter::MergeFrom(from.reorg_param());
    }
    if (from.has_batch_rejection_param()) {
      mutable_batch_rejection_param()->::caffe::BatchRejectionParameter::MergeFrom(from.batch_rejection_param());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void LayerParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.LayerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LayerParameter::CopyFrom(const LayerParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.LayerParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool LayerParameter::IsInitialized() const {

  if (has_img_bbox_anno_param()) {
    if (!this->img_bbox_anno_param_->IsInitialized()) return false;
  }
  if (has_heatmap_concat_param()) {
    if (!this->heatmap_concat_param_->IsInitialized()) return false;
  }
  if (has_bbox_anno_map_param()) {
    if (!this->bbox_anno_map_param_->IsInitialized()) return false;
  }
  if (has_label_param()) {
    if (!this->label_param_->IsInitialized()) return false;
  }
  if (has_sliding_window_param()) {
    if (!this->sliding_window_param_->IsInitialized()) return false;
  }
  if (has_size_unit_param()) {
    if (!this->size_unit_param_->IsInitialized()) return false;
  }
  if (has_gt_map_data_param()) {
    if (!this->gt_map_data_param_->IsInitialized()) return false;
  }
  if (has_gt_submap_data_param()) {
    if (!this->gt_submap_data_param_->IsInitialized()) return false;
  }
  if (has_top_submap_data_param()) {
    if (!this->top_submap_data_param_->IsInitialized()) return false;
  }
  if (has_bg_synthesis_data_param()) {
    if (!this->bg_synthesis_data_param_->IsInitialized()) return false;
  }
  if (has_mean_sub_param()) {
    if (!this->mean_sub_param_->IsInitialized()) return false;
  }
  if (has_rcp_transform_param()) {
    if (!this->rcp_transform_param_->IsInitialized()) return false;
  }
  if (has_train_roi_param()) {
    if (!this->train_roi_param_->IsInitialized()) return false;
  }
  if (has_yolo_v2_loss_param()) {
    if (!this->yolo_v2_loss_param_->IsInitialized()) return false;
  }
  if (has_yolo_v2_result_param()) {
    if (!this->yolo_v2_result_param_->IsInitialized()) return false;
  }
  if (has_subwin_offset_param()) {
    if (!this->subwin_offset_param_->IsInitialized()) return false;
  }
  return true;
}

void LayerParameter::Swap(LayerParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LayerParameter::InternalSwap(LayerParameter* other) {
  name_.Swap(&other->name_);
  type_.Swap(&other->type_);
  bottom_.UnsafeArenaSwap(&other->bottom_);
  top_.UnsafeArenaSwap(&other->top_);
  std::swap(phase_, other->phase_);
  loss_weight_.UnsafeArenaSwap(&other->loss_weight_);
  param_.UnsafeArenaSwap(&other->param_);
  blobs_.UnsafeArenaSwap(&other->blobs_);
  propagate_down_.UnsafeArenaSwap(&other->propagate_down_);
  include_.UnsafeArenaSwap(&other->include_);
  exclude_.UnsafeArenaSwap(&other->exclude_);
  std::swap(transform_param_, other->transform_param_);
  std::swap(loss_param_, other->loss_param_);
  std::swap(accuracy_param_, other->accuracy_param_);
  std::swap(argmax_param_, other->argmax_param_);
  std::swap(batch_norm_param_, other->batch_norm_param_);
  std::swap(bias_param_, other->bias_param_);
  std::swap(concat_param_, other->concat_param_);
  std::swap(contrastive_loss_param_, other->contrastive_loss_param_);
  std::swap(convolution_param_, other->convolution_param_);
  std::swap(crop_param_, other->crop_param_);
  std::swap(data_param_, other->data_param_);
  std::swap(dropout_param_, other->dropout_param_);
  std::swap(dummy_data_param_, other->dummy_data_param_);
  std::swap(eltwise_param_, other->eltwise_param_);
  std::swap(elu_param_, other->elu_param_);
  std::swap(embed_param_, other->embed_param_);
  std::swap(exp_param_, other->exp_param_);
  std::swap(flatten_param_, other->flatten_param_);
  std::swap(hdf5_data_param_, other->hdf5_data_param_);
  std::swap(hdf5_output_param_, other->hdf5_output_param_);
  std::swap(hinge_loss_param_, other->hinge_loss_param_);
  std::swap(image_data_param_, other->image_data_param_);
  std::swap(infogain_loss_param_, other->infogain_loss_param_);
  std::swap(inner_product_param_, other->inner_product_param_);
  std::swap(input_param_, other->input_param_);
  std::swap(log_param_, other->log_param_);
  std::swap(lrn_param_, other->lrn_param_);
  std::swap(memory_data_param_, other->memory_data_param_);
  std::swap(mvn_param_, other->mvn_param_);
  std::swap(parameter_param_, other->parameter_param_);
  std::swap(pooling_param_, other->pooling_param_);
  std::swap(power_param_, other->power_param_);
  std::swap(prelu_param_, other->prelu_param_);
  std::swap(python_param_, other->python_param_);
  std::swap(recurrent_param_, other->recurrent_param_);
  std::swap(reduction_param_, other->reduction_param_);
  std::swap(relu_param_, other->relu_param_);
  std::swap(reshape_param_, other->reshape_param_);
  std::swap(scale_param_, other->scale_param_);
  std::swap(sigmoid_param_, other->sigmoid_param_);
  std::swap(softmax_param_, other->softmax_param_);
  std::swap(spp_param_, other->spp_param_);
  std::swap(slice_param_, other->slice_param_);
  std::swap(tanh_param_, other->tanh_param_);
  std::swap(threshold_param_, other->threshold_param_);
  std::swap(tile_param_, other->tile_param_);
  std::swap(window_data_param_, other->window_data_param_);
  std::swap(img_bbox_anno_param_, other->img_bbox_anno_param_);
  std::swap(heatmap_concat_param_, other->heatmap_concat_param_);
  std::swap(bbox_anno_map_param_, other->bbox_anno_map_param_);
  std::swap(label_param_, other->label_param_);
  std::swap(patch_data_param_, other->patch_data_param_);
  std::swap(label_remap_param_, other->label_remap_param_);
  std::swap(bbox_param_, other->bbox_param_);
  std::swap(sliding_window_param_, other->sliding_window_param_);
  std::swap(bbox_to_grid_and_size_param_, other->bbox_to_grid_and_size_param_);
  std::swap(size_unit_param_, other->size_unit_param_);
  std::swap(padding_param_, other->padding_param_);
  std::swap(gt_map_data_param_, other->gt_map_data_param_);
  std::swap(label_diff_ignore_param_, other->label_diff_ignore_param_);
  std::swap(gt_submap_data_param_, other->gt_submap_data_param_);
  std::swap(top_submap_data_param_, other->top_submap_data_param_);
  std::swap(yololike_loss_param_, other->yololike_loss_param_);
  std::swap(weighted_softmax_loss_param_, other->weighted_softmax_loss_param_);
  std::swap(grid_proposal_loss_param_, other->grid_proposal_loss_param_);
  std::swap(bg_synthesis_data_param_, other->bg_synthesis_data_param_);
  std::swap(size_filter_param_, other->size_filter_param_);
  std::swap(augmentation_param_, other->augmentation_param_);
  std::swap(heatmap_param_, other->heatmap_param_);
  std::swap(check_param_, other->check_param_);
  std::swap(mean_sub_param_, other->mean_sub_param_);
  std::swap(minibatch_data_param_, other->minibatch_data_param_);
  std::swap(rcp_transform_param_, other->rcp_transform_param_);
  std::swap(anno_to_seg_param_, other->anno_to_seg_param_);
  std::swap(train_roi_param_, other->train_roi_param_);
  std::swap(yolo_v2_loss_param_, other->yolo_v2_loss_param_);
  std::swap(yolo_v2_result_param_, other->yolo_v2_result_param_);
  std::swap(detection_check_param_, other->detection_check_param_);
  std::swap(subwin_offset_param_, other->subwin_offset_param_);
  std::swap(size_rejection_param_, other->size_rejection_param_);
  std::swap(conf_check_param_, other->conf_check_param_);
  std::swap(reorg_param_, other->reorg_param_);
  std::swap(batch_rejection_param_, other->batch_rejection_param_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  std::swap(_has_bits_[2], other->_has_bits_[2]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LayerParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LayerParameter_descriptor_;
  metadata.reflection = LayerParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LayerParameter

// optional string name = 1;
bool LayerParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LayerParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void LayerParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void LayerParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LayerParameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.name)
}
void LayerParameter::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.name)
}
void LayerParameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.name)
}
::std::string* LayerParameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LayerParameter::release_name() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LayerParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.name)
}

// optional string type = 2;
bool LayerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LayerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void LayerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void LayerParameter::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
const ::std::string& LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LayerParameter::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.type)
}
void LayerParameter::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.type)
}
void LayerParameter::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.type)
}
::std::string* LayerParameter::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LayerParameter::release_type() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LayerParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.type)
}

// repeated string bottom = 3;
int LayerParameter::bottom_size() const {
  return bottom_.size();
}
void LayerParameter::clear_bottom() {
  bottom_.Clear();
}
const ::std::string& LayerParameter::bottom(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.bottom)
  return bottom_.Get(index);
}
::std::string* LayerParameter::mutable_bottom(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.bottom)
  return bottom_.Mutable(index);
}
void LayerParameter::set_bottom(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.bottom)
  bottom_.Mutable(index)->assign(value);
}
void LayerParameter::set_bottom(int index, const char* value) {
  bottom_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.bottom)
}
void LayerParameter::set_bottom(int index, const char* value, size_t size) {
  bottom_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.bottom)
}
::std::string* LayerParameter::add_bottom() {
  // @@protoc_insertion_point(field_add_mutable:caffe.LayerParameter.bottom)
  return bottom_.Add();
}
void LayerParameter::add_bottom(const ::std::string& value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.bottom)
}
void LayerParameter::add_bottom(const char* value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.LayerParameter.bottom)
}
void LayerParameter::add_bottom(const char* value, size_t size) {
  bottom_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.LayerParameter.bottom)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerParameter::bottom() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.bottom)
  return bottom_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
LayerParameter::mutable_bottom() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.bottom)
  return &bottom_;
}

// repeated string top = 4;
int LayerParameter::top_size() const {
  return top_.size();
}
void LayerParameter::clear_top() {
  top_.Clear();
}
const ::std::string& LayerParameter::top(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.top)
  return top_.Get(index);
}
::std::string* LayerParameter::mutable_top(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.top)
  return top_.Mutable(index);
}
void LayerParameter::set_top(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.top)
  top_.Mutable(index)->assign(value);
}
void LayerParameter::set_top(int index, const char* value) {
  top_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.top)
}
void LayerParameter::set_top(int index, const char* value, size_t size) {
  top_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.top)
}
::std::string* LayerParameter::add_top() {
  // @@protoc_insertion_point(field_add_mutable:caffe.LayerParameter.top)
  return top_.Add();
}
void LayerParameter::add_top(const ::std::string& value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.top)
}
void LayerParameter::add_top(const char* value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.LayerParameter.top)
}
void LayerParameter::add_top(const char* value, size_t size) {
  top_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.LayerParameter.top)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerParameter::top() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.top)
  return top_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
LayerParameter::mutable_top() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.top)
  return &top_;
}

// optional .caffe.Phase phase = 10;
bool LayerParameter::has_phase() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LayerParameter::set_has_phase() {
  _has_bits_[0] |= 0x00000010u;
}
void LayerParameter::clear_has_phase() {
  _has_bits_[0] &= ~0x00000010u;
}
void LayerParameter::clear_phase() {
  phase_ = 0;
  clear_has_phase();
}
::caffe::Phase LayerParameter::phase() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.phase)
  return static_cast< ::caffe::Phase >(phase_);
}
void LayerParameter::set_phase(::caffe::Phase value) {
  assert(::caffe::Phase_IsValid(value));
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.phase)
}

// repeated float loss_weight = 5;
int LayerParameter::loss_weight_size() const {
  return loss_weight_.size();
}
void LayerParameter::clear_loss_weight() {
  loss_weight_.Clear();
}
float LayerParameter::loss_weight(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.loss_weight)
  return loss_weight_.Get(index);
}
void LayerParameter::set_loss_weight(int index, float value) {
  loss_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.loss_weight)
}
void LayerParameter::add_loss_weight(float value) {
  loss_weight_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.loss_weight)
}
const ::google::protobuf::RepeatedField< float >&
LayerParameter::loss_weight() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.loss_weight)
  return loss_weight_;
}
::google::protobuf::RepeatedField< float >*
LayerParameter::mutable_loss_weight() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.loss_weight)
  return &loss_weight_;
}

// repeated .caffe.ParamSpec param = 6;
int LayerParameter::param_size() const {
  return param_.size();
}
void LayerParameter::clear_param() {
  param_.Clear();
}
const ::caffe::ParamSpec& LayerParameter::param(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.param)
  return param_.Get(index);
}
::caffe::ParamSpec* LayerParameter::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.param)
  return param_.Mutable(index);
}
::caffe::ParamSpec* LayerParameter::add_param() {
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.param)
  return param_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec >*
LayerParameter::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.param)
  return &param_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec >&
LayerParameter::param() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.param)
  return param_;
}

// repeated .caffe.BlobProto blobs = 7;
int LayerParameter::blobs_size() const {
  return blobs_.size();
}
void LayerParameter::clear_blobs() {
  blobs_.Clear();
}
const ::caffe::BlobProto& LayerParameter::blobs(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.blobs)
  return blobs_.Get(index);
}
::caffe::BlobProto* LayerParameter::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.blobs)
  return blobs_.Mutable(index);
}
::caffe::BlobProto* LayerParameter::add_blobs() {
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.blobs)
  return blobs_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
LayerParameter::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.blobs)
  return &blobs_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
LayerParameter::blobs() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.blobs)
  return blobs_;
}

// repeated bool propagate_down = 11;
int LayerParameter::propagate_down_size() const {
  return propagate_down_.size();
}
void LayerParameter::clear_propagate_down() {
  propagate_down_.Clear();
}
bool LayerParameter::propagate_down(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.propagate_down)
  return propagate_down_.Get(index);
}
void LayerParameter::set_propagate_down(int index, bool value) {
  propagate_down_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.propagate_down)
}
void LayerParameter::add_propagate_down(bool value) {
  propagate_down_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.propagate_down)
}
const ::google::protobuf::RepeatedField< bool >&
LayerParameter::propagate_down() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.propagate_down)
  return propagate_down_;
}
::google::protobuf::RepeatedField< bool >*
LayerParameter::mutable_propagate_down() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.propagate_down)
  return &propagate_down_;
}

// repeated .caffe.NetStateRule include = 8;
int LayerParameter::include_size() const {
  return include_.size();
}
void LayerParameter::clear_include() {
  include_.Clear();
}
const ::caffe::NetStateRule& LayerParameter::include(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.include)
  return include_.Get(index);
}
::caffe::NetStateRule* LayerParameter::mutable_include(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.include)
  return include_.Mutable(index);
}
::caffe::NetStateRule* LayerParameter::add_include() {
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.include)
  return include_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
LayerParameter::mutable_include() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.include)
  return &include_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
LayerParameter::include() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.include)
  return include_;
}

// repeated .caffe.NetStateRule exclude = 9;
int LayerParameter::exclude_size() const {
  return exclude_.size();
}
void LayerParameter::clear_exclude() {
  exclude_.Clear();
}
const ::caffe::NetStateRule& LayerParameter::exclude(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.exclude)
  return exclude_.Get(index);
}
::caffe::NetStateRule* LayerParameter::mutable_exclude(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.exclude)
  return exclude_.Mutable(index);
}
::caffe::NetStateRule* LayerParameter::add_exclude() {
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.exclude)
  return exclude_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
LayerParameter::mutable_exclude() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.exclude)
  return &exclude_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
LayerParameter::exclude() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.exclude)
  return exclude_;
}

// optional .caffe.TransformationParameter transform_param = 100;
bool LayerParameter::has_transform_param() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void LayerParameter::set_has_transform_param() {
  _has_bits_[0] |= 0x00000800u;
}
void LayerParameter::clear_has_transform_param() {
  _has_bits_[0] &= ~0x00000800u;
}
void LayerParameter::clear_transform_param() {
  if (transform_param_ != NULL) transform_param_->::caffe::TransformationParameter::Clear();
  clear_has_transform_param();
}
const ::caffe::TransformationParameter& LayerParameter::transform_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.transform_param)
  return transform_param_ != NULL ? *transform_param_
                         : *::caffe::TransformationParameter::internal_default_instance();
}
::caffe::TransformationParameter* LayerParameter::mutable_transform_param() {
  set_has_transform_param();
  if (transform_param_ == NULL) {
    transform_param_ = new ::caffe::TransformationParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.transform_param)
  return transform_param_;
}
::caffe::TransformationParameter* LayerParameter::release_transform_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.transform_param)
  clear_has_transform_param();
  ::caffe::TransformationParameter* temp = transform_param_;
  transform_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_transform_param(::caffe::TransformationParameter* transform_param) {
  delete transform_param_;
  transform_param_ = transform_param;
  if (transform_param) {
    set_has_transform_param();
  } else {
    clear_has_transform_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.transform_param)
}

// optional .caffe.LossParameter loss_param = 101;
bool LayerParameter::has_loss_param() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void LayerParameter::set_has_loss_param() {
  _has_bits_[0] |= 0x00001000u;
}
void LayerParameter::clear_has_loss_param() {
  _has_bits_[0] &= ~0x00001000u;
}
void LayerParameter::clear_loss_param() {
  if (loss_param_ != NULL) loss_param_->::caffe::LossParameter::Clear();
  clear_has_loss_param();
}
const ::caffe::LossParameter& LayerParameter::loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.loss_param)
  return loss_param_ != NULL ? *loss_param_
                         : *::caffe::LossParameter::internal_default_instance();
}
::caffe::LossParameter* LayerParameter::mutable_loss_param() {
  set_has_loss_param();
  if (loss_param_ == NULL) {
    loss_param_ = new ::caffe::LossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.loss_param)
  return loss_param_;
}
::caffe::LossParameter* LayerParameter::release_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.loss_param)
  clear_has_loss_param();
  ::caffe::LossParameter* temp = loss_param_;
  loss_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_loss_param(::caffe::LossParameter* loss_param) {
  delete loss_param_;
  loss_param_ = loss_param;
  if (loss_param) {
    set_has_loss_param();
  } else {
    clear_has_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.loss_param)
}

// optional .caffe.AccuracyParameter accuracy_param = 102;
bool LayerParameter::has_accuracy_param() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void LayerParameter::set_has_accuracy_param() {
  _has_bits_[0] |= 0x00002000u;
}
void LayerParameter::clear_has_accuracy_param() {
  _has_bits_[0] &= ~0x00002000u;
}
void LayerParameter::clear_accuracy_param() {
  if (accuracy_param_ != NULL) accuracy_param_->::caffe::AccuracyParameter::Clear();
  clear_has_accuracy_param();
}
const ::caffe::AccuracyParameter& LayerParameter::accuracy_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.accuracy_param)
  return accuracy_param_ != NULL ? *accuracy_param_
                         : *::caffe::AccuracyParameter::internal_default_instance();
}
::caffe::AccuracyParameter* LayerParameter::mutable_accuracy_param() {
  set_has_accuracy_param();
  if (accuracy_param_ == NULL) {
    accuracy_param_ = new ::caffe::AccuracyParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.accuracy_param)
  return accuracy_param_;
}
::caffe::AccuracyParameter* LayerParameter::release_accuracy_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.accuracy_param)
  clear_has_accuracy_param();
  ::caffe::AccuracyParameter* temp = accuracy_param_;
  accuracy_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_accuracy_param(::caffe::AccuracyParameter* accuracy_param) {
  delete accuracy_param_;
  accuracy_param_ = accuracy_param;
  if (accuracy_param) {
    set_has_accuracy_param();
  } else {
    clear_has_accuracy_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.accuracy_param)
}

// optional .caffe.ArgMaxParameter argmax_param = 103;
bool LayerParameter::has_argmax_param() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void LayerParameter::set_has_argmax_param() {
  _has_bits_[0] |= 0x00004000u;
}
void LayerParameter::clear_has_argmax_param() {
  _has_bits_[0] &= ~0x00004000u;
}
void LayerParameter::clear_argmax_param() {
  if (argmax_param_ != NULL) argmax_param_->::caffe::ArgMaxParameter::Clear();
  clear_has_argmax_param();
}
const ::caffe::ArgMaxParameter& LayerParameter::argmax_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.argmax_param)
  return argmax_param_ != NULL ? *argmax_param_
                         : *::caffe::ArgMaxParameter::internal_default_instance();
}
::caffe::ArgMaxParameter* LayerParameter::mutable_argmax_param() {
  set_has_argmax_param();
  if (argmax_param_ == NULL) {
    argmax_param_ = new ::caffe::ArgMaxParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.argmax_param)
  return argmax_param_;
}
::caffe::ArgMaxParameter* LayerParameter::release_argmax_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.argmax_param)
  clear_has_argmax_param();
  ::caffe::ArgMaxParameter* temp = argmax_param_;
  argmax_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_argmax_param(::caffe::ArgMaxParameter* argmax_param) {
  delete argmax_param_;
  argmax_param_ = argmax_param;
  if (argmax_param) {
    set_has_argmax_param();
  } else {
    clear_has_argmax_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.argmax_param)
}

// optional .caffe.BatchNormParameter batch_norm_param = 139;
bool LayerParameter::has_batch_norm_param() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void LayerParameter::set_has_batch_norm_param() {
  _has_bits_[0] |= 0x00008000u;
}
void LayerParameter::clear_has_batch_norm_param() {
  _has_bits_[0] &= ~0x00008000u;
}
void LayerParameter::clear_batch_norm_param() {
  if (batch_norm_param_ != NULL) batch_norm_param_->::caffe::BatchNormParameter::Clear();
  clear_has_batch_norm_param();
}
const ::caffe::BatchNormParameter& LayerParameter::batch_norm_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.batch_norm_param)
  return batch_norm_param_ != NULL ? *batch_norm_param_
                         : *::caffe::BatchNormParameter::internal_default_instance();
}
::caffe::BatchNormParameter* LayerParameter::mutable_batch_norm_param() {
  set_has_batch_norm_param();
  if (batch_norm_param_ == NULL) {
    batch_norm_param_ = new ::caffe::BatchNormParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.batch_norm_param)
  return batch_norm_param_;
}
::caffe::BatchNormParameter* LayerParameter::release_batch_norm_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.batch_norm_param)
  clear_has_batch_norm_param();
  ::caffe::BatchNormParameter* temp = batch_norm_param_;
  batch_norm_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_batch_norm_param(::caffe::BatchNormParameter* batch_norm_param) {
  delete batch_norm_param_;
  batch_norm_param_ = batch_norm_param;
  if (batch_norm_param) {
    set_has_batch_norm_param();
  } else {
    clear_has_batch_norm_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.batch_norm_param)
}

// optional .caffe.BiasParameter bias_param = 141;
bool LayerParameter::has_bias_param() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void LayerParameter::set_has_bias_param() {
  _has_bits_[0] |= 0x00010000u;
}
void LayerParameter::clear_has_bias_param() {
  _has_bits_[0] &= ~0x00010000u;
}
void LayerParameter::clear_bias_param() {
  if (bias_param_ != NULL) bias_param_->::caffe::BiasParameter::Clear();
  clear_has_bias_param();
}
const ::caffe::BiasParameter& LayerParameter::bias_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.bias_param)
  return bias_param_ != NULL ? *bias_param_
                         : *::caffe::BiasParameter::internal_default_instance();
}
::caffe::BiasParameter* LayerParameter::mutable_bias_param() {
  set_has_bias_param();
  if (bias_param_ == NULL) {
    bias_param_ = new ::caffe::BiasParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.bias_param)
  return bias_param_;
}
::caffe::BiasParameter* LayerParameter::release_bias_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.bias_param)
  clear_has_bias_param();
  ::caffe::BiasParameter* temp = bias_param_;
  bias_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_bias_param(::caffe::BiasParameter* bias_param) {
  delete bias_param_;
  bias_param_ = bias_param;
  if (bias_param) {
    set_has_bias_param();
  } else {
    clear_has_bias_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.bias_param)
}

// optional .caffe.ConcatParameter concat_param = 104;
bool LayerParameter::has_concat_param() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void LayerParameter::set_has_concat_param() {
  _has_bits_[0] |= 0x00020000u;
}
void LayerParameter::clear_has_concat_param() {
  _has_bits_[0] &= ~0x00020000u;
}
void LayerParameter::clear_concat_param() {
  if (concat_param_ != NULL) concat_param_->::caffe::ConcatParameter::Clear();
  clear_has_concat_param();
}
const ::caffe::ConcatParameter& LayerParameter::concat_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.concat_param)
  return concat_param_ != NULL ? *concat_param_
                         : *::caffe::ConcatParameter::internal_default_instance();
}
::caffe::ConcatParameter* LayerParameter::mutable_concat_param() {
  set_has_concat_param();
  if (concat_param_ == NULL) {
    concat_param_ = new ::caffe::ConcatParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.concat_param)
  return concat_param_;
}
::caffe::ConcatParameter* LayerParameter::release_concat_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.concat_param)
  clear_has_concat_param();
  ::caffe::ConcatParameter* temp = concat_param_;
  concat_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_concat_param(::caffe::ConcatParameter* concat_param) {
  delete concat_param_;
  concat_param_ = concat_param;
  if (concat_param) {
    set_has_concat_param();
  } else {
    clear_has_concat_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.concat_param)
}

// optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;
bool LayerParameter::has_contrastive_loss_param() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void LayerParameter::set_has_contrastive_loss_param() {
  _has_bits_[0] |= 0x00040000u;
}
void LayerParameter::clear_has_contrastive_loss_param() {
  _has_bits_[0] &= ~0x00040000u;
}
void LayerParameter::clear_contrastive_loss_param() {
  if (contrastive_loss_param_ != NULL) contrastive_loss_param_->::caffe::ContrastiveLossParameter::Clear();
  clear_has_contrastive_loss_param();
}
const ::caffe::ContrastiveLossParameter& LayerParameter::contrastive_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.contrastive_loss_param)
  return contrastive_loss_param_ != NULL ? *contrastive_loss_param_
                         : *::caffe::ContrastiveLossParameter::internal_default_instance();
}
::caffe::ContrastiveLossParameter* LayerParameter::mutable_contrastive_loss_param() {
  set_has_contrastive_loss_param();
  if (contrastive_loss_param_ == NULL) {
    contrastive_loss_param_ = new ::caffe::ContrastiveLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.contrastive_loss_param)
  return contrastive_loss_param_;
}
::caffe::ContrastiveLossParameter* LayerParameter::release_contrastive_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.contrastive_loss_param)
  clear_has_contrastive_loss_param();
  ::caffe::ContrastiveLossParameter* temp = contrastive_loss_param_;
  contrastive_loss_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_contrastive_loss_param(::caffe::ContrastiveLossParameter* contrastive_loss_param) {
  delete contrastive_loss_param_;
  contrastive_loss_param_ = contrastive_loss_param;
  if (contrastive_loss_param) {
    set_has_contrastive_loss_param();
  } else {
    clear_has_contrastive_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.contrastive_loss_param)
}

// optional .caffe.ConvolutionParameter convolution_param = 106;
bool LayerParameter::has_convolution_param() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void LayerParameter::set_has_convolution_param() {
  _has_bits_[0] |= 0x00080000u;
}
void LayerParameter::clear_has_convolution_param() {
  _has_bits_[0] &= ~0x00080000u;
}
void LayerParameter::clear_convolution_param() {
  if (convolution_param_ != NULL) convolution_param_->::caffe::ConvolutionParameter::Clear();
  clear_has_convolution_param();
}
const ::caffe::ConvolutionParameter& LayerParameter::convolution_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.convolution_param)
  return convolution_param_ != NULL ? *convolution_param_
                         : *::caffe::ConvolutionParameter::internal_default_instance();
}
::caffe::ConvolutionParameter* LayerParameter::mutable_convolution_param() {
  set_has_convolution_param();
  if (convolution_param_ == NULL) {
    convolution_param_ = new ::caffe::ConvolutionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.convolution_param)
  return convolution_param_;
}
::caffe::ConvolutionParameter* LayerParameter::release_convolution_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.convolution_param)
  clear_has_convolution_param();
  ::caffe::ConvolutionParameter* temp = convolution_param_;
  convolution_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_convolution_param(::caffe::ConvolutionParameter* convolution_param) {
  delete convolution_param_;
  convolution_param_ = convolution_param;
  if (convolution_param) {
    set_has_convolution_param();
  } else {
    clear_has_convolution_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.convolution_param)
}

// optional .caffe.CropParameter crop_param = 144;
bool LayerParameter::has_crop_param() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void LayerParameter::set_has_crop_param() {
  _has_bits_[0] |= 0x00100000u;
}
void LayerParameter::clear_has_crop_param() {
  _has_bits_[0] &= ~0x00100000u;
}
void LayerParameter::clear_crop_param() {
  if (crop_param_ != NULL) crop_param_->::caffe::CropParameter::Clear();
  clear_has_crop_param();
}
const ::caffe::CropParameter& LayerParameter::crop_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.crop_param)
  return crop_param_ != NULL ? *crop_param_
                         : *::caffe::CropParameter::internal_default_instance();
}
::caffe::CropParameter* LayerParameter::mutable_crop_param() {
  set_has_crop_param();
  if (crop_param_ == NULL) {
    crop_param_ = new ::caffe::CropParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.crop_param)
  return crop_param_;
}
::caffe::CropParameter* LayerParameter::release_crop_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.crop_param)
  clear_has_crop_param();
  ::caffe::CropParameter* temp = crop_param_;
  crop_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_crop_param(::caffe::CropParameter* crop_param) {
  delete crop_param_;
  crop_param_ = crop_param;
  if (crop_param) {
    set_has_crop_param();
  } else {
    clear_has_crop_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.crop_param)
}

// optional .caffe.DataParameter data_param = 107;
bool LayerParameter::has_data_param() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void LayerParameter::set_has_data_param() {
  _has_bits_[0] |= 0x00200000u;
}
void LayerParameter::clear_has_data_param() {
  _has_bits_[0] &= ~0x00200000u;
}
void LayerParameter::clear_data_param() {
  if (data_param_ != NULL) data_param_->::caffe::DataParameter::Clear();
  clear_has_data_param();
}
const ::caffe::DataParameter& LayerParameter::data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.data_param)
  return data_param_ != NULL ? *data_param_
                         : *::caffe::DataParameter::internal_default_instance();
}
::caffe::DataParameter* LayerParameter::mutable_data_param() {
  set_has_data_param();
  if (data_param_ == NULL) {
    data_param_ = new ::caffe::DataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.data_param)
  return data_param_;
}
::caffe::DataParameter* LayerParameter::release_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.data_param)
  clear_has_data_param();
  ::caffe::DataParameter* temp = data_param_;
  data_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_data_param(::caffe::DataParameter* data_param) {
  delete data_param_;
  data_param_ = data_param;
  if (data_param) {
    set_has_data_param();
  } else {
    clear_has_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.data_param)
}

// optional .caffe.DropoutParameter dropout_param = 108;
bool LayerParameter::has_dropout_param() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void LayerParameter::set_has_dropout_param() {
  _has_bits_[0] |= 0x00400000u;
}
void LayerParameter::clear_has_dropout_param() {
  _has_bits_[0] &= ~0x00400000u;
}
void LayerParameter::clear_dropout_param() {
  if (dropout_param_ != NULL) dropout_param_->::caffe::DropoutParameter::Clear();
  clear_has_dropout_param();
}
const ::caffe::DropoutParameter& LayerParameter::dropout_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.dropout_param)
  return dropout_param_ != NULL ? *dropout_param_
                         : *::caffe::DropoutParameter::internal_default_instance();
}
::caffe::DropoutParameter* LayerParameter::mutable_dropout_param() {
  set_has_dropout_param();
  if (dropout_param_ == NULL) {
    dropout_param_ = new ::caffe::DropoutParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.dropout_param)
  return dropout_param_;
}
::caffe::DropoutParameter* LayerParameter::release_dropout_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.dropout_param)
  clear_has_dropout_param();
  ::caffe::DropoutParameter* temp = dropout_param_;
  dropout_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_dropout_param(::caffe::DropoutParameter* dropout_param) {
  delete dropout_param_;
  dropout_param_ = dropout_param;
  if (dropout_param) {
    set_has_dropout_param();
  } else {
    clear_has_dropout_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.dropout_param)
}

// optional .caffe.DummyDataParameter dummy_data_param = 109;
bool LayerParameter::has_dummy_data_param() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void LayerParameter::set_has_dummy_data_param() {
  _has_bits_[0] |= 0x00800000u;
}
void LayerParameter::clear_has_dummy_data_param() {
  _has_bits_[0] &= ~0x00800000u;
}
void LayerParameter::clear_dummy_data_param() {
  if (dummy_data_param_ != NULL) dummy_data_param_->::caffe::DummyDataParameter::Clear();
  clear_has_dummy_data_param();
}
const ::caffe::DummyDataParameter& LayerParameter::dummy_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.dummy_data_param)
  return dummy_data_param_ != NULL ? *dummy_data_param_
                         : *::caffe::DummyDataParameter::internal_default_instance();
}
::caffe::DummyDataParameter* LayerParameter::mutable_dummy_data_param() {
  set_has_dummy_data_param();
  if (dummy_data_param_ == NULL) {
    dummy_data_param_ = new ::caffe::DummyDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.dummy_data_param)
  return dummy_data_param_;
}
::caffe::DummyDataParameter* LayerParameter::release_dummy_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.dummy_data_param)
  clear_has_dummy_data_param();
  ::caffe::DummyDataParameter* temp = dummy_data_param_;
  dummy_data_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_dummy_data_param(::caffe::DummyDataParameter* dummy_data_param) {
  delete dummy_data_param_;
  dummy_data_param_ = dummy_data_param;
  if (dummy_data_param) {
    set_has_dummy_data_param();
  } else {
    clear_has_dummy_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.dummy_data_param)
}

// optional .caffe.EltwiseParameter eltwise_param = 110;
bool LayerParameter::has_eltwise_param() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void LayerParameter::set_has_eltwise_param() {
  _has_bits_[0] |= 0x01000000u;
}
void LayerParameter::clear_has_eltwise_param() {
  _has_bits_[0] &= ~0x01000000u;
}
void LayerParameter::clear_eltwise_param() {
  if (eltwise_param_ != NULL) eltwise_param_->::caffe::EltwiseParameter::Clear();
  clear_has_eltwise_param();
}
const ::caffe::EltwiseParameter& LayerParameter::eltwise_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.eltwise_param)
  return eltwise_param_ != NULL ? *eltwise_param_
                         : *::caffe::EltwiseParameter::internal_default_instance();
}
::caffe::EltwiseParameter* LayerParameter::mutable_eltwise_param() {
  set_has_eltwise_param();
  if (eltwise_param_ == NULL) {
    eltwise_param_ = new ::caffe::EltwiseParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.eltwise_param)
  return eltwise_param_;
}
::caffe::EltwiseParameter* LayerParameter::release_eltwise_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.eltwise_param)
  clear_has_eltwise_param();
  ::caffe::EltwiseParameter* temp = eltwise_param_;
  eltwise_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_eltwise_param(::caffe::EltwiseParameter* eltwise_param) {
  delete eltwise_param_;
  eltwise_param_ = eltwise_param;
  if (eltwise_param) {
    set_has_eltwise_param();
  } else {
    clear_has_eltwise_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.eltwise_param)
}

// optional .caffe.ELUParameter elu_param = 140;
bool LayerParameter::has_elu_param() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void LayerParameter::set_has_elu_param() {
  _has_bits_[0] |= 0x02000000u;
}
void LayerParameter::clear_has_elu_param() {
  _has_bits_[0] &= ~0x02000000u;
}
void LayerParameter::clear_elu_param() {
  if (elu_param_ != NULL) elu_param_->::caffe::ELUParameter::Clear();
  clear_has_elu_param();
}
const ::caffe::ELUParameter& LayerParameter::elu_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.elu_param)
  return elu_param_ != NULL ? *elu_param_
                         : *::caffe::ELUParameter::internal_default_instance();
}
::caffe::ELUParameter* LayerParameter::mutable_elu_param() {
  set_has_elu_param();
  if (elu_param_ == NULL) {
    elu_param_ = new ::caffe::ELUParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.elu_param)
  return elu_param_;
}
::caffe::ELUParameter* LayerParameter::release_elu_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.elu_param)
  clear_has_elu_param();
  ::caffe::ELUParameter* temp = elu_param_;
  elu_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_elu_param(::caffe::ELUParameter* elu_param) {
  delete elu_param_;
  elu_param_ = elu_param;
  if (elu_param) {
    set_has_elu_param();
  } else {
    clear_has_elu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.elu_param)
}

// optional .caffe.EmbedParameter embed_param = 137;
bool LayerParameter::has_embed_param() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void LayerParameter::set_has_embed_param() {
  _has_bits_[0] |= 0x04000000u;
}
void LayerParameter::clear_has_embed_param() {
  _has_bits_[0] &= ~0x04000000u;
}
void LayerParameter::clear_embed_param() {
  if (embed_param_ != NULL) embed_param_->::caffe::EmbedParameter::Clear();
  clear_has_embed_param();
}
const ::caffe::EmbedParameter& LayerParameter::embed_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.embed_param)
  return embed_param_ != NULL ? *embed_param_
                         : *::caffe::EmbedParameter::internal_default_instance();
}
::caffe::EmbedParameter* LayerParameter::mutable_embed_param() {
  set_has_embed_param();
  if (embed_param_ == NULL) {
    embed_param_ = new ::caffe::EmbedParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.embed_param)
  return embed_param_;
}
::caffe::EmbedParameter* LayerParameter::release_embed_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.embed_param)
  clear_has_embed_param();
  ::caffe::EmbedParameter* temp = embed_param_;
  embed_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_embed_param(::caffe::EmbedParameter* embed_param) {
  delete embed_param_;
  embed_param_ = embed_param;
  if (embed_param) {
    set_has_embed_param();
  } else {
    clear_has_embed_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.embed_param)
}

// optional .caffe.ExpParameter exp_param = 111;
bool LayerParameter::has_exp_param() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void LayerParameter::set_has_exp_param() {
  _has_bits_[0] |= 0x08000000u;
}
void LayerParameter::clear_has_exp_param() {
  _has_bits_[0] &= ~0x08000000u;
}
void LayerParameter::clear_exp_param() {
  if (exp_param_ != NULL) exp_param_->::caffe::ExpParameter::Clear();
  clear_has_exp_param();
}
const ::caffe::ExpParameter& LayerParameter::exp_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.exp_param)
  return exp_param_ != NULL ? *exp_param_
                         : *::caffe::ExpParameter::internal_default_instance();
}
::caffe::ExpParameter* LayerParameter::mutable_exp_param() {
  set_has_exp_param();
  if (exp_param_ == NULL) {
    exp_param_ = new ::caffe::ExpParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.exp_param)
  return exp_param_;
}
::caffe::ExpParameter* LayerParameter::release_exp_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.exp_param)
  clear_has_exp_param();
  ::caffe::ExpParameter* temp = exp_param_;
  exp_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_exp_param(::caffe::ExpParameter* exp_param) {
  delete exp_param_;
  exp_param_ = exp_param;
  if (exp_param) {
    set_has_exp_param();
  } else {
    clear_has_exp_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.exp_param)
}

// optional .caffe.FlattenParameter flatten_param = 135;
bool LayerParameter::has_flatten_param() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void LayerParameter::set_has_flatten_param() {
  _has_bits_[0] |= 0x10000000u;
}
void LayerParameter::clear_has_flatten_param() {
  _has_bits_[0] &= ~0x10000000u;
}
void LayerParameter::clear_flatten_param() {
  if (flatten_param_ != NULL) flatten_param_->::caffe::FlattenParameter::Clear();
  clear_has_flatten_param();
}
const ::caffe::FlattenParameter& LayerParameter::flatten_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.flatten_param)
  return flatten_param_ != NULL ? *flatten_param_
                         : *::caffe::FlattenParameter::internal_default_instance();
}
::caffe::FlattenParameter* LayerParameter::mutable_flatten_param() {
  set_has_flatten_param();
  if (flatten_param_ == NULL) {
    flatten_param_ = new ::caffe::FlattenParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.flatten_param)
  return flatten_param_;
}
::caffe::FlattenParameter* LayerParameter::release_flatten_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.flatten_param)
  clear_has_flatten_param();
  ::caffe::FlattenParameter* temp = flatten_param_;
  flatten_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_flatten_param(::caffe::FlattenParameter* flatten_param) {
  delete flatten_param_;
  flatten_param_ = flatten_param;
  if (flatten_param) {
    set_has_flatten_param();
  } else {
    clear_has_flatten_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.flatten_param)
}

// optional .caffe.HDF5DataParameter hdf5_data_param = 112;
bool LayerParameter::has_hdf5_data_param() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void LayerParameter::set_has_hdf5_data_param() {
  _has_bits_[0] |= 0x20000000u;
}
void LayerParameter::clear_has_hdf5_data_param() {
  _has_bits_[0] &= ~0x20000000u;
}
void LayerParameter::clear_hdf5_data_param() {
  if (hdf5_data_param_ != NULL) hdf5_data_param_->::caffe::HDF5DataParameter::Clear();
  clear_has_hdf5_data_param();
}
const ::caffe::HDF5DataParameter& LayerParameter::hdf5_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.hdf5_data_param)
  return hdf5_data_param_ != NULL ? *hdf5_data_param_
                         : *::caffe::HDF5DataParameter::internal_default_instance();
}
::caffe::HDF5DataParameter* LayerParameter::mutable_hdf5_data_param() {
  set_has_hdf5_data_param();
  if (hdf5_data_param_ == NULL) {
    hdf5_data_param_ = new ::caffe::HDF5DataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.hdf5_data_param)
  return hdf5_data_param_;
}
::caffe::HDF5DataParameter* LayerParameter::release_hdf5_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.hdf5_data_param)
  clear_has_hdf5_data_param();
  ::caffe::HDF5DataParameter* temp = hdf5_data_param_;
  hdf5_data_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_hdf5_data_param(::caffe::HDF5DataParameter* hdf5_data_param) {
  delete hdf5_data_param_;
  hdf5_data_param_ = hdf5_data_param;
  if (hdf5_data_param) {
    set_has_hdf5_data_param();
  } else {
    clear_has_hdf5_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.hdf5_data_param)
}

// optional .caffe.HDF5OutputParameter hdf5_output_param = 113;
bool LayerParameter::has_hdf5_output_param() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void LayerParameter::set_has_hdf5_output_param() {
  _has_bits_[0] |= 0x40000000u;
}
void LayerParameter::clear_has_hdf5_output_param() {
  _has_bits_[0] &= ~0x40000000u;
}
void LayerParameter::clear_hdf5_output_param() {
  if (hdf5_output_param_ != NULL) hdf5_output_param_->::caffe::HDF5OutputParameter::Clear();
  clear_has_hdf5_output_param();
}
const ::caffe::HDF5OutputParameter& LayerParameter::hdf5_output_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.hdf5_output_param)
  return hdf5_output_param_ != NULL ? *hdf5_output_param_
                         : *::caffe::HDF5OutputParameter::internal_default_instance();
}
::caffe::HDF5OutputParameter* LayerParameter::mutable_hdf5_output_param() {
  set_has_hdf5_output_param();
  if (hdf5_output_param_ == NULL) {
    hdf5_output_param_ = new ::caffe::HDF5OutputParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.hdf5_output_param)
  return hdf5_output_param_;
}
::caffe::HDF5OutputParameter* LayerParameter::release_hdf5_output_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.hdf5_output_param)
  clear_has_hdf5_output_param();
  ::caffe::HDF5OutputParameter* temp = hdf5_output_param_;
  hdf5_output_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param) {
  delete hdf5_output_param_;
  hdf5_output_param_ = hdf5_output_param;
  if (hdf5_output_param) {
    set_has_hdf5_output_param();
  } else {
    clear_has_hdf5_output_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.hdf5_output_param)
}

// optional .caffe.HingeLossParameter hinge_loss_param = 114;
bool LayerParameter::has_hinge_loss_param() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void LayerParameter::set_has_hinge_loss_param() {
  _has_bits_[0] |= 0x80000000u;
}
void LayerParameter::clear_has_hinge_loss_param() {
  _has_bits_[0] &= ~0x80000000u;
}
void LayerParameter::clear_hinge_loss_param() {
  if (hinge_loss_param_ != NULL) hinge_loss_param_->::caffe::HingeLossParameter::Clear();
  clear_has_hinge_loss_param();
}
const ::caffe::HingeLossParameter& LayerParameter::hinge_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.hinge_loss_param)
  return hinge_loss_param_ != NULL ? *hinge_loss_param_
                         : *::caffe::HingeLossParameter::internal_default_instance();
}
::caffe::HingeLossParameter* LayerParameter::mutable_hinge_loss_param() {
  set_has_hinge_loss_param();
  if (hinge_loss_param_ == NULL) {
    hinge_loss_param_ = new ::caffe::HingeLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.hinge_loss_param)
  return hinge_loss_param_;
}
::caffe::HingeLossParameter* LayerParameter::release_hinge_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.hinge_loss_param)
  clear_has_hinge_loss_param();
  ::caffe::HingeLossParameter* temp = hinge_loss_param_;
  hinge_loss_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_hinge_loss_param(::caffe::HingeLossParameter* hinge_loss_param) {
  delete hinge_loss_param_;
  hinge_loss_param_ = hinge_loss_param;
  if (hinge_loss_param) {
    set_has_hinge_loss_param();
  } else {
    clear_has_hinge_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.hinge_loss_param)
}

// optional .caffe.ImageDataParameter image_data_param = 115;
bool LayerParameter::has_image_data_param() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void LayerParameter::set_has_image_data_param() {
  _has_bits_[1] |= 0x00000001u;
}
void LayerParameter::clear_has_image_data_param() {
  _has_bits_[1] &= ~0x00000001u;
}
void LayerParameter::clear_image_data_param() {
  if (image_data_param_ != NULL) image_data_param_->::caffe::ImageDataParameter::Clear();
  clear_has_image_data_param();
}
const ::caffe::ImageDataParameter& LayerParameter::image_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.image_data_param)
  return image_data_param_ != NULL ? *image_data_param_
                         : *::caffe::ImageDataParameter::internal_default_instance();
}
::caffe::ImageDataParameter* LayerParameter::mutable_image_data_param() {
  set_has_image_data_param();
  if (image_data_param_ == NULL) {
    image_data_param_ = new ::caffe::ImageDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.image_data_param)
  return image_data_param_;
}
::caffe::ImageDataParameter* LayerParameter::release_image_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.image_data_param)
  clear_has_image_data_param();
  ::caffe::ImageDataParameter* temp = image_data_param_;
  image_data_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_image_data_param(::caffe::ImageDataParameter* image_data_param) {
  delete image_data_param_;
  image_data_param_ = image_data_param;
  if (image_data_param) {
    set_has_image_data_param();
  } else {
    clear_has_image_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.image_data_param)
}

// optional .caffe.InfogainLossParameter infogain_loss_param = 116;
bool LayerParameter::has_infogain_loss_param() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void LayerParameter::set_has_infogain_loss_param() {
  _has_bits_[1] |= 0x00000002u;
}
void LayerParameter::clear_has_infogain_loss_param() {
  _has_bits_[1] &= ~0x00000002u;
}
void LayerParameter::clear_infogain_loss_param() {
  if (infogain_loss_param_ != NULL) infogain_loss_param_->::caffe::InfogainLossParameter::Clear();
  clear_has_infogain_loss_param();
}
const ::caffe::InfogainLossParameter& LayerParameter::infogain_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.infogain_loss_param)
  return infogain_loss_param_ != NULL ? *infogain_loss_param_
                         : *::caffe::InfogainLossParameter::internal_default_instance();
}
::caffe::InfogainLossParameter* LayerParameter::mutable_infogain_loss_param() {
  set_has_infogain_loss_param();
  if (infogain_loss_param_ == NULL) {
    infogain_loss_param_ = new ::caffe::InfogainLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.infogain_loss_param)
  return infogain_loss_param_;
}
::caffe::InfogainLossParameter* LayerParameter::release_infogain_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.infogain_loss_param)
  clear_has_infogain_loss_param();
  ::caffe::InfogainLossParameter* temp = infogain_loss_param_;
  infogain_loss_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_infogain_loss_param(::caffe::InfogainLossParameter* infogain_loss_param) {
  delete infogain_loss_param_;
  infogain_loss_param_ = infogain_loss_param;
  if (infogain_loss_param) {
    set_has_infogain_loss_param();
  } else {
    clear_has_infogain_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.infogain_loss_param)
}

// optional .caffe.InnerProductParameter inner_product_param = 117;
bool LayerParameter::has_inner_product_param() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void LayerParameter::set_has_inner_product_param() {
  _has_bits_[1] |= 0x00000004u;
}
void LayerParameter::clear_has_inner_product_param() {
  _has_bits_[1] &= ~0x00000004u;
}
void LayerParameter::clear_inner_product_param() {
  if (inner_product_param_ != NULL) inner_product_param_->::caffe::InnerProductParameter::Clear();
  clear_has_inner_product_param();
}
const ::caffe::InnerProductParameter& LayerParameter::inner_product_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.inner_product_param)
  return inner_product_param_ != NULL ? *inner_product_param_
                         : *::caffe::InnerProductParameter::internal_default_instance();
}
::caffe::InnerProductParameter* LayerParameter::mutable_inner_product_param() {
  set_has_inner_product_param();
  if (inner_product_param_ == NULL) {
    inner_product_param_ = new ::caffe::InnerProductParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.inner_product_param)
  return inner_product_param_;
}
::caffe::InnerProductParameter* LayerParameter::release_inner_product_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.inner_product_param)
  clear_has_inner_product_param();
  ::caffe::InnerProductParameter* temp = inner_product_param_;
  inner_product_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_inner_product_param(::caffe::InnerProductParameter* inner_product_param) {
  delete inner_product_param_;
  inner_product_param_ = inner_product_param;
  if (inner_product_param) {
    set_has_inner_product_param();
  } else {
    clear_has_inner_product_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.inner_product_param)
}

// optional .caffe.InputParameter input_param = 143;
bool LayerParameter::has_input_param() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void LayerParameter::set_has_input_param() {
  _has_bits_[1] |= 0x00000008u;
}
void LayerParameter::clear_has_input_param() {
  _has_bits_[1] &= ~0x00000008u;
}
void LayerParameter::clear_input_param() {
  if (input_param_ != NULL) input_param_->::caffe::InputParameter::Clear();
  clear_has_input_param();
}
const ::caffe::InputParameter& LayerParameter::input_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.input_param)
  return input_param_ != NULL ? *input_param_
                         : *::caffe::InputParameter::internal_default_instance();
}
::caffe::InputParameter* LayerParameter::mutable_input_param() {
  set_has_input_param();
  if (input_param_ == NULL) {
    input_param_ = new ::caffe::InputParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.input_param)
  return input_param_;
}
::caffe::InputParameter* LayerParameter::release_input_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.input_param)
  clear_has_input_param();
  ::caffe::InputParameter* temp = input_param_;
  input_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_input_param(::caffe::InputParameter* input_param) {
  delete input_param_;
  input_param_ = input_param;
  if (input_param) {
    set_has_input_param();
  } else {
    clear_has_input_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.input_param)
}

// optional .caffe.LogParameter log_param = 134;
bool LayerParameter::has_log_param() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void LayerParameter::set_has_log_param() {
  _has_bits_[1] |= 0x00000010u;
}
void LayerParameter::clear_has_log_param() {
  _has_bits_[1] &= ~0x00000010u;
}
void LayerParameter::clear_log_param() {
  if (log_param_ != NULL) log_param_->::caffe::LogParameter::Clear();
  clear_has_log_param();
}
const ::caffe::LogParameter& LayerParameter::log_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.log_param)
  return log_param_ != NULL ? *log_param_
                         : *::caffe::LogParameter::internal_default_instance();
}
::caffe::LogParameter* LayerParameter::mutable_log_param() {
  set_has_log_param();
  if (log_param_ == NULL) {
    log_param_ = new ::caffe::LogParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.log_param)
  return log_param_;
}
::caffe::LogParameter* LayerParameter::release_log_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.log_param)
  clear_has_log_param();
  ::caffe::LogParameter* temp = log_param_;
  log_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_log_param(::caffe::LogParameter* log_param) {
  delete log_param_;
  log_param_ = log_param;
  if (log_param) {
    set_has_log_param();
  } else {
    clear_has_log_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.log_param)
}

// optional .caffe.LRNParameter lrn_param = 118;
bool LayerParameter::has_lrn_param() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void LayerParameter::set_has_lrn_param() {
  _has_bits_[1] |= 0x00000020u;
}
void LayerParameter::clear_has_lrn_param() {
  _has_bits_[1] &= ~0x00000020u;
}
void LayerParameter::clear_lrn_param() {
  if (lrn_param_ != NULL) lrn_param_->::caffe::LRNParameter::Clear();
  clear_has_lrn_param();
}
const ::caffe::LRNParameter& LayerParameter::lrn_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.lrn_param)
  return lrn_param_ != NULL ? *lrn_param_
                         : *::caffe::LRNParameter::internal_default_instance();
}
::caffe::LRNParameter* LayerParameter::mutable_lrn_param() {
  set_has_lrn_param();
  if (lrn_param_ == NULL) {
    lrn_param_ = new ::caffe::LRNParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.lrn_param)
  return lrn_param_;
}
::caffe::LRNParameter* LayerParameter::release_lrn_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.lrn_param)
  clear_has_lrn_param();
  ::caffe::LRNParameter* temp = lrn_param_;
  lrn_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_lrn_param(::caffe::LRNParameter* lrn_param) {
  delete lrn_param_;
  lrn_param_ = lrn_param;
  if (lrn_param) {
    set_has_lrn_param();
  } else {
    clear_has_lrn_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.lrn_param)
}

// optional .caffe.MemoryDataParameter memory_data_param = 119;
bool LayerParameter::has_memory_data_param() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void LayerParameter::set_has_memory_data_param() {
  _has_bits_[1] |= 0x00000040u;
}
void LayerParameter::clear_has_memory_data_param() {
  _has_bits_[1] &= ~0x00000040u;
}
void LayerParameter::clear_memory_data_param() {
  if (memory_data_param_ != NULL) memory_data_param_->::caffe::MemoryDataParameter::Clear();
  clear_has_memory_data_param();
}
const ::caffe::MemoryDataParameter& LayerParameter::memory_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.memory_data_param)
  return memory_data_param_ != NULL ? *memory_data_param_
                         : *::caffe::MemoryDataParameter::internal_default_instance();
}
::caffe::MemoryDataParameter* LayerParameter::mutable_memory_data_param() {
  set_has_memory_data_param();
  if (memory_data_param_ == NULL) {
    memory_data_param_ = new ::caffe::MemoryDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.memory_data_param)
  return memory_data_param_;
}
::caffe::MemoryDataParameter* LayerParameter::release_memory_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.memory_data_param)
  clear_has_memory_data_param();
  ::caffe::MemoryDataParameter* temp = memory_data_param_;
  memory_data_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_memory_data_param(::caffe::MemoryDataParameter* memory_data_param) {
  delete memory_data_param_;
  memory_data_param_ = memory_data_param;
  if (memory_data_param) {
    set_has_memory_data_param();
  } else {
    clear_has_memory_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.memory_data_param)
}

// optional .caffe.MVNParameter mvn_param = 120;
bool LayerParameter::has_mvn_param() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void LayerParameter::set_has_mvn_param() {
  _has_bits_[1] |= 0x00000080u;
}
void LayerParameter::clear_has_mvn_param() {
  _has_bits_[1] &= ~0x00000080u;
}
void LayerParameter::clear_mvn_param() {
  if (mvn_param_ != NULL) mvn_param_->::caffe::MVNParameter::Clear();
  clear_has_mvn_param();
}
const ::caffe::MVNParameter& LayerParameter::mvn_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.mvn_param)
  return mvn_param_ != NULL ? *mvn_param_
                         : *::caffe::MVNParameter::internal_default_instance();
}
::caffe::MVNParameter* LayerParameter::mutable_mvn_param() {
  set_has_mvn_param();
  if (mvn_param_ == NULL) {
    mvn_param_ = new ::caffe::MVNParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.mvn_param)
  return mvn_param_;
}
::caffe::MVNParameter* LayerParameter::release_mvn_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.mvn_param)
  clear_has_mvn_param();
  ::caffe::MVNParameter* temp = mvn_param_;
  mvn_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_mvn_param(::caffe::MVNParameter* mvn_param) {
  delete mvn_param_;
  mvn_param_ = mvn_param;
  if (mvn_param) {
    set_has_mvn_param();
  } else {
    clear_has_mvn_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.mvn_param)
}

// optional .caffe.ParameterParameter parameter_param = 145;
bool LayerParameter::has_parameter_param() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void LayerParameter::set_has_parameter_param() {
  _has_bits_[1] |= 0x00000100u;
}
void LayerParameter::clear_has_parameter_param() {
  _has_bits_[1] &= ~0x00000100u;
}
void LayerParameter::clear_parameter_param() {
  if (parameter_param_ != NULL) parameter_param_->::caffe::ParameterParameter::Clear();
  clear_has_parameter_param();
}
const ::caffe::ParameterParameter& LayerParameter::parameter_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.parameter_param)
  return parameter_param_ != NULL ? *parameter_param_
                         : *::caffe::ParameterParameter::internal_default_instance();
}
::caffe::ParameterParameter* LayerParameter::mutable_parameter_param() {
  set_has_parameter_param();
  if (parameter_param_ == NULL) {
    parameter_param_ = new ::caffe::ParameterParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.parameter_param)
  return parameter_param_;
}
::caffe::ParameterParameter* LayerParameter::release_parameter_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.parameter_param)
  clear_has_parameter_param();
  ::caffe::ParameterParameter* temp = parameter_param_;
  parameter_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_parameter_param(::caffe::ParameterParameter* parameter_param) {
  delete parameter_param_;
  parameter_param_ = parameter_param;
  if (parameter_param) {
    set_has_parameter_param();
  } else {
    clear_has_parameter_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.parameter_param)
}

// optional .caffe.PoolingParameter pooling_param = 121;
bool LayerParameter::has_pooling_param() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
void LayerParameter::set_has_pooling_param() {
  _has_bits_[1] |= 0x00000200u;
}
void LayerParameter::clear_has_pooling_param() {
  _has_bits_[1] &= ~0x00000200u;
}
void LayerParameter::clear_pooling_param() {
  if (pooling_param_ != NULL) pooling_param_->::caffe::PoolingParameter::Clear();
  clear_has_pooling_param();
}
const ::caffe::PoolingParameter& LayerParameter::pooling_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.pooling_param)
  return pooling_param_ != NULL ? *pooling_param_
                         : *::caffe::PoolingParameter::internal_default_instance();
}
::caffe::PoolingParameter* LayerParameter::mutable_pooling_param() {
  set_has_pooling_param();
  if (pooling_param_ == NULL) {
    pooling_param_ = new ::caffe::PoolingParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.pooling_param)
  return pooling_param_;
}
::caffe::PoolingParameter* LayerParameter::release_pooling_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.pooling_param)
  clear_has_pooling_param();
  ::caffe::PoolingParameter* temp = pooling_param_;
  pooling_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_pooling_param(::caffe::PoolingParameter* pooling_param) {
  delete pooling_param_;
  pooling_param_ = pooling_param;
  if (pooling_param) {
    set_has_pooling_param();
  } else {
    clear_has_pooling_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.pooling_param)
}

// optional .caffe.PowerParameter power_param = 122;
bool LayerParameter::has_power_param() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
void LayerParameter::set_has_power_param() {
  _has_bits_[1] |= 0x00000400u;
}
void LayerParameter::clear_has_power_param() {
  _has_bits_[1] &= ~0x00000400u;
}
void LayerParameter::clear_power_param() {
  if (power_param_ != NULL) power_param_->::caffe::PowerParameter::Clear();
  clear_has_power_param();
}
const ::caffe::PowerParameter& LayerParameter::power_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.power_param)
  return power_param_ != NULL ? *power_param_
                         : *::caffe::PowerParameter::internal_default_instance();
}
::caffe::PowerParameter* LayerParameter::mutable_power_param() {
  set_has_power_param();
  if (power_param_ == NULL) {
    power_param_ = new ::caffe::PowerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.power_param)
  return power_param_;
}
::caffe::PowerParameter* LayerParameter::release_power_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.power_param)
  clear_has_power_param();
  ::caffe::PowerParameter* temp = power_param_;
  power_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_power_param(::caffe::PowerParameter* power_param) {
  delete power_param_;
  power_param_ = power_param;
  if (power_param) {
    set_has_power_param();
  } else {
    clear_has_power_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.power_param)
}

// optional .caffe.PReLUParameter prelu_param = 131;
bool LayerParameter::has_prelu_param() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
void LayerParameter::set_has_prelu_param() {
  _has_bits_[1] |= 0x00000800u;
}
void LayerParameter::clear_has_prelu_param() {
  _has_bits_[1] &= ~0x00000800u;
}
void LayerParameter::clear_prelu_param() {
  if (prelu_param_ != NULL) prelu_param_->::caffe::PReLUParameter::Clear();
  clear_has_prelu_param();
}
const ::caffe::PReLUParameter& LayerParameter::prelu_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.prelu_param)
  return prelu_param_ != NULL ? *prelu_param_
                         : *::caffe::PReLUParameter::internal_default_instance();
}
::caffe::PReLUParameter* LayerParameter::mutable_prelu_param() {
  set_has_prelu_param();
  if (prelu_param_ == NULL) {
    prelu_param_ = new ::caffe::PReLUParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.prelu_param)
  return prelu_param_;
}
::caffe::PReLUParameter* LayerParameter::release_prelu_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.prelu_param)
  clear_has_prelu_param();
  ::caffe::PReLUParameter* temp = prelu_param_;
  prelu_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_prelu_param(::caffe::PReLUParameter* prelu_param) {
  delete prelu_param_;
  prelu_param_ = prelu_param;
  if (prelu_param) {
    set_has_prelu_param();
  } else {
    clear_has_prelu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.prelu_param)
}

// optional .caffe.PythonParameter python_param = 130;
bool LayerParameter::has_python_param() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
void LayerParameter::set_has_python_param() {
  _has_bits_[1] |= 0x00001000u;
}
void LayerParameter::clear_has_python_param() {
  _has_bits_[1] &= ~0x00001000u;
}
void LayerParameter::clear_python_param() {
  if (python_param_ != NULL) python_param_->::caffe::PythonParameter::Clear();
  clear_has_python_param();
}
const ::caffe::PythonParameter& LayerParameter::python_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.python_param)
  return python_param_ != NULL ? *python_param_
                         : *::caffe::PythonParameter::internal_default_instance();
}
::caffe::PythonParameter* LayerParameter::mutable_python_param() {
  set_has_python_param();
  if (python_param_ == NULL) {
    python_param_ = new ::caffe::PythonParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.python_param)
  return python_param_;
}
::caffe::PythonParameter* LayerParameter::release_python_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.python_param)
  clear_has_python_param();
  ::caffe::PythonParameter* temp = python_param_;
  python_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_python_param(::caffe::PythonParameter* python_param) {
  delete python_param_;
  python_param_ = python_param;
  if (python_param) {
    set_has_python_param();
  } else {
    clear_has_python_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.python_param)
}

// optional .caffe.RecurrentParameter recurrent_param = 146;
bool LayerParameter::has_recurrent_param() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
void LayerParameter::set_has_recurrent_param() {
  _has_bits_[1] |= 0x00002000u;
}
void LayerParameter::clear_has_recurrent_param() {
  _has_bits_[1] &= ~0x00002000u;
}
void LayerParameter::clear_recurrent_param() {
  if (recurrent_param_ != NULL) recurrent_param_->::caffe::RecurrentParameter::Clear();
  clear_has_recurrent_param();
}
const ::caffe::RecurrentParameter& LayerParameter::recurrent_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.recurrent_param)
  return recurrent_param_ != NULL ? *recurrent_param_
                         : *::caffe::RecurrentParameter::internal_default_instance();
}
::caffe::RecurrentParameter* LayerParameter::mutable_recurrent_param() {
  set_has_recurrent_param();
  if (recurrent_param_ == NULL) {
    recurrent_param_ = new ::caffe::RecurrentParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.recurrent_param)
  return recurrent_param_;
}
::caffe::RecurrentParameter* LayerParameter::release_recurrent_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.recurrent_param)
  clear_has_recurrent_param();
  ::caffe::RecurrentParameter* temp = recurrent_param_;
  recurrent_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_recurrent_param(::caffe::RecurrentParameter* recurrent_param) {
  delete recurrent_param_;
  recurrent_param_ = recurrent_param;
  if (recurrent_param) {
    set_has_recurrent_param();
  } else {
    clear_has_recurrent_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.recurrent_param)
}

// optional .caffe.ReductionParameter reduction_param = 136;
bool LayerParameter::has_reduction_param() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
void LayerParameter::set_has_reduction_param() {
  _has_bits_[1] |= 0x00004000u;
}
void LayerParameter::clear_has_reduction_param() {
  _has_bits_[1] &= ~0x00004000u;
}
void LayerParameter::clear_reduction_param() {
  if (reduction_param_ != NULL) reduction_param_->::caffe::ReductionParameter::Clear();
  clear_has_reduction_param();
}
const ::caffe::ReductionParameter& LayerParameter::reduction_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.reduction_param)
  return reduction_param_ != NULL ? *reduction_param_
                         : *::caffe::ReductionParameter::internal_default_instance();
}
::caffe::ReductionParameter* LayerParameter::mutable_reduction_param() {
  set_has_reduction_param();
  if (reduction_param_ == NULL) {
    reduction_param_ = new ::caffe::ReductionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.reduction_param)
  return reduction_param_;
}
::caffe::ReductionParameter* LayerParameter::release_reduction_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.reduction_param)
  clear_has_reduction_param();
  ::caffe::ReductionParameter* temp = reduction_param_;
  reduction_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_reduction_param(::caffe::ReductionParameter* reduction_param) {
  delete reduction_param_;
  reduction_param_ = reduction_param;
  if (reduction_param) {
    set_has_reduction_param();
  } else {
    clear_has_reduction_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.reduction_param)
}

// optional .caffe.ReLUParameter relu_param = 123;
bool LayerParameter::has_relu_param() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
void LayerParameter::set_has_relu_param() {
  _has_bits_[1] |= 0x00008000u;
}
void LayerParameter::clear_has_relu_param() {
  _has_bits_[1] &= ~0x00008000u;
}
void LayerParameter::clear_relu_param() {
  if (relu_param_ != NULL) relu_param_->::caffe::ReLUParameter::Clear();
  clear_has_relu_param();
}
const ::caffe::ReLUParameter& LayerParameter::relu_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.relu_param)
  return relu_param_ != NULL ? *relu_param_
                         : *::caffe::ReLUParameter::internal_default_instance();
}
::caffe::ReLUParameter* LayerParameter::mutable_relu_param() {
  set_has_relu_param();
  if (relu_param_ == NULL) {
    relu_param_ = new ::caffe::ReLUParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.relu_param)
  return relu_param_;
}
::caffe::ReLUParameter* LayerParameter::release_relu_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.relu_param)
  clear_has_relu_param();
  ::caffe::ReLUParameter* temp = relu_param_;
  relu_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_relu_param(::caffe::ReLUParameter* relu_param) {
  delete relu_param_;
  relu_param_ = relu_param;
  if (relu_param) {
    set_has_relu_param();
  } else {
    clear_has_relu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.relu_param)
}

// optional .caffe.ReshapeParameter reshape_param = 133;
bool LayerParameter::has_reshape_param() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
void LayerParameter::set_has_reshape_param() {
  _has_bits_[1] |= 0x00010000u;
}
void LayerParameter::clear_has_reshape_param() {
  _has_bits_[1] &= ~0x00010000u;
}
void LayerParameter::clear_reshape_param() {
  if (reshape_param_ != NULL) reshape_param_->::caffe::ReshapeParameter::Clear();
  clear_has_reshape_param();
}
const ::caffe::ReshapeParameter& LayerParameter::reshape_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.reshape_param)
  return reshape_param_ != NULL ? *reshape_param_
                         : *::caffe::ReshapeParameter::internal_default_instance();
}
::caffe::ReshapeParameter* LayerParameter::mutable_reshape_param() {
  set_has_reshape_param();
  if (reshape_param_ == NULL) {
    reshape_param_ = new ::caffe::ReshapeParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.reshape_param)
  return reshape_param_;
}
::caffe::ReshapeParameter* LayerParameter::release_reshape_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.reshape_param)
  clear_has_reshape_param();
  ::caffe::ReshapeParameter* temp = reshape_param_;
  reshape_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_reshape_param(::caffe::ReshapeParameter* reshape_param) {
  delete reshape_param_;
  reshape_param_ = reshape_param;
  if (reshape_param) {
    set_has_reshape_param();
  } else {
    clear_has_reshape_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.reshape_param)
}

// optional .caffe.ScaleParameter scale_param = 142;
bool LayerParameter::has_scale_param() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
void LayerParameter::set_has_scale_param() {
  _has_bits_[1] |= 0x00020000u;
}
void LayerParameter::clear_has_scale_param() {
  _has_bits_[1] &= ~0x00020000u;
}
void LayerParameter::clear_scale_param() {
  if (scale_param_ != NULL) scale_param_->::caffe::ScaleParameter::Clear();
  clear_has_scale_param();
}
const ::caffe::ScaleParameter& LayerParameter::scale_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.scale_param)
  return scale_param_ != NULL ? *scale_param_
                         : *::caffe::ScaleParameter::internal_default_instance();
}
::caffe::ScaleParameter* LayerParameter::mutable_scale_param() {
  set_has_scale_param();
  if (scale_param_ == NULL) {
    scale_param_ = new ::caffe::ScaleParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.scale_param)
  return scale_param_;
}
::caffe::ScaleParameter* LayerParameter::release_scale_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.scale_param)
  clear_has_scale_param();
  ::caffe::ScaleParameter* temp = scale_param_;
  scale_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_scale_param(::caffe::ScaleParameter* scale_param) {
  delete scale_param_;
  scale_param_ = scale_param;
  if (scale_param) {
    set_has_scale_param();
  } else {
    clear_has_scale_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.scale_param)
}

// optional .caffe.SigmoidParameter sigmoid_param = 124;
bool LayerParameter::has_sigmoid_param() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
void LayerParameter::set_has_sigmoid_param() {
  _has_bits_[1] |= 0x00040000u;
}
void LayerParameter::clear_has_sigmoid_param() {
  _has_bits_[1] &= ~0x00040000u;
}
void LayerParameter::clear_sigmoid_param() {
  if (sigmoid_param_ != NULL) sigmoid_param_->::caffe::SigmoidParameter::Clear();
  clear_has_sigmoid_param();
}
const ::caffe::SigmoidParameter& LayerParameter::sigmoid_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.sigmoid_param)
  return sigmoid_param_ != NULL ? *sigmoid_param_
                         : *::caffe::SigmoidParameter::internal_default_instance();
}
::caffe::SigmoidParameter* LayerParameter::mutable_sigmoid_param() {
  set_has_sigmoid_param();
  if (sigmoid_param_ == NULL) {
    sigmoid_param_ = new ::caffe::SigmoidParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.sigmoid_param)
  return sigmoid_param_;
}
::caffe::SigmoidParameter* LayerParameter::release_sigmoid_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.sigmoid_param)
  clear_has_sigmoid_param();
  ::caffe::SigmoidParameter* temp = sigmoid_param_;
  sigmoid_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_sigmoid_param(::caffe::SigmoidParameter* sigmoid_param) {
  delete sigmoid_param_;
  sigmoid_param_ = sigmoid_param;
  if (sigmoid_param) {
    set_has_sigmoid_param();
  } else {
    clear_has_sigmoid_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.sigmoid_param)
}

// optional .caffe.SoftmaxParameter softmax_param = 125;
bool LayerParameter::has_softmax_param() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
void LayerParameter::set_has_softmax_param() {
  _has_bits_[1] |= 0x00080000u;
}
void LayerParameter::clear_has_softmax_param() {
  _has_bits_[1] &= ~0x00080000u;
}
void LayerParameter::clear_softmax_param() {
  if (softmax_param_ != NULL) softmax_param_->::caffe::SoftmaxParameter::Clear();
  clear_has_softmax_param();
}
const ::caffe::SoftmaxParameter& LayerParameter::softmax_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.softmax_param)
  return softmax_param_ != NULL ? *softmax_param_
                         : *::caffe::SoftmaxParameter::internal_default_instance();
}
::caffe::SoftmaxParameter* LayerParameter::mutable_softmax_param() {
  set_has_softmax_param();
  if (softmax_param_ == NULL) {
    softmax_param_ = new ::caffe::SoftmaxParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.softmax_param)
  return softmax_param_;
}
::caffe::SoftmaxParameter* LayerParameter::release_softmax_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.softmax_param)
  clear_has_softmax_param();
  ::caffe::SoftmaxParameter* temp = softmax_param_;
  softmax_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_softmax_param(::caffe::SoftmaxParameter* softmax_param) {
  delete softmax_param_;
  softmax_param_ = softmax_param;
  if (softmax_param) {
    set_has_softmax_param();
  } else {
    clear_has_softmax_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.softmax_param)
}

// optional .caffe.SPPParameter spp_param = 132;
bool LayerParameter::has_spp_param() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
void LayerParameter::set_has_spp_param() {
  _has_bits_[1] |= 0x00100000u;
}
void LayerParameter::clear_has_spp_param() {
  _has_bits_[1] &= ~0x00100000u;
}
void LayerParameter::clear_spp_param() {
  if (spp_param_ != NULL) spp_param_->::caffe::SPPParameter::Clear();
  clear_has_spp_param();
}
const ::caffe::SPPParameter& LayerParameter::spp_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.spp_param)
  return spp_param_ != NULL ? *spp_param_
                         : *::caffe::SPPParameter::internal_default_instance();
}
::caffe::SPPParameter* LayerParameter::mutable_spp_param() {
  set_has_spp_param();
  if (spp_param_ == NULL) {
    spp_param_ = new ::caffe::SPPParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.spp_param)
  return spp_param_;
}
::caffe::SPPParameter* LayerParameter::release_spp_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.spp_param)
  clear_has_spp_param();
  ::caffe::SPPParameter* temp = spp_param_;
  spp_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_spp_param(::caffe::SPPParameter* spp_param) {
  delete spp_param_;
  spp_param_ = spp_param;
  if (spp_param) {
    set_has_spp_param();
  } else {
    clear_has_spp_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.spp_param)
}

// optional .caffe.SliceParameter slice_param = 126;
bool LayerParameter::has_slice_param() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
void LayerParameter::set_has_slice_param() {
  _has_bits_[1] |= 0x00200000u;
}
void LayerParameter::clear_has_slice_param() {
  _has_bits_[1] &= ~0x00200000u;
}
void LayerParameter::clear_slice_param() {
  if (slice_param_ != NULL) slice_param_->::caffe::SliceParameter::Clear();
  clear_has_slice_param();
}
const ::caffe::SliceParameter& LayerParameter::slice_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.slice_param)
  return slice_param_ != NULL ? *slice_param_
                         : *::caffe::SliceParameter::internal_default_instance();
}
::caffe::SliceParameter* LayerParameter::mutable_slice_param() {
  set_has_slice_param();
  if (slice_param_ == NULL) {
    slice_param_ = new ::caffe::SliceParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.slice_param)
  return slice_param_;
}
::caffe::SliceParameter* LayerParameter::release_slice_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.slice_param)
  clear_has_slice_param();
  ::caffe::SliceParameter* temp = slice_param_;
  slice_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_slice_param(::caffe::SliceParameter* slice_param) {
  delete slice_param_;
  slice_param_ = slice_param;
  if (slice_param) {
    set_has_slice_param();
  } else {
    clear_has_slice_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.slice_param)
}

// optional .caffe.TanHParameter tanh_param = 127;
bool LayerParameter::has_tanh_param() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
void LayerParameter::set_has_tanh_param() {
  _has_bits_[1] |= 0x00400000u;
}
void LayerParameter::clear_has_tanh_param() {
  _has_bits_[1] &= ~0x00400000u;
}
void LayerParameter::clear_tanh_param() {
  if (tanh_param_ != NULL) tanh_param_->::caffe::TanHParameter::Clear();
  clear_has_tanh_param();
}
const ::caffe::TanHParameter& LayerParameter::tanh_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.tanh_param)
  return tanh_param_ != NULL ? *tanh_param_
                         : *::caffe::TanHParameter::internal_default_instance();
}
::caffe::TanHParameter* LayerParameter::mutable_tanh_param() {
  set_has_tanh_param();
  if (tanh_param_ == NULL) {
    tanh_param_ = new ::caffe::TanHParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.tanh_param)
  return tanh_param_;
}
::caffe::TanHParameter* LayerParameter::release_tanh_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.tanh_param)
  clear_has_tanh_param();
  ::caffe::TanHParameter* temp = tanh_param_;
  tanh_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_tanh_param(::caffe::TanHParameter* tanh_param) {
  delete tanh_param_;
  tanh_param_ = tanh_param;
  if (tanh_param) {
    set_has_tanh_param();
  } else {
    clear_has_tanh_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.tanh_param)
}

// optional .caffe.ThresholdParameter threshold_param = 128;
bool LayerParameter::has_threshold_param() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
void LayerParameter::set_has_threshold_param() {
  _has_bits_[1] |= 0x00800000u;
}
void LayerParameter::clear_has_threshold_param() {
  _has_bits_[1] &= ~0x00800000u;
}
void LayerParameter::clear_threshold_param() {
  if (threshold_param_ != NULL) threshold_param_->::caffe::ThresholdParameter::Clear();
  clear_has_threshold_param();
}
const ::caffe::ThresholdParameter& LayerParameter::threshold_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.threshold_param)
  return threshold_param_ != NULL ? *threshold_param_
                         : *::caffe::ThresholdParameter::internal_default_instance();
}
::caffe::ThresholdParameter* LayerParameter::mutable_threshold_param() {
  set_has_threshold_param();
  if (threshold_param_ == NULL) {
    threshold_param_ = new ::caffe::ThresholdParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.threshold_param)
  return threshold_param_;
}
::caffe::ThresholdParameter* LayerParameter::release_threshold_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.threshold_param)
  clear_has_threshold_param();
  ::caffe::ThresholdParameter* temp = threshold_param_;
  threshold_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_threshold_param(::caffe::ThresholdParameter* threshold_param) {
  delete threshold_param_;
  threshold_param_ = threshold_param;
  if (threshold_param) {
    set_has_threshold_param();
  } else {
    clear_has_threshold_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.threshold_param)
}

// optional .caffe.TileParameter tile_param = 138;
bool LayerParameter::has_tile_param() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
void LayerParameter::set_has_tile_param() {
  _has_bits_[1] |= 0x01000000u;
}
void LayerParameter::clear_has_tile_param() {
  _has_bits_[1] &= ~0x01000000u;
}
void LayerParameter::clear_tile_param() {
  if (tile_param_ != NULL) tile_param_->::caffe::TileParameter::Clear();
  clear_has_tile_param();
}
const ::caffe::TileParameter& LayerParameter::tile_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.tile_param)
  return tile_param_ != NULL ? *tile_param_
                         : *::caffe::TileParameter::internal_default_instance();
}
::caffe::TileParameter* LayerParameter::mutable_tile_param() {
  set_has_tile_param();
  if (tile_param_ == NULL) {
    tile_param_ = new ::caffe::TileParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.tile_param)
  return tile_param_;
}
::caffe::TileParameter* LayerParameter::release_tile_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.tile_param)
  clear_has_tile_param();
  ::caffe::TileParameter* temp = tile_param_;
  tile_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_tile_param(::caffe::TileParameter* tile_param) {
  delete tile_param_;
  tile_param_ = tile_param;
  if (tile_param) {
    set_has_tile_param();
  } else {
    clear_has_tile_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.tile_param)
}

// optional .caffe.WindowDataParameter window_data_param = 129;
bool LayerParameter::has_window_data_param() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
void LayerParameter::set_has_window_data_param() {
  _has_bits_[1] |= 0x02000000u;
}
void LayerParameter::clear_has_window_data_param() {
  _has_bits_[1] &= ~0x02000000u;
}
void LayerParameter::clear_window_data_param() {
  if (window_data_param_ != NULL) window_data_param_->::caffe::WindowDataParameter::Clear();
  clear_has_window_data_param();
}
const ::caffe::WindowDataParameter& LayerParameter::window_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.window_data_param)
  return window_data_param_ != NULL ? *window_data_param_
                         : *::caffe::WindowDataParameter::internal_default_instance();
}
::caffe::WindowDataParameter* LayerParameter::mutable_window_data_param() {
  set_has_window_data_param();
  if (window_data_param_ == NULL) {
    window_data_param_ = new ::caffe::WindowDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.window_data_param)
  return window_data_param_;
}
::caffe::WindowDataParameter* LayerParameter::release_window_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.window_data_param)
  clear_has_window_data_param();
  ::caffe::WindowDataParameter* temp = window_data_param_;
  window_data_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_window_data_param(::caffe::WindowDataParameter* window_data_param) {
  delete window_data_param_;
  window_data_param_ = window_data_param;
  if (window_data_param) {
    set_has_window_data_param();
  } else {
    clear_has_window_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.window_data_param)
}

// optional .caffe.ImgBBoxAnnoParameter img_bbox_anno_param = 1001;
bool LayerParameter::has_img_bbox_anno_param() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
void LayerParameter::set_has_img_bbox_anno_param() {
  _has_bits_[1] |= 0x04000000u;
}
void LayerParameter::clear_has_img_bbox_anno_param() {
  _has_bits_[1] &= ~0x04000000u;
}
void LayerParameter::clear_img_bbox_anno_param() {
  if (img_bbox_anno_param_ != NULL) img_bbox_anno_param_->::caffe::ImgBBoxAnnoParameter::Clear();
  clear_has_img_bbox_anno_param();
}
const ::caffe::ImgBBoxAnnoParameter& LayerParameter::img_bbox_anno_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.img_bbox_anno_param)
  return img_bbox_anno_param_ != NULL ? *img_bbox_anno_param_
                         : *::caffe::ImgBBoxAnnoParameter::internal_default_instance();
}
::caffe::ImgBBoxAnnoParameter* LayerParameter::mutable_img_bbox_anno_param() {
  set_has_img_bbox_anno_param();
  if (img_bbox_anno_param_ == NULL) {
    img_bbox_anno_param_ = new ::caffe::ImgBBoxAnnoParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.img_bbox_anno_param)
  return img_bbox_anno_param_;
}
::caffe::ImgBBoxAnnoParameter* LayerParameter::release_img_bbox_anno_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.img_bbox_anno_param)
  clear_has_img_bbox_anno_param();
  ::caffe::ImgBBoxAnnoParameter* temp = img_bbox_anno_param_;
  img_bbox_anno_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_img_bbox_anno_param(::caffe::ImgBBoxAnnoParameter* img_bbox_anno_param) {
  delete img_bbox_anno_param_;
  img_bbox_anno_param_ = img_bbox_anno_param;
  if (img_bbox_anno_param) {
    set_has_img_bbox_anno_param();
  } else {
    clear_has_img_bbox_anno_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.img_bbox_anno_param)
}

// optional .caffe.HeatmapConcatParameter heatmap_concat_param = 1002;
bool LayerParameter::has_heatmap_concat_param() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
void LayerParameter::set_has_heatmap_concat_param() {
  _has_bits_[1] |= 0x08000000u;
}
void LayerParameter::clear_has_heatmap_concat_param() {
  _has_bits_[1] &= ~0x08000000u;
}
void LayerParameter::clear_heatmap_concat_param() {
  if (heatmap_concat_param_ != NULL) heatmap_concat_param_->::caffe::HeatmapConcatParameter::Clear();
  clear_has_heatmap_concat_param();
}
const ::caffe::HeatmapConcatParameter& LayerParameter::heatmap_concat_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.heatmap_concat_param)
  return heatmap_concat_param_ != NULL ? *heatmap_concat_param_
                         : *::caffe::HeatmapConcatParameter::internal_default_instance();
}
::caffe::HeatmapConcatParameter* LayerParameter::mutable_heatmap_concat_param() {
  set_has_heatmap_concat_param();
  if (heatmap_concat_param_ == NULL) {
    heatmap_concat_param_ = new ::caffe::HeatmapConcatParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.heatmap_concat_param)
  return heatmap_concat_param_;
}
::caffe::HeatmapConcatParameter* LayerParameter::release_heatmap_concat_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.heatmap_concat_param)
  clear_has_heatmap_concat_param();
  ::caffe::HeatmapConcatParameter* temp = heatmap_concat_param_;
  heatmap_concat_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_heatmap_concat_param(::caffe::HeatmapConcatParameter* heatmap_concat_param) {
  delete heatmap_concat_param_;
  heatmap_concat_param_ = heatmap_concat_param;
  if (heatmap_concat_param) {
    set_has_heatmap_concat_param();
  } else {
    clear_has_heatmap_concat_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.heatmap_concat_param)
}

// optional .caffe.BBoxAnnoMapParameter bbox_anno_map_param = 1003;
bool LayerParameter::has_bbox_anno_map_param() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
void LayerParameter::set_has_bbox_anno_map_param() {
  _has_bits_[1] |= 0x10000000u;
}
void LayerParameter::clear_has_bbox_anno_map_param() {
  _has_bits_[1] &= ~0x10000000u;
}
void LayerParameter::clear_bbox_anno_map_param() {
  if (bbox_anno_map_param_ != NULL) bbox_anno_map_param_->::caffe::BBoxAnnoMapParameter::Clear();
  clear_has_bbox_anno_map_param();
}
const ::caffe::BBoxAnnoMapParameter& LayerParameter::bbox_anno_map_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.bbox_anno_map_param)
  return bbox_anno_map_param_ != NULL ? *bbox_anno_map_param_
                         : *::caffe::BBoxAnnoMapParameter::internal_default_instance();
}
::caffe::BBoxAnnoMapParameter* LayerParameter::mutable_bbox_anno_map_param() {
  set_has_bbox_anno_map_param();
  if (bbox_anno_map_param_ == NULL) {
    bbox_anno_map_param_ = new ::caffe::BBoxAnnoMapParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.bbox_anno_map_param)
  return bbox_anno_map_param_;
}
::caffe::BBoxAnnoMapParameter* LayerParameter::release_bbox_anno_map_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.bbox_anno_map_param)
  clear_has_bbox_anno_map_param();
  ::caffe::BBoxAnnoMapParameter* temp = bbox_anno_map_param_;
  bbox_anno_map_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_bbox_anno_map_param(::caffe::BBoxAnnoMapParameter* bbox_anno_map_param) {
  delete bbox_anno_map_param_;
  bbox_anno_map_param_ = bbox_anno_map_param;
  if (bbox_anno_map_param) {
    set_has_bbox_anno_map_param();
  } else {
    clear_has_bbox_anno_map_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.bbox_anno_map_param)
}

// optional .caffe.LabelParameter label_param = 1004;
bool LayerParameter::has_label_param() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
void LayerParameter::set_has_label_param() {
  _has_bits_[1] |= 0x20000000u;
}
void LayerParameter::clear_has_label_param() {
  _has_bits_[1] &= ~0x20000000u;
}
void LayerParameter::clear_label_param() {
  if (label_param_ != NULL) label_param_->::caffe::LabelParameter::Clear();
  clear_has_label_param();
}
const ::caffe::LabelParameter& LayerParameter::label_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.label_param)
  return label_param_ != NULL ? *label_param_
                         : *::caffe::LabelParameter::internal_default_instance();
}
::caffe::LabelParameter* LayerParameter::mutable_label_param() {
  set_has_label_param();
  if (label_param_ == NULL) {
    label_param_ = new ::caffe::LabelParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.label_param)
  return label_param_;
}
::caffe::LabelParameter* LayerParameter::release_label_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.label_param)
  clear_has_label_param();
  ::caffe::LabelParameter* temp = label_param_;
  label_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_label_param(::caffe::LabelParameter* label_param) {
  delete label_param_;
  label_param_ = label_param;
  if (label_param) {
    set_has_label_param();
  } else {
    clear_has_label_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.label_param)
}

// optional .caffe.PatchDataParameter patch_data_param = 1005;
bool LayerParameter::has_patch_data_param() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
void LayerParameter::set_has_patch_data_param() {
  _has_bits_[1] |= 0x40000000u;
}
void LayerParameter::clear_has_patch_data_param() {
  _has_bits_[1] &= ~0x40000000u;
}
void LayerParameter::clear_patch_data_param() {
  if (patch_data_param_ != NULL) patch_data_param_->::caffe::PatchDataParameter::Clear();
  clear_has_patch_data_param();
}
const ::caffe::PatchDataParameter& LayerParameter::patch_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.patch_data_param)
  return patch_data_param_ != NULL ? *patch_data_param_
                         : *::caffe::PatchDataParameter::internal_default_instance();
}
::caffe::PatchDataParameter* LayerParameter::mutable_patch_data_param() {
  set_has_patch_data_param();
  if (patch_data_param_ == NULL) {
    patch_data_param_ = new ::caffe::PatchDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.patch_data_param)
  return patch_data_param_;
}
::caffe::PatchDataParameter* LayerParameter::release_patch_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.patch_data_param)
  clear_has_patch_data_param();
  ::caffe::PatchDataParameter* temp = patch_data_param_;
  patch_data_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_patch_data_param(::caffe::PatchDataParameter* patch_data_param) {
  delete patch_data_param_;
  patch_data_param_ = patch_data_param;
  if (patch_data_param) {
    set_has_patch_data_param();
  } else {
    clear_has_patch_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.patch_data_param)
}

// optional .caffe.LabelRemapParameter label_remap_param = 1006;
bool LayerParameter::has_label_remap_param() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
void LayerParameter::set_has_label_remap_param() {
  _has_bits_[1] |= 0x80000000u;
}
void LayerParameter::clear_has_label_remap_param() {
  _has_bits_[1] &= ~0x80000000u;
}
void LayerParameter::clear_label_remap_param() {
  if (label_remap_param_ != NULL) label_remap_param_->::caffe::LabelRemapParameter::Clear();
  clear_has_label_remap_param();
}
const ::caffe::LabelRemapParameter& LayerParameter::label_remap_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.label_remap_param)
  return label_remap_param_ != NULL ? *label_remap_param_
                         : *::caffe::LabelRemapParameter::internal_default_instance();
}
::caffe::LabelRemapParameter* LayerParameter::mutable_label_remap_param() {
  set_has_label_remap_param();
  if (label_remap_param_ == NULL) {
    label_remap_param_ = new ::caffe::LabelRemapParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.label_remap_param)
  return label_remap_param_;
}
::caffe::LabelRemapParameter* LayerParameter::release_label_remap_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.label_remap_param)
  clear_has_label_remap_param();
  ::caffe::LabelRemapParameter* temp = label_remap_param_;
  label_remap_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_label_remap_param(::caffe::LabelRemapParameter* label_remap_param) {
  delete label_remap_param_;
  label_remap_param_ = label_remap_param;
  if (label_remap_param) {
    set_has_label_remap_param();
  } else {
    clear_has_label_remap_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.label_remap_param)
}

// optional .caffe.BBoxParameter bbox_param = 1007;
bool LayerParameter::has_bbox_param() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
void LayerParameter::set_has_bbox_param() {
  _has_bits_[2] |= 0x00000001u;
}
void LayerParameter::clear_has_bbox_param() {
  _has_bits_[2] &= ~0x00000001u;
}
void LayerParameter::clear_bbox_param() {
  if (bbox_param_ != NULL) bbox_param_->::caffe::BBoxParameter::Clear();
  clear_has_bbox_param();
}
const ::caffe::BBoxParameter& LayerParameter::bbox_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.bbox_param)
  return bbox_param_ != NULL ? *bbox_param_
                         : *::caffe::BBoxParameter::internal_default_instance();
}
::caffe::BBoxParameter* LayerParameter::mutable_bbox_param() {
  set_has_bbox_param();
  if (bbox_param_ == NULL) {
    bbox_param_ = new ::caffe::BBoxParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.bbox_param)
  return bbox_param_;
}
::caffe::BBoxParameter* LayerParameter::release_bbox_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.bbox_param)
  clear_has_bbox_param();
  ::caffe::BBoxParameter* temp = bbox_param_;
  bbox_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_bbox_param(::caffe::BBoxParameter* bbox_param) {
  delete bbox_param_;
  bbox_param_ = bbox_param;
  if (bbox_param) {
    set_has_bbox_param();
  } else {
    clear_has_bbox_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.bbox_param)
}

// optional .caffe.SlidingWindowInputParameter sliding_window_param = 1008;
bool LayerParameter::has_sliding_window_param() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
void LayerParameter::set_has_sliding_window_param() {
  _has_bits_[2] |= 0x00000002u;
}
void LayerParameter::clear_has_sliding_window_param() {
  _has_bits_[2] &= ~0x00000002u;
}
void LayerParameter::clear_sliding_window_param() {
  if (sliding_window_param_ != NULL) sliding_window_param_->::caffe::SlidingWindowInputParameter::Clear();
  clear_has_sliding_window_param();
}
const ::caffe::SlidingWindowInputParameter& LayerParameter::sliding_window_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.sliding_window_param)
  return sliding_window_param_ != NULL ? *sliding_window_param_
                         : *::caffe::SlidingWindowInputParameter::internal_default_instance();
}
::caffe::SlidingWindowInputParameter* LayerParameter::mutable_sliding_window_param() {
  set_has_sliding_window_param();
  if (sliding_window_param_ == NULL) {
    sliding_window_param_ = new ::caffe::SlidingWindowInputParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.sliding_window_param)
  return sliding_window_param_;
}
::caffe::SlidingWindowInputParameter* LayerParameter::release_sliding_window_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.sliding_window_param)
  clear_has_sliding_window_param();
  ::caffe::SlidingWindowInputParameter* temp = sliding_window_param_;
  sliding_window_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_sliding_window_param(::caffe::SlidingWindowInputParameter* sliding_window_param) {
  delete sliding_window_param_;
  sliding_window_param_ = sliding_window_param;
  if (sliding_window_param) {
    set_has_sliding_window_param();
  } else {
    clear_has_sliding_window_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.sliding_window_param)
}

// optional .caffe.BBoxToGridAndSizeParameter bbox_to_grid_and_size_param = 1009;
bool LayerParameter::has_bbox_to_grid_and_size_param() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
void LayerParameter::set_has_bbox_to_grid_and_size_param() {
  _has_bits_[2] |= 0x00000004u;
}
void LayerParameter::clear_has_bbox_to_grid_and_size_param() {
  _has_bits_[2] &= ~0x00000004u;
}
void LayerParameter::clear_bbox_to_grid_and_size_param() {
  if (bbox_to_grid_and_size_param_ != NULL) bbox_to_grid_and_size_param_->::caffe::BBoxToGridAndSizeParameter::Clear();
  clear_has_bbox_to_grid_and_size_param();
}
const ::caffe::BBoxToGridAndSizeParameter& LayerParameter::bbox_to_grid_and_size_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.bbox_to_grid_and_size_param)
  return bbox_to_grid_and_size_param_ != NULL ? *bbox_to_grid_and_size_param_
                         : *::caffe::BBoxToGridAndSizeParameter::internal_default_instance();
}
::caffe::BBoxToGridAndSizeParameter* LayerParameter::mutable_bbox_to_grid_and_size_param() {
  set_has_bbox_to_grid_and_size_param();
  if (bbox_to_grid_and_size_param_ == NULL) {
    bbox_to_grid_and_size_param_ = new ::caffe::BBoxToGridAndSizeParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.bbox_to_grid_and_size_param)
  return bbox_to_grid_and_size_param_;
}
::caffe::BBoxToGridAndSizeParameter* LayerParameter::release_bbox_to_grid_and_size_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.bbox_to_grid_and_size_param)
  clear_has_bbox_to_grid_and_size_param();
  ::caffe::BBoxToGridAndSizeParameter* temp = bbox_to_grid_and_size_param_;
  bbox_to_grid_and_size_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_bbox_to_grid_and_size_param(::caffe::BBoxToGridAndSizeParameter* bbox_to_grid_and_size_param) {
  delete bbox_to_grid_and_size_param_;
  bbox_to_grid_and_size_param_ = bbox_to_grid_and_size_param;
  if (bbox_to_grid_and_size_param) {
    set_has_bbox_to_grid_and_size_param();
  } else {
    clear_has_bbox_to_grid_and_size_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.bbox_to_grid_and_size_param)
}

// optional .caffe.SizeUnitParameter size_unit_param = 1010;
bool LayerParameter::has_size_unit_param() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
void LayerParameter::set_has_size_unit_param() {
  _has_bits_[2] |= 0x00000008u;
}
void LayerParameter::clear_has_size_unit_param() {
  _has_bits_[2] &= ~0x00000008u;
}
void LayerParameter::clear_size_unit_param() {
  if (size_unit_param_ != NULL) size_unit_param_->::caffe::SizeUnitParameter::Clear();
  clear_has_size_unit_param();
}
const ::caffe::SizeUnitParameter& LayerParameter::size_unit_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.size_unit_param)
  return size_unit_param_ != NULL ? *size_unit_param_
                         : *::caffe::SizeUnitParameter::internal_default_instance();
}
::caffe::SizeUnitParameter* LayerParameter::mutable_size_unit_param() {
  set_has_size_unit_param();
  if (size_unit_param_ == NULL) {
    size_unit_param_ = new ::caffe::SizeUnitParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.size_unit_param)
  return size_unit_param_;
}
::caffe::SizeUnitParameter* LayerParameter::release_size_unit_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.size_unit_param)
  clear_has_size_unit_param();
  ::caffe::SizeUnitParameter* temp = size_unit_param_;
  size_unit_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_size_unit_param(::caffe::SizeUnitParameter* size_unit_param) {
  delete size_unit_param_;
  size_unit_param_ = size_unit_param;
  if (size_unit_param) {
    set_has_size_unit_param();
  } else {
    clear_has_size_unit_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.size_unit_param)
}

// optional .caffe.PaddingParameter padding_param = 1011;
bool LayerParameter::has_padding_param() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
void LayerParameter::set_has_padding_param() {
  _has_bits_[2] |= 0x00000010u;
}
void LayerParameter::clear_has_padding_param() {
  _has_bits_[2] &= ~0x00000010u;
}
void LayerParameter::clear_padding_param() {
  if (padding_param_ != NULL) padding_param_->::caffe::PaddingParameter::Clear();
  clear_has_padding_param();
}
const ::caffe::PaddingParameter& LayerParameter::padding_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.padding_param)
  return padding_param_ != NULL ? *padding_param_
                         : *::caffe::PaddingParameter::internal_default_instance();
}
::caffe::PaddingParameter* LayerParameter::mutable_padding_param() {
  set_has_padding_param();
  if (padding_param_ == NULL) {
    padding_param_ = new ::caffe::PaddingParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.padding_param)
  return padding_param_;
}
::caffe::PaddingParameter* LayerParameter::release_padding_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.padding_param)
  clear_has_padding_param();
  ::caffe::PaddingParameter* temp = padding_param_;
  padding_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_padding_param(::caffe::PaddingParameter* padding_param) {
  delete padding_param_;
  padding_param_ = padding_param;
  if (padding_param) {
    set_has_padding_param();
  } else {
    clear_has_padding_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.padding_param)
}

// optional .caffe.GTMapDataParameter gt_map_data_param = 1012;
bool LayerParameter::has_gt_map_data_param() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
void LayerParameter::set_has_gt_map_data_param() {
  _has_bits_[2] |= 0x00000020u;
}
void LayerParameter::clear_has_gt_map_data_param() {
  _has_bits_[2] &= ~0x00000020u;
}
void LayerParameter::clear_gt_map_data_param() {
  if (gt_map_data_param_ != NULL) gt_map_data_param_->::caffe::GTMapDataParameter::Clear();
  clear_has_gt_map_data_param();
}
const ::caffe::GTMapDataParameter& LayerParameter::gt_map_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.gt_map_data_param)
  return gt_map_data_param_ != NULL ? *gt_map_data_param_
                         : *::caffe::GTMapDataParameter::internal_default_instance();
}
::caffe::GTMapDataParameter* LayerParameter::mutable_gt_map_data_param() {
  set_has_gt_map_data_param();
  if (gt_map_data_param_ == NULL) {
    gt_map_data_param_ = new ::caffe::GTMapDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.gt_map_data_param)
  return gt_map_data_param_;
}
::caffe::GTMapDataParameter* LayerParameter::release_gt_map_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.gt_map_data_param)
  clear_has_gt_map_data_param();
  ::caffe::GTMapDataParameter* temp = gt_map_data_param_;
  gt_map_data_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_gt_map_data_param(::caffe::GTMapDataParameter* gt_map_data_param) {
  delete gt_map_data_param_;
  gt_map_data_param_ = gt_map_data_param;
  if (gt_map_data_param) {
    set_has_gt_map_data_param();
  } else {
    clear_has_gt_map_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.gt_map_data_param)
}

// optional .caffe.LabelDiffIgnoreParameter label_diff_ignore_param = 1013;
bool LayerParameter::has_label_diff_ignore_param() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
void LayerParameter::set_has_label_diff_ignore_param() {
  _has_bits_[2] |= 0x00000040u;
}
void LayerParameter::clear_has_label_diff_ignore_param() {
  _has_bits_[2] &= ~0x00000040u;
}
void LayerParameter::clear_label_diff_ignore_param() {
  if (label_diff_ignore_param_ != NULL) label_diff_ignore_param_->::caffe::LabelDiffIgnoreParameter::Clear();
  clear_has_label_diff_ignore_param();
}
const ::caffe::LabelDiffIgnoreParameter& LayerParameter::label_diff_ignore_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.label_diff_ignore_param)
  return label_diff_ignore_param_ != NULL ? *label_diff_ignore_param_
                         : *::caffe::LabelDiffIgnoreParameter::internal_default_instance();
}
::caffe::LabelDiffIgnoreParameter* LayerParameter::mutable_label_diff_ignore_param() {
  set_has_label_diff_ignore_param();
  if (label_diff_ignore_param_ == NULL) {
    label_diff_ignore_param_ = new ::caffe::LabelDiffIgnoreParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.label_diff_ignore_param)
  return label_diff_ignore_param_;
}
::caffe::LabelDiffIgnoreParameter* LayerParameter::release_label_diff_ignore_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.label_diff_ignore_param)
  clear_has_label_diff_ignore_param();
  ::caffe::LabelDiffIgnoreParameter* temp = label_diff_ignore_param_;
  label_diff_ignore_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_label_diff_ignore_param(::caffe::LabelDiffIgnoreParameter* label_diff_ignore_param) {
  delete label_diff_ignore_param_;
  label_diff_ignore_param_ = label_diff_ignore_param;
  if (label_diff_ignore_param) {
    set_has_label_diff_ignore_param();
  } else {
    clear_has_label_diff_ignore_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.label_diff_ignore_param)
}

// optional .caffe.GTSubmapDataParameter gt_submap_data_param = 1014;
bool LayerParameter::has_gt_submap_data_param() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
void LayerParameter::set_has_gt_submap_data_param() {
  _has_bits_[2] |= 0x00000080u;
}
void LayerParameter::clear_has_gt_submap_data_param() {
  _has_bits_[2] &= ~0x00000080u;
}
void LayerParameter::clear_gt_submap_data_param() {
  if (gt_submap_data_param_ != NULL) gt_submap_data_param_->::caffe::GTSubmapDataParameter::Clear();
  clear_has_gt_submap_data_param();
}
const ::caffe::GTSubmapDataParameter& LayerParameter::gt_submap_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.gt_submap_data_param)
  return gt_submap_data_param_ != NULL ? *gt_submap_data_param_
                         : *::caffe::GTSubmapDataParameter::internal_default_instance();
}
::caffe::GTSubmapDataParameter* LayerParameter::mutable_gt_submap_data_param() {
  set_has_gt_submap_data_param();
  if (gt_submap_data_param_ == NULL) {
    gt_submap_data_param_ = new ::caffe::GTSubmapDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.gt_submap_data_param)
  return gt_submap_data_param_;
}
::caffe::GTSubmapDataParameter* LayerParameter::release_gt_submap_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.gt_submap_data_param)
  clear_has_gt_submap_data_param();
  ::caffe::GTSubmapDataParameter* temp = gt_submap_data_param_;
  gt_submap_data_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_gt_submap_data_param(::caffe::GTSubmapDataParameter* gt_submap_data_param) {
  delete gt_submap_data_param_;
  gt_submap_data_param_ = gt_submap_data_param;
  if (gt_submap_data_param) {
    set_has_gt_submap_data_param();
  } else {
    clear_has_gt_submap_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.gt_submap_data_param)
}

// optional .caffe.TopSubmapDataParameter top_submap_data_param = 1015;
bool LayerParameter::has_top_submap_data_param() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
void LayerParameter::set_has_top_submap_data_param() {
  _has_bits_[2] |= 0x00000100u;
}
void LayerParameter::clear_has_top_submap_data_param() {
  _has_bits_[2] &= ~0x00000100u;
}
void LayerParameter::clear_top_submap_data_param() {
  if (top_submap_data_param_ != NULL) top_submap_data_param_->::caffe::TopSubmapDataParameter::Clear();
  clear_has_top_submap_data_param();
}
const ::caffe::TopSubmapDataParameter& LayerParameter::top_submap_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.top_submap_data_param)
  return top_submap_data_param_ != NULL ? *top_submap_data_param_
                         : *::caffe::TopSubmapDataParameter::internal_default_instance();
}
::caffe::TopSubmapDataParameter* LayerParameter::mutable_top_submap_data_param() {
  set_has_top_submap_data_param();
  if (top_submap_data_param_ == NULL) {
    top_submap_data_param_ = new ::caffe::TopSubmapDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.top_submap_data_param)
  return top_submap_data_param_;
}
::caffe::TopSubmapDataParameter* LayerParameter::release_top_submap_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.top_submap_data_param)
  clear_has_top_submap_data_param();
  ::caffe::TopSubmapDataParameter* temp = top_submap_data_param_;
  top_submap_data_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_top_submap_data_param(::caffe::TopSubmapDataParameter* top_submap_data_param) {
  delete top_submap_data_param_;
  top_submap_data_param_ = top_submap_data_param;
  if (top_submap_data_param) {
    set_has_top_submap_data_param();
  } else {
    clear_has_top_submap_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.top_submap_data_param)
}

// optional .caffe.YOLOLikeLossParameter yololike_loss_param = 1016;
bool LayerParameter::has_yololike_loss_param() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
void LayerParameter::set_has_yololike_loss_param() {
  _has_bits_[2] |= 0x00000200u;
}
void LayerParameter::clear_has_yololike_loss_param() {
  _has_bits_[2] &= ~0x00000200u;
}
void LayerParameter::clear_yololike_loss_param() {
  if (yololike_loss_param_ != NULL) yololike_loss_param_->::caffe::YOLOLikeLossParameter::Clear();
  clear_has_yololike_loss_param();
}
const ::caffe::YOLOLikeLossParameter& LayerParameter::yololike_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.yololike_loss_param)
  return yololike_loss_param_ != NULL ? *yololike_loss_param_
                         : *::caffe::YOLOLikeLossParameter::internal_default_instance();
}
::caffe::YOLOLikeLossParameter* LayerParameter::mutable_yololike_loss_param() {
  set_has_yololike_loss_param();
  if (yololike_loss_param_ == NULL) {
    yololike_loss_param_ = new ::caffe::YOLOLikeLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.yololike_loss_param)
  return yololike_loss_param_;
}
::caffe::YOLOLikeLossParameter* LayerParameter::release_yololike_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.yololike_loss_param)
  clear_has_yololike_loss_param();
  ::caffe::YOLOLikeLossParameter* temp = yololike_loss_param_;
  yololike_loss_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_yololike_loss_param(::caffe::YOLOLikeLossParameter* yololike_loss_param) {
  delete yololike_loss_param_;
  yololike_loss_param_ = yololike_loss_param;
  if (yololike_loss_param) {
    set_has_yololike_loss_param();
  } else {
    clear_has_yololike_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.yololike_loss_param)
}

// optional .caffe.WeightedSoftmaxLossParameter weighted_softmax_loss_param = 1017;
bool LayerParameter::has_weighted_softmax_loss_param() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
void LayerParameter::set_has_weighted_softmax_loss_param() {
  _has_bits_[2] |= 0x00000400u;
}
void LayerParameter::clear_has_weighted_softmax_loss_param() {
  _has_bits_[2] &= ~0x00000400u;
}
void LayerParameter::clear_weighted_softmax_loss_param() {
  if (weighted_softmax_loss_param_ != NULL) weighted_softmax_loss_param_->::caffe::WeightedSoftmaxLossParameter::Clear();
  clear_has_weighted_softmax_loss_param();
}
const ::caffe::WeightedSoftmaxLossParameter& LayerParameter::weighted_softmax_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.weighted_softmax_loss_param)
  return weighted_softmax_loss_param_ != NULL ? *weighted_softmax_loss_param_
                         : *::caffe::WeightedSoftmaxLossParameter::internal_default_instance();
}
::caffe::WeightedSoftmaxLossParameter* LayerParameter::mutable_weighted_softmax_loss_param() {
  set_has_weighted_softmax_loss_param();
  if (weighted_softmax_loss_param_ == NULL) {
    weighted_softmax_loss_param_ = new ::caffe::WeightedSoftmaxLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.weighted_softmax_loss_param)
  return weighted_softmax_loss_param_;
}
::caffe::WeightedSoftmaxLossParameter* LayerParameter::release_weighted_softmax_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.weighted_softmax_loss_param)
  clear_has_weighted_softmax_loss_param();
  ::caffe::WeightedSoftmaxLossParameter* temp = weighted_softmax_loss_param_;
  weighted_softmax_loss_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_weighted_softmax_loss_param(::caffe::WeightedSoftmaxLossParameter* weighted_softmax_loss_param) {
  delete weighted_softmax_loss_param_;
  weighted_softmax_loss_param_ = weighted_softmax_loss_param;
  if (weighted_softmax_loss_param) {
    set_has_weighted_softmax_loss_param();
  } else {
    clear_has_weighted_softmax_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.weighted_softmax_loss_param)
}

// optional .caffe.GridProposalLossParameter grid_proposal_loss_param = 1018;
bool LayerParameter::has_grid_proposal_loss_param() const {
  return (_has_bits_[2] & 0x00000800u) != 0;
}
void LayerParameter::set_has_grid_proposal_loss_param() {
  _has_bits_[2] |= 0x00000800u;
}
void LayerParameter::clear_has_grid_proposal_loss_param() {
  _has_bits_[2] &= ~0x00000800u;
}
void LayerParameter::clear_grid_proposal_loss_param() {
  if (grid_proposal_loss_param_ != NULL) grid_proposal_loss_param_->::caffe::GridProposalLossParameter::Clear();
  clear_has_grid_proposal_loss_param();
}
const ::caffe::GridProposalLossParameter& LayerParameter::grid_proposal_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.grid_proposal_loss_param)
  return grid_proposal_loss_param_ != NULL ? *grid_proposal_loss_param_
                         : *::caffe::GridProposalLossParameter::internal_default_instance();
}
::caffe::GridProposalLossParameter* LayerParameter::mutable_grid_proposal_loss_param() {
  set_has_grid_proposal_loss_param();
  if (grid_proposal_loss_param_ == NULL) {
    grid_proposal_loss_param_ = new ::caffe::GridProposalLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.grid_proposal_loss_param)
  return grid_proposal_loss_param_;
}
::caffe::GridProposalLossParameter* LayerParameter::release_grid_proposal_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.grid_proposal_loss_param)
  clear_has_grid_proposal_loss_param();
  ::caffe::GridProposalLossParameter* temp = grid_proposal_loss_param_;
  grid_proposal_loss_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_grid_proposal_loss_param(::caffe::GridProposalLossParameter* grid_proposal_loss_param) {
  delete grid_proposal_loss_param_;
  grid_proposal_loss_param_ = grid_proposal_loss_param;
  if (grid_proposal_loss_param) {
    set_has_grid_proposal_loss_param();
  } else {
    clear_has_grid_proposal_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.grid_proposal_loss_param)
}

// optional .caffe.BGSynthesisDataParameter bg_synthesis_data_param = 1019;
bool LayerParameter::has_bg_synthesis_data_param() const {
  return (_has_bits_[2] & 0x00001000u) != 0;
}
void LayerParameter::set_has_bg_synthesis_data_param() {
  _has_bits_[2] |= 0x00001000u;
}
void LayerParameter::clear_has_bg_synthesis_data_param() {
  _has_bits_[2] &= ~0x00001000u;
}
void LayerParameter::clear_bg_synthesis_data_param() {
  if (bg_synthesis_data_param_ != NULL) bg_synthesis_data_param_->::caffe::BGSynthesisDataParameter::Clear();
  clear_has_bg_synthesis_data_param();
}
const ::caffe::BGSynthesisDataParameter& LayerParameter::bg_synthesis_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.bg_synthesis_data_param)
  return bg_synthesis_data_param_ != NULL ? *bg_synthesis_data_param_
                         : *::caffe::BGSynthesisDataParameter::internal_default_instance();
}
::caffe::BGSynthesisDataParameter* LayerParameter::mutable_bg_synthesis_data_param() {
  set_has_bg_synthesis_data_param();
  if (bg_synthesis_data_param_ == NULL) {
    bg_synthesis_data_param_ = new ::caffe::BGSynthesisDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.bg_synthesis_data_param)
  return bg_synthesis_data_param_;
}
::caffe::BGSynthesisDataParameter* LayerParameter::release_bg_synthesis_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.bg_synthesis_data_param)
  clear_has_bg_synthesis_data_param();
  ::caffe::BGSynthesisDataParameter* temp = bg_synthesis_data_param_;
  bg_synthesis_data_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_bg_synthesis_data_param(::caffe::BGSynthesisDataParameter* bg_synthesis_data_param) {
  delete bg_synthesis_data_param_;
  bg_synthesis_data_param_ = bg_synthesis_data_param;
  if (bg_synthesis_data_param) {
    set_has_bg_synthesis_data_param();
  } else {
    clear_has_bg_synthesis_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.bg_synthesis_data_param)
}

// optional .caffe.SizeFilterParameter size_filter_param = 1020;
bool LayerParameter::has_size_filter_param() const {
  return (_has_bits_[2] & 0x00002000u) != 0;
}
void LayerParameter::set_has_size_filter_param() {
  _has_bits_[2] |= 0x00002000u;
}
void LayerParameter::clear_has_size_filter_param() {
  _has_bits_[2] &= ~0x00002000u;
}
void LayerParameter::clear_size_filter_param() {
  if (size_filter_param_ != NULL) size_filter_param_->::caffe::SizeFilterParameter::Clear();
  clear_has_size_filter_param();
}
const ::caffe::SizeFilterParameter& LayerParameter::size_filter_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.size_filter_param)
  return size_filter_param_ != NULL ? *size_filter_param_
                         : *::caffe::SizeFilterParameter::internal_default_instance();
}
::caffe::SizeFilterParameter* LayerParameter::mutable_size_filter_param() {
  set_has_size_filter_param();
  if (size_filter_param_ == NULL) {
    size_filter_param_ = new ::caffe::SizeFilterParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.size_filter_param)
  return size_filter_param_;
}
::caffe::SizeFilterParameter* LayerParameter::release_size_filter_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.size_filter_param)
  clear_has_size_filter_param();
  ::caffe::SizeFilterParameter* temp = size_filter_param_;
  size_filter_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_size_filter_param(::caffe::SizeFilterParameter* size_filter_param) {
  delete size_filter_param_;
  size_filter_param_ = size_filter_param;
  if (size_filter_param) {
    set_has_size_filter_param();
  } else {
    clear_has_size_filter_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.size_filter_param)
}

// optional .caffe.AugmentationParameter augmentation_param = 1021;
bool LayerParameter::has_augmentation_param() const {
  return (_has_bits_[2] & 0x00004000u) != 0;
}
void LayerParameter::set_has_augmentation_param() {
  _has_bits_[2] |= 0x00004000u;
}
void LayerParameter::clear_has_augmentation_param() {
  _has_bits_[2] &= ~0x00004000u;
}
void LayerParameter::clear_augmentation_param() {
  if (augmentation_param_ != NULL) augmentation_param_->::caffe::AugmentationParameter::Clear();
  clear_has_augmentation_param();
}
const ::caffe::AugmentationParameter& LayerParameter::augmentation_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.augmentation_param)
  return augmentation_param_ != NULL ? *augmentation_param_
                         : *::caffe::AugmentationParameter::internal_default_instance();
}
::caffe::AugmentationParameter* LayerParameter::mutable_augmentation_param() {
  set_has_augmentation_param();
  if (augmentation_param_ == NULL) {
    augmentation_param_ = new ::caffe::AugmentationParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.augmentation_param)
  return augmentation_param_;
}
::caffe::AugmentationParameter* LayerParameter::release_augmentation_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.augmentation_param)
  clear_has_augmentation_param();
  ::caffe::AugmentationParameter* temp = augmentation_param_;
  augmentation_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_augmentation_param(::caffe::AugmentationParameter* augmentation_param) {
  delete augmentation_param_;
  augmentation_param_ = augmentation_param;
  if (augmentation_param) {
    set_has_augmentation_param();
  } else {
    clear_has_augmentation_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.augmentation_param)
}

// optional .caffe.HeatmapParameter heatmap_param = 1022;
bool LayerParameter::has_heatmap_param() const {
  return (_has_bits_[2] & 0x00008000u) != 0;
}
void LayerParameter::set_has_heatmap_param() {
  _has_bits_[2] |= 0x00008000u;
}
void LayerParameter::clear_has_heatmap_param() {
  _has_bits_[2] &= ~0x00008000u;
}
void LayerParameter::clear_heatmap_param() {
  if (heatmap_param_ != NULL) heatmap_param_->::caffe::HeatmapParameter::Clear();
  clear_has_heatmap_param();
}
const ::caffe::HeatmapParameter& LayerParameter::heatmap_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.heatmap_param)
  return heatmap_param_ != NULL ? *heatmap_param_
                         : *::caffe::HeatmapParameter::internal_default_instance();
}
::caffe::HeatmapParameter* LayerParameter::mutable_heatmap_param() {
  set_has_heatmap_param();
  if (heatmap_param_ == NULL) {
    heatmap_param_ = new ::caffe::HeatmapParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.heatmap_param)
  return heatmap_param_;
}
::caffe::HeatmapParameter* LayerParameter::release_heatmap_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.heatmap_param)
  clear_has_heatmap_param();
  ::caffe::HeatmapParameter* temp = heatmap_param_;
  heatmap_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_heatmap_param(::caffe::HeatmapParameter* heatmap_param) {
  delete heatmap_param_;
  heatmap_param_ = heatmap_param;
  if (heatmap_param) {
    set_has_heatmap_param();
  } else {
    clear_has_heatmap_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.heatmap_param)
}

// optional .caffe.CheckParameter check_param = 1023;
bool LayerParameter::has_check_param() const {
  return (_has_bits_[2] & 0x00010000u) != 0;
}
void LayerParameter::set_has_check_param() {
  _has_bits_[2] |= 0x00010000u;
}
void LayerParameter::clear_has_check_param() {
  _has_bits_[2] &= ~0x00010000u;
}
void LayerParameter::clear_check_param() {
  if (check_param_ != NULL) check_param_->::caffe::CheckParameter::Clear();
  clear_has_check_param();
}
const ::caffe::CheckParameter& LayerParameter::check_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.check_param)
  return check_param_ != NULL ? *check_param_
                         : *::caffe::CheckParameter::internal_default_instance();
}
::caffe::CheckParameter* LayerParameter::mutable_check_param() {
  set_has_check_param();
  if (check_param_ == NULL) {
    check_param_ = new ::caffe::CheckParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.check_param)
  return check_param_;
}
::caffe::CheckParameter* LayerParameter::release_check_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.check_param)
  clear_has_check_param();
  ::caffe::CheckParameter* temp = check_param_;
  check_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_check_param(::caffe::CheckParameter* check_param) {
  delete check_param_;
  check_param_ = check_param;
  if (check_param) {
    set_has_check_param();
  } else {
    clear_has_check_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.check_param)
}

// optional .caffe.MeanSubParameter mean_sub_param = 1024;
bool LayerParameter::has_mean_sub_param() const {
  return (_has_bits_[2] & 0x00020000u) != 0;
}
void LayerParameter::set_has_mean_sub_param() {
  _has_bits_[2] |= 0x00020000u;
}
void LayerParameter::clear_has_mean_sub_param() {
  _has_bits_[2] &= ~0x00020000u;
}
void LayerParameter::clear_mean_sub_param() {
  if (mean_sub_param_ != NULL) mean_sub_param_->::caffe::MeanSubParameter::Clear();
  clear_has_mean_sub_param();
}
const ::caffe::MeanSubParameter& LayerParameter::mean_sub_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.mean_sub_param)
  return mean_sub_param_ != NULL ? *mean_sub_param_
                         : *::caffe::MeanSubParameter::internal_default_instance();
}
::caffe::MeanSubParameter* LayerParameter::mutable_mean_sub_param() {
  set_has_mean_sub_param();
  if (mean_sub_param_ == NULL) {
    mean_sub_param_ = new ::caffe::MeanSubParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.mean_sub_param)
  return mean_sub_param_;
}
::caffe::MeanSubParameter* LayerParameter::release_mean_sub_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.mean_sub_param)
  clear_has_mean_sub_param();
  ::caffe::MeanSubParameter* temp = mean_sub_param_;
  mean_sub_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_mean_sub_param(::caffe::MeanSubParameter* mean_sub_param) {
  delete mean_sub_param_;
  mean_sub_param_ = mean_sub_param;
  if (mean_sub_param) {
    set_has_mean_sub_param();
  } else {
    clear_has_mean_sub_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.mean_sub_param)
}

// optional .caffe.MinibatchDataParameter minibatch_data_param = 1025;
bool LayerParameter::has_minibatch_data_param() const {
  return (_has_bits_[2] & 0x00040000u) != 0;
}
void LayerParameter::set_has_minibatch_data_param() {
  _has_bits_[2] |= 0x00040000u;
}
void LayerParameter::clear_has_minibatch_data_param() {
  _has_bits_[2] &= ~0x00040000u;
}
void LayerParameter::clear_minibatch_data_param() {
  if (minibatch_data_param_ != NULL) minibatch_data_param_->::caffe::MinibatchDataParameter::Clear();
  clear_has_minibatch_data_param();
}
const ::caffe::MinibatchDataParameter& LayerParameter::minibatch_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.minibatch_data_param)
  return minibatch_data_param_ != NULL ? *minibatch_data_param_
                         : *::caffe::MinibatchDataParameter::internal_default_instance();
}
::caffe::MinibatchDataParameter* LayerParameter::mutable_minibatch_data_param() {
  set_has_minibatch_data_param();
  if (minibatch_data_param_ == NULL) {
    minibatch_data_param_ = new ::caffe::MinibatchDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.minibatch_data_param)
  return minibatch_data_param_;
}
::caffe::MinibatchDataParameter* LayerParameter::release_minibatch_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.minibatch_data_param)
  clear_has_minibatch_data_param();
  ::caffe::MinibatchDataParameter* temp = minibatch_data_param_;
  minibatch_data_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_minibatch_data_param(::caffe::MinibatchDataParameter* minibatch_data_param) {
  delete minibatch_data_param_;
  minibatch_data_param_ = minibatch_data_param;
  if (minibatch_data_param) {
    set_has_minibatch_data_param();
  } else {
    clear_has_minibatch_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.minibatch_data_param)
}

// optional .caffe.RowColProposalTransformParameter rcp_transform_param = 1026;
bool LayerParameter::has_rcp_transform_param() const {
  return (_has_bits_[2] & 0x00080000u) != 0;
}
void LayerParameter::set_has_rcp_transform_param() {
  _has_bits_[2] |= 0x00080000u;
}
void LayerParameter::clear_has_rcp_transform_param() {
  _has_bits_[2] &= ~0x00080000u;
}
void LayerParameter::clear_rcp_transform_param() {
  if (rcp_transform_param_ != NULL) rcp_transform_param_->::caffe::RowColProposalTransformParameter::Clear();
  clear_has_rcp_transform_param();
}
const ::caffe::RowColProposalTransformParameter& LayerParameter::rcp_transform_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.rcp_transform_param)
  return rcp_transform_param_ != NULL ? *rcp_transform_param_
                         : *::caffe::RowColProposalTransformParameter::internal_default_instance();
}
::caffe::RowColProposalTransformParameter* LayerParameter::mutable_rcp_transform_param() {
  set_has_rcp_transform_param();
  if (rcp_transform_param_ == NULL) {
    rcp_transform_param_ = new ::caffe::RowColProposalTransformParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.rcp_transform_param)
  return rcp_transform_param_;
}
::caffe::RowColProposalTransformParameter* LayerParameter::release_rcp_transform_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.rcp_transform_param)
  clear_has_rcp_transform_param();
  ::caffe::RowColProposalTransformParameter* temp = rcp_transform_param_;
  rcp_transform_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_rcp_transform_param(::caffe::RowColProposalTransformParameter* rcp_transform_param) {
  delete rcp_transform_param_;
  rcp_transform_param_ = rcp_transform_param;
  if (rcp_transform_param) {
    set_has_rcp_transform_param();
  } else {
    clear_has_rcp_transform_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.rcp_transform_param)
}

// optional .caffe.AnnoToSegParameter anno_to_seg_param = 1027;
bool LayerParameter::has_anno_to_seg_param() const {
  return (_has_bits_[2] & 0x00100000u) != 0;
}
void LayerParameter::set_has_anno_to_seg_param() {
  _has_bits_[2] |= 0x00100000u;
}
void LayerParameter::clear_has_anno_to_seg_param() {
  _has_bits_[2] &= ~0x00100000u;
}
void LayerParameter::clear_anno_to_seg_param() {
  if (anno_to_seg_param_ != NULL) anno_to_seg_param_->::caffe::AnnoToSegParameter::Clear();
  clear_has_anno_to_seg_param();
}
const ::caffe::AnnoToSegParameter& LayerParameter::anno_to_seg_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.anno_to_seg_param)
  return anno_to_seg_param_ != NULL ? *anno_to_seg_param_
                         : *::caffe::AnnoToSegParameter::internal_default_instance();
}
::caffe::AnnoToSegParameter* LayerParameter::mutable_anno_to_seg_param() {
  set_has_anno_to_seg_param();
  if (anno_to_seg_param_ == NULL) {
    anno_to_seg_param_ = new ::caffe::AnnoToSegParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.anno_to_seg_param)
  return anno_to_seg_param_;
}
::caffe::AnnoToSegParameter* LayerParameter::release_anno_to_seg_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.anno_to_seg_param)
  clear_has_anno_to_seg_param();
  ::caffe::AnnoToSegParameter* temp = anno_to_seg_param_;
  anno_to_seg_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_anno_to_seg_param(::caffe::AnnoToSegParameter* anno_to_seg_param) {
  delete anno_to_seg_param_;
  anno_to_seg_param_ = anno_to_seg_param;
  if (anno_to_seg_param) {
    set_has_anno_to_seg_param();
  } else {
    clear_has_anno_to_seg_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.anno_to_seg_param)
}

// optional .caffe.TrainROIParameter train_roi_param = 1028;
bool LayerParameter::has_train_roi_param() const {
  return (_has_bits_[2] & 0x00200000u) != 0;
}
void LayerParameter::set_has_train_roi_param() {
  _has_bits_[2] |= 0x00200000u;
}
void LayerParameter::clear_has_train_roi_param() {
  _has_bits_[2] &= ~0x00200000u;
}
void LayerParameter::clear_train_roi_param() {
  if (train_roi_param_ != NULL) train_roi_param_->::caffe::TrainROIParameter::Clear();
  clear_has_train_roi_param();
}
const ::caffe::TrainROIParameter& LayerParameter::train_roi_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.train_roi_param)
  return train_roi_param_ != NULL ? *train_roi_param_
                         : *::caffe::TrainROIParameter::internal_default_instance();
}
::caffe::TrainROIParameter* LayerParameter::mutable_train_roi_param() {
  set_has_train_roi_param();
  if (train_roi_param_ == NULL) {
    train_roi_param_ = new ::caffe::TrainROIParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.train_roi_param)
  return train_roi_param_;
}
::caffe::TrainROIParameter* LayerParameter::release_train_roi_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.train_roi_param)
  clear_has_train_roi_param();
  ::caffe::TrainROIParameter* temp = train_roi_param_;
  train_roi_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_train_roi_param(::caffe::TrainROIParameter* train_roi_param) {
  delete train_roi_param_;
  train_roi_param_ = train_roi_param;
  if (train_roi_param) {
    set_has_train_roi_param();
  } else {
    clear_has_train_roi_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.train_roi_param)
}

// optional .caffe.YOLOV2LossParameter yolo_v2_loss_param = 1029;
bool LayerParameter::has_yolo_v2_loss_param() const {
  return (_has_bits_[2] & 0x00400000u) != 0;
}
void LayerParameter::set_has_yolo_v2_loss_param() {
  _has_bits_[2] |= 0x00400000u;
}
void LayerParameter::clear_has_yolo_v2_loss_param() {
  _has_bits_[2] &= ~0x00400000u;
}
void LayerParameter::clear_yolo_v2_loss_param() {
  if (yolo_v2_loss_param_ != NULL) yolo_v2_loss_param_->::caffe::YOLOV2LossParameter::Clear();
  clear_has_yolo_v2_loss_param();
}
const ::caffe::YOLOV2LossParameter& LayerParameter::yolo_v2_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.yolo_v2_loss_param)
  return yolo_v2_loss_param_ != NULL ? *yolo_v2_loss_param_
                         : *::caffe::YOLOV2LossParameter::internal_default_instance();
}
::caffe::YOLOV2LossParameter* LayerParameter::mutable_yolo_v2_loss_param() {
  set_has_yolo_v2_loss_param();
  if (yolo_v2_loss_param_ == NULL) {
    yolo_v2_loss_param_ = new ::caffe::YOLOV2LossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.yolo_v2_loss_param)
  return yolo_v2_loss_param_;
}
::caffe::YOLOV2LossParameter* LayerParameter::release_yolo_v2_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.yolo_v2_loss_param)
  clear_has_yolo_v2_loss_param();
  ::caffe::YOLOV2LossParameter* temp = yolo_v2_loss_param_;
  yolo_v2_loss_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_yolo_v2_loss_param(::caffe::YOLOV2LossParameter* yolo_v2_loss_param) {
  delete yolo_v2_loss_param_;
  yolo_v2_loss_param_ = yolo_v2_loss_param;
  if (yolo_v2_loss_param) {
    set_has_yolo_v2_loss_param();
  } else {
    clear_has_yolo_v2_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.yolo_v2_loss_param)
}

// optional .caffe.YOLOV2ResultParameter yolo_v2_result_param = 1030;
bool LayerParameter::has_yolo_v2_result_param() const {
  return (_has_bits_[2] & 0x00800000u) != 0;
}
void LayerParameter::set_has_yolo_v2_result_param() {
  _has_bits_[2] |= 0x00800000u;
}
void LayerParameter::clear_has_yolo_v2_result_param() {
  _has_bits_[2] &= ~0x00800000u;
}
void LayerParameter::clear_yolo_v2_result_param() {
  if (yolo_v2_result_param_ != NULL) yolo_v2_result_param_->::caffe::YOLOV2ResultParameter::Clear();
  clear_has_yolo_v2_result_param();
}
const ::caffe::YOLOV2ResultParameter& LayerParameter::yolo_v2_result_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.yolo_v2_result_param)
  return yolo_v2_result_param_ != NULL ? *yolo_v2_result_param_
                         : *::caffe::YOLOV2ResultParameter::internal_default_instance();
}
::caffe::YOLOV2ResultParameter* LayerParameter::mutable_yolo_v2_result_param() {
  set_has_yolo_v2_result_param();
  if (yolo_v2_result_param_ == NULL) {
    yolo_v2_result_param_ = new ::caffe::YOLOV2ResultParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.yolo_v2_result_param)
  return yolo_v2_result_param_;
}
::caffe::YOLOV2ResultParameter* LayerParameter::release_yolo_v2_result_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.yolo_v2_result_param)
  clear_has_yolo_v2_result_param();
  ::caffe::YOLOV2ResultParameter* temp = yolo_v2_result_param_;
  yolo_v2_result_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_yolo_v2_result_param(::caffe::YOLOV2ResultParameter* yolo_v2_result_param) {
  delete yolo_v2_result_param_;
  yolo_v2_result_param_ = yolo_v2_result_param;
  if (yolo_v2_result_param) {
    set_has_yolo_v2_result_param();
  } else {
    clear_has_yolo_v2_result_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.yolo_v2_result_param)
}

// optional .caffe.DetectionCheckParameter detection_check_param = 1031;
bool LayerParameter::has_detection_check_param() const {
  return (_has_bits_[2] & 0x01000000u) != 0;
}
void LayerParameter::set_has_detection_check_param() {
  _has_bits_[2] |= 0x01000000u;
}
void LayerParameter::clear_has_detection_check_param() {
  _has_bits_[2] &= ~0x01000000u;
}
void LayerParameter::clear_detection_check_param() {
  if (detection_check_param_ != NULL) detection_check_param_->::caffe::DetectionCheckParameter::Clear();
  clear_has_detection_check_param();
}
const ::caffe::DetectionCheckParameter& LayerParameter::detection_check_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.detection_check_param)
  return detection_check_param_ != NULL ? *detection_check_param_
                         : *::caffe::DetectionCheckParameter::internal_default_instance();
}
::caffe::DetectionCheckParameter* LayerParameter::mutable_detection_check_param() {
  set_has_detection_check_param();
  if (detection_check_param_ == NULL) {
    detection_check_param_ = new ::caffe::DetectionCheckParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.detection_check_param)
  return detection_check_param_;
}
::caffe::DetectionCheckParameter* LayerParameter::release_detection_check_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.detection_check_param)
  clear_has_detection_check_param();
  ::caffe::DetectionCheckParameter* temp = detection_check_param_;
  detection_check_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_detection_check_param(::caffe::DetectionCheckParameter* detection_check_param) {
  delete detection_check_param_;
  detection_check_param_ = detection_check_param;
  if (detection_check_param) {
    set_has_detection_check_param();
  } else {
    clear_has_detection_check_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.detection_check_param)
}

// optional .caffe.SubwinOffsetParameter subwin_offset_param = 1032;
bool LayerParameter::has_subwin_offset_param() const {
  return (_has_bits_[2] & 0x02000000u) != 0;
}
void LayerParameter::set_has_subwin_offset_param() {
  _has_bits_[2] |= 0x02000000u;
}
void LayerParameter::clear_has_subwin_offset_param() {
  _has_bits_[2] &= ~0x02000000u;
}
void LayerParameter::clear_subwin_offset_param() {
  if (subwin_offset_param_ != NULL) subwin_offset_param_->::caffe::SubwinOffsetParameter::Clear();
  clear_has_subwin_offset_param();
}
const ::caffe::SubwinOffsetParameter& LayerParameter::subwin_offset_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.subwin_offset_param)
  return subwin_offset_param_ != NULL ? *subwin_offset_param_
                         : *::caffe::SubwinOffsetParameter::internal_default_instance();
}
::caffe::SubwinOffsetParameter* LayerParameter::mutable_subwin_offset_param() {
  set_has_subwin_offset_param();
  if (subwin_offset_param_ == NULL) {
    subwin_offset_param_ = new ::caffe::SubwinOffsetParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.subwin_offset_param)
  return subwin_offset_param_;
}
::caffe::SubwinOffsetParameter* LayerParameter::release_subwin_offset_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.subwin_offset_param)
  clear_has_subwin_offset_param();
  ::caffe::SubwinOffsetParameter* temp = subwin_offset_param_;
  subwin_offset_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_subwin_offset_param(::caffe::SubwinOffsetParameter* subwin_offset_param) {
  delete subwin_offset_param_;
  subwin_offset_param_ = subwin_offset_param;
  if (subwin_offset_param) {
    set_has_subwin_offset_param();
  } else {
    clear_has_subwin_offset_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.subwin_offset_param)
}

// optional .caffe.SizeRejectionParameter size_rejection_param = 1033;
bool LayerParameter::has_size_rejection_param() const {
  return (_has_bits_[2] & 0x04000000u) != 0;
}
void LayerParameter::set_has_size_rejection_param() {
  _has_bits_[2] |= 0x04000000u;
}
void LayerParameter::clear_has_size_rejection_param() {
  _has_bits_[2] &= ~0x04000000u;
}
void LayerParameter::clear_size_rejection_param() {
  if (size_rejection_param_ != NULL) size_rejection_param_->::caffe::SizeRejectionParameter::Clear();
  clear_has_size_rejection_param();
}
const ::caffe::SizeRejectionParameter& LayerParameter::size_rejection_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.size_rejection_param)
  return size_rejection_param_ != NULL ? *size_rejection_param_
                         : *::caffe::SizeRejectionParameter::internal_default_instance();
}
::caffe::SizeRejectionParameter* LayerParameter::mutable_size_rejection_param() {
  set_has_size_rejection_param();
  if (size_rejection_param_ == NULL) {
    size_rejection_param_ = new ::caffe::SizeRejectionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.size_rejection_param)
  return size_rejection_param_;
}
::caffe::SizeRejectionParameter* LayerParameter::release_size_rejection_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.size_rejection_param)
  clear_has_size_rejection_param();
  ::caffe::SizeRejectionParameter* temp = size_rejection_param_;
  size_rejection_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_size_rejection_param(::caffe::SizeRejectionParameter* size_rejection_param) {
  delete size_rejection_param_;
  size_rejection_param_ = size_rejection_param;
  if (size_rejection_param) {
    set_has_size_rejection_param();
  } else {
    clear_has_size_rejection_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.size_rejection_param)
}

// optional .caffe.ConfCheckParameter conf_check_param = 1034;
bool LayerParameter::has_conf_check_param() const {
  return (_has_bits_[2] & 0x08000000u) != 0;
}
void LayerParameter::set_has_conf_check_param() {
  _has_bits_[2] |= 0x08000000u;
}
void LayerParameter::clear_has_conf_check_param() {
  _has_bits_[2] &= ~0x08000000u;
}
void LayerParameter::clear_conf_check_param() {
  if (conf_check_param_ != NULL) conf_check_param_->::caffe::ConfCheckParameter::Clear();
  clear_has_conf_check_param();
}
const ::caffe::ConfCheckParameter& LayerParameter::conf_check_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.conf_check_param)
  return conf_check_param_ != NULL ? *conf_check_param_
                         : *::caffe::ConfCheckParameter::internal_default_instance();
}
::caffe::ConfCheckParameter* LayerParameter::mutable_conf_check_param() {
  set_has_conf_check_param();
  if (conf_check_param_ == NULL) {
    conf_check_param_ = new ::caffe::ConfCheckParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.conf_check_param)
  return conf_check_param_;
}
::caffe::ConfCheckParameter* LayerParameter::release_conf_check_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.conf_check_param)
  clear_has_conf_check_param();
  ::caffe::ConfCheckParameter* temp = conf_check_param_;
  conf_check_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_conf_check_param(::caffe::ConfCheckParameter* conf_check_param) {
  delete conf_check_param_;
  conf_check_param_ = conf_check_param;
  if (conf_check_param) {
    set_has_conf_check_param();
  } else {
    clear_has_conf_check_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.conf_check_param)
}

// optional .caffe.ReorgParameter reorg_param = 1035;
bool LayerParameter::has_reorg_param() const {
  return (_has_bits_[2] & 0x10000000u) != 0;
}
void LayerParameter::set_has_reorg_param() {
  _has_bits_[2] |= 0x10000000u;
}
void LayerParameter::clear_has_reorg_param() {
  _has_bits_[2] &= ~0x10000000u;
}
void LayerParameter::clear_reorg_param() {
  if (reorg_param_ != NULL) reorg_param_->::caffe::ReorgParameter::Clear();
  clear_has_reorg_param();
}
const ::caffe::ReorgParameter& LayerParameter::reorg_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.reorg_param)
  return reorg_param_ != NULL ? *reorg_param_
                         : *::caffe::ReorgParameter::internal_default_instance();
}
::caffe::ReorgParameter* LayerParameter::mutable_reorg_param() {
  set_has_reorg_param();
  if (reorg_param_ == NULL) {
    reorg_param_ = new ::caffe::ReorgParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.reorg_param)
  return reorg_param_;
}
::caffe::ReorgParameter* LayerParameter::release_reorg_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.reorg_param)
  clear_has_reorg_param();
  ::caffe::ReorgParameter* temp = reorg_param_;
  reorg_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_reorg_param(::caffe::ReorgParameter* reorg_param) {
  delete reorg_param_;
  reorg_param_ = reorg_param;
  if (reorg_param) {
    set_has_reorg_param();
  } else {
    clear_has_reorg_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.reorg_param)
}

// optional .caffe.BatchRejectionParameter batch_rejection_param = 1036;
bool LayerParameter::has_batch_rejection_param() const {
  return (_has_bits_[2] & 0x20000000u) != 0;
}
void LayerParameter::set_has_batch_rejection_param() {
  _has_bits_[2] |= 0x20000000u;
}
void LayerParameter::clear_has_batch_rejection_param() {
  _has_bits_[2] &= ~0x20000000u;
}
void LayerParameter::clear_batch_rejection_param() {
  if (batch_rejection_param_ != NULL) batch_rejection_param_->::caffe::BatchRejectionParameter::Clear();
  clear_has_batch_rejection_param();
}
const ::caffe::BatchRejectionParameter& LayerParameter::batch_rejection_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.batch_rejection_param)
  return batch_rejection_param_ != NULL ? *batch_rejection_param_
                         : *::caffe::BatchRejectionParameter::internal_default_instance();
}
::caffe::BatchRejectionParameter* LayerParameter::mutable_batch_rejection_param() {
  set_has_batch_rejection_param();
  if (batch_rejection_param_ == NULL) {
    batch_rejection_param_ = new ::caffe::BatchRejectionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.batch_rejection_param)
  return batch_rejection_param_;
}
::caffe::BatchRejectionParameter* LayerParameter::release_batch_rejection_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.batch_rejection_param)
  clear_has_batch_rejection_param();
  ::caffe::BatchRejectionParameter* temp = batch_rejection_param_;
  batch_rejection_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_batch_rejection_param(::caffe::BatchRejectionParameter* batch_rejection_param) {
  delete batch_rejection_param_;
  batch_rejection_param_ = batch_rejection_param;
  if (batch_rejection_param) {
    set_has_batch_rejection_param();
  } else {
    clear_has_batch_rejection_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.batch_rejection_param)
}

inline const LayerParameter* LayerParameter::internal_default_instance() {
  return &LayerParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransformationParameter::kScaleFieldNumber;
const int TransformationParameter::kMirrorFieldNumber;
const int TransformationParameter::kCropSizeFieldNumber;
const int TransformationParameter::kMeanFileFieldNumber;
const int TransformationParameter::kMeanValueFieldNumber;
const int TransformationParameter::kForceColorFieldNumber;
const int TransformationParameter::kForceGrayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransformationParameter::TransformationParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.TransformationParameter)
}

void TransformationParameter::InitAsDefaultInstance() {
}

TransformationParameter::TransformationParameter(const TransformationParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.TransformationParameter)
}

void TransformationParameter::SharedCtor() {
  _cached_size_ = 0;
  mean_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&crop_size_, 0, reinterpret_cast<char*>(&force_gray_) -
    reinterpret_cast<char*>(&crop_size_) + sizeof(force_gray_));
  scale_ = 1;
}

TransformationParameter::~TransformationParameter() {
  // @@protoc_insertion_point(destructor:caffe.TransformationParameter)
  SharedDtor();
}

void TransformationParameter::SharedDtor() {
  mean_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TransformationParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransformationParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransformationParameter_descriptor_;
}

const TransformationParameter& TransformationParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TransformationParameter> TransformationParameter_default_instance_;

TransformationParameter* TransformationParameter::New(::google::protobuf::Arena* arena) const {
  TransformationParameter* n = new TransformationParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransformationParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.TransformationParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TransformationParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TransformationParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 111u) {
    ZR_(crop_size_, force_gray_);
    scale_ = 1;
    if (has_mean_file()) {
      mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  mean_value_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TransformationParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.TransformationParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float scale = 1 [default = 1];
      case 1: {
        if (tag == 13) {
          set_has_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mirror;
        break;
      }

      // optional bool mirror = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_mirror:
          set_has_mirror();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mirror_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_crop_size;
        break;
      }

      // optional uint32 crop_size = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_crop_size:
          set_has_crop_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crop_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mean_file;
        break;
      }

      // optional string mean_file = 4;
      case 4: {
        if (tag == 34) {
         parse_mean_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mean_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mean_file().data(), this->mean_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.TransformationParameter.mean_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_mean_value;
        break;
      }

      // repeated float mean_value = 5;
      case 5: {
        if (tag == 45) {
         parse_mean_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45, input, this->mutable_mean_value())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_mean_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_mean_value;
        if (input->ExpectTag(48)) goto parse_force_color;
        break;
      }

      // optional bool force_color = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_force_color:
          set_has_force_color();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_color_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_force_gray;
        break;
      }

      // optional bool force_gray = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_force_gray:
          set_has_force_gray();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_gray_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.TransformationParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.TransformationParameter)
  return false;
#undef DO_
}

void TransformationParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.TransformationParameter)
  // optional float scale = 1 [default = 1];
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->scale(), output);
  }

  // optional bool mirror = 2 [default = false];
  if (has_mirror()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->mirror(), output);
  }

  // optional uint32 crop_size = 3 [default = 0];
  if (has_crop_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->crop_size(), output);
  }

  // optional string mean_file = 4;
  if (has_mean_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), this->mean_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.TransformationParameter.mean_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->mean_file(), output);
  }

  // repeated float mean_value = 5;
  for (int i = 0; i < this->mean_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->mean_value(i), output);
  }

  // optional bool force_color = 6 [default = false];
  if (has_force_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->force_color(), output);
  }

  // optional bool force_gray = 7 [default = false];
  if (has_force_gray()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->force_gray(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.TransformationParameter)
}

::google::protobuf::uint8* TransformationParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.TransformationParameter)
  // optional float scale = 1 [default = 1];
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->scale(), target);
  }

  // optional bool mirror = 2 [default = false];
  if (has_mirror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->mirror(), target);
  }

  // optional uint32 crop_size = 3 [default = 0];
  if (has_crop_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->crop_size(), target);
  }

  // optional string mean_file = 4;
  if (has_mean_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), this->mean_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.TransformationParameter.mean_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mean_file(), target);
  }

  // repeated float mean_value = 5;
  for (int i = 0; i < this->mean_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(5, this->mean_value(i), target);
  }

  // optional bool force_color = 6 [default = false];
  if (has_force_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->force_color(), target);
  }

  // optional bool force_gray = 7 [default = false];
  if (has_force_gray()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->force_gray(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.TransformationParameter)
  return target;
}

size_t TransformationParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.TransformationParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 111u) {
    // optional float scale = 1 [default = 1];
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional bool mirror = 2 [default = false];
    if (has_mirror()) {
      total_size += 1 + 1;
    }

    // optional uint32 crop_size = 3 [default = 0];
    if (has_crop_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crop_size());
    }

    // optional string mean_file = 4;
    if (has_mean_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mean_file());
    }

    // optional bool force_color = 6 [default = false];
    if (has_force_color()) {
      total_size += 1 + 1;
    }

    // optional bool force_gray = 7 [default = false];
    if (has_force_gray()) {
      total_size += 1 + 1;
    }

  }
  // repeated float mean_value = 5;
  {
    size_t data_size = 0;
    unsigned int count = this->mean_value_size();
    data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->mean_value_size());
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransformationParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.TransformationParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TransformationParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransformationParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.TransformationParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.TransformationParameter)
    UnsafeMergeFrom(*source);
  }
}

void TransformationParameter::MergeFrom(const TransformationParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.TransformationParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TransformationParameter::UnsafeMergeFrom(const TransformationParameter& from) {
  GOOGLE_DCHECK(&from != this);
  mean_value_.UnsafeMergeFrom(from.mean_value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_mirror()) {
      set_mirror(from.mirror());
    }
    if (from.has_crop_size()) {
      set_crop_size(from.crop_size());
    }
    if (from.has_mean_file()) {
      set_has_mean_file();
      mean_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mean_file_);
    }
    if (from.has_force_color()) {
      set_force_color(from.force_color());
    }
    if (from.has_force_gray()) {
      set_force_gray(from.force_gray());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void TransformationParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.TransformationParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformationParameter::CopyFrom(const TransformationParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.TransformationParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TransformationParameter::IsInitialized() const {

  return true;
}

void TransformationParameter::Swap(TransformationParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransformationParameter::InternalSwap(TransformationParameter* other) {
  std::swap(scale_, other->scale_);
  std::swap(mirror_, other->mirror_);
  std::swap(crop_size_, other->crop_size_);
  mean_file_.Swap(&other->mean_file_);
  mean_value_.UnsafeArenaSwap(&other->mean_value_);
  std::swap(force_color_, other->force_color_);
  std::swap(force_gray_, other->force_gray_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransformationParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransformationParameter_descriptor_;
  metadata.reflection = TransformationParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransformationParameter

// optional float scale = 1 [default = 1];
bool TransformationParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransformationParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000001u;
}
void TransformationParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransformationParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
float TransformationParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.scale)
  return scale_;
}
void TransformationParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.scale)
}

// optional bool mirror = 2 [default = false];
bool TransformationParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransformationParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000002u;
}
void TransformationParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransformationParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
bool TransformationParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.mirror)
  return mirror_;
}
void TransformationParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.mirror)
}

// optional uint32 crop_size = 3 [default = 0];
bool TransformationParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TransformationParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000004u;
}
void TransformationParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000004u;
}
void TransformationParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
::google::protobuf::uint32 TransformationParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.crop_size)
  return crop_size_;
}
void TransformationParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.crop_size)
}

// optional string mean_file = 4;
bool TransformationParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TransformationParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000008u;
}
void TransformationParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000008u;
}
void TransformationParameter::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mean_file();
}
const ::std::string& TransformationParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.mean_file)
  return mean_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TransformationParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.mean_file)
}
void TransformationParameter::set_mean_file(const char* value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.TransformationParameter.mean_file)
}
void TransformationParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.TransformationParameter.mean_file)
}
::std::string* TransformationParameter::mutable_mean_file() {
  set_has_mean_file();
  // @@protoc_insertion_point(field_mutable:caffe.TransformationParameter.mean_file)
  return mean_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TransformationParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:caffe.TransformationParameter.mean_file)
  clear_has_mean_file();
  return mean_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TransformationParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file != NULL) {
    set_has_mean_file();
  } else {
    clear_has_mean_file();
  }
  mean_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.TransformationParameter.mean_file)
}

// repeated float mean_value = 5;
int TransformationParameter::mean_value_size() const {
  return mean_value_.size();
}
void TransformationParameter::clear_mean_value() {
  mean_value_.Clear();
}
float TransformationParameter::mean_value(int index) const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.mean_value)
  return mean_value_.Get(index);
}
void TransformationParameter::set_mean_value(int index, float value) {
  mean_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.mean_value)
}
void TransformationParameter::add_mean_value(float value) {
  mean_value_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.TransformationParameter.mean_value)
}
const ::google::protobuf::RepeatedField< float >&
TransformationParameter::mean_value() const {
  // @@protoc_insertion_point(field_list:caffe.TransformationParameter.mean_value)
  return mean_value_;
}
::google::protobuf::RepeatedField< float >*
TransformationParameter::mutable_mean_value() {
  // @@protoc_insertion_point(field_mutable_list:caffe.TransformationParameter.mean_value)
  return &mean_value_;
}

// optional bool force_color = 6 [default = false];
bool TransformationParameter::has_force_color() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TransformationParameter::set_has_force_color() {
  _has_bits_[0] |= 0x00000020u;
}
void TransformationParameter::clear_has_force_color() {
  _has_bits_[0] &= ~0x00000020u;
}
void TransformationParameter::clear_force_color() {
  force_color_ = false;
  clear_has_force_color();
}
bool TransformationParameter::force_color() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.force_color)
  return force_color_;
}
void TransformationParameter::set_force_color(bool value) {
  set_has_force_color();
  force_color_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.force_color)
}

// optional bool force_gray = 7 [default = false];
bool TransformationParameter::has_force_gray() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TransformationParameter::set_has_force_gray() {
  _has_bits_[0] |= 0x00000040u;
}
void TransformationParameter::clear_has_force_gray() {
  _has_bits_[0] &= ~0x00000040u;
}
void TransformationParameter::clear_force_gray() {
  force_gray_ = false;
  clear_has_force_gray();
}
bool TransformationParameter::force_gray() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.force_gray)
  return force_gray_;
}
void TransformationParameter::set_force_gray(bool value) {
  set_has_force_gray();
  force_gray_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.force_gray)
}

inline const TransformationParameter* TransformationParameter::internal_default_instance() {
  return &TransformationParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* LossParameter_NormalizationMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LossParameter_NormalizationMode_descriptor_;
}
bool LossParameter_NormalizationMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LossParameter_NormalizationMode LossParameter::FULL;
const LossParameter_NormalizationMode LossParameter::VALID;
const LossParameter_NormalizationMode LossParameter::BATCH_SIZE;
const LossParameter_NormalizationMode LossParameter::NONE;
const LossParameter_NormalizationMode LossParameter::NormalizationMode_MIN;
const LossParameter_NormalizationMode LossParameter::NormalizationMode_MAX;
const int LossParameter::NormalizationMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LossParameter::kIgnoreLabelFieldNumber;
const int LossParameter::kNormalizationFieldNumber;
const int LossParameter::kNormalizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LossParameter::LossParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.LossParameter)
}

void LossParameter::InitAsDefaultInstance() {
}

LossParameter::LossParameter(const LossParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.LossParameter)
}

void LossParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ignore_label_, 0, reinterpret_cast<char*>(&normalize_) -
    reinterpret_cast<char*>(&ignore_label_) + sizeof(normalize_));
  normalization_ = 1;
}

LossParameter::~LossParameter() {
  // @@protoc_insertion_point(destructor:caffe.LossParameter)
  SharedDtor();
}

void LossParameter::SharedDtor() {
}

void LossParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LossParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LossParameter_descriptor_;
}

const LossParameter& LossParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<LossParameter> LossParameter_default_instance_;

LossParameter* LossParameter::New(::google::protobuf::Arena* arena) const {
  LossParameter* n = new LossParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.LossParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LossParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LossParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(ignore_label_, normalize_);
    normalization_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LossParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.LossParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ignore_label = 1;
      case 1: {
        if (tag == 8) {
          set_has_ignore_label();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ignore_label_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_normalize;
        break;
      }

      // optional bool normalize = 2;
      case 2: {
        if (tag == 16) {
         parse_normalize:
          set_has_normalize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &normalize_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_normalization;
        break;
      }

      // optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
      case 3: {
        if (tag == 24) {
         parse_normalization:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::LossParameter_NormalizationMode_IsValid(value)) {
            set_normalization(static_cast< ::caffe::LossParameter_NormalizationMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.LossParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.LossParameter)
  return false;
#undef DO_
}

void LossParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.LossParameter)
  // optional int32 ignore_label = 1;
  if (has_ignore_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ignore_label(), output);
  }

  // optional bool normalize = 2;
  if (has_normalize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->normalize(), output);
  }

  // optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
  if (has_normalization()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->normalization(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.LossParameter)
}

::google::protobuf::uint8* LossParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.LossParameter)
  // optional int32 ignore_label = 1;
  if (has_ignore_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ignore_label(), target);
  }

  // optional bool normalize = 2;
  if (has_normalize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->normalize(), target);
  }

  // optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
  if (has_normalization()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->normalization(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.LossParameter)
  return target;
}

size_t LossParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.LossParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 ignore_label = 1;
    if (has_ignore_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ignore_label());
    }

    // optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
    if (has_normalization()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->normalization());
    }

    // optional bool normalize = 2;
    if (has_normalize()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LossParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.LossParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LossParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LossParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.LossParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.LossParameter)
    UnsafeMergeFrom(*source);
  }
}

void LossParameter::MergeFrom(const LossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.LossParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void LossParameter::UnsafeMergeFrom(const LossParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ignore_label()) {
      set_ignore_label(from.ignore_label());
    }
    if (from.has_normalization()) {
      set_normalization(from.normalization());
    }
    if (from.has_normalize()) {
      set_normalize(from.normalize());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void LossParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.LossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LossParameter::CopyFrom(const LossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.LossParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool LossParameter::IsInitialized() const {

  return true;
}

void LossParameter::Swap(LossParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LossParameter::InternalSwap(LossParameter* other) {
  std::swap(ignore_label_, other->ignore_label_);
  std::swap(normalization_, other->normalization_);
  std::swap(normalize_, other->normalize_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LossParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LossParameter_descriptor_;
  metadata.reflection = LossParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LossParameter

// optional int32 ignore_label = 1;
bool LossParameter::has_ignore_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LossParameter::set_has_ignore_label() {
  _has_bits_[0] |= 0x00000001u;
}
void LossParameter::clear_has_ignore_label() {
  _has_bits_[0] &= ~0x00000001u;
}
void LossParameter::clear_ignore_label() {
  ignore_label_ = 0;
  clear_has_ignore_label();
}
::google::protobuf::int32 LossParameter::ignore_label() const {
  // @@protoc_insertion_point(field_get:caffe.LossParameter.ignore_label)
  return ignore_label_;
}
void LossParameter::set_ignore_label(::google::protobuf::int32 value) {
  set_has_ignore_label();
  ignore_label_ = value;
  // @@protoc_insertion_point(field_set:caffe.LossParameter.ignore_label)
}

// optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
bool LossParameter::has_normalization() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LossParameter::set_has_normalization() {
  _has_bits_[0] |= 0x00000002u;
}
void LossParameter::clear_has_normalization() {
  _has_bits_[0] &= ~0x00000002u;
}
void LossParameter::clear_normalization() {
  normalization_ = 1;
  clear_has_normalization();
}
::caffe::LossParameter_NormalizationMode LossParameter::normalization() const {
  // @@protoc_insertion_point(field_get:caffe.LossParameter.normalization)
  return static_cast< ::caffe::LossParameter_NormalizationMode >(normalization_);
}
void LossParameter::set_normalization(::caffe::LossParameter_NormalizationMode value) {
  assert(::caffe::LossParameter_NormalizationMode_IsValid(value));
  set_has_normalization();
  normalization_ = value;
  // @@protoc_insertion_point(field_set:caffe.LossParameter.normalization)
}

// optional bool normalize = 2;
bool LossParameter::has_normalize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LossParameter::set_has_normalize() {
  _has_bits_[0] |= 0x00000004u;
}
void LossParameter::clear_has_normalize() {
  _has_bits_[0] &= ~0x00000004u;
}
void LossParameter::clear_normalize() {
  normalize_ = false;
  clear_has_normalize();
}
bool LossParameter::normalize() const {
  // @@protoc_insertion_point(field_get:caffe.LossParameter.normalize)
  return normalize_;
}
void LossParameter::set_normalize(bool value) {
  set_has_normalize();
  normalize_ = value;
  // @@protoc_insertion_point(field_set:caffe.LossParameter.normalize)
}

inline const LossParameter* LossParameter::internal_default_instance() {
  return &LossParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccuracyParameter::kTopKFieldNumber;
const int AccuracyParameter::kAxisFieldNumber;
const int AccuracyParameter::kIgnoreLabelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccuracyParameter::AccuracyParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.AccuracyParameter)
}

void AccuracyParameter::InitAsDefaultInstance() {
}

AccuracyParameter::AccuracyParameter(const AccuracyParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.AccuracyParameter)
}

void AccuracyParameter::SharedCtor() {
  _cached_size_ = 0;
  ignore_label_ = 0;
  top_k_ = 1u;
  axis_ = 1;
}

AccuracyParameter::~AccuracyParameter() {
  // @@protoc_insertion_point(destructor:caffe.AccuracyParameter)
  SharedDtor();
}

void AccuracyParameter::SharedDtor() {
}

void AccuracyParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccuracyParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccuracyParameter_descriptor_;
}

const AccuracyParameter& AccuracyParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AccuracyParameter> AccuracyParameter_default_instance_;

AccuracyParameter* AccuracyParameter::New(::google::protobuf::Arena* arena) const {
  AccuracyParameter* n = new AccuracyParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AccuracyParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.AccuracyParameter)
  if (_has_bits_[0 / 32] & 7u) {
    top_k_ = 1u;
    axis_ = 1;
    ignore_label_ = 0;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AccuracyParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.AccuracyParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 top_k = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          set_has_top_k();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &top_k_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_axis;
        break;
      }

      // optional int32 axis = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_axis:
          set_has_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ignore_label;
        break;
      }

      // optional int32 ignore_label = 3;
      case 3: {
        if (tag == 24) {
         parse_ignore_label:
          set_has_ignore_label();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ignore_label_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.AccuracyParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.AccuracyParameter)
  return false;
#undef DO_
}

void AccuracyParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.AccuracyParameter)
  // optional uint32 top_k = 1 [default = 1];
  if (has_top_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->top_k(), output);
  }

  // optional int32 axis = 2 [default = 1];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->axis(), output);
  }

  // optional int32 ignore_label = 3;
  if (has_ignore_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ignore_label(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.AccuracyParameter)
}

::google::protobuf::uint8* AccuracyParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.AccuracyParameter)
  // optional uint32 top_k = 1 [default = 1];
  if (has_top_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->top_k(), target);
  }

  // optional int32 axis = 2 [default = 1];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->axis(), target);
  }

  // optional int32 ignore_label = 3;
  if (has_ignore_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ignore_label(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.AccuracyParameter)
  return target;
}

size_t AccuracyParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.AccuracyParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 top_k = 1 [default = 1];
    if (has_top_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->top_k());
    }

    // optional int32 axis = 2 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional int32 ignore_label = 3;
    if (has_ignore_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ignore_label());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccuracyParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.AccuracyParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AccuracyParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccuracyParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.AccuracyParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.AccuracyParameter)
    UnsafeMergeFrom(*source);
  }
}

void AccuracyParameter::MergeFrom(const AccuracyParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.AccuracyParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AccuracyParameter::UnsafeMergeFrom(const AccuracyParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_top_k()) {
      set_top_k(from.top_k());
    }
    if (from.has_axis()) {
      set_axis(from.axis());
    }
    if (from.has_ignore_label()) {
      set_ignore_label(from.ignore_label());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void AccuracyParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.AccuracyParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccuracyParameter::CopyFrom(const AccuracyParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.AccuracyParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AccuracyParameter::IsInitialized() const {

  return true;
}

void AccuracyParameter::Swap(AccuracyParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccuracyParameter::InternalSwap(AccuracyParameter* other) {
  std::swap(top_k_, other->top_k_);
  std::swap(axis_, other->axis_);
  std::swap(ignore_label_, other->ignore_label_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AccuracyParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccuracyParameter_descriptor_;
  metadata.reflection = AccuracyParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AccuracyParameter

// optional uint32 top_k = 1 [default = 1];
bool AccuracyParameter::has_top_k() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AccuracyParameter::set_has_top_k() {
  _has_bits_[0] |= 0x00000001u;
}
void AccuracyParameter::clear_has_top_k() {
  _has_bits_[0] &= ~0x00000001u;
}
void AccuracyParameter::clear_top_k() {
  top_k_ = 1u;
  clear_has_top_k();
}
::google::protobuf::uint32 AccuracyParameter::top_k() const {
  // @@protoc_insertion_point(field_get:caffe.AccuracyParameter.top_k)
  return top_k_;
}
void AccuracyParameter::set_top_k(::google::protobuf::uint32 value) {
  set_has_top_k();
  top_k_ = value;
  // @@protoc_insertion_point(field_set:caffe.AccuracyParameter.top_k)
}

// optional int32 axis = 2 [default = 1];
bool AccuracyParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AccuracyParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
void AccuracyParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
void AccuracyParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
::google::protobuf::int32 AccuracyParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.AccuracyParameter.axis)
  return axis_;
}
void AccuracyParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.AccuracyParameter.axis)
}

// optional int32 ignore_label = 3;
bool AccuracyParameter::has_ignore_label() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AccuracyParameter::set_has_ignore_label() {
  _has_bits_[0] |= 0x00000004u;
}
void AccuracyParameter::clear_has_ignore_label() {
  _has_bits_[0] &= ~0x00000004u;
}
void AccuracyParameter::clear_ignore_label() {
  ignore_label_ = 0;
  clear_has_ignore_label();
}
::google::protobuf::int32 AccuracyParameter::ignore_label() const {
  // @@protoc_insertion_point(field_get:caffe.AccuracyParameter.ignore_label)
  return ignore_label_;
}
void AccuracyParameter::set_ignore_label(::google::protobuf::int32 value) {
  set_has_ignore_label();
  ignore_label_ = value;
  // @@protoc_insertion_point(field_set:caffe.AccuracyParameter.ignore_label)
}

inline const AccuracyParameter* AccuracyParameter::internal_default_instance() {
  return &AccuracyParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArgMaxParameter::kOutMaxValFieldNumber;
const int ArgMaxParameter::kTopKFieldNumber;
const int ArgMaxParameter::kAxisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArgMaxParameter::ArgMaxParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ArgMaxParameter)
}

void ArgMaxParameter::InitAsDefaultInstance() {
}

ArgMaxParameter::ArgMaxParameter(const ArgMaxParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ArgMaxParameter)
}

void ArgMaxParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&out_max_val_, 0, reinterpret_cast<char*>(&axis_) -
    reinterpret_cast<char*>(&out_max_val_) + sizeof(axis_));
  top_k_ = 1u;
}

ArgMaxParameter::~ArgMaxParameter() {
  // @@protoc_insertion_point(destructor:caffe.ArgMaxParameter)
  SharedDtor();
}

void ArgMaxParameter::SharedDtor() {
}

void ArgMaxParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArgMaxParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArgMaxParameter_descriptor_;
}

const ArgMaxParameter& ArgMaxParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ArgMaxParameter> ArgMaxParameter_default_instance_;

ArgMaxParameter* ArgMaxParameter::New(::google::protobuf::Arena* arena) const {
  ArgMaxParameter* n = new ArgMaxParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ArgMaxParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ArgMaxParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ArgMaxParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ArgMaxParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(out_max_val_, axis_);
    top_k_ = 1u;
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ArgMaxParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ArgMaxParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool out_max_val = 1 [default = false];
      case 1: {
        if (tag == 8) {
          set_has_out_max_val();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &out_max_val_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_top_k;
        break;
      }

      // optional uint32 top_k = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_top_k:
          set_has_top_k();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &top_k_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_axis;
        break;
      }

      // optional int32 axis = 3;
      case 3: {
        if (tag == 24) {
         parse_axis:
          set_has_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ArgMaxParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ArgMaxParameter)
  return false;
#undef DO_
}

void ArgMaxParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ArgMaxParameter)
  // optional bool out_max_val = 1 [default = false];
  if (has_out_max_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->out_max_val(), output);
  }

  // optional uint32 top_k = 2 [default = 1];
  if (has_top_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->top_k(), output);
  }

  // optional int32 axis = 3;
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->axis(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ArgMaxParameter)
}

::google::protobuf::uint8* ArgMaxParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ArgMaxParameter)
  // optional bool out_max_val = 1 [default = false];
  if (has_out_max_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->out_max_val(), target);
  }

  // optional uint32 top_k = 2 [default = 1];
  if (has_top_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->top_k(), target);
  }

  // optional int32 axis = 3;
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->axis(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ArgMaxParameter)
  return target;
}

size_t ArgMaxParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ArgMaxParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional bool out_max_val = 1 [default = false];
    if (has_out_max_val()) {
      total_size += 1 + 1;
    }

    // optional uint32 top_k = 2 [default = 1];
    if (has_top_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->top_k());
    }

    // optional int32 axis = 3;
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArgMaxParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ArgMaxParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ArgMaxParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ArgMaxParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ArgMaxParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ArgMaxParameter)
    UnsafeMergeFrom(*source);
  }
}

void ArgMaxParameter::MergeFrom(const ArgMaxParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ArgMaxParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ArgMaxParameter::UnsafeMergeFrom(const ArgMaxParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_out_max_val()) {
      set_out_max_val(from.out_max_val());
    }
    if (from.has_top_k()) {
      set_top_k(from.top_k());
    }
    if (from.has_axis()) {
      set_axis(from.axis());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ArgMaxParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ArgMaxParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArgMaxParameter::CopyFrom(const ArgMaxParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ArgMaxParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ArgMaxParameter::IsInitialized() const {

  return true;
}

void ArgMaxParameter::Swap(ArgMaxParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArgMaxParameter::InternalSwap(ArgMaxParameter* other) {
  std::swap(out_max_val_, other->out_max_val_);
  std::swap(top_k_, other->top_k_);
  std::swap(axis_, other->axis_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ArgMaxParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArgMaxParameter_descriptor_;
  metadata.reflection = ArgMaxParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ArgMaxParameter

// optional bool out_max_val = 1 [default = false];
bool ArgMaxParameter::has_out_max_val() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ArgMaxParameter::set_has_out_max_val() {
  _has_bits_[0] |= 0x00000001u;
}
void ArgMaxParameter::clear_has_out_max_val() {
  _has_bits_[0] &= ~0x00000001u;
}
void ArgMaxParameter::clear_out_max_val() {
  out_max_val_ = false;
  clear_has_out_max_val();
}
bool ArgMaxParameter::out_max_val() const {
  // @@protoc_insertion_point(field_get:caffe.ArgMaxParameter.out_max_val)
  return out_max_val_;
}
void ArgMaxParameter::set_out_max_val(bool value) {
  set_has_out_max_val();
  out_max_val_ = value;
  // @@protoc_insertion_point(field_set:caffe.ArgMaxParameter.out_max_val)
}

// optional uint32 top_k = 2 [default = 1];
bool ArgMaxParameter::has_top_k() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ArgMaxParameter::set_has_top_k() {
  _has_bits_[0] |= 0x00000002u;
}
void ArgMaxParameter::clear_has_top_k() {
  _has_bits_[0] &= ~0x00000002u;
}
void ArgMaxParameter::clear_top_k() {
  top_k_ = 1u;
  clear_has_top_k();
}
::google::protobuf::uint32 ArgMaxParameter::top_k() const {
  // @@protoc_insertion_point(field_get:caffe.ArgMaxParameter.top_k)
  return top_k_;
}
void ArgMaxParameter::set_top_k(::google::protobuf::uint32 value) {
  set_has_top_k();
  top_k_ = value;
  // @@protoc_insertion_point(field_set:caffe.ArgMaxParameter.top_k)
}

// optional int32 axis = 3;
bool ArgMaxParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ArgMaxParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000004u;
}
void ArgMaxParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000004u;
}
void ArgMaxParameter::clear_axis() {
  axis_ = 0;
  clear_has_axis();
}
::google::protobuf::int32 ArgMaxParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ArgMaxParameter.axis)
  return axis_;
}
void ArgMaxParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ArgMaxParameter.axis)
}

inline const ArgMaxParameter* ArgMaxParameter::internal_default_instance() {
  return &ArgMaxParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConcatParameter::kAxisFieldNumber;
const int ConcatParameter::kConcatDimFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConcatParameter::ConcatParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ConcatParameter)
}

void ConcatParameter::InitAsDefaultInstance() {
}

ConcatParameter::ConcatParameter(const ConcatParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ConcatParameter)
}

void ConcatParameter::SharedCtor() {
  _cached_size_ = 0;
  axis_ = 1;
  concat_dim_ = 1u;
}

ConcatParameter::~ConcatParameter() {
  // @@protoc_insertion_point(destructor:caffe.ConcatParameter)
  SharedDtor();
}

void ConcatParameter::SharedDtor() {
}

void ConcatParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConcatParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConcatParameter_descriptor_;
}

const ConcatParameter& ConcatParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ConcatParameter> ConcatParameter_default_instance_;

ConcatParameter* ConcatParameter::New(::google::protobuf::Arena* arena) const {
  ConcatParameter* n = new ConcatParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConcatParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ConcatParameter)
  if (_has_bits_[0 / 32] & 3u) {
    axis_ = 1;
    concat_dim_ = 1u;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ConcatParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ConcatParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 concat_dim = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          set_has_concat_dim();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &concat_dim_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_axis;
        break;
      }

      // optional int32 axis = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_axis:
          set_has_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ConcatParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ConcatParameter)
  return false;
#undef DO_
}

void ConcatParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ConcatParameter)
  // optional uint32 concat_dim = 1 [default = 1];
  if (has_concat_dim()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->concat_dim(), output);
  }

  // optional int32 axis = 2 [default = 1];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->axis(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ConcatParameter)
}

::google::protobuf::uint8* ConcatParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ConcatParameter)
  // optional uint32 concat_dim = 1 [default = 1];
  if (has_concat_dim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->concat_dim(), target);
  }

  // optional int32 axis = 2 [default = 1];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->axis(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ConcatParameter)
  return target;
}

size_t ConcatParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ConcatParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 axis = 2 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional uint32 concat_dim = 1 [default = 1];
    if (has_concat_dim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->concat_dim());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConcatParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ConcatParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ConcatParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConcatParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ConcatParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ConcatParameter)
    UnsafeMergeFrom(*source);
  }
}

void ConcatParameter::MergeFrom(const ConcatParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ConcatParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ConcatParameter::UnsafeMergeFrom(const ConcatParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_axis()) {
      set_axis(from.axis());
    }
    if (from.has_concat_dim()) {
      set_concat_dim(from.concat_dim());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ConcatParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ConcatParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConcatParameter::CopyFrom(const ConcatParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ConcatParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ConcatParameter::IsInitialized() const {

  return true;
}

void ConcatParameter::Swap(ConcatParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConcatParameter::InternalSwap(ConcatParameter* other) {
  std::swap(axis_, other->axis_);
  std::swap(concat_dim_, other->concat_dim_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConcatParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConcatParameter_descriptor_;
  metadata.reflection = ConcatParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConcatParameter

// optional int32 axis = 2 [default = 1];
bool ConcatParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConcatParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
void ConcatParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConcatParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
::google::protobuf::int32 ConcatParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ConcatParameter.axis)
  return axis_;
}
void ConcatParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConcatParameter.axis)
}

// optional uint32 concat_dim = 1 [default = 1];
bool ConcatParameter::has_concat_dim() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConcatParameter::set_has_concat_dim() {
  _has_bits_[0] |= 0x00000002u;
}
void ConcatParameter::clear_has_concat_dim() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConcatParameter::clear_concat_dim() {
  concat_dim_ = 1u;
  clear_has_concat_dim();
}
::google::protobuf::uint32 ConcatParameter::concat_dim() const {
  // @@protoc_insertion_point(field_get:caffe.ConcatParameter.concat_dim)
  return concat_dim_;
}
void ConcatParameter::set_concat_dim(::google::protobuf::uint32 value) {
  set_has_concat_dim();
  concat_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConcatParameter.concat_dim)
}

inline const ConcatParameter* ConcatParameter::internal_default_instance() {
  return &ConcatParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchNormParameter::kUseGlobalStatsFieldNumber;
const int BatchNormParameter::kMovingAverageFractionFieldNumber;
const int BatchNormParameter::kEpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchNormParameter::BatchNormParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.BatchNormParameter)
}

void BatchNormParameter::InitAsDefaultInstance() {
}

BatchNormParameter::BatchNormParameter(const BatchNormParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.BatchNormParameter)
}

void BatchNormParameter::SharedCtor() {
  _cached_size_ = 0;
  use_global_stats_ = false;
  moving_average_fraction_ = 0.999f;
  eps_ = 1e-005f;
}

BatchNormParameter::~BatchNormParameter() {
  // @@protoc_insertion_point(destructor:caffe.BatchNormParameter)
  SharedDtor();
}

void BatchNormParameter::SharedDtor() {
}

void BatchNormParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchNormParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchNormParameter_descriptor_;
}

const BatchNormParameter& BatchNormParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BatchNormParameter> BatchNormParameter_default_instance_;

BatchNormParameter* BatchNormParameter::New(::google::protobuf::Arena* arena) const {
  BatchNormParameter* n = new BatchNormParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchNormParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.BatchNormParameter)
  if (_has_bits_[0 / 32] & 7u) {
    use_global_stats_ = false;
    moving_average_fraction_ = 0.999f;
    eps_ = 1e-005f;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BatchNormParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.BatchNormParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool use_global_stats = 1;
      case 1: {
        if (tag == 8) {
          set_has_use_global_stats();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_global_stats_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_moving_average_fraction;
        break;
      }

      // optional float moving_average_fraction = 2 [default = 0.999];
      case 2: {
        if (tag == 21) {
         parse_moving_average_fraction:
          set_has_moving_average_fraction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &moving_average_fraction_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_eps;
        break;
      }

      // optional float eps = 3 [default = 1e-005];
      case 3: {
        if (tag == 29) {
         parse_eps:
          set_has_eps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eps_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.BatchNormParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.BatchNormParameter)
  return false;
#undef DO_
}

void BatchNormParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.BatchNormParameter)
  // optional bool use_global_stats = 1;
  if (has_use_global_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->use_global_stats(), output);
  }

  // optional float moving_average_fraction = 2 [default = 0.999];
  if (has_moving_average_fraction()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->moving_average_fraction(), output);
  }

  // optional float eps = 3 [default = 1e-005];
  if (has_eps()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->eps(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.BatchNormParameter)
}

::google::protobuf::uint8* BatchNormParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.BatchNormParameter)
  // optional bool use_global_stats = 1;
  if (has_use_global_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->use_global_stats(), target);
  }

  // optional float moving_average_fraction = 2 [default = 0.999];
  if (has_moving_average_fraction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->moving_average_fraction(), target);
  }

  // optional float eps = 3 [default = 1e-005];
  if (has_eps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->eps(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.BatchNormParameter)
  return target;
}

size_t BatchNormParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.BatchNormParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional bool use_global_stats = 1;
    if (has_use_global_stats()) {
      total_size += 1 + 1;
    }

    // optional float moving_average_fraction = 2 [default = 0.999];
    if (has_moving_average_fraction()) {
      total_size += 1 + 4;
    }

    // optional float eps = 3 [default = 1e-005];
    if (has_eps()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchNormParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.BatchNormParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BatchNormParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchNormParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.BatchNormParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.BatchNormParameter)
    UnsafeMergeFrom(*source);
  }
}

void BatchNormParameter::MergeFrom(const BatchNormParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.BatchNormParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BatchNormParameter::UnsafeMergeFrom(const BatchNormParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_use_global_stats()) {
      set_use_global_stats(from.use_global_stats());
    }
    if (from.has_moving_average_fraction()) {
      set_moving_average_fraction(from.moving_average_fraction());
    }
    if (from.has_eps()) {
      set_eps(from.eps());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void BatchNormParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.BatchNormParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchNormParameter::CopyFrom(const BatchNormParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.BatchNormParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BatchNormParameter::IsInitialized() const {

  return true;
}

void BatchNormParameter::Swap(BatchNormParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchNormParameter::InternalSwap(BatchNormParameter* other) {
  std::swap(use_global_stats_, other->use_global_stats_);
  std::swap(moving_average_fraction_, other->moving_average_fraction_);
  std::swap(eps_, other->eps_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchNormParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchNormParameter_descriptor_;
  metadata.reflection = BatchNormParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchNormParameter

// optional bool use_global_stats = 1;
bool BatchNormParameter::has_use_global_stats() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BatchNormParameter::set_has_use_global_stats() {
  _has_bits_[0] |= 0x00000001u;
}
void BatchNormParameter::clear_has_use_global_stats() {
  _has_bits_[0] &= ~0x00000001u;
}
void BatchNormParameter::clear_use_global_stats() {
  use_global_stats_ = false;
  clear_has_use_global_stats();
}
bool BatchNormParameter::use_global_stats() const {
  // @@protoc_insertion_point(field_get:caffe.BatchNormParameter.use_global_stats)
  return use_global_stats_;
}
void BatchNormParameter::set_use_global_stats(bool value) {
  set_has_use_global_stats();
  use_global_stats_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchNormParameter.use_global_stats)
}

// optional float moving_average_fraction = 2 [default = 0.999];
bool BatchNormParameter::has_moving_average_fraction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BatchNormParameter::set_has_moving_average_fraction() {
  _has_bits_[0] |= 0x00000002u;
}
void BatchNormParameter::clear_has_moving_average_fraction() {
  _has_bits_[0] &= ~0x00000002u;
}
void BatchNormParameter::clear_moving_average_fraction() {
  moving_average_fraction_ = 0.999f;
  clear_has_moving_average_fraction();
}
float BatchNormParameter::moving_average_fraction() const {
  // @@protoc_insertion_point(field_get:caffe.BatchNormParameter.moving_average_fraction)
  return moving_average_fraction_;
}
void BatchNormParameter::set_moving_average_fraction(float value) {
  set_has_moving_average_fraction();
  moving_average_fraction_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchNormParameter.moving_average_fraction)
}

// optional float eps = 3 [default = 1e-005];
bool BatchNormParameter::has_eps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BatchNormParameter::set_has_eps() {
  _has_bits_[0] |= 0x00000004u;
}
void BatchNormParameter::clear_has_eps() {
  _has_bits_[0] &= ~0x00000004u;
}
void BatchNormParameter::clear_eps() {
  eps_ = 1e-005f;
  clear_has_eps();
}
float BatchNormParameter::eps() const {
  // @@protoc_insertion_point(field_get:caffe.BatchNormParameter.eps)
  return eps_;
}
void BatchNormParameter::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchNormParameter.eps)
}

inline const BatchNormParameter* BatchNormParameter::internal_default_instance() {
  return &BatchNormParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BiasParameter::kAxisFieldNumber;
const int BiasParameter::kNumAxesFieldNumber;
const int BiasParameter::kFillerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BiasParameter::BiasParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.BiasParameter)
}

void BiasParameter::InitAsDefaultInstance() {
  filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
}

BiasParameter::BiasParameter(const BiasParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.BiasParameter)
}

void BiasParameter::SharedCtor() {
  _cached_size_ = 0;
  filler_ = NULL;
  axis_ = 1;
  num_axes_ = 1;
}

BiasParameter::~BiasParameter() {
  // @@protoc_insertion_point(destructor:caffe.BiasParameter)
  SharedDtor();
}

void BiasParameter::SharedDtor() {
  if (this != &BiasParameter_default_instance_.get()) {
    delete filler_;
  }
}

void BiasParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BiasParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BiasParameter_descriptor_;
}

const BiasParameter& BiasParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BiasParameter> BiasParameter_default_instance_;

BiasParameter* BiasParameter::New(::google::protobuf::Arena* arena) const {
  BiasParameter* n = new BiasParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BiasParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.BiasParameter)
  if (_has_bits_[0 / 32] & 7u) {
    axis_ = 1;
    num_axes_ = 1;
    if (has_filler()) {
      if (filler_ != NULL) filler_->::caffe::FillerParameter::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BiasParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.BiasParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 axis = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          set_has_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_axes;
        break;
      }

      // optional int32 num_axes = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_num_axes:
          set_has_num_axes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_axes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_filler;
        break;
      }

      // optional .caffe.FillerParameter filler = 3;
      case 3: {
        if (tag == 26) {
         parse_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.BiasParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.BiasParameter)
  return false;
#undef DO_
}

void BiasParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.BiasParameter)
  // optional int32 axis = 1 [default = 1];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->axis(), output);
  }

  // optional int32 num_axes = 2 [default = 1];
  if (has_num_axes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_axes(), output);
  }

  // optional .caffe.FillerParameter filler = 3;
  if (has_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->filler_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.BiasParameter)
}

::google::protobuf::uint8* BiasParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.BiasParameter)
  // optional int32 axis = 1 [default = 1];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->axis(), target);
  }

  // optional int32 num_axes = 2 [default = 1];
  if (has_num_axes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_axes(), target);
  }

  // optional .caffe.FillerParameter filler = 3;
  if (has_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->filler_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.BiasParameter)
  return target;
}

size_t BiasParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.BiasParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 axis = 1 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional int32 num_axes = 2 [default = 1];
    if (has_num_axes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_axes());
    }

    // optional .caffe.FillerParameter filler = 3;
    if (has_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->filler_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BiasParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.BiasParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BiasParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BiasParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.BiasParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.BiasParameter)
    UnsafeMergeFrom(*source);
  }
}

void BiasParameter::MergeFrom(const BiasParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.BiasParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BiasParameter::UnsafeMergeFrom(const BiasParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_axis()) {
      set_axis(from.axis());
    }
    if (from.has_num_axes()) {
      set_num_axes(from.num_axes());
    }
    if (from.has_filler()) {
      mutable_filler()->::caffe::FillerParameter::MergeFrom(from.filler());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void BiasParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.BiasParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BiasParameter::CopyFrom(const BiasParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.BiasParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BiasParameter::IsInitialized() const {

  return true;
}

void BiasParameter::Swap(BiasParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BiasParameter::InternalSwap(BiasParameter* other) {
  std::swap(axis_, other->axis_);
  std::swap(num_axes_, other->num_axes_);
  std::swap(filler_, other->filler_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BiasParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BiasParameter_descriptor_;
  metadata.reflection = BiasParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BiasParameter

// optional int32 axis = 1 [default = 1];
bool BiasParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BiasParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
void BiasParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
void BiasParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
::google::protobuf::int32 BiasParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.BiasParameter.axis)
  return axis_;
}
void BiasParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.BiasParameter.axis)
}

// optional int32 num_axes = 2 [default = 1];
bool BiasParameter::has_num_axes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BiasParameter::set_has_num_axes() {
  _has_bits_[0] |= 0x00000002u;
}
void BiasParameter::clear_has_num_axes() {
  _has_bits_[0] &= ~0x00000002u;
}
void BiasParameter::clear_num_axes() {
  num_axes_ = 1;
  clear_has_num_axes();
}
::google::protobuf::int32 BiasParameter::num_axes() const {
  // @@protoc_insertion_point(field_get:caffe.BiasParameter.num_axes)
  return num_axes_;
}
void BiasParameter::set_num_axes(::google::protobuf::int32 value) {
  set_has_num_axes();
  num_axes_ = value;
  // @@protoc_insertion_point(field_set:caffe.BiasParameter.num_axes)
}

// optional .caffe.FillerParameter filler = 3;
bool BiasParameter::has_filler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BiasParameter::set_has_filler() {
  _has_bits_[0] |= 0x00000004u;
}
void BiasParameter::clear_has_filler() {
  _has_bits_[0] &= ~0x00000004u;
}
void BiasParameter::clear_filler() {
  if (filler_ != NULL) filler_->::caffe::FillerParameter::Clear();
  clear_has_filler();
}
const ::caffe::FillerParameter& BiasParameter::filler() const {
  // @@protoc_insertion_point(field_get:caffe.BiasParameter.filler)
  return filler_ != NULL ? *filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
::caffe::FillerParameter* BiasParameter::mutable_filler() {
  set_has_filler();
  if (filler_ == NULL) {
    filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.BiasParameter.filler)
  return filler_;
}
::caffe::FillerParameter* BiasParameter::release_filler() {
  // @@protoc_insertion_point(field_release:caffe.BiasParameter.filler)
  clear_has_filler();
  ::caffe::FillerParameter* temp = filler_;
  filler_ = NULL;
  return temp;
}
void BiasParameter::set_allocated_filler(::caffe::FillerParameter* filler) {
  delete filler_;
  filler_ = filler;
  if (filler) {
    set_has_filler();
  } else {
    clear_has_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.BiasParameter.filler)
}

inline const BiasParameter* BiasParameter::internal_default_instance() {
  return &BiasParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContrastiveLossParameter::kMarginFieldNumber;
const int ContrastiveLossParameter::kLegacyVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContrastiveLossParameter::ContrastiveLossParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ContrastiveLossParameter)
}

void ContrastiveLossParameter::InitAsDefaultInstance() {
}

ContrastiveLossParameter::ContrastiveLossParameter(const ContrastiveLossParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ContrastiveLossParameter)
}

void ContrastiveLossParameter::SharedCtor() {
  _cached_size_ = 0;
  legacy_version_ = false;
  margin_ = 1;
}

ContrastiveLossParameter::~ContrastiveLossParameter() {
  // @@protoc_insertion_point(destructor:caffe.ContrastiveLossParameter)
  SharedDtor();
}

void ContrastiveLossParameter::SharedDtor() {
}

void ContrastiveLossParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContrastiveLossParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContrastiveLossParameter_descriptor_;
}

const ContrastiveLossParameter& ContrastiveLossParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ContrastiveLossParameter> ContrastiveLossParameter_default_instance_;

ContrastiveLossParameter* ContrastiveLossParameter::New(::google::protobuf::Arena* arena) const {
  ContrastiveLossParameter* n = new ContrastiveLossParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContrastiveLossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ContrastiveLossParameter)
  if (_has_bits_[0 / 32] & 3u) {
    margin_ = 1;
    legacy_version_ = false;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ContrastiveLossParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ContrastiveLossParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float margin = 1 [default = 1];
      case 1: {
        if (tag == 13) {
          set_has_margin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &margin_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_legacy_version;
        break;
      }

      // optional bool legacy_version = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_legacy_version:
          set_has_legacy_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &legacy_version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ContrastiveLossParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ContrastiveLossParameter)
  return false;
#undef DO_
}

void ContrastiveLossParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ContrastiveLossParameter)
  // optional float margin = 1 [default = 1];
  if (has_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->margin(), output);
  }

  // optional bool legacy_version = 2 [default = false];
  if (has_legacy_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->legacy_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ContrastiveLossParameter)
}

::google::protobuf::uint8* ContrastiveLossParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ContrastiveLossParameter)
  // optional float margin = 1 [default = 1];
  if (has_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->margin(), target);
  }

  // optional bool legacy_version = 2 [default = false];
  if (has_legacy_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->legacy_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ContrastiveLossParameter)
  return target;
}

size_t ContrastiveLossParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ContrastiveLossParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional float margin = 1 [default = 1];
    if (has_margin()) {
      total_size += 1 + 4;
    }

    // optional bool legacy_version = 2 [default = false];
    if (has_legacy_version()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContrastiveLossParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ContrastiveLossParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ContrastiveLossParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContrastiveLossParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ContrastiveLossParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ContrastiveLossParameter)
    UnsafeMergeFrom(*source);
  }
}

void ContrastiveLossParameter::MergeFrom(const ContrastiveLossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ContrastiveLossParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ContrastiveLossParameter::UnsafeMergeFrom(const ContrastiveLossParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_margin()) {
      set_margin(from.margin());
    }
    if (from.has_legacy_version()) {
      set_legacy_version(from.legacy_version());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ContrastiveLossParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ContrastiveLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContrastiveLossParameter::CopyFrom(const ContrastiveLossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ContrastiveLossParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ContrastiveLossParameter::IsInitialized() const {

  return true;
}

void ContrastiveLossParameter::Swap(ContrastiveLossParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContrastiveLossParameter::InternalSwap(ContrastiveLossParameter* other) {
  std::swap(margin_, other->margin_);
  std::swap(legacy_version_, other->legacy_version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContrastiveLossParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContrastiveLossParameter_descriptor_;
  metadata.reflection = ContrastiveLossParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContrastiveLossParameter

// optional float margin = 1 [default = 1];
bool ContrastiveLossParameter::has_margin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ContrastiveLossParameter::set_has_margin() {
  _has_bits_[0] |= 0x00000001u;
}
void ContrastiveLossParameter::clear_has_margin() {
  _has_bits_[0] &= ~0x00000001u;
}
void ContrastiveLossParameter::clear_margin() {
  margin_ = 1;
  clear_has_margin();
}
float ContrastiveLossParameter::margin() const {
  // @@protoc_insertion_point(field_get:caffe.ContrastiveLossParameter.margin)
  return margin_;
}
void ContrastiveLossParameter::set_margin(float value) {
  set_has_margin();
  margin_ = value;
  // @@protoc_insertion_point(field_set:caffe.ContrastiveLossParameter.margin)
}

// optional bool legacy_version = 2 [default = false];
bool ContrastiveLossParameter::has_legacy_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ContrastiveLossParameter::set_has_legacy_version() {
  _has_bits_[0] |= 0x00000002u;
}
void ContrastiveLossParameter::clear_has_legacy_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void ContrastiveLossParameter::clear_legacy_version() {
  legacy_version_ = false;
  clear_has_legacy_version();
}
bool ContrastiveLossParameter::legacy_version() const {
  // @@protoc_insertion_point(field_get:caffe.ContrastiveLossParameter.legacy_version)
  return legacy_version_;
}
void ContrastiveLossParameter::set_legacy_version(bool value) {
  set_has_legacy_version();
  legacy_version_ = value;
  // @@protoc_insertion_point(field_set:caffe.ContrastiveLossParameter.legacy_version)
}

inline const ContrastiveLossParameter* ContrastiveLossParameter::internal_default_instance() {
  return &ContrastiveLossParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ConvolutionParameter_Engine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConvolutionParameter_Engine_descriptor_;
}
bool ConvolutionParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ConvolutionParameter_Engine ConvolutionParameter::DEFAULT;
const ConvolutionParameter_Engine ConvolutionParameter::CAFFE;
const ConvolutionParameter_Engine ConvolutionParameter::CUDNN;
const ConvolutionParameter_Engine ConvolutionParameter::Engine_MIN;
const ConvolutionParameter_Engine ConvolutionParameter::Engine_MAX;
const int ConvolutionParameter::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConvolutionParameter::kNumOutputFieldNumber;
const int ConvolutionParameter::kBiasTermFieldNumber;
const int ConvolutionParameter::kPadFieldNumber;
const int ConvolutionParameter::kKernelSizeFieldNumber;
const int ConvolutionParameter::kStrideFieldNumber;
const int ConvolutionParameter::kDilationFieldNumber;
const int ConvolutionParameter::kPadHFieldNumber;
const int ConvolutionParameter::kPadWFieldNumber;
const int ConvolutionParameter::kKernelHFieldNumber;
const int ConvolutionParameter::kKernelWFieldNumber;
const int ConvolutionParameter::kStrideHFieldNumber;
const int ConvolutionParameter::kStrideWFieldNumber;
const int ConvolutionParameter::kGroupFieldNumber;
const int ConvolutionParameter::kWeightFillerFieldNumber;
const int ConvolutionParameter::kBiasFillerFieldNumber;
const int ConvolutionParameter::kEngineFieldNumber;
const int ConvolutionParameter::kAxisFieldNumber;
const int ConvolutionParameter::kForceNdIm2ColFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConvolutionParameter::ConvolutionParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ConvolutionParameter)
}

void ConvolutionParameter::InitAsDefaultInstance() {
  weight_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  bias_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
}

ConvolutionParameter::ConvolutionParameter(const ConvolutionParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ConvolutionParameter)
}

void ConvolutionParameter::SharedCtor() {
  _cached_size_ = 0;
  weight_filler_ = NULL;
  bias_filler_ = NULL;
  ::memset(&num_output_, 0, reinterpret_cast<char*>(&force_nd_im2col_) -
    reinterpret_cast<char*>(&num_output_) + sizeof(force_nd_im2col_));
  axis_ = 1;
  bias_term_ = true;
  group_ = 1u;
}

ConvolutionParameter::~ConvolutionParameter() {
  // @@protoc_insertion_point(destructor:caffe.ConvolutionParameter)
  SharedDtor();
}

void ConvolutionParameter::SharedDtor() {
  if (this != &ConvolutionParameter_default_instance_.get()) {
    delete weight_filler_;
    delete bias_filler_;
  }
}

void ConvolutionParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConvolutionParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConvolutionParameter_descriptor_;
}

const ConvolutionParameter& ConvolutionParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ConvolutionParameter> ConvolutionParameter_default_instance_;

ConvolutionParameter* ConvolutionParameter::New(::google::protobuf::Arena* arena) const {
  ConvolutionParameter* n = new ConvolutionParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConvolutionParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ConvolutionParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ConvolutionParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ConvolutionParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 195u) {
    ZR_(num_output_, pad_w_);
    bias_term_ = true;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(kernel_h_, engine_);
    group_ = 1u;
    if (has_weight_filler()) {
      if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
    }
    if (has_bias_filler()) {
      if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 196608u) {
    axis_ = 1;
    force_nd_im2col_ = false;
  }

#undef ZR_HELPER_
#undef ZR_

  pad_.Clear();
  kernel_size_.Clear();
  stride_.Clear();
  dilation_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ConvolutionParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ConvolutionParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_output = 1;
      case 1: {
        if (tag == 8) {
          set_has_num_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bias_term;
        break;
      }

      // optional bool bias_term = 2 [default = true];
      case 2: {
        if (tag == 16) {
         parse_bias_term:
          set_has_bias_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bias_term_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pad;
        break;
      }

      // repeated uint32 pad = 3;
      case 3: {
        if (tag == 24) {
         parse_pad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_pad())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_pad())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pad;
        if (input->ExpectTag(32)) goto parse_kernel_size;
        break;
      }

      // repeated uint32 kernel_size = 4;
      case 4: {
        if (tag == 32) {
         parse_kernel_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_kernel_size())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_kernel_size())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_kernel_size;
        if (input->ExpectTag(40)) goto parse_group;
        break;
      }

      // optional uint32 group = 5 [default = 1];
      case 5: {
        if (tag == 40) {
         parse_group:
          set_has_group();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_stride;
        break;
      }

      // repeated uint32 stride = 6;
      case 6: {
        if (tag == 48) {
         parse_stride:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_stride())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_stride())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_stride;
        if (input->ExpectTag(58)) goto parse_weight_filler;
        break;
      }

      // optional .caffe.FillerParameter weight_filler = 7;
      case 7: {
        if (tag == 58) {
         parse_weight_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_bias_filler;
        break;
      }

      // optional .caffe.FillerParameter bias_filler = 8;
      case 8: {
        if (tag == 66) {
         parse_bias_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_pad_h;
        break;
      }

      // optional uint32 pad_h = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_pad_h:
          set_has_pad_h();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_h_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_pad_w;
        break;
      }

      // optional uint32 pad_w = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_pad_w:
          set_has_pad_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_w_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_kernel_h;
        break;
      }

      // optional uint32 kernel_h = 11;
      case 11: {
        if (tag == 88) {
         parse_kernel_h:
          set_has_kernel_h();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_h_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_kernel_w;
        break;
      }

      // optional uint32 kernel_w = 12;
      case 12: {
        if (tag == 96) {
         parse_kernel_w:
          set_has_kernel_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_w_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_stride_h;
        break;
      }

      // optional uint32 stride_h = 13;
      case 13: {
        if (tag == 104) {
         parse_stride_h:
          set_has_stride_h();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_h_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_stride_w;
        break;
      }

      // optional uint32 stride_w = 14;
      case 14: {
        if (tag == 112) {
         parse_stride_w:
          set_has_stride_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_w_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_engine;
        break;
      }

      // optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
      case 15: {
        if (tag == 120) {
         parse_engine:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::ConvolutionParameter_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::ConvolutionParameter_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_axis;
        break;
      }

      // optional int32 axis = 16 [default = 1];
      case 16: {
        if (tag == 128) {
         parse_axis:
          set_has_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_force_nd_im2col;
        break;
      }

      // optional bool force_nd_im2col = 17 [default = false];
      case 17: {
        if (tag == 136) {
         parse_force_nd_im2col:
          set_has_force_nd_im2col();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_nd_im2col_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_dilation;
        break;
      }

      // repeated uint32 dilation = 18;
      case 18: {
        if (tag == 144) {
         parse_dilation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 144, input, this->mutable_dilation())));
        } else if (tag == 146) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_dilation())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_dilation;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ConvolutionParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ConvolutionParameter)
  return false;
#undef DO_
}

void ConvolutionParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ConvolutionParameter)
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
  }

  // optional bool bias_term = 2 [default = true];
  if (has_bias_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bias_term(), output);
  }

  // repeated uint32 pad = 3;
  for (int i = 0; i < this->pad_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->pad(i), output);
  }

  // repeated uint32 kernel_size = 4;
  for (int i = 0; i < this->kernel_size_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->kernel_size(i), output);
  }

  // optional uint32 group = 5 [default = 1];
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->group(), output);
  }

  // repeated uint32 stride = 6;
  for (int i = 0; i < this->stride_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->stride(i), output);
  }

  // optional .caffe.FillerParameter weight_filler = 7;
  if (has_weight_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->weight_filler_, output);
  }

  // optional .caffe.FillerParameter bias_filler = 8;
  if (has_bias_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->bias_filler_, output);
  }

  // optional uint32 pad_h = 9 [default = 0];
  if (has_pad_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->pad_h(), output);
  }

  // optional uint32 pad_w = 10 [default = 0];
  if (has_pad_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->pad_w(), output);
  }

  // optional uint32 kernel_h = 11;
  if (has_kernel_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->kernel_h(), output);
  }

  // optional uint32 kernel_w = 12;
  if (has_kernel_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->kernel_w(), output);
  }

  // optional uint32 stride_h = 13;
  if (has_stride_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->stride_h(), output);
  }

  // optional uint32 stride_w = 14;
  if (has_stride_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->stride_w(), output);
  }

  // optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
  if (has_engine()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->engine(), output);
  }

  // optional int32 axis = 16 [default = 1];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->axis(), output);
  }

  // optional bool force_nd_im2col = 17 [default = false];
  if (has_force_nd_im2col()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->force_nd_im2col(), output);
  }

  // repeated uint32 dilation = 18;
  for (int i = 0; i < this->dilation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      18, this->dilation(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ConvolutionParameter)
}

::google::protobuf::uint8* ConvolutionParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ConvolutionParameter)
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
  }

  // optional bool bias_term = 2 [default = true];
  if (has_bias_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bias_term(), target);
  }

  // repeated uint32 pad = 3;
  for (int i = 0; i < this->pad_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->pad(i), target);
  }

  // repeated uint32 kernel_size = 4;
  for (int i = 0; i < this->kernel_size_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->kernel_size(i), target);
  }

  // optional uint32 group = 5 [default = 1];
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->group(), target);
  }

  // repeated uint32 stride = 6;
  for (int i = 0; i < this->stride_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->stride(i), target);
  }

  // optional .caffe.FillerParameter weight_filler = 7;
  if (has_weight_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->weight_filler_, false, target);
  }

  // optional .caffe.FillerParameter bias_filler = 8;
  if (has_bias_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->bias_filler_, false, target);
  }

  // optional uint32 pad_h = 9 [default = 0];
  if (has_pad_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->pad_h(), target);
  }

  // optional uint32 pad_w = 10 [default = 0];
  if (has_pad_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->pad_w(), target);
  }

  // optional uint32 kernel_h = 11;
  if (has_kernel_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->kernel_h(), target);
  }

  // optional uint32 kernel_w = 12;
  if (has_kernel_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->kernel_w(), target);
  }

  // optional uint32 stride_h = 13;
  if (has_stride_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->stride_h(), target);
  }

  // optional uint32 stride_w = 14;
  if (has_stride_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->stride_w(), target);
  }

  // optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
  if (has_engine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->engine(), target);
  }

  // optional int32 axis = 16 [default = 1];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->axis(), target);
  }

  // optional bool force_nd_im2col = 17 [default = false];
  if (has_force_nd_im2col()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->force_nd_im2col(), target);
  }

  // repeated uint32 dilation = 18;
  for (int i = 0; i < this->dilation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(18, this->dilation(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ConvolutionParameter)
  return target;
}

size_t ConvolutionParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ConvolutionParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 195u) {
    // optional uint32 num_output = 1;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional bool bias_term = 2 [default = true];
    if (has_bias_term()) {
      total_size += 1 + 1;
    }

    // optional uint32 pad_h = 9 [default = 0];
    if (has_pad_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_h());
    }

    // optional uint32 pad_w = 10 [default = 0];
    if (has_pad_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_w());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 kernel_h = 11;
    if (has_kernel_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_h());
    }

    // optional uint32 kernel_w = 12;
    if (has_kernel_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_w());
    }

    // optional uint32 stride_h = 13;
    if (has_stride_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride_h());
    }

    // optional uint32 stride_w = 14;
    if (has_stride_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride_w());
    }

    // optional uint32 group = 5 [default = 1];
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group());
    }

    // optional .caffe.FillerParameter weight_filler = 7;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->weight_filler_);
    }

    // optional .caffe.FillerParameter bias_filler = 8;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bias_filler_);
    }

    // optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional int32 axis = 16 [default = 1];
    if (has_axis()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional bool force_nd_im2col = 17 [default = false];
    if (has_force_nd_im2col()) {
      total_size += 2 + 1;
    }

  }
  // repeated uint32 pad = 3;
  {
    size_t data_size = 0;
    unsigned int count = this->pad_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->pad(i));
    }
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->pad_size());
    total_size += data_size;
  }

  // repeated uint32 kernel_size = 4;
  {
    size_t data_size = 0;
    unsigned int count = this->kernel_size_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->kernel_size(i));
    }
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->kernel_size_size());
    total_size += data_size;
  }

  // repeated uint32 stride = 6;
  {
    size_t data_size = 0;
    unsigned int count = this->stride_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->stride(i));
    }
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->stride_size());
    total_size += data_size;
  }

  // repeated uint32 dilation = 18;
  {
    size_t data_size = 0;
    unsigned int count = this->dilation_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->dilation(i));
    }
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->dilation_size());
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConvolutionParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ConvolutionParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ConvolutionParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConvolutionParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ConvolutionParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ConvolutionParameter)
    UnsafeMergeFrom(*source);
  }
}

void ConvolutionParameter::MergeFrom(const ConvolutionParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ConvolutionParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ConvolutionParameter::UnsafeMergeFrom(const ConvolutionParameter& from) {
  GOOGLE_DCHECK(&from != this);
  pad_.UnsafeMergeFrom(from.pad_);
  kernel_size_.UnsafeMergeFrom(from.kernel_size_);
  stride_.UnsafeMergeFrom(from.stride_);
  dilation_.UnsafeMergeFrom(from.dilation_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_output()) {
      set_num_output(from.num_output());
    }
    if (from.has_bias_term()) {
      set_bias_term(from.bias_term());
    }
    if (from.has_pad_h()) {
      set_pad_h(from.pad_h());
    }
    if (from.has_pad_w()) {
      set_pad_w(from.pad_w());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_kernel_h()) {
      set_kernel_h(from.kernel_h());
    }
    if (from.has_kernel_w()) {
      set_kernel_w(from.kernel_w());
    }
    if (from.has_stride_h()) {
      set_stride_h(from.stride_h());
    }
    if (from.has_stride_w()) {
      set_stride_w(from.stride_w());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_weight_filler()) {
      mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
    }
    if (from.has_bias_filler()) {
      mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
    }
    if (from.has_engine()) {
      set_engine(from.engine());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_axis()) {
      set_axis(from.axis());
    }
    if (from.has_force_nd_im2col()) {
      set_force_nd_im2col(from.force_nd_im2col());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ConvolutionParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ConvolutionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConvolutionParameter::CopyFrom(const ConvolutionParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ConvolutionParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ConvolutionParameter::IsInitialized() const {

  return true;
}

void ConvolutionParameter::Swap(ConvolutionParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConvolutionParameter::InternalSwap(ConvolutionParameter* other) {
  std::swap(num_output_, other->num_output_);
  std::swap(bias_term_, other->bias_term_);
  pad_.UnsafeArenaSwap(&other->pad_);
  kernel_size_.UnsafeArenaSwap(&other->kernel_size_);
  stride_.UnsafeArenaSwap(&other->stride_);
  dilation_.UnsafeArenaSwap(&other->dilation_);
  std::swap(pad_h_, other->pad_h_);
  std::swap(pad_w_, other->pad_w_);
  std::swap(kernel_h_, other->kernel_h_);
  std::swap(kernel_w_, other->kernel_w_);
  std::swap(stride_h_, other->stride_h_);
  std::swap(stride_w_, other->stride_w_);
  std::swap(group_, other->group_);
  std::swap(weight_filler_, other->weight_filler_);
  std::swap(bias_filler_, other->bias_filler_);
  std::swap(engine_, other->engine_);
  std::swap(axis_, other->axis_);
  std::swap(force_nd_im2col_, other->force_nd_im2col_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConvolutionParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConvolutionParameter_descriptor_;
  metadata.reflection = ConvolutionParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConvolutionParameter

// optional uint32 num_output = 1;
bool ConvolutionParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConvolutionParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
void ConvolutionParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConvolutionParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
::google::protobuf::uint32 ConvolutionParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.num_output)
  return num_output_;
}
void ConvolutionParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.num_output)
}

// optional bool bias_term = 2 [default = true];
bool ConvolutionParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConvolutionParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000002u;
}
void ConvolutionParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConvolutionParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
bool ConvolutionParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.bias_term)
  return bias_term_;
}
void ConvolutionParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.bias_term)
}

// repeated uint32 pad = 3;
int ConvolutionParameter::pad_size() const {
  return pad_.size();
}
void ConvolutionParameter::clear_pad() {
  pad_.Clear();
}
::google::protobuf::uint32 ConvolutionParameter::pad(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.pad)
  return pad_.Get(index);
}
void ConvolutionParameter::set_pad(int index, ::google::protobuf::uint32 value) {
  pad_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.pad)
}
void ConvolutionParameter::add_pad(::google::protobuf::uint32 value) {
  pad_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ConvolutionParameter.pad)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::pad() const {
  // @@protoc_insertion_point(field_list:caffe.ConvolutionParameter.pad)
  return pad_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_pad() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ConvolutionParameter.pad)
  return &pad_;
}

// repeated uint32 kernel_size = 4;
int ConvolutionParameter::kernel_size_size() const {
  return kernel_size_.size();
}
void ConvolutionParameter::clear_kernel_size() {
  kernel_size_.Clear();
}
::google::protobuf::uint32 ConvolutionParameter::kernel_size(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.kernel_size)
  return kernel_size_.Get(index);
}
void ConvolutionParameter::set_kernel_size(int index, ::google::protobuf::uint32 value) {
  kernel_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.kernel_size)
}
void ConvolutionParameter::add_kernel_size(::google::protobuf::uint32 value) {
  kernel_size_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ConvolutionParameter.kernel_size)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::kernel_size() const {
  // @@protoc_insertion_point(field_list:caffe.ConvolutionParameter.kernel_size)
  return kernel_size_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_kernel_size() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ConvolutionParameter.kernel_size)
  return &kernel_size_;
}

// repeated uint32 stride = 6;
int ConvolutionParameter::stride_size() const {
  return stride_.size();
}
void ConvolutionParameter::clear_stride() {
  stride_.Clear();
}
::google::protobuf::uint32 ConvolutionParameter::stride(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.stride)
  return stride_.Get(index);
}
void ConvolutionParameter::set_stride(int index, ::google::protobuf::uint32 value) {
  stride_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.stride)
}
void ConvolutionParameter::add_stride(::google::protobuf::uint32 value) {
  stride_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ConvolutionParameter.stride)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::stride() const {
  // @@protoc_insertion_point(field_list:caffe.ConvolutionParameter.stride)
  return stride_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_stride() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ConvolutionParameter.stride)
  return &stride_;
}

// repeated uint32 dilation = 18;
int ConvolutionParameter::dilation_size() const {
  return dilation_.size();
}
void ConvolutionParameter::clear_dilation() {
  dilation_.Clear();
}
::google::protobuf::uint32 ConvolutionParameter::dilation(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.dilation)
  return dilation_.Get(index);
}
void ConvolutionParameter::set_dilation(int index, ::google::protobuf::uint32 value) {
  dilation_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.dilation)
}
void ConvolutionParameter::add_dilation(::google::protobuf::uint32 value) {
  dilation_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ConvolutionParameter.dilation)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::dilation() const {
  // @@protoc_insertion_point(field_list:caffe.ConvolutionParameter.dilation)
  return dilation_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_dilation() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ConvolutionParameter.dilation)
  return &dilation_;
}

// optional uint32 pad_h = 9 [default = 0];
bool ConvolutionParameter::has_pad_h() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ConvolutionParameter::set_has_pad_h() {
  _has_bits_[0] |= 0x00000040u;
}
void ConvolutionParameter::clear_has_pad_h() {
  _has_bits_[0] &= ~0x00000040u;
}
void ConvolutionParameter::clear_pad_h() {
  pad_h_ = 0u;
  clear_has_pad_h();
}
::google::protobuf::uint32 ConvolutionParameter::pad_h() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.pad_h)
  return pad_h_;
}
void ConvolutionParameter::set_pad_h(::google::protobuf::uint32 value) {
  set_has_pad_h();
  pad_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.pad_h)
}

// optional uint32 pad_w = 10 [default = 0];
bool ConvolutionParameter::has_pad_w() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ConvolutionParameter::set_has_pad_w() {
  _has_bits_[0] |= 0x00000080u;
}
void ConvolutionParameter::clear_has_pad_w() {
  _has_bits_[0] &= ~0x00000080u;
}
void ConvolutionParameter::clear_pad_w() {
  pad_w_ = 0u;
  clear_has_pad_w();
}
::google::protobuf::uint32 ConvolutionParameter::pad_w() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.pad_w)
  return pad_w_;
}
void ConvolutionParameter::set_pad_w(::google::protobuf::uint32 value) {
  set_has_pad_w();
  pad_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.pad_w)
}

// optional uint32 kernel_h = 11;
bool ConvolutionParameter::has_kernel_h() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ConvolutionParameter::set_has_kernel_h() {
  _has_bits_[0] |= 0x00000100u;
}
void ConvolutionParameter::clear_has_kernel_h() {
  _has_bits_[0] &= ~0x00000100u;
}
void ConvolutionParameter::clear_kernel_h() {
  kernel_h_ = 0u;
  clear_has_kernel_h();
}
::google::protobuf::uint32 ConvolutionParameter::kernel_h() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.kernel_h)
  return kernel_h_;
}
void ConvolutionParameter::set_kernel_h(::google::protobuf::uint32 value) {
  set_has_kernel_h();
  kernel_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.kernel_h)
}

// optional uint32 kernel_w = 12;
bool ConvolutionParameter::has_kernel_w() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ConvolutionParameter::set_has_kernel_w() {
  _has_bits_[0] |= 0x00000200u;
}
void ConvolutionParameter::clear_has_kernel_w() {
  _has_bits_[0] &= ~0x00000200u;
}
void ConvolutionParameter::clear_kernel_w() {
  kernel_w_ = 0u;
  clear_has_kernel_w();
}
::google::protobuf::uint32 ConvolutionParameter::kernel_w() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.kernel_w)
  return kernel_w_;
}
void ConvolutionParameter::set_kernel_w(::google::protobuf::uint32 value) {
  set_has_kernel_w();
  kernel_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.kernel_w)
}

// optional uint32 stride_h = 13;
bool ConvolutionParameter::has_stride_h() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ConvolutionParameter::set_has_stride_h() {
  _has_bits_[0] |= 0x00000400u;
}
void ConvolutionParameter::clear_has_stride_h() {
  _has_bits_[0] &= ~0x00000400u;
}
void ConvolutionParameter::clear_stride_h() {
  stride_h_ = 0u;
  clear_has_stride_h();
}
::google::protobuf::uint32 ConvolutionParameter::stride_h() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.stride_h)
  return stride_h_;
}
void ConvolutionParameter::set_stride_h(::google::protobuf::uint32 value) {
  set_has_stride_h();
  stride_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.stride_h)
}

// optional uint32 stride_w = 14;
bool ConvolutionParameter::has_stride_w() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ConvolutionParameter::set_has_stride_w() {
  _has_bits_[0] |= 0x00000800u;
}
void ConvolutionParameter::clear_has_stride_w() {
  _has_bits_[0] &= ~0x00000800u;
}
void ConvolutionParameter::clear_stride_w() {
  stride_w_ = 0u;
  clear_has_stride_w();
}
::google::protobuf::uint32 ConvolutionParameter::stride_w() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.stride_w)
  return stride_w_;
}
void ConvolutionParameter::set_stride_w(::google::protobuf::uint32 value) {
  set_has_stride_w();
  stride_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.stride_w)
}

// optional uint32 group = 5 [default = 1];
bool ConvolutionParameter::has_group() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ConvolutionParameter::set_has_group() {
  _has_bits_[0] |= 0x00001000u;
}
void ConvolutionParameter::clear_has_group() {
  _has_bits_[0] &= ~0x00001000u;
}
void ConvolutionParameter::clear_group() {
  group_ = 1u;
  clear_has_group();
}
::google::protobuf::uint32 ConvolutionParameter::group() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.group)
  return group_;
}
void ConvolutionParameter::set_group(::google::protobuf::uint32 value) {
  set_has_group();
  group_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.group)
}

// optional .caffe.FillerParameter weight_filler = 7;
bool ConvolutionParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ConvolutionParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00002000u;
}
void ConvolutionParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00002000u;
}
void ConvolutionParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
const ::caffe::FillerParameter& ConvolutionParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
::caffe::FillerParameter* ConvolutionParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ConvolutionParameter.weight_filler)
  return weight_filler_;
}
::caffe::FillerParameter* ConvolutionParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.ConvolutionParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
void ConvolutionParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ConvolutionParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 8;
bool ConvolutionParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ConvolutionParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00004000u;
}
void ConvolutionParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00004000u;
}
void ConvolutionParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
const ::caffe::FillerParameter& ConvolutionParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
::caffe::FillerParameter* ConvolutionParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ConvolutionParameter.bias_filler)
  return bias_filler_;
}
::caffe::FillerParameter* ConvolutionParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.ConvolutionParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
void ConvolutionParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ConvolutionParameter.bias_filler)
}

// optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
bool ConvolutionParameter::has_engine() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void ConvolutionParameter::set_has_engine() {
  _has_bits_[0] |= 0x00008000u;
}
void ConvolutionParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00008000u;
}
void ConvolutionParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
::caffe::ConvolutionParameter_Engine ConvolutionParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.engine)
  return static_cast< ::caffe::ConvolutionParameter_Engine >(engine_);
}
void ConvolutionParameter::set_engine(::caffe::ConvolutionParameter_Engine value) {
  assert(::caffe::ConvolutionParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.engine)
}

// optional int32 axis = 16 [default = 1];
bool ConvolutionParameter::has_axis() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void ConvolutionParameter::set_has_axis() {
  _has_bits_[0] |= 0x00010000u;
}
void ConvolutionParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00010000u;
}
void ConvolutionParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
::google::protobuf::int32 ConvolutionParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.axis)
  return axis_;
}
void ConvolutionParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.axis)
}

// optional bool force_nd_im2col = 17 [default = false];
bool ConvolutionParameter::has_force_nd_im2col() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void ConvolutionParameter::set_has_force_nd_im2col() {
  _has_bits_[0] |= 0x00020000u;
}
void ConvolutionParameter::clear_has_force_nd_im2col() {
  _has_bits_[0] &= ~0x00020000u;
}
void ConvolutionParameter::clear_force_nd_im2col() {
  force_nd_im2col_ = false;
  clear_has_force_nd_im2col();
}
bool ConvolutionParameter::force_nd_im2col() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.force_nd_im2col)
  return force_nd_im2col_;
}
void ConvolutionParameter::set_force_nd_im2col(bool value) {
  set_has_force_nd_im2col();
  force_nd_im2col_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.force_nd_im2col)
}

inline const ConvolutionParameter* ConvolutionParameter::internal_default_instance() {
  return &ConvolutionParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CropParameter::kAxisFieldNumber;
const int CropParameter::kOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CropParameter::CropParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.CropParameter)
}

void CropParameter::InitAsDefaultInstance() {
}

CropParameter::CropParameter(const CropParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.CropParameter)
}

void CropParameter::SharedCtor() {
  _cached_size_ = 0;
  axis_ = 2;
}

CropParameter::~CropParameter() {
  // @@protoc_insertion_point(destructor:caffe.CropParameter)
  SharedDtor();
}

void CropParameter::SharedDtor() {
}

void CropParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CropParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CropParameter_descriptor_;
}

const CropParameter& CropParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CropParameter> CropParameter_default_instance_;

CropParameter* CropParameter::New(::google::protobuf::Arena* arena) const {
  CropParameter* n = new CropParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CropParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.CropParameter)
  axis_ = 2;
  offset_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CropParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.CropParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 axis = 1 [default = 2];
      case 1: {
        if (tag == 8) {
          set_has_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_offset;
        break;
      }

      // repeated uint32 offset = 2;
      case 2: {
        if (tag == 16) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_offset())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_offset())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_offset;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.CropParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.CropParameter)
  return false;
#undef DO_
}

void CropParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.CropParameter)
  // optional int32 axis = 1 [default = 2];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->axis(), output);
  }

  // repeated uint32 offset = 2;
  for (int i = 0; i < this->offset_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->offset(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.CropParameter)
}

::google::protobuf::uint8* CropParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.CropParameter)
  // optional int32 axis = 1 [default = 2];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->axis(), target);
  }

  // repeated uint32 offset = 2;
  for (int i = 0; i < this->offset_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->offset(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.CropParameter)
  return target;
}

size_t CropParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.CropParameter)
  size_t total_size = 0;

  // optional int32 axis = 1 [default = 2];
  if (has_axis()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->axis());
  }

  // repeated uint32 offset = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->offset_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->offset(i));
    }
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->offset_size());
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CropParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.CropParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CropParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CropParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.CropParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.CropParameter)
    UnsafeMergeFrom(*source);
  }
}

void CropParameter::MergeFrom(const CropParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.CropParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CropParameter::UnsafeMergeFrom(const CropParameter& from) {
  GOOGLE_DCHECK(&from != this);
  offset_.UnsafeMergeFrom(from.offset_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_axis()) {
      set_axis(from.axis());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CropParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.CropParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CropParameter::CopyFrom(const CropParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.CropParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CropParameter::IsInitialized() const {

  return true;
}

void CropParameter::Swap(CropParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CropParameter::InternalSwap(CropParameter* other) {
  std::swap(axis_, other->axis_);
  offset_.UnsafeArenaSwap(&other->offset_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CropParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CropParameter_descriptor_;
  metadata.reflection = CropParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CropParameter

// optional int32 axis = 1 [default = 2];
bool CropParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CropParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
void CropParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
void CropParameter::clear_axis() {
  axis_ = 2;
  clear_has_axis();
}
::google::protobuf::int32 CropParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.CropParameter.axis)
  return axis_;
}
void CropParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.CropParameter.axis)
}

// repeated uint32 offset = 2;
int CropParameter::offset_size() const {
  return offset_.size();
}
void CropParameter::clear_offset() {
  offset_.Clear();
}
::google::protobuf::uint32 CropParameter::offset(int index) const {
  // @@protoc_insertion_point(field_get:caffe.CropParameter.offset)
  return offset_.Get(index);
}
void CropParameter::set_offset(int index, ::google::protobuf::uint32 value) {
  offset_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.CropParameter.offset)
}
void CropParameter::add_offset(::google::protobuf::uint32 value) {
  offset_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.CropParameter.offset)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CropParameter::offset() const {
  // @@protoc_insertion_point(field_list:caffe.CropParameter.offset)
  return offset_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CropParameter::mutable_offset() {
  // @@protoc_insertion_point(field_mutable_list:caffe.CropParameter.offset)
  return &offset_;
}

inline const CropParameter* CropParameter::internal_default_instance() {
  return &CropParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* DataParameter_DB_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataParameter_DB_descriptor_;
}
bool DataParameter_DB_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DataParameter_DB DataParameter::LEVELDB;
const DataParameter_DB DataParameter::LMDB;
const DataParameter_DB DataParameter::DB_MIN;
const DataParameter_DB DataParameter::DB_MAX;
const int DataParameter::DB_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataParameter::kSourceFieldNumber;
const int DataParameter::kBatchSizeFieldNumber;
const int DataParameter::kRandSkipFieldNumber;
const int DataParameter::kBackendFieldNumber;
const int DataParameter::kScaleFieldNumber;
const int DataParameter::kMeanFileFieldNumber;
const int DataParameter::kCropSizeFieldNumber;
const int DataParameter::kMirrorFieldNumber;
const int DataParameter::kForceEncodedColorFieldNumber;
const int DataParameter::kPrefetchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataParameter::DataParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.DataParameter)
}

void DataParameter::InitAsDefaultInstance() {
}

DataParameter::DataParameter(const DataParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.DataParameter)
}

void DataParameter::SharedCtor() {
  _cached_size_ = 0;
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mean_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&batch_size_, 0, reinterpret_cast<char*>(&force_encoded_color_) -
    reinterpret_cast<char*>(&batch_size_) + sizeof(force_encoded_color_));
  scale_ = 1;
  prefetch_ = 4u;
}

DataParameter::~DataParameter() {
  // @@protoc_insertion_point(destructor:caffe.DataParameter)
  SharedDtor();
}

void DataParameter::SharedDtor() {
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mean_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataParameter_descriptor_;
}

const DataParameter& DataParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DataParameter> DataParameter_default_instance_;

DataParameter* DataParameter::New(::google::protobuf::Arena* arena) const {
  DataParameter* n = new DataParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.DataParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DataParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DataParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(batch_size_, mirror_);
    if (has_source()) {
      source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    scale_ = 1;
    if (has_mean_file()) {
      mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 768u) {
    force_encoded_color_ = false;
    prefetch_ = 4u;
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.DataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.DataParameter.source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_scale;
        break;
      }

      // optional float scale = 2 [default = 1];
      case 2: {
        if (tag == 21) {
         parse_scale:
          set_has_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mean_file;
        break;
      }

      // optional string mean_file = 3;
      case 3: {
        if (tag == 26) {
         parse_mean_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mean_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mean_file().data(), this->mean_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.DataParameter.mean_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_batch_size;
        break;
      }

      // optional uint32 batch_size = 4;
      case 4: {
        if (tag == 32) {
         parse_batch_size:
          set_has_batch_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_crop_size;
        break;
      }

      // optional uint32 crop_size = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_crop_size:
          set_has_crop_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crop_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_mirror;
        break;
      }

      // optional bool mirror = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_mirror:
          set_has_mirror();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mirror_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_rand_skip;
        break;
      }

      // optional uint32 rand_skip = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_rand_skip:
          set_has_rand_skip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rand_skip_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_backend;
        break;
      }

      // optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];
      case 8: {
        if (tag == 64) {
         parse_backend:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::DataParameter_DB_IsValid(value)) {
            set_backend(static_cast< ::caffe::DataParameter_DB >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_force_encoded_color;
        break;
      }

      // optional bool force_encoded_color = 9 [default = false];
      case 9: {
        if (tag == 72) {
         parse_force_encoded_color:
          set_has_force_encoded_color();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_encoded_color_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_prefetch;
        break;
      }

      // optional uint32 prefetch = 10 [default = 4];
      case 10: {
        if (tag == 80) {
         parse_prefetch:
          set_has_prefetch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prefetch_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.DataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.DataParameter)
  return false;
#undef DO_
}

void DataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.DataParameter)
  // optional string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.DataParameter.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  // optional float scale = 2 [default = 1];
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }

  // optional string mean_file = 3;
  if (has_mean_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), this->mean_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.DataParameter.mean_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mean_file(), output);
  }

  // optional uint32 batch_size = 4;
  if (has_batch_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->batch_size(), output);
  }

  // optional uint32 crop_size = 5 [default = 0];
  if (has_crop_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->crop_size(), output);
  }

  // optional bool mirror = 6 [default = false];
  if (has_mirror()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->mirror(), output);
  }

  // optional uint32 rand_skip = 7 [default = 0];
  if (has_rand_skip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->rand_skip(), output);
  }

  // optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];
  if (has_backend()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->backend(), output);
  }

  // optional bool force_encoded_color = 9 [default = false];
  if (has_force_encoded_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->force_encoded_color(), output);
  }

  // optional uint32 prefetch = 10 [default = 4];
  if (has_prefetch()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->prefetch(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.DataParameter)
}

::google::protobuf::uint8* DataParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.DataParameter)
  // optional string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.DataParameter.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // optional float scale = 2 [default = 1];
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }

  // optional string mean_file = 3;
  if (has_mean_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), this->mean_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.DataParameter.mean_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mean_file(), target);
  }

  // optional uint32 batch_size = 4;
  if (has_batch_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->batch_size(), target);
  }

  // optional uint32 crop_size = 5 [default = 0];
  if (has_crop_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->crop_size(), target);
  }

  // optional bool mirror = 6 [default = false];
  if (has_mirror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->mirror(), target);
  }

  // optional uint32 rand_skip = 7 [default = 0];
  if (has_rand_skip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->rand_skip(), target);
  }

  // optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];
  if (has_backend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->backend(), target);
  }

  // optional bool force_encoded_color = 9 [default = false];
  if (has_force_encoded_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->force_encoded_color(), target);
  }

  // optional uint32 prefetch = 10 [default = 4];
  if (has_prefetch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->prefetch(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.DataParameter)
  return target;
}

size_t DataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.DataParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional uint32 batch_size = 4;
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_size());
    }

    // optional uint32 rand_skip = 7 [default = 0];
    if (has_rand_skip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rand_skip());
    }

    // optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];
    if (has_backend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->backend());
    }

    // optional float scale = 2 [default = 1];
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional string mean_file = 3;
    if (has_mean_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mean_file());
    }

    // optional uint32 crop_size = 5 [default = 0];
    if (has_crop_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crop_size());
    }

    // optional bool mirror = 6 [default = false];
    if (has_mirror()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional bool force_encoded_color = 9 [default = false];
    if (has_force_encoded_color()) {
      total_size += 1 + 1;
    }

    // optional uint32 prefetch = 10 [default = 4];
    if (has_prefetch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prefetch());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.DataParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DataParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DataParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.DataParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.DataParameter)
    UnsafeMergeFrom(*source);
  }
}

void DataParameter::MergeFrom(const DataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.DataParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DataParameter::UnsafeMergeFrom(const DataParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source()) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (from.has_batch_size()) {
      set_batch_size(from.batch_size());
    }
    if (from.has_rand_skip()) {
      set_rand_skip(from.rand_skip());
    }
    if (from.has_backend()) {
      set_backend(from.backend());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_mean_file()) {
      set_has_mean_file();
      mean_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mean_file_);
    }
    if (from.has_crop_size()) {
      set_crop_size(from.crop_size());
    }
    if (from.has_mirror()) {
      set_mirror(from.mirror());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_force_encoded_color()) {
      set_force_encoded_color(from.force_encoded_color());
    }
    if (from.has_prefetch()) {
      set_prefetch(from.prefetch());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void DataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.DataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataParameter::CopyFrom(const DataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.DataParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DataParameter::IsInitialized() const {

  return true;
}

void DataParameter::Swap(DataParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataParameter::InternalSwap(DataParameter* other) {
  source_.Swap(&other->source_);
  std::swap(batch_size_, other->batch_size_);
  std::swap(rand_skip_, other->rand_skip_);
  std::swap(backend_, other->backend_);
  std::swap(scale_, other->scale_);
  mean_file_.Swap(&other->mean_file_);
  std::swap(crop_size_, other->crop_size_);
  std::swap(mirror_, other->mirror_);
  std::swap(force_encoded_color_, other->force_encoded_color_);
  std::swap(prefetch_, other->prefetch_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataParameter_descriptor_;
  metadata.reflection = DataParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataParameter

// optional string source = 1;
bool DataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
void DataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
void DataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
const ::std::string& DataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.source)
  return source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.DataParameter.source)
}
void DataParameter::set_source(const char* value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.DataParameter.source)
}
void DataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.DataParameter.source)
}
::std::string* DataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.DataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.DataParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.DataParameter.source)
}

// optional uint32 batch_size = 4;
bool DataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000002u;
}
void DataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void DataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
::google::protobuf::uint32 DataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.batch_size)
  return batch_size_;
}
void DataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.batch_size)
}

// optional uint32 rand_skip = 7 [default = 0];
bool DataParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DataParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x00000004u;
}
void DataParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x00000004u;
}
void DataParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
::google::protobuf::uint32 DataParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.rand_skip)
  return rand_skip_;
}
void DataParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.rand_skip)
}

// optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];
bool DataParameter::has_backend() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DataParameter::set_has_backend() {
  _has_bits_[0] |= 0x00000008u;
}
void DataParameter::clear_has_backend() {
  _has_bits_[0] &= ~0x00000008u;
}
void DataParameter::clear_backend() {
  backend_ = 0;
  clear_has_backend();
}
::caffe::DataParameter_DB DataParameter::backend() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.backend)
  return static_cast< ::caffe::DataParameter_DB >(backend_);
}
void DataParameter::set_backend(::caffe::DataParameter_DB value) {
  assert(::caffe::DataParameter_DB_IsValid(value));
  set_has_backend();
  backend_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.backend)
}

// optional float scale = 2 [default = 1];
bool DataParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DataParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000010u;
}
void DataParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000010u;
}
void DataParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
float DataParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.scale)
  return scale_;
}
void DataParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.scale)
}

// optional string mean_file = 3;
bool DataParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DataParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000020u;
}
void DataParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000020u;
}
void DataParameter::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mean_file();
}
const ::std::string& DataParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.mean_file)
  return mean_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DataParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.DataParameter.mean_file)
}
void DataParameter::set_mean_file(const char* value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.DataParameter.mean_file)
}
void DataParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.DataParameter.mean_file)
}
::std::string* DataParameter::mutable_mean_file() {
  set_has_mean_file();
  // @@protoc_insertion_point(field_mutable:caffe.DataParameter.mean_file)
  return mean_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DataParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:caffe.DataParameter.mean_file)
  clear_has_mean_file();
  return mean_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DataParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file != NULL) {
    set_has_mean_file();
  } else {
    clear_has_mean_file();
  }
  mean_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.DataParameter.mean_file)
}

// optional uint32 crop_size = 5 [default = 0];
bool DataParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DataParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000040u;
}
void DataParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000040u;
}
void DataParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
::google::protobuf::uint32 DataParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.crop_size)
  return crop_size_;
}
void DataParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.crop_size)
}

// optional bool mirror = 6 [default = false];
bool DataParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DataParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000080u;
}
void DataParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000080u;
}
void DataParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
bool DataParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.mirror)
  return mirror_;
}
void DataParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.mirror)
}

// optional bool force_encoded_color = 9 [default = false];
bool DataParameter::has_force_encoded_color() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void DataParameter::set_has_force_encoded_color() {
  _has_bits_[0] |= 0x00000100u;
}
void DataParameter::clear_has_force_encoded_color() {
  _has_bits_[0] &= ~0x00000100u;
}
void DataParameter::clear_force_encoded_color() {
  force_encoded_color_ = false;
  clear_has_force_encoded_color();
}
bool DataParameter::force_encoded_color() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.force_encoded_color)
  return force_encoded_color_;
}
void DataParameter::set_force_encoded_color(bool value) {
  set_has_force_encoded_color();
  force_encoded_color_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.force_encoded_color)
}

// optional uint32 prefetch = 10 [default = 4];
bool DataParameter::has_prefetch() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void DataParameter::set_has_prefetch() {
  _has_bits_[0] |= 0x00000200u;
}
void DataParameter::clear_has_prefetch() {
  _has_bits_[0] &= ~0x00000200u;
}
void DataParameter::clear_prefetch() {
  prefetch_ = 4u;
  clear_has_prefetch();
}
::google::protobuf::uint32 DataParameter::prefetch() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.prefetch)
  return prefetch_;
}
void DataParameter::set_prefetch(::google::protobuf::uint32 value) {
  set_has_prefetch();
  prefetch_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.prefetch)
}

inline const DataParameter* DataParameter::internal_default_instance() {
  return &DataParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DropoutParameter::kDropoutRatioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DropoutParameter::DropoutParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.DropoutParameter)
}

void DropoutParameter::InitAsDefaultInstance() {
}

DropoutParameter::DropoutParameter(const DropoutParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.DropoutParameter)
}

void DropoutParameter::SharedCtor() {
  _cached_size_ = 0;
  dropout_ratio_ = 0.5f;
}

DropoutParameter::~DropoutParameter() {
  // @@protoc_insertion_point(destructor:caffe.DropoutParameter)
  SharedDtor();
}

void DropoutParameter::SharedDtor() {
}

void DropoutParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DropoutParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DropoutParameter_descriptor_;
}

const DropoutParameter& DropoutParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DropoutParameter> DropoutParameter_default_instance_;

DropoutParameter* DropoutParameter::New(::google::protobuf::Arena* arena) const {
  DropoutParameter* n = new DropoutParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DropoutParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.DropoutParameter)
  dropout_ratio_ = 0.5f;
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DropoutParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.DropoutParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float dropout_ratio = 1 [default = 0.5];
      case 1: {
        if (tag == 13) {
          set_has_dropout_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dropout_ratio_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.DropoutParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.DropoutParameter)
  return false;
#undef DO_
}

void DropoutParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.DropoutParameter)
  // optional float dropout_ratio = 1 [default = 0.5];
  if (has_dropout_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->dropout_ratio(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.DropoutParameter)
}

::google::protobuf::uint8* DropoutParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.DropoutParameter)
  // optional float dropout_ratio = 1 [default = 0.5];
  if (has_dropout_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->dropout_ratio(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.DropoutParameter)
  return target;
}

size_t DropoutParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.DropoutParameter)
  size_t total_size = 0;

  // optional float dropout_ratio = 1 [default = 0.5];
  if (has_dropout_ratio()) {
    total_size += 1 + 4;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DropoutParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.DropoutParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DropoutParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DropoutParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.DropoutParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.DropoutParameter)
    UnsafeMergeFrom(*source);
  }
}

void DropoutParameter::MergeFrom(const DropoutParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.DropoutParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DropoutParameter::UnsafeMergeFrom(const DropoutParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dropout_ratio()) {
      set_dropout_ratio(from.dropout_ratio());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void DropoutParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.DropoutParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropoutParameter::CopyFrom(const DropoutParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.DropoutParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DropoutParameter::IsInitialized() const {

  return true;
}

void DropoutParameter::Swap(DropoutParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DropoutParameter::InternalSwap(DropoutParameter* other) {
  std::swap(dropout_ratio_, other->dropout_ratio_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DropoutParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DropoutParameter_descriptor_;
  metadata.reflection = DropoutParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DropoutParameter

// optional float dropout_ratio = 1 [default = 0.5];
bool DropoutParameter::has_dropout_ratio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DropoutParameter::set_has_dropout_ratio() {
  _has_bits_[0] |= 0x00000001u;
}
void DropoutParameter::clear_has_dropout_ratio() {
  _has_bits_[0] &= ~0x00000001u;
}
void DropoutParameter::clear_dropout_ratio() {
  dropout_ratio_ = 0.5f;
  clear_has_dropout_ratio();
}
float DropoutParameter::dropout_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.DropoutParameter.dropout_ratio)
  return dropout_ratio_;
}
void DropoutParameter::set_dropout_ratio(float value) {
  set_has_dropout_ratio();
  dropout_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.DropoutParameter.dropout_ratio)
}

inline const DropoutParameter* DropoutParameter::internal_default_instance() {
  return &DropoutParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DummyDataParameter::kDataFillerFieldNumber;
const int DummyDataParameter::kShapeFieldNumber;
const int DummyDataParameter::kNumFieldNumber;
const int DummyDataParameter::kChannelsFieldNumber;
const int DummyDataParameter::kHeightFieldNumber;
const int DummyDataParameter::kWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DummyDataParameter::DummyDataParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.DummyDataParameter)
}

void DummyDataParameter::InitAsDefaultInstance() {
}

DummyDataParameter::DummyDataParameter(const DummyDataParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.DummyDataParameter)
}

void DummyDataParameter::SharedCtor() {
  _cached_size_ = 0;
}

DummyDataParameter::~DummyDataParameter() {
  // @@protoc_insertion_point(destructor:caffe.DummyDataParameter)
  SharedDtor();
}

void DummyDataParameter::SharedDtor() {
}

void DummyDataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DummyDataParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DummyDataParameter_descriptor_;
}

const DummyDataParameter& DummyDataParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DummyDataParameter> DummyDataParameter_default_instance_;

DummyDataParameter* DummyDataParameter::New(::google::protobuf::Arena* arena) const {
  DummyDataParameter* n = new DummyDataParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DummyDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.DummyDataParameter)
  data_filler_.Clear();
  shape_.Clear();
  num_.Clear();
  channels_.Clear();
  height_.Clear();
  width_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DummyDataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.DummyDataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .caffe.FillerParameter data_filler = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_data_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_data_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_data_filler;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // repeated uint32 num = 2;
      case 2: {
        if (tag == 16) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_num())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_num())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num;
        if (input->ExpectTag(24)) goto parse_channels;
        break;
      }

      // repeated uint32 channels = 3;
      case 3: {
        if (tag == 24) {
         parse_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_channels())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_channels())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_channels;
        if (input->ExpectTag(32)) goto parse_height;
        break;
      }

      // repeated uint32 height = 4;
      case 4: {
        if (tag == 32) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_height())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_height())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_height;
        if (input->ExpectTag(40)) goto parse_width;
        break;
      }

      // repeated uint32 width = 5;
      case 5: {
        if (tag == 40) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_width())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_width())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_width;
        if (input->ExpectTag(50)) goto parse_shape;
        break;
      }

      // repeated .caffe.BlobShape shape = 6;
      case 6: {
        if (tag == 50) {
         parse_shape:
          DO_(input->IncrementRecursionDepth());
         parse_loop_shape:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_shape()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_shape;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.DummyDataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.DummyDataParameter)
  return false;
#undef DO_
}

void DummyDataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.DummyDataParameter)
  // repeated .caffe.FillerParameter data_filler = 1;
  for (unsigned int i = 0, n = this->data_filler_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data_filler(i), output);
  }

  // repeated uint32 num = 2;
  for (int i = 0; i < this->num_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->num(i), output);
  }

  // repeated uint32 channels = 3;
  for (int i = 0; i < this->channels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->channels(i), output);
  }

  // repeated uint32 height = 4;
  for (int i = 0; i < this->height_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->height(i), output);
  }

  // repeated uint32 width = 5;
  for (int i = 0; i < this->width_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->width(i), output);
  }

  // repeated .caffe.BlobShape shape = 6;
  for (unsigned int i = 0, n = this->shape_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->shape(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.DummyDataParameter)
}

::google::protobuf::uint8* DummyDataParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.DummyDataParameter)
  // repeated .caffe.FillerParameter data_filler = 1;
  for (unsigned int i = 0, n = this->data_filler_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->data_filler(i), false, target);
  }

  // repeated uint32 num = 2;
  for (int i = 0; i < this->num_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->num(i), target);
  }

  // repeated uint32 channels = 3;
  for (int i = 0; i < this->channels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->channels(i), target);
  }

  // repeated uint32 height = 4;
  for (int i = 0; i < this->height_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->height(i), target);
  }

  // repeated uint32 width = 5;
  for (int i = 0; i < this->width_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->width(i), target);
  }

  // repeated .caffe.BlobShape shape = 6;
  for (unsigned int i = 0, n = this->shape_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->shape(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.DummyDataParameter)
  return target;
}

size_t DummyDataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.DummyDataParameter)
  size_t total_size = 0;

  // repeated .caffe.FillerParameter data_filler = 1;
  {
    unsigned int count = this->data_filler_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data_filler(i));
    }
  }

  // repeated .caffe.BlobShape shape = 6;
  {
    unsigned int count = this->shape_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shape(i));
    }
  }

  // repeated uint32 num = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->num_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->num(i));
    }
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->num_size());
    total_size += data_size;
  }

  // repeated uint32 channels = 3;
  {
    size_t data_size = 0;
    unsigned int count = this->channels_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->channels(i));
    }
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->channels_size());
    total_size += data_size;
  }

  // repeated uint32 height = 4;
  {
    size_t data_size = 0;
    unsigned int count = this->height_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->height(i));
    }
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->height_size());
    total_size += data_size;
  }

  // repeated uint32 width = 5;
  {
    size_t data_size = 0;
    unsigned int count = this->width_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->width(i));
    }
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->width_size());
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DummyDataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.DummyDataParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DummyDataParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DummyDataParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.DummyDataParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.DummyDataParameter)
    UnsafeMergeFrom(*source);
  }
}

void DummyDataParameter::MergeFrom(const DummyDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.DummyDataParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DummyDataParameter::UnsafeMergeFrom(const DummyDataParameter& from) {
  GOOGLE_DCHECK(&from != this);
  data_filler_.MergeFrom(from.data_filler_);
  shape_.MergeFrom(from.shape_);
  num_.UnsafeMergeFrom(from.num_);
  channels_.UnsafeMergeFrom(from.channels_);
  height_.UnsafeMergeFrom(from.height_);
  width_.UnsafeMergeFrom(from.width_);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void DummyDataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.DummyDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DummyDataParameter::CopyFrom(const DummyDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.DummyDataParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DummyDataParameter::IsInitialized() const {

  return true;
}

void DummyDataParameter::Swap(DummyDataParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DummyDataParameter::InternalSwap(DummyDataParameter* other) {
  data_filler_.UnsafeArenaSwap(&other->data_filler_);
  shape_.UnsafeArenaSwap(&other->shape_);
  num_.UnsafeArenaSwap(&other->num_);
  channels_.UnsafeArenaSwap(&other->channels_);
  height_.UnsafeArenaSwap(&other->height_);
  width_.UnsafeArenaSwap(&other->width_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DummyDataParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DummyDataParameter_descriptor_;
  metadata.reflection = DummyDataParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DummyDataParameter

// repeated .caffe.FillerParameter data_filler = 1;
int DummyDataParameter::data_filler_size() const {
  return data_filler_.size();
}
void DummyDataParameter::clear_data_filler() {
  data_filler_.Clear();
}
const ::caffe::FillerParameter& DummyDataParameter::data_filler(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.data_filler)
  return data_filler_.Get(index);
}
::caffe::FillerParameter* DummyDataParameter::mutable_data_filler(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.DummyDataParameter.data_filler)
  return data_filler_.Mutable(index);
}
::caffe::FillerParameter* DummyDataParameter::add_data_filler() {
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.data_filler)
  return data_filler_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::FillerParameter >*
DummyDataParameter::mutable_data_filler() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.data_filler)
  return &data_filler_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::FillerParameter >&
DummyDataParameter::data_filler() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.data_filler)
  return data_filler_;
}

// repeated .caffe.BlobShape shape = 6;
int DummyDataParameter::shape_size() const {
  return shape_.size();
}
void DummyDataParameter::clear_shape() {
  shape_.Clear();
}
const ::caffe::BlobShape& DummyDataParameter::shape(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.shape)
  return shape_.Get(index);
}
::caffe::BlobShape* DummyDataParameter::mutable_shape(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.DummyDataParameter.shape)
  return shape_.Mutable(index);
}
::caffe::BlobShape* DummyDataParameter::add_shape() {
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.shape)
  return shape_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
DummyDataParameter::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.shape)
  return &shape_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
DummyDataParameter::shape() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.shape)
  return shape_;
}

// repeated uint32 num = 2;
int DummyDataParameter::num_size() const {
  return num_.size();
}
void DummyDataParameter::clear_num() {
  num_.Clear();
}
::google::protobuf::uint32 DummyDataParameter::num(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.num)
  return num_.Get(index);
}
void DummyDataParameter::set_num(int index, ::google::protobuf::uint32 value) {
  num_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DummyDataParameter.num)
}
void DummyDataParameter::add_num(::google::protobuf::uint32 value) {
  num_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.num)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DummyDataParameter::num() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.num)
  return num_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DummyDataParameter::mutable_num() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.num)
  return &num_;
}

// repeated uint32 channels = 3;
int DummyDataParameter::channels_size() const {
  return channels_.size();
}
void DummyDataParameter::clear_channels() {
  channels_.Clear();
}
::google::protobuf::uint32 DummyDataParameter::channels(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.channels)
  return channels_.Get(index);
}
void DummyDataParameter::set_channels(int index, ::google::protobuf::uint32 value) {
  channels_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DummyDataParameter.channels)
}
void DummyDataParameter::add_channels(::google::protobuf::uint32 value) {
  channels_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.channels)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DummyDataParameter::channels() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.channels)
  return channels_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DummyDataParameter::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.channels)
  return &channels_;
}

// repeated uint32 height = 4;
int DummyDataParameter::height_size() const {
  return height_.size();
}
void DummyDataParameter::clear_height() {
  height_.Clear();
}
::google::protobuf::uint32 DummyDataParameter::height(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.height)
  return height_.Get(index);
}
void DummyDataParameter::set_height(int index, ::google::protobuf::uint32 value) {
  height_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DummyDataParameter.height)
}
void DummyDataParameter::add_height(::google::protobuf::uint32 value) {
  height_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.height)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DummyDataParameter::height() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.height)
  return height_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DummyDataParameter::mutable_height() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.height)
  return &height_;
}

// repeated uint32 width = 5;
int DummyDataParameter::width_size() const {
  return width_.size();
}
void DummyDataParameter::clear_width() {
  width_.Clear();
}
::google::protobuf::uint32 DummyDataParameter::width(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.width)
  return width_.Get(index);
}
void DummyDataParameter::set_width(int index, ::google::protobuf::uint32 value) {
  width_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DummyDataParameter.width)
}
void DummyDataParameter::add_width(::google::protobuf::uint32 value) {
  width_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.width)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DummyDataParameter::width() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.width)
  return width_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DummyDataParameter::mutable_width() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.width)
  return &width_;
}

inline const DummyDataParameter* DummyDataParameter::internal_default_instance() {
  return &DummyDataParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* EltwiseParameter_EltwiseOp_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EltwiseParameter_EltwiseOp_descriptor_;
}
bool EltwiseParameter_EltwiseOp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EltwiseParameter_EltwiseOp EltwiseParameter::PROD;
const EltwiseParameter_EltwiseOp EltwiseParameter::SUM;
const EltwiseParameter_EltwiseOp EltwiseParameter::MAX;
const EltwiseParameter_EltwiseOp EltwiseParameter::EltwiseOp_MIN;
const EltwiseParameter_EltwiseOp EltwiseParameter::EltwiseOp_MAX;
const int EltwiseParameter::EltwiseOp_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EltwiseParameter::kOperationFieldNumber;
const int EltwiseParameter::kCoeffFieldNumber;
const int EltwiseParameter::kStableProdGradFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EltwiseParameter::EltwiseParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.EltwiseParameter)
}

void EltwiseParameter::InitAsDefaultInstance() {
}

EltwiseParameter::EltwiseParameter(const EltwiseParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.EltwiseParameter)
}

void EltwiseParameter::SharedCtor() {
  _cached_size_ = 0;
  operation_ = 1;
  stable_prod_grad_ = true;
}

EltwiseParameter::~EltwiseParameter() {
  // @@protoc_insertion_point(destructor:caffe.EltwiseParameter)
  SharedDtor();
}

void EltwiseParameter::SharedDtor() {
}

void EltwiseParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EltwiseParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EltwiseParameter_descriptor_;
}

const EltwiseParameter& EltwiseParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EltwiseParameter> EltwiseParameter_default_instance_;

EltwiseParameter* EltwiseParameter::New(::google::protobuf::Arena* arena) const {
  EltwiseParameter* n = new EltwiseParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EltwiseParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.EltwiseParameter)
  if (_has_bits_[0 / 32] & 5u) {
    operation_ = 1;
    stable_prod_grad_ = true;
  }
  coeff_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EltwiseParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.EltwiseParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::EltwiseParameter_EltwiseOp_IsValid(value)) {
            set_operation(static_cast< ::caffe::EltwiseParameter_EltwiseOp >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_coeff;
        break;
      }

      // repeated float coeff = 2;
      case 2: {
        if (tag == 21) {
         parse_coeff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21, input, this->mutable_coeff())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_coeff())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_coeff;
        if (input->ExpectTag(24)) goto parse_stable_prod_grad;
        break;
      }

      // optional bool stable_prod_grad = 3 [default = true];
      case 3: {
        if (tag == 24) {
         parse_stable_prod_grad:
          set_has_stable_prod_grad();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stable_prod_grad_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.EltwiseParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.EltwiseParameter)
  return false;
#undef DO_
}

void EltwiseParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.EltwiseParameter)
  // optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->operation(), output);
  }

  // repeated float coeff = 2;
  for (int i = 0; i < this->coeff_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->coeff(i), output);
  }

  // optional bool stable_prod_grad = 3 [default = true];
  if (has_stable_prod_grad()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->stable_prod_grad(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.EltwiseParameter)
}

::google::protobuf::uint8* EltwiseParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.EltwiseParameter)
  // optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
  if (has_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->operation(), target);
  }

  // repeated float coeff = 2;
  for (int i = 0; i < this->coeff_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(2, this->coeff(i), target);
  }

  // optional bool stable_prod_grad = 3 [default = true];
  if (has_stable_prod_grad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->stable_prod_grad(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.EltwiseParameter)
  return target;
}

size_t EltwiseParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.EltwiseParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 5u) {
    // optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
    }

    // optional bool stable_prod_grad = 3 [default = true];
    if (has_stable_prod_grad()) {
      total_size += 1 + 1;
    }

  }
  // repeated float coeff = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->coeff_size();
    data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->coeff_size());
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EltwiseParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.EltwiseParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EltwiseParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EltwiseParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.EltwiseParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.EltwiseParameter)
    UnsafeMergeFrom(*source);
  }
}

void EltwiseParameter::MergeFrom(const EltwiseParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.EltwiseParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EltwiseParameter::UnsafeMergeFrom(const EltwiseParameter& from) {
  GOOGLE_DCHECK(&from != this);
  coeff_.UnsafeMergeFrom(from.coeff_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operation()) {
      set_operation(from.operation());
    }
    if (from.has_stable_prod_grad()) {
      set_stable_prod_grad(from.stable_prod_grad());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void EltwiseParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.EltwiseParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EltwiseParameter::CopyFrom(const EltwiseParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.EltwiseParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EltwiseParameter::IsInitialized() const {

  return true;
}

void EltwiseParameter::Swap(EltwiseParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EltwiseParameter::InternalSwap(EltwiseParameter* other) {
  std::swap(operation_, other->operation_);
  coeff_.UnsafeArenaSwap(&other->coeff_);
  std::swap(stable_prod_grad_, other->stable_prod_grad_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EltwiseParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EltwiseParameter_descriptor_;
  metadata.reflection = EltwiseParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EltwiseParameter

// optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
bool EltwiseParameter::has_operation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EltwiseParameter::set_has_operation() {
  _has_bits_[0] |= 0x00000001u;
}
void EltwiseParameter::clear_has_operation() {
  _has_bits_[0] &= ~0x00000001u;
}
void EltwiseParameter::clear_operation() {
  operation_ = 1;
  clear_has_operation();
}
::caffe::EltwiseParameter_EltwiseOp EltwiseParameter::operation() const {
  // @@protoc_insertion_point(field_get:caffe.EltwiseParameter.operation)
  return static_cast< ::caffe::EltwiseParameter_EltwiseOp >(operation_);
}
void EltwiseParameter::set_operation(::caffe::EltwiseParameter_EltwiseOp value) {
  assert(::caffe::EltwiseParameter_EltwiseOp_IsValid(value));
  set_has_operation();
  operation_ = value;
  // @@protoc_insertion_point(field_set:caffe.EltwiseParameter.operation)
}

// repeated float coeff = 2;
int EltwiseParameter::coeff_size() const {
  return coeff_.size();
}
void EltwiseParameter::clear_coeff() {
  coeff_.Clear();
}
float EltwiseParameter::coeff(int index) const {
  // @@protoc_insertion_point(field_get:caffe.EltwiseParameter.coeff)
  return coeff_.Get(index);
}
void EltwiseParameter::set_coeff(int index, float value) {
  coeff_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.EltwiseParameter.coeff)
}
void EltwiseParameter::add_coeff(float value) {
  coeff_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.EltwiseParameter.coeff)
}
const ::google::protobuf::RepeatedField< float >&
EltwiseParameter::coeff() const {
  // @@protoc_insertion_point(field_list:caffe.EltwiseParameter.coeff)
  return coeff_;
}
::google::protobuf::RepeatedField< float >*
EltwiseParameter::mutable_coeff() {
  // @@protoc_insertion_point(field_mutable_list:caffe.EltwiseParameter.coeff)
  return &coeff_;
}

// optional bool stable_prod_grad = 3 [default = true];
bool EltwiseParameter::has_stable_prod_grad() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EltwiseParameter::set_has_stable_prod_grad() {
  _has_bits_[0] |= 0x00000004u;
}
void EltwiseParameter::clear_has_stable_prod_grad() {
  _has_bits_[0] &= ~0x00000004u;
}
void EltwiseParameter::clear_stable_prod_grad() {
  stable_prod_grad_ = true;
  clear_has_stable_prod_grad();
}
bool EltwiseParameter::stable_prod_grad() const {
  // @@protoc_insertion_point(field_get:caffe.EltwiseParameter.stable_prod_grad)
  return stable_prod_grad_;
}
void EltwiseParameter::set_stable_prod_grad(bool value) {
  set_has_stable_prod_grad();
  stable_prod_grad_ = value;
  // @@protoc_insertion_point(field_set:caffe.EltwiseParameter.stable_prod_grad)
}

inline const EltwiseParameter* EltwiseParameter::internal_default_instance() {
  return &EltwiseParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ELUParameter::kAlphaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ELUParameter::ELUParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ELUParameter)
}

void ELUParameter::InitAsDefaultInstance() {
}

ELUParameter::ELUParameter(const ELUParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ELUParameter)
}

void ELUParameter::SharedCtor() {
  _cached_size_ = 0;
  alpha_ = 1;
}

ELUParameter::~ELUParameter() {
  // @@protoc_insertion_point(destructor:caffe.ELUParameter)
  SharedDtor();
}

void ELUParameter::SharedDtor() {
}

void ELUParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ELUParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ELUParameter_descriptor_;
}

const ELUParameter& ELUParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ELUParameter> ELUParameter_default_instance_;

ELUParameter* ELUParameter::New(::google::protobuf::Arena* arena) const {
  ELUParameter* n = new ELUParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ELUParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ELUParameter)
  alpha_ = 1;
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ELUParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ELUParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float alpha = 1 [default = 1];
      case 1: {
        if (tag == 13) {
          set_has_alpha();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ELUParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ELUParameter)
  return false;
#undef DO_
}

void ELUParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ELUParameter)
  // optional float alpha = 1 [default = 1];
  if (has_alpha()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->alpha(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ELUParameter)
}

::google::protobuf::uint8* ELUParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ELUParameter)
  // optional float alpha = 1 [default = 1];
  if (has_alpha()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->alpha(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ELUParameter)
  return target;
}

size_t ELUParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ELUParameter)
  size_t total_size = 0;

  // optional float alpha = 1 [default = 1];
  if (has_alpha()) {
    total_size += 1 + 4;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ELUParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ELUParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ELUParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ELUParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ELUParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ELUParameter)
    UnsafeMergeFrom(*source);
  }
}

void ELUParameter::MergeFrom(const ELUParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ELUParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ELUParameter::UnsafeMergeFrom(const ELUParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alpha()) {
      set_alpha(from.alpha());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ELUParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ELUParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ELUParameter::CopyFrom(const ELUParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ELUParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ELUParameter::IsInitialized() const {

  return true;
}

void ELUParameter::Swap(ELUParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ELUParameter::InternalSwap(ELUParameter* other) {
  std::swap(alpha_, other->alpha_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ELUParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ELUParameter_descriptor_;
  metadata.reflection = ELUParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ELUParameter

// optional float alpha = 1 [default = 1];
bool ELUParameter::has_alpha() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ELUParameter::set_has_alpha() {
  _has_bits_[0] |= 0x00000001u;
}
void ELUParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000001u;
}
void ELUParameter::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
float ELUParameter::alpha() const {
  // @@protoc_insertion_point(field_get:caffe.ELUParameter.alpha)
  return alpha_;
}
void ELUParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:caffe.ELUParameter.alpha)
}

inline const ELUParameter* ELUParameter::internal_default_instance() {
  return &ELUParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EmbedParameter::kNumOutputFieldNumber;
const int EmbedParameter::kInputDimFieldNumber;
const int EmbedParameter::kBiasTermFieldNumber;
const int EmbedParameter::kWeightFillerFieldNumber;
const int EmbedParameter::kBiasFillerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmbedParameter::EmbedParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.EmbedParameter)
}

void EmbedParameter::InitAsDefaultInstance() {
  weight_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  bias_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
}

EmbedParameter::EmbedParameter(const EmbedParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.EmbedParameter)
}

void EmbedParameter::SharedCtor() {
  _cached_size_ = 0;
  weight_filler_ = NULL;
  bias_filler_ = NULL;
  ::memset(&num_output_, 0, reinterpret_cast<char*>(&input_dim_) -
    reinterpret_cast<char*>(&num_output_) + sizeof(input_dim_));
  bias_term_ = true;
}

EmbedParameter::~EmbedParameter() {
  // @@protoc_insertion_point(destructor:caffe.EmbedParameter)
  SharedDtor();
}

void EmbedParameter::SharedDtor() {
  if (this != &EmbedParameter_default_instance_.get()) {
    delete weight_filler_;
    delete bias_filler_;
  }
}

void EmbedParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmbedParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmbedParameter_descriptor_;
}

const EmbedParameter& EmbedParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EmbedParameter> EmbedParameter_default_instance_;

EmbedParameter* EmbedParameter::New(::google::protobuf::Arena* arena) const {
  EmbedParameter* n = new EmbedParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmbedParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.EmbedParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(EmbedParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EmbedParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(num_output_, input_dim_);
    bias_term_ = true;
    if (has_weight_filler()) {
      if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
    }
    if (has_bias_filler()) {
      if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EmbedParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.EmbedParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_output = 1;
      case 1: {
        if (tag == 8) {
          set_has_num_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_input_dim;
        break;
      }

      // optional uint32 input_dim = 2;
      case 2: {
        if (tag == 16) {
         parse_input_dim:
          set_has_input_dim();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &input_dim_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bias_term;
        break;
      }

      // optional bool bias_term = 3 [default = true];
      case 3: {
        if (tag == 24) {
         parse_bias_term:
          set_has_bias_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bias_term_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_weight_filler;
        break;
      }

      // optional .caffe.FillerParameter weight_filler = 4;
      case 4: {
        if (tag == 34) {
         parse_weight_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_bias_filler;
        break;
      }

      // optional .caffe.FillerParameter bias_filler = 5;
      case 5: {
        if (tag == 42) {
         parse_bias_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.EmbedParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.EmbedParameter)
  return false;
#undef DO_
}

void EmbedParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.EmbedParameter)
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
  }

  // optional uint32 input_dim = 2;
  if (has_input_dim()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->input_dim(), output);
  }

  // optional bool bias_term = 3 [default = true];
  if (has_bias_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bias_term(), output);
  }

  // optional .caffe.FillerParameter weight_filler = 4;
  if (has_weight_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->weight_filler_, output);
  }

  // optional .caffe.FillerParameter bias_filler = 5;
  if (has_bias_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->bias_filler_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.EmbedParameter)
}

::google::protobuf::uint8* EmbedParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.EmbedParameter)
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
  }

  // optional uint32 input_dim = 2;
  if (has_input_dim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->input_dim(), target);
  }

  // optional bool bias_term = 3 [default = true];
  if (has_bias_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bias_term(), target);
  }

  // optional .caffe.FillerParameter weight_filler = 4;
  if (has_weight_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->weight_filler_, false, target);
  }

  // optional .caffe.FillerParameter bias_filler = 5;
  if (has_bias_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->bias_filler_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.EmbedParameter)
  return target;
}

size_t EmbedParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.EmbedParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 num_output = 1;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional uint32 input_dim = 2;
    if (has_input_dim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->input_dim());
    }

    // optional bool bias_term = 3 [default = true];
    if (has_bias_term()) {
      total_size += 1 + 1;
    }

    // optional .caffe.FillerParameter weight_filler = 4;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->weight_filler_);
    }

    // optional .caffe.FillerParameter bias_filler = 5;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bias_filler_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmbedParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.EmbedParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EmbedParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EmbedParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.EmbedParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.EmbedParameter)
    UnsafeMergeFrom(*source);
  }
}

void EmbedParameter::MergeFrom(const EmbedParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.EmbedParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EmbedParameter::UnsafeMergeFrom(const EmbedParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_output()) {
      set_num_output(from.num_output());
    }
    if (from.has_input_dim()) {
      set_input_dim(from.input_dim());
    }
    if (from.has_bias_term()) {
      set_bias_term(from.bias_term());
    }
    if (from.has_weight_filler()) {
      mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
    }
    if (from.has_bias_filler()) {
      mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void EmbedParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.EmbedParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmbedParameter::CopyFrom(const EmbedParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.EmbedParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EmbedParameter::IsInitialized() const {

  return true;
}

void EmbedParameter::Swap(EmbedParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmbedParameter::InternalSwap(EmbedParameter* other) {
  std::swap(num_output_, other->num_output_);
  std::swap(input_dim_, other->input_dim_);
  std::swap(bias_term_, other->bias_term_);
  std::swap(weight_filler_, other->weight_filler_);
  std::swap(bias_filler_, other->bias_filler_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmbedParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmbedParameter_descriptor_;
  metadata.reflection = EmbedParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmbedParameter

// optional uint32 num_output = 1;
bool EmbedParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EmbedParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
void EmbedParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
void EmbedParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
::google::protobuf::uint32 EmbedParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.EmbedParameter.num_output)
  return num_output_;
}
void EmbedParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.EmbedParameter.num_output)
}

// optional uint32 input_dim = 2;
bool EmbedParameter::has_input_dim() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EmbedParameter::set_has_input_dim() {
  _has_bits_[0] |= 0x00000002u;
}
void EmbedParameter::clear_has_input_dim() {
  _has_bits_[0] &= ~0x00000002u;
}
void EmbedParameter::clear_input_dim() {
  input_dim_ = 0u;
  clear_has_input_dim();
}
::google::protobuf::uint32 EmbedParameter::input_dim() const {
  // @@protoc_insertion_point(field_get:caffe.EmbedParameter.input_dim)
  return input_dim_;
}
void EmbedParameter::set_input_dim(::google::protobuf::uint32 value) {
  set_has_input_dim();
  input_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.EmbedParameter.input_dim)
}

// optional bool bias_term = 3 [default = true];
bool EmbedParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EmbedParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000004u;
}
void EmbedParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000004u;
}
void EmbedParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
bool EmbedParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.EmbedParameter.bias_term)
  return bias_term_;
}
void EmbedParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.EmbedParameter.bias_term)
}

// optional .caffe.FillerParameter weight_filler = 4;
bool EmbedParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EmbedParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000008u;
}
void EmbedParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000008u;
}
void EmbedParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
const ::caffe::FillerParameter& EmbedParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.EmbedParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
::caffe::FillerParameter* EmbedParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.EmbedParameter.weight_filler)
  return weight_filler_;
}
::caffe::FillerParameter* EmbedParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.EmbedParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
void EmbedParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.EmbedParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 5;
bool EmbedParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void EmbedParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000010u;
}
void EmbedParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000010u;
}
void EmbedParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
const ::caffe::FillerParameter& EmbedParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.EmbedParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
::caffe::FillerParameter* EmbedParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.EmbedParameter.bias_filler)
  return bias_filler_;
}
::caffe::FillerParameter* EmbedParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.EmbedParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
void EmbedParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.EmbedParameter.bias_filler)
}

inline const EmbedParameter* EmbedParameter::internal_default_instance() {
  return &EmbedParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExpParameter::kBaseFieldNumber;
const int ExpParameter::kScaleFieldNumber;
const int ExpParameter::kShiftFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExpParameter::ExpParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ExpParameter)
}

void ExpParameter::InitAsDefaultInstance() {
}

ExpParameter::ExpParameter(const ExpParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ExpParameter)
}

void ExpParameter::SharedCtor() {
  _cached_size_ = 0;
  shift_ = 0;
  base_ = -1;
  scale_ = 1;
}

ExpParameter::~ExpParameter() {
  // @@protoc_insertion_point(destructor:caffe.ExpParameter)
  SharedDtor();
}

void ExpParameter::SharedDtor() {
}

void ExpParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExpParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExpParameter_descriptor_;
}

const ExpParameter& ExpParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ExpParameter> ExpParameter_default_instance_;

ExpParameter* ExpParameter::New(::google::protobuf::Arena* arena) const {
  ExpParameter* n = new ExpParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExpParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ExpParameter)
  if (_has_bits_[0 / 32] & 7u) {
    base_ = -1;
    scale_ = 1;
    shift_ = 0;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ExpParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ExpParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float base = 1 [default = -1];
      case 1: {
        if (tag == 13) {
          set_has_base();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &base_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_scale;
        break;
      }

      // optional float scale = 2 [default = 1];
      case 2: {
        if (tag == 21) {
         parse_scale:
          set_has_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_shift;
        break;
      }

      // optional float shift = 3 [default = 0];
      case 3: {
        if (tag == 29) {
         parse_shift:
          set_has_shift();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shift_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ExpParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ExpParameter)
  return false;
#undef DO_
}

void ExpParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ExpParameter)
  // optional float base = 1 [default = -1];
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->base(), output);
  }

  // optional float scale = 2 [default = 1];
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }

  // optional float shift = 3 [default = 0];
  if (has_shift()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->shift(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ExpParameter)
}

::google::protobuf::uint8* ExpParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ExpParameter)
  // optional float base = 1 [default = -1];
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->base(), target);
  }

  // optional float scale = 2 [default = 1];
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }

  // optional float shift = 3 [default = 0];
  if (has_shift()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->shift(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ExpParameter)
  return target;
}

size_t ExpParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ExpParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional float base = 1 [default = -1];
    if (has_base()) {
      total_size += 1 + 4;
    }

    // optional float scale = 2 [default = 1];
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional float shift = 3 [default = 0];
    if (has_shift()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExpParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ExpParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ExpParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExpParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ExpParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ExpParameter)
    UnsafeMergeFrom(*source);
  }
}

void ExpParameter::MergeFrom(const ExpParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ExpParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ExpParameter::UnsafeMergeFrom(const ExpParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      set_base(from.base());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_shift()) {
      set_shift(from.shift());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ExpParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ExpParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpParameter::CopyFrom(const ExpParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ExpParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ExpParameter::IsInitialized() const {

  return true;
}

void ExpParameter::Swap(ExpParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExpParameter::InternalSwap(ExpParameter* other) {
  std::swap(base_, other->base_);
  std::swap(scale_, other->scale_);
  std::swap(shift_, other->shift_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExpParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExpParameter_descriptor_;
  metadata.reflection = ExpParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExpParameter

// optional float base = 1 [default = -1];
bool ExpParameter::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ExpParameter::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
void ExpParameter::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
void ExpParameter::clear_base() {
  base_ = -1;
  clear_has_base();
}
float ExpParameter::base() const {
  // @@protoc_insertion_point(field_get:caffe.ExpParameter.base)
  return base_;
}
void ExpParameter::set_base(float value) {
  set_has_base();
  base_ = value;
  // @@protoc_insertion_point(field_set:caffe.ExpParameter.base)
}

// optional float scale = 2 [default = 1];
bool ExpParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ExpParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000002u;
}
void ExpParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
void ExpParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
float ExpParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.ExpParameter.scale)
  return scale_;
}
void ExpParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ExpParameter.scale)
}

// optional float shift = 3 [default = 0];
bool ExpParameter::has_shift() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ExpParameter::set_has_shift() {
  _has_bits_[0] |= 0x00000004u;
}
void ExpParameter::clear_has_shift() {
  _has_bits_[0] &= ~0x00000004u;
}
void ExpParameter::clear_shift() {
  shift_ = 0;
  clear_has_shift();
}
float ExpParameter::shift() const {
  // @@protoc_insertion_point(field_get:caffe.ExpParameter.shift)
  return shift_;
}
void ExpParameter::set_shift(float value) {
  set_has_shift();
  shift_ = value;
  // @@protoc_insertion_point(field_set:caffe.ExpParameter.shift)
}

inline const ExpParameter* ExpParameter::internal_default_instance() {
  return &ExpParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlattenParameter::kAxisFieldNumber;
const int FlattenParameter::kEndAxisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlattenParameter::FlattenParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.FlattenParameter)
}

void FlattenParameter::InitAsDefaultInstance() {
}

FlattenParameter::FlattenParameter(const FlattenParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.FlattenParameter)
}

void FlattenParameter::SharedCtor() {
  _cached_size_ = 0;
  axis_ = 1;
  end_axis_ = -1;
}

FlattenParameter::~FlattenParameter() {
  // @@protoc_insertion_point(destructor:caffe.FlattenParameter)
  SharedDtor();
}

void FlattenParameter::SharedDtor() {
}

void FlattenParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlattenParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlattenParameter_descriptor_;
}

const FlattenParameter& FlattenParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<FlattenParameter> FlattenParameter_default_instance_;

FlattenParameter* FlattenParameter::New(::google::protobuf::Arena* arena) const {
  FlattenParameter* n = new FlattenParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FlattenParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.FlattenParameter)
  if (_has_bits_[0 / 32] & 3u) {
    axis_ = 1;
    end_axis_ = -1;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FlattenParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.FlattenParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 axis = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          set_has_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_end_axis;
        break;
      }

      // optional int32 end_axis = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_end_axis:
          set_has_end_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_axis_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.FlattenParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.FlattenParameter)
  return false;
#undef DO_
}

void FlattenParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.FlattenParameter)
  // optional int32 axis = 1 [default = 1];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->axis(), output);
  }

  // optional int32 end_axis = 2 [default = -1];
  if (has_end_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->end_axis(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.FlattenParameter)
}

::google::protobuf::uint8* FlattenParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.FlattenParameter)
  // optional int32 axis = 1 [default = 1];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->axis(), target);
  }

  // optional int32 end_axis = 2 [default = -1];
  if (has_end_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->end_axis(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.FlattenParameter)
  return target;
}

size_t FlattenParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.FlattenParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 axis = 1 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional int32 end_axis = 2 [default = -1];
    if (has_end_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_axis());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlattenParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.FlattenParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FlattenParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FlattenParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.FlattenParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.FlattenParameter)
    UnsafeMergeFrom(*source);
  }
}

void FlattenParameter::MergeFrom(const FlattenParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.FlattenParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void FlattenParameter::UnsafeMergeFrom(const FlattenParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_axis()) {
      set_axis(from.axis());
    }
    if (from.has_end_axis()) {
      set_end_axis(from.end_axis());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void FlattenParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.FlattenParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlattenParameter::CopyFrom(const FlattenParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.FlattenParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool FlattenParameter::IsInitialized() const {

  return true;
}

void FlattenParameter::Swap(FlattenParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlattenParameter::InternalSwap(FlattenParameter* other) {
  std::swap(axis_, other->axis_);
  std::swap(end_axis_, other->end_axis_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FlattenParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlattenParameter_descriptor_;
  metadata.reflection = FlattenParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FlattenParameter

// optional int32 axis = 1 [default = 1];
bool FlattenParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FlattenParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
void FlattenParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
void FlattenParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
::google::protobuf::int32 FlattenParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.FlattenParameter.axis)
  return axis_;
}
void FlattenParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.FlattenParameter.axis)
}

// optional int32 end_axis = 2 [default = -1];
bool FlattenParameter::has_end_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FlattenParameter::set_has_end_axis() {
  _has_bits_[0] |= 0x00000002u;
}
void FlattenParameter::clear_has_end_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
void FlattenParameter::clear_end_axis() {
  end_axis_ = -1;
  clear_has_end_axis();
}
::google::protobuf::int32 FlattenParameter::end_axis() const {
  // @@protoc_insertion_point(field_get:caffe.FlattenParameter.end_axis)
  return end_axis_;
}
void FlattenParameter::set_end_axis(::google::protobuf::int32 value) {
  set_has_end_axis();
  end_axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.FlattenParameter.end_axis)
}

inline const FlattenParameter* FlattenParameter::internal_default_instance() {
  return &FlattenParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HDF5DataParameter::kSourceFieldNumber;
const int HDF5DataParameter::kBatchSizeFieldNumber;
const int HDF5DataParameter::kShuffleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HDF5DataParameter::HDF5DataParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.HDF5DataParameter)
}

void HDF5DataParameter::InitAsDefaultInstance() {
}

HDF5DataParameter::HDF5DataParameter(const HDF5DataParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.HDF5DataParameter)
}

void HDF5DataParameter::SharedCtor() {
  _cached_size_ = 0;
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&batch_size_, 0, reinterpret_cast<char*>(&shuffle_) -
    reinterpret_cast<char*>(&batch_size_) + sizeof(shuffle_));
}

HDF5DataParameter::~HDF5DataParameter() {
  // @@protoc_insertion_point(destructor:caffe.HDF5DataParameter)
  SharedDtor();
}

void HDF5DataParameter::SharedDtor() {
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HDF5DataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HDF5DataParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HDF5DataParameter_descriptor_;
}

const HDF5DataParameter& HDF5DataParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<HDF5DataParameter> HDF5DataParameter_default_instance_;

HDF5DataParameter* HDF5DataParameter::New(::google::protobuf::Arena* arena) const {
  HDF5DataParameter* n = new HDF5DataParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HDF5DataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.HDF5DataParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(HDF5DataParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<HDF5DataParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(batch_size_, shuffle_);
    if (has_source()) {
      source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HDF5DataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.HDF5DataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.HDF5DataParameter.source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_batch_size;
        break;
      }

      // optional uint32 batch_size = 2;
      case 2: {
        if (tag == 16) {
         parse_batch_size:
          set_has_batch_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_shuffle;
        break;
      }

      // optional bool shuffle = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_shuffle:
          set_has_shuffle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shuffle_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.HDF5DataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.HDF5DataParameter)
  return false;
#undef DO_
}

void HDF5DataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.HDF5DataParameter)
  // optional string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.HDF5DataParameter.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  // optional uint32 batch_size = 2;
  if (has_batch_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->batch_size(), output);
  }

  // optional bool shuffle = 3 [default = false];
  if (has_shuffle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->shuffle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.HDF5DataParameter)
}

::google::protobuf::uint8* HDF5DataParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.HDF5DataParameter)
  // optional string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.HDF5DataParameter.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // optional uint32 batch_size = 2;
  if (has_batch_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->batch_size(), target);
  }

  // optional bool shuffle = 3 [default = false];
  if (has_shuffle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->shuffle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.HDF5DataParameter)
  return target;
}

size_t HDF5DataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.HDF5DataParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional uint32 batch_size = 2;
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_size());
    }

    // optional bool shuffle = 3 [default = false];
    if (has_shuffle()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HDF5DataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.HDF5DataParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HDF5DataParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HDF5DataParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.HDF5DataParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.HDF5DataParameter)
    UnsafeMergeFrom(*source);
  }
}

void HDF5DataParameter::MergeFrom(const HDF5DataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.HDF5DataParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void HDF5DataParameter::UnsafeMergeFrom(const HDF5DataParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source()) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (from.has_batch_size()) {
      set_batch_size(from.batch_size());
    }
    if (from.has_shuffle()) {
      set_shuffle(from.shuffle());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void HDF5DataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.HDF5DataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HDF5DataParameter::CopyFrom(const HDF5DataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.HDF5DataParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool HDF5DataParameter::IsInitialized() const {

  return true;
}

void HDF5DataParameter::Swap(HDF5DataParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HDF5DataParameter::InternalSwap(HDF5DataParameter* other) {
  source_.Swap(&other->source_);
  std::swap(batch_size_, other->batch_size_);
  std::swap(shuffle_, other->shuffle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HDF5DataParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HDF5DataParameter_descriptor_;
  metadata.reflection = HDF5DataParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HDF5DataParameter

// optional string source = 1;
bool HDF5DataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HDF5DataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
void HDF5DataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
void HDF5DataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
const ::std::string& HDF5DataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.HDF5DataParameter.source)
  return source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HDF5DataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.HDF5DataParameter.source)
}
void HDF5DataParameter::set_source(const char* value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.HDF5DataParameter.source)
}
void HDF5DataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.HDF5DataParameter.source)
}
::std::string* HDF5DataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.HDF5DataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HDF5DataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.HDF5DataParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HDF5DataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.HDF5DataParameter.source)
}

// optional uint32 batch_size = 2;
bool HDF5DataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HDF5DataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000002u;
}
void HDF5DataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void HDF5DataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
::google::protobuf::uint32 HDF5DataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.HDF5DataParameter.batch_size)
  return batch_size_;
}
void HDF5DataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.HDF5DataParameter.batch_size)
}

// optional bool shuffle = 3 [default = false];
bool HDF5DataParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HDF5DataParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00000004u;
}
void HDF5DataParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000004u;
}
void HDF5DataParameter::clear_shuffle() {
  shuffle_ = false;
  clear_has_shuffle();
}
bool HDF5DataParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:caffe.HDF5DataParameter.shuffle)
  return shuffle_;
}
void HDF5DataParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:caffe.HDF5DataParameter.shuffle)
}

inline const HDF5DataParameter* HDF5DataParameter::internal_default_instance() {
  return &HDF5DataParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HDF5OutputParameter::kFileNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HDF5OutputParameter::HDF5OutputParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.HDF5OutputParameter)
}

void HDF5OutputParameter::InitAsDefaultInstance() {
}

HDF5OutputParameter::HDF5OutputParameter(const HDF5OutputParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.HDF5OutputParameter)
}

void HDF5OutputParameter::SharedCtor() {
  _cached_size_ = 0;
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

HDF5OutputParameter::~HDF5OutputParameter() {
  // @@protoc_insertion_point(destructor:caffe.HDF5OutputParameter)
  SharedDtor();
}

void HDF5OutputParameter::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HDF5OutputParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HDF5OutputParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HDF5OutputParameter_descriptor_;
}

const HDF5OutputParameter& HDF5OutputParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<HDF5OutputParameter> HDF5OutputParameter_default_instance_;

HDF5OutputParameter* HDF5OutputParameter::New(::google::protobuf::Arena* arena) const {
  HDF5OutputParameter* n = new HDF5OutputParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HDF5OutputParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.HDF5OutputParameter)
  if (has_file_name()) {
    file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HDF5OutputParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.HDF5OutputParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.HDF5OutputParameter.file_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.HDF5OutputParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.HDF5OutputParameter)
  return false;
#undef DO_
}

void HDF5OutputParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.HDF5OutputParameter)
  // optional string file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.HDF5OutputParameter.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.HDF5OutputParameter)
}

::google::protobuf::uint8* HDF5OutputParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.HDF5OutputParameter)
  // optional string file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.HDF5OutputParameter.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.HDF5OutputParameter)
  return target;
}

size_t HDF5OutputParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.HDF5OutputParameter)
  size_t total_size = 0;

  // optional string file_name = 1;
  if (has_file_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_name());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HDF5OutputParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.HDF5OutputParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HDF5OutputParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HDF5OutputParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.HDF5OutputParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.HDF5OutputParameter)
    UnsafeMergeFrom(*source);
  }
}

void HDF5OutputParameter::MergeFrom(const HDF5OutputParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.HDF5OutputParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void HDF5OutputParameter::UnsafeMergeFrom(const HDF5OutputParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_name()) {
      set_has_file_name();
      file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void HDF5OutputParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.HDF5OutputParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HDF5OutputParameter::CopyFrom(const HDF5OutputParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.HDF5OutputParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool HDF5OutputParameter::IsInitialized() const {

  return true;
}

void HDF5OutputParameter::Swap(HDF5OutputParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HDF5OutputParameter::InternalSwap(HDF5OutputParameter* other) {
  file_name_.Swap(&other->file_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HDF5OutputParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HDF5OutputParameter_descriptor_;
  metadata.reflection = HDF5OutputParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HDF5OutputParameter

// optional string file_name = 1;
bool HDF5OutputParameter::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HDF5OutputParameter::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
void HDF5OutputParameter::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void HDF5OutputParameter::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
const ::std::string& HDF5OutputParameter::file_name() const {
  // @@protoc_insertion_point(field_get:caffe.HDF5OutputParameter.file_name)
  return file_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HDF5OutputParameter::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.HDF5OutputParameter.file_name)
}
void HDF5OutputParameter::set_file_name(const char* value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.HDF5OutputParameter.file_name)
}
void HDF5OutputParameter::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.HDF5OutputParameter.file_name)
}
::std::string* HDF5OutputParameter::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:caffe.HDF5OutputParameter.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HDF5OutputParameter::release_file_name() {
  // @@protoc_insertion_point(field_release:caffe.HDF5OutputParameter.file_name)
  clear_has_file_name();
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HDF5OutputParameter::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:caffe.HDF5OutputParameter.file_name)
}

inline const HDF5OutputParameter* HDF5OutputParameter::internal_default_instance() {
  return &HDF5OutputParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* HingeLossParameter_Norm_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HingeLossParameter_Norm_descriptor_;
}
bool HingeLossParameter_Norm_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const HingeLossParameter_Norm HingeLossParameter::L1;
const HingeLossParameter_Norm HingeLossParameter::L2;
const HingeLossParameter_Norm HingeLossParameter::Norm_MIN;
const HingeLossParameter_Norm HingeLossParameter::Norm_MAX;
const int HingeLossParameter::Norm_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HingeLossParameter::kNormFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HingeLossParameter::HingeLossParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.HingeLossParameter)
}

void HingeLossParameter::InitAsDefaultInstance() {
}

HingeLossParameter::HingeLossParameter(const HingeLossParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.HingeLossParameter)
}

void HingeLossParameter::SharedCtor() {
  _cached_size_ = 0;
  norm_ = 1;
}

HingeLossParameter::~HingeLossParameter() {
  // @@protoc_insertion_point(destructor:caffe.HingeLossParameter)
  SharedDtor();
}

void HingeLossParameter::SharedDtor() {
}

void HingeLossParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HingeLossParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HingeLossParameter_descriptor_;
}

const HingeLossParameter& HingeLossParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<HingeLossParameter> HingeLossParameter_default_instance_;

HingeLossParameter* HingeLossParameter::New(::google::protobuf::Arena* arena) const {
  HingeLossParameter* n = new HingeLossParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HingeLossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.HingeLossParameter)
  norm_ = 1;
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HingeLossParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.HingeLossParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::HingeLossParameter_Norm_IsValid(value)) {
            set_norm(static_cast< ::caffe::HingeLossParameter_Norm >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.HingeLossParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.HingeLossParameter)
  return false;
#undef DO_
}

void HingeLossParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.HingeLossParameter)
  // optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];
  if (has_norm()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->norm(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.HingeLossParameter)
}

::google::protobuf::uint8* HingeLossParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.HingeLossParameter)
  // optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];
  if (has_norm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->norm(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.HingeLossParameter)
  return target;
}

size_t HingeLossParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.HingeLossParameter)
  size_t total_size = 0;

  // optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];
  if (has_norm()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->norm());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HingeLossParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.HingeLossParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HingeLossParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HingeLossParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.HingeLossParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.HingeLossParameter)
    UnsafeMergeFrom(*source);
  }
}

void HingeLossParameter::MergeFrom(const HingeLossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.HingeLossParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void HingeLossParameter::UnsafeMergeFrom(const HingeLossParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_norm()) {
      set_norm(from.norm());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void HingeLossParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.HingeLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HingeLossParameter::CopyFrom(const HingeLossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.HingeLossParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool HingeLossParameter::IsInitialized() const {

  return true;
}

void HingeLossParameter::Swap(HingeLossParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HingeLossParameter::InternalSwap(HingeLossParameter* other) {
  std::swap(norm_, other->norm_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HingeLossParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HingeLossParameter_descriptor_;
  metadata.reflection = HingeLossParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HingeLossParameter

// optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];
bool HingeLossParameter::has_norm() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HingeLossParameter::set_has_norm() {
  _has_bits_[0] |= 0x00000001u;
}
void HingeLossParameter::clear_has_norm() {
  _has_bits_[0] &= ~0x00000001u;
}
void HingeLossParameter::clear_norm() {
  norm_ = 1;
  clear_has_norm();
}
::caffe::HingeLossParameter_Norm HingeLossParameter::norm() const {
  // @@protoc_insertion_point(field_get:caffe.HingeLossParameter.norm)
  return static_cast< ::caffe::HingeLossParameter_Norm >(norm_);
}
void HingeLossParameter::set_norm(::caffe::HingeLossParameter_Norm value) {
  assert(::caffe::HingeLossParameter_Norm_IsValid(value));
  set_has_norm();
  norm_ = value;
  // @@protoc_insertion_point(field_set:caffe.HingeLossParameter.norm)
}

inline const HingeLossParameter* HingeLossParameter::internal_default_instance() {
  return &HingeLossParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageDataParameter::kSourceFieldNumber;
const int ImageDataParameter::kBatchSizeFieldNumber;
const int ImageDataParameter::kRandSkipFieldNumber;
const int ImageDataParameter::kShuffleFieldNumber;
const int ImageDataParameter::kNewHeightFieldNumber;
const int ImageDataParameter::kNewWidthFieldNumber;
const int ImageDataParameter::kIsColorFieldNumber;
const int ImageDataParameter::kScaleFieldNumber;
const int ImageDataParameter::kMeanFileFieldNumber;
const int ImageDataParameter::kCropSizeFieldNumber;
const int ImageDataParameter::kMirrorFieldNumber;
const int ImageDataParameter::kRootFolderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageDataParameter::ImageDataParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ImageDataParameter)
}

void ImageDataParameter::InitAsDefaultInstance() {
}

ImageDataParameter::ImageDataParameter(const ImageDataParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ImageDataParameter)
}

void ImageDataParameter::SharedCtor() {
  _cached_size_ = 0;
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mean_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  root_folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&rand_skip_, 0, reinterpret_cast<char*>(&crop_size_) -
    reinterpret_cast<char*>(&rand_skip_) + sizeof(crop_size_));
  scale_ = 1;
  batch_size_ = 1u;
  is_color_ = true;
}

ImageDataParameter::~ImageDataParameter() {
  // @@protoc_insertion_point(destructor:caffe.ImageDataParameter)
  SharedDtor();
}

void ImageDataParameter::SharedDtor() {
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mean_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  root_folder_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ImageDataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageDataParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageDataParameter_descriptor_;
}

const ImageDataParameter& ImageDataParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ImageDataParameter> ImageDataParameter_default_instance_;

ImageDataParameter* ImageDataParameter::New(::google::protobuf::Arena* arena) const {
  ImageDataParameter* n = new ImageDataParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ImageDataParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ImageDataParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ImageDataParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(rand_skip_, shuffle_);
    if (has_source()) {
      source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    batch_size_ = 1u;
    is_color_ = true;
    scale_ = 1;
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ZR_(mirror_, crop_size_);
    if (has_mean_file()) {
      mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_root_folder()) {
      root_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ImageDataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ImageDataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.ImageDataParameter.source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_scale;
        break;
      }

      // optional float scale = 2 [default = 1];
      case 2: {
        if (tag == 21) {
         parse_scale:
          set_has_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mean_file;
        break;
      }

      // optional string mean_file = 3;
      case 3: {
        if (tag == 26) {
         parse_mean_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mean_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mean_file().data(), this->mean_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.ImageDataParameter.mean_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_batch_size;
        break;
      }

      // optional uint32 batch_size = 4 [default = 1];
      case 4: {
        if (tag == 32) {
         parse_batch_size:
          set_has_batch_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_crop_size;
        break;
      }

      // optional uint32 crop_size = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_crop_size:
          set_has_crop_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crop_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_mirror;
        break;
      }

      // optional bool mirror = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_mirror:
          set_has_mirror();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mirror_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_rand_skip;
        break;
      }

      // optional uint32 rand_skip = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_rand_skip:
          set_has_rand_skip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rand_skip_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_shuffle;
        break;
      }

      // optional bool shuffle = 8 [default = false];
      case 8: {
        if (tag == 64) {
         parse_shuffle:
          set_has_shuffle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shuffle_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_new_height;
        break;
      }

      // optional uint32 new_height = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_new_height:
          set_has_new_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_height_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_new_width;
        break;
      }

      // optional uint32 new_width = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_new_width:
          set_has_new_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_width_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_is_color;
        break;
      }

      // optional bool is_color = 11 [default = true];
      case 11: {
        if (tag == 88) {
         parse_is_color:
          set_has_is_color();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_color_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_root_folder;
        break;
      }

      // optional string root_folder = 12 [default = ""];
      case 12: {
        if (tag == 98) {
         parse_root_folder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_root_folder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->root_folder().data(), this->root_folder().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.ImageDataParameter.root_folder");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ImageDataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ImageDataParameter)
  return false;
#undef DO_
}

void ImageDataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ImageDataParameter)
  // optional string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ImageDataParameter.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  // optional float scale = 2 [default = 1];
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }

  // optional string mean_file = 3;
  if (has_mean_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), this->mean_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ImageDataParameter.mean_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mean_file(), output);
  }

  // optional uint32 batch_size = 4 [default = 1];
  if (has_batch_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->batch_size(), output);
  }

  // optional uint32 crop_size = 5 [default = 0];
  if (has_crop_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->crop_size(), output);
  }

  // optional bool mirror = 6 [default = false];
  if (has_mirror()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->mirror(), output);
  }

  // optional uint32 rand_skip = 7 [default = 0];
  if (has_rand_skip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->rand_skip(), output);
  }

  // optional bool shuffle = 8 [default = false];
  if (has_shuffle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->shuffle(), output);
  }

  // optional uint32 new_height = 9 [default = 0];
  if (has_new_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->new_height(), output);
  }

  // optional uint32 new_width = 10 [default = 0];
  if (has_new_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->new_width(), output);
  }

  // optional bool is_color = 11 [default = true];
  if (has_is_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_color(), output);
  }

  // optional string root_folder = 12 [default = ""];
  if (has_root_folder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->root_folder().data(), this->root_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ImageDataParameter.root_folder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->root_folder(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ImageDataParameter)
}

::google::protobuf::uint8* ImageDataParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ImageDataParameter)
  // optional string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ImageDataParameter.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // optional float scale = 2 [default = 1];
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }

  // optional string mean_file = 3;
  if (has_mean_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), this->mean_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ImageDataParameter.mean_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mean_file(), target);
  }

  // optional uint32 batch_size = 4 [default = 1];
  if (has_batch_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->batch_size(), target);
  }

  // optional uint32 crop_size = 5 [default = 0];
  if (has_crop_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->crop_size(), target);
  }

  // optional bool mirror = 6 [default = false];
  if (has_mirror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->mirror(), target);
  }

  // optional uint32 rand_skip = 7 [default = 0];
  if (has_rand_skip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->rand_skip(), target);
  }

  // optional bool shuffle = 8 [default = false];
  if (has_shuffle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->shuffle(), target);
  }

  // optional uint32 new_height = 9 [default = 0];
  if (has_new_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->new_height(), target);
  }

  // optional uint32 new_width = 10 [default = 0];
  if (has_new_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->new_width(), target);
  }

  // optional bool is_color = 11 [default = true];
  if (has_is_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_color(), target);
  }

  // optional string root_folder = 12 [default = ""];
  if (has_root_folder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->root_folder().data(), this->root_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ImageDataParameter.root_folder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->root_folder(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ImageDataParameter)
  return target;
}

size_t ImageDataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ImageDataParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional uint32 batch_size = 4 [default = 1];
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_size());
    }

    // optional uint32 rand_skip = 7 [default = 0];
    if (has_rand_skip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rand_skip());
    }

    // optional bool shuffle = 8 [default = false];
    if (has_shuffle()) {
      total_size += 1 + 1;
    }

    // optional uint32 new_height = 9 [default = 0];
    if (has_new_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_height());
    }

    // optional uint32 new_width = 10 [default = 0];
    if (has_new_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_width());
    }

    // optional bool is_color = 11 [default = true];
    if (has_is_color()) {
      total_size += 1 + 1;
    }

    // optional float scale = 2 [default = 1];
    if (has_scale()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional string mean_file = 3;
    if (has_mean_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mean_file());
    }

    // optional uint32 crop_size = 5 [default = 0];
    if (has_crop_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crop_size());
    }

    // optional bool mirror = 6 [default = false];
    if (has_mirror()) {
      total_size += 1 + 1;
    }

    // optional string root_folder = 12 [default = ""];
    if (has_root_folder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->root_folder());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageDataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ImageDataParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ImageDataParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageDataParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ImageDataParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ImageDataParameter)
    UnsafeMergeFrom(*source);
  }
}

void ImageDataParameter::MergeFrom(const ImageDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ImageDataParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ImageDataParameter::UnsafeMergeFrom(const ImageDataParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source()) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (from.has_batch_size()) {
      set_batch_size(from.batch_size());
    }
    if (from.has_rand_skip()) {
      set_rand_skip(from.rand_skip());
    }
    if (from.has_shuffle()) {
      set_shuffle(from.shuffle());
    }
    if (from.has_new_height()) {
      set_new_height(from.new_height());
    }
    if (from.has_new_width()) {
      set_new_width(from.new_width());
    }
    if (from.has_is_color()) {
      set_is_color(from.is_color());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mean_file()) {
      set_has_mean_file();
      mean_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mean_file_);
    }
    if (from.has_crop_size()) {
      set_crop_size(from.crop_size());
    }
    if (from.has_mirror()) {
      set_mirror(from.mirror());
    }
    if (from.has_root_folder()) {
      set_has_root_folder();
      root_folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.root_folder_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ImageDataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ImageDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageDataParameter::CopyFrom(const ImageDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ImageDataParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ImageDataParameter::IsInitialized() const {

  return true;
}

void ImageDataParameter::Swap(ImageDataParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageDataParameter::InternalSwap(ImageDataParameter* other) {
  source_.Swap(&other->source_);
  std::swap(batch_size_, other->batch_size_);
  std::swap(rand_skip_, other->rand_skip_);
  std::swap(shuffle_, other->shuffle_);
  std::swap(new_height_, other->new_height_);
  std::swap(new_width_, other->new_width_);
  std::swap(is_color_, other->is_color_);
  std::swap(scale_, other->scale_);
  mean_file_.Swap(&other->mean_file_);
  std::swap(crop_size_, other->crop_size_);
  std::swap(mirror_, other->mirror_);
  root_folder_.Swap(&other->root_folder_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageDataParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageDataParameter_descriptor_;
  metadata.reflection = ImageDataParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageDataParameter

// optional string source = 1;
bool ImageDataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImageDataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
void ImageDataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImageDataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
const ::std::string& ImageDataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.source)
  return source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageDataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.source)
}
void ImageDataParameter::set_source(const char* value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataParameter.source)
}
void ImageDataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataParameter.source)
}
::std::string* ImageDataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageDataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.ImageDataParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageDataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDataParameter.source)
}

// optional uint32 batch_size = 4 [default = 1];
bool ImageDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImageDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000002u;
}
void ImageDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImageDataParameter::clear_batch_size() {
  batch_size_ = 1u;
  clear_has_batch_size();
}
::google::protobuf::uint32 ImageDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.batch_size)
  return batch_size_;
}
void ImageDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.batch_size)
}

// optional uint32 rand_skip = 7 [default = 0];
bool ImageDataParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ImageDataParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x00000004u;
}
void ImageDataParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x00000004u;
}
void ImageDataParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
::google::protobuf::uint32 ImageDataParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.rand_skip)
  return rand_skip_;
}
void ImageDataParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.rand_skip)
}

// optional bool shuffle = 8 [default = false];
bool ImageDataParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ImageDataParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00000008u;
}
void ImageDataParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000008u;
}
void ImageDataParameter::clear_shuffle() {
  shuffle_ = false;
  clear_has_shuffle();
}
bool ImageDataParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.shuffle)
  return shuffle_;
}
void ImageDataParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.shuffle)
}

// optional uint32 new_height = 9 [default = 0];
bool ImageDataParameter::has_new_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ImageDataParameter::set_has_new_height() {
  _has_bits_[0] |= 0x00000010u;
}
void ImageDataParameter::clear_has_new_height() {
  _has_bits_[0] &= ~0x00000010u;
}
void ImageDataParameter::clear_new_height() {
  new_height_ = 0u;
  clear_has_new_height();
}
::google::protobuf::uint32 ImageDataParameter::new_height() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.new_height)
  return new_height_;
}
void ImageDataParameter::set_new_height(::google::protobuf::uint32 value) {
  set_has_new_height();
  new_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.new_height)
}

// optional uint32 new_width = 10 [default = 0];
bool ImageDataParameter::has_new_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ImageDataParameter::set_has_new_width() {
  _has_bits_[0] |= 0x00000020u;
}
void ImageDataParameter::clear_has_new_width() {
  _has_bits_[0] &= ~0x00000020u;
}
void ImageDataParameter::clear_new_width() {
  new_width_ = 0u;
  clear_has_new_width();
}
::google::protobuf::uint32 ImageDataParameter::new_width() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.new_width)
  return new_width_;
}
void ImageDataParameter::set_new_width(::google::protobuf::uint32 value) {
  set_has_new_width();
  new_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.new_width)
}

// optional bool is_color = 11 [default = true];
bool ImageDataParameter::has_is_color() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ImageDataParameter::set_has_is_color() {
  _has_bits_[0] |= 0x00000040u;
}
void ImageDataParameter::clear_has_is_color() {
  _has_bits_[0] &= ~0x00000040u;
}
void ImageDataParameter::clear_is_color() {
  is_color_ = true;
  clear_has_is_color();
}
bool ImageDataParameter::is_color() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.is_color)
  return is_color_;
}
void ImageDataParameter::set_is_color(bool value) {
  set_has_is_color();
  is_color_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.is_color)
}

// optional float scale = 2 [default = 1];
bool ImageDataParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ImageDataParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000080u;
}
void ImageDataParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000080u;
}
void ImageDataParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
float ImageDataParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.scale)
  return scale_;
}
void ImageDataParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.scale)
}

// optional string mean_file = 3;
bool ImageDataParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ImageDataParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000100u;
}
void ImageDataParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000100u;
}
void ImageDataParameter::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mean_file();
}
const ::std::string& ImageDataParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.mean_file)
  return mean_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageDataParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.mean_file)
}
void ImageDataParameter::set_mean_file(const char* value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataParameter.mean_file)
}
void ImageDataParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataParameter.mean_file)
}
::std::string* ImageDataParameter::mutable_mean_file() {
  set_has_mean_file();
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataParameter.mean_file)
  return mean_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageDataParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:caffe.ImageDataParameter.mean_file)
  clear_has_mean_file();
  return mean_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageDataParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file != NULL) {
    set_has_mean_file();
  } else {
    clear_has_mean_file();
  }
  mean_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDataParameter.mean_file)
}

// optional uint32 crop_size = 5 [default = 0];
bool ImageDataParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ImageDataParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000200u;
}
void ImageDataParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000200u;
}
void ImageDataParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
::google::protobuf::uint32 ImageDataParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.crop_size)
  return crop_size_;
}
void ImageDataParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.crop_size)
}

// optional bool mirror = 6 [default = false];
bool ImageDataParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ImageDataParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000400u;
}
void ImageDataParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000400u;
}
void ImageDataParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
bool ImageDataParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.mirror)
  return mirror_;
}
void ImageDataParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.mirror)
}

// optional string root_folder = 12 [default = ""];
bool ImageDataParameter::has_root_folder() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ImageDataParameter::set_has_root_folder() {
  _has_bits_[0] |= 0x00000800u;
}
void ImageDataParameter::clear_has_root_folder() {
  _has_bits_[0] &= ~0x00000800u;
}
void ImageDataParameter::clear_root_folder() {
  root_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_root_folder();
}
const ::std::string& ImageDataParameter::root_folder() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.root_folder)
  return root_folder_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageDataParameter::set_root_folder(const ::std::string& value) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.root_folder)
}
void ImageDataParameter::set_root_folder(const char* value) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataParameter.root_folder)
}
void ImageDataParameter::set_root_folder(const char* value, size_t size) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataParameter.root_folder)
}
::std::string* ImageDataParameter::mutable_root_folder() {
  set_has_root_folder();
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataParameter.root_folder)
  return root_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageDataParameter::release_root_folder() {
  // @@protoc_insertion_point(field_release:caffe.ImageDataParameter.root_folder)
  clear_has_root_folder();
  return root_folder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageDataParameter::set_allocated_root_folder(::std::string* root_folder) {
  if (root_folder != NULL) {
    set_has_root_folder();
  } else {
    clear_has_root_folder();
  }
  root_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), root_folder);
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDataParameter.root_folder)
}

inline const ImageDataParameter* ImageDataParameter::internal_default_instance() {
  return &ImageDataParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InfogainLossParameter::kSourceFieldNumber;
const int InfogainLossParameter::kAxisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InfogainLossParameter::InfogainLossParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.InfogainLossParameter)
}

void InfogainLossParameter::InitAsDefaultInstance() {
}

InfogainLossParameter::InfogainLossParameter(const InfogainLossParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.InfogainLossParameter)
}

void InfogainLossParameter::SharedCtor() {
  _cached_size_ = 0;
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  axis_ = 1;
}

InfogainLossParameter::~InfogainLossParameter() {
  // @@protoc_insertion_point(destructor:caffe.InfogainLossParameter)
  SharedDtor();
}

void InfogainLossParameter::SharedDtor() {
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InfogainLossParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InfogainLossParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InfogainLossParameter_descriptor_;
}

const InfogainLossParameter& InfogainLossParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<InfogainLossParameter> InfogainLossParameter_default_instance_;

InfogainLossParameter* InfogainLossParameter::New(::google::protobuf::Arena* arena) const {
  InfogainLossParameter* n = new InfogainLossParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InfogainLossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.InfogainLossParameter)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_source()) {
      source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    axis_ = 1;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InfogainLossParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.InfogainLossParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.InfogainLossParameter.source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_axis;
        break;
      }

      // optional int32 axis = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_axis:
          set_has_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.InfogainLossParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.InfogainLossParameter)
  return false;
#undef DO_
}

void InfogainLossParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.InfogainLossParameter)
  // optional string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.InfogainLossParameter.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  // optional int32 axis = 2 [default = 1];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->axis(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.InfogainLossParameter)
}

::google::protobuf::uint8* InfogainLossParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.InfogainLossParameter)
  // optional string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.InfogainLossParameter.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // optional int32 axis = 2 [default = 1];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->axis(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.InfogainLossParameter)
  return target;
}

size_t InfogainLossParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.InfogainLossParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional int32 axis = 2 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InfogainLossParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.InfogainLossParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InfogainLossParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InfogainLossParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.InfogainLossParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.InfogainLossParameter)
    UnsafeMergeFrom(*source);
  }
}

void InfogainLossParameter::MergeFrom(const InfogainLossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.InfogainLossParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void InfogainLossParameter::UnsafeMergeFrom(const InfogainLossParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source()) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (from.has_axis()) {
      set_axis(from.axis());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void InfogainLossParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.InfogainLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfogainLossParameter::CopyFrom(const InfogainLossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.InfogainLossParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool InfogainLossParameter::IsInitialized() const {

  return true;
}

void InfogainLossParameter::Swap(InfogainLossParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InfogainLossParameter::InternalSwap(InfogainLossParameter* other) {
  source_.Swap(&other->source_);
  std::swap(axis_, other->axis_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InfogainLossParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InfogainLossParameter_descriptor_;
  metadata.reflection = InfogainLossParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InfogainLossParameter

// optional string source = 1;
bool InfogainLossParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InfogainLossParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
void InfogainLossParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
void InfogainLossParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
const ::std::string& InfogainLossParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.InfogainLossParameter.source)
  return source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InfogainLossParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.InfogainLossParameter.source)
}
void InfogainLossParameter::set_source(const char* value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.InfogainLossParameter.source)
}
void InfogainLossParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.InfogainLossParameter.source)
}
::std::string* InfogainLossParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.InfogainLossParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InfogainLossParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.InfogainLossParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InfogainLossParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.InfogainLossParameter.source)
}

// optional int32 axis = 2 [default = 1];
bool InfogainLossParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InfogainLossParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
void InfogainLossParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
void InfogainLossParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
::google::protobuf::int32 InfogainLossParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.InfogainLossParameter.axis)
  return axis_;
}
void InfogainLossParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.InfogainLossParameter.axis)
}

inline const InfogainLossParameter* InfogainLossParameter::internal_default_instance() {
  return &InfogainLossParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InnerProductParameter::kNumOutputFieldNumber;
const int InnerProductParameter::kBiasTermFieldNumber;
const int InnerProductParameter::kWeightFillerFieldNumber;
const int InnerProductParameter::kBiasFillerFieldNumber;
const int InnerProductParameter::kAxisFieldNumber;
const int InnerProductParameter::kTransposeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InnerProductParameter::InnerProductParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.InnerProductParameter)
}

void InnerProductParameter::InitAsDefaultInstance() {
  weight_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  bias_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
}

InnerProductParameter::InnerProductParameter(const InnerProductParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.InnerProductParameter)
}

void InnerProductParameter::SharedCtor() {
  _cached_size_ = 0;
  weight_filler_ = NULL;
  bias_filler_ = NULL;
  ::memset(&num_output_, 0, reinterpret_cast<char*>(&transpose_) -
    reinterpret_cast<char*>(&num_output_) + sizeof(transpose_));
  bias_term_ = true;
  axis_ = 1;
}

InnerProductParameter::~InnerProductParameter() {
  // @@protoc_insertion_point(destructor:caffe.InnerProductParameter)
  SharedDtor();
}

void InnerProductParameter::SharedDtor() {
  if (this != &InnerProductParameter_default_instance_.get()) {
    delete weight_filler_;
    delete bias_filler_;
  }
}

void InnerProductParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InnerProductParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InnerProductParameter_descriptor_;
}

const InnerProductParameter& InnerProductParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<InnerProductParameter> InnerProductParameter_default_instance_;

InnerProductParameter* InnerProductParameter::New(::google::protobuf::Arena* arena) const {
  InnerProductParameter* n = new InnerProductParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InnerProductParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.InnerProductParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(InnerProductParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<InnerProductParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(num_output_, transpose_);
    bias_term_ = true;
    if (has_weight_filler()) {
      if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
    }
    if (has_bias_filler()) {
      if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
    }
    axis_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InnerProductParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.InnerProductParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_output = 1;
      case 1: {
        if (tag == 8) {
          set_has_num_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bias_term;
        break;
      }

      // optional bool bias_term = 2 [default = true];
      case 2: {
        if (tag == 16) {
         parse_bias_term:
          set_has_bias_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bias_term_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_weight_filler;
        break;
      }

      // optional .caffe.FillerParameter weight_filler = 3;
      case 3: {
        if (tag == 26) {
         parse_weight_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_bias_filler;
        break;
      }

      // optional .caffe.FillerParameter bias_filler = 4;
      case 4: {
        if (tag == 34) {
         parse_bias_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_axis;
        break;
      }

      // optional int32 axis = 5 [default = 1];
      case 5: {
        if (tag == 40) {
         parse_axis:
          set_has_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_transpose;
        break;
      }

      // optional bool transpose = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_transpose:
          set_has_transpose();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &transpose_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.InnerProductParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.InnerProductParameter)
  return false;
#undef DO_
}

void InnerProductParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.InnerProductParameter)
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
  }

  // optional bool bias_term = 2 [default = true];
  if (has_bias_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bias_term(), output);
  }

  // optional .caffe.FillerParameter weight_filler = 3;
  if (has_weight_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->weight_filler_, output);
  }

  // optional .caffe.FillerParameter bias_filler = 4;
  if (has_bias_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->bias_filler_, output);
  }

  // optional int32 axis = 5 [default = 1];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->axis(), output);
  }

  // optional bool transpose = 6 [default = false];
  if (has_transpose()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->transpose(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.InnerProductParameter)
}

::google::protobuf::uint8* InnerProductParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.InnerProductParameter)
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
  }

  // optional bool bias_term = 2 [default = true];
  if (has_bias_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bias_term(), target);
  }

  // optional .caffe.FillerParameter weight_filler = 3;
  if (has_weight_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->weight_filler_, false, target);
  }

  // optional .caffe.FillerParameter bias_filler = 4;
  if (has_bias_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->bias_filler_, false, target);
  }

  // optional int32 axis = 5 [default = 1];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->axis(), target);
  }

  // optional bool transpose = 6 [default = false];
  if (has_transpose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->transpose(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.InnerProductParameter)
  return target;
}

size_t InnerProductParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.InnerProductParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 num_output = 1;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional bool bias_term = 2 [default = true];
    if (has_bias_term()) {
      total_size += 1 + 1;
    }

    // optional .caffe.FillerParameter weight_filler = 3;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->weight_filler_);
    }

    // optional .caffe.FillerParameter bias_filler = 4;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bias_filler_);
    }

    // optional int32 axis = 5 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional bool transpose = 6 [default = false];
    if (has_transpose()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InnerProductParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.InnerProductParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InnerProductParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InnerProductParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.InnerProductParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.InnerProductParameter)
    UnsafeMergeFrom(*source);
  }
}

void InnerProductParameter::MergeFrom(const InnerProductParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.InnerProductParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void InnerProductParameter::UnsafeMergeFrom(const InnerProductParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_output()) {
      set_num_output(from.num_output());
    }
    if (from.has_bias_term()) {
      set_bias_term(from.bias_term());
    }
    if (from.has_weight_filler()) {
      mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
    }
    if (from.has_bias_filler()) {
      mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
    }
    if (from.has_axis()) {
      set_axis(from.axis());
    }
    if (from.has_transpose()) {
      set_transpose(from.transpose());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void InnerProductParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.InnerProductParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InnerProductParameter::CopyFrom(const InnerProductParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.InnerProductParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool InnerProductParameter::IsInitialized() const {

  return true;
}

void InnerProductParameter::Swap(InnerProductParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InnerProductParameter::InternalSwap(InnerProductParameter* other) {
  std::swap(num_output_, other->num_output_);
  std::swap(bias_term_, other->bias_term_);
  std::swap(weight_filler_, other->weight_filler_);
  std::swap(bias_filler_, other->bias_filler_);
  std::swap(axis_, other->axis_);
  std::swap(transpose_, other->transpose_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InnerProductParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InnerProductParameter_descriptor_;
  metadata.reflection = InnerProductParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InnerProductParameter

// optional uint32 num_output = 1;
bool InnerProductParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InnerProductParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
void InnerProductParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
void InnerProductParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
::google::protobuf::uint32 InnerProductParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.num_output)
  return num_output_;
}
void InnerProductParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerProductParameter.num_output)
}

// optional bool bias_term = 2 [default = true];
bool InnerProductParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InnerProductParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000002u;
}
void InnerProductParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000002u;
}
void InnerProductParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
bool InnerProductParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.bias_term)
  return bias_term_;
}
void InnerProductParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerProductParameter.bias_term)
}

// optional .caffe.FillerParameter weight_filler = 3;
bool InnerProductParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InnerProductParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000004u;
}
void InnerProductParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000004u;
}
void InnerProductParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
const ::caffe::FillerParameter& InnerProductParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
::caffe::FillerParameter* InnerProductParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.InnerProductParameter.weight_filler)
  return weight_filler_;
}
::caffe::FillerParameter* InnerProductParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.InnerProductParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
void InnerProductParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.InnerProductParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 4;
bool InnerProductParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void InnerProductParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000008u;
}
void InnerProductParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000008u;
}
void InnerProductParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
const ::caffe::FillerParameter& InnerProductParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
::caffe::FillerParameter* InnerProductParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.InnerProductParameter.bias_filler)
  return bias_filler_;
}
::caffe::FillerParameter* InnerProductParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.InnerProductParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
void InnerProductParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.InnerProductParameter.bias_filler)
}

// optional int32 axis = 5 [default = 1];
bool InnerProductParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void InnerProductParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000010u;
}
void InnerProductParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000010u;
}
void InnerProductParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
::google::protobuf::int32 InnerProductParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.axis)
  return axis_;
}
void InnerProductParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerProductParameter.axis)
}

// optional bool transpose = 6 [default = false];
bool InnerProductParameter::has_transpose() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void InnerProductParameter::set_has_transpose() {
  _has_bits_[0] |= 0x00000020u;
}
void InnerProductParameter::clear_has_transpose() {
  _has_bits_[0] &= ~0x00000020u;
}
void InnerProductParameter::clear_transpose() {
  transpose_ = false;
  clear_has_transpose();
}
bool InnerProductParameter::transpose() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.transpose)
  return transpose_;
}
void InnerProductParameter::set_transpose(bool value) {
  set_has_transpose();
  transpose_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerProductParameter.transpose)
}

inline const InnerProductParameter* InnerProductParameter::internal_default_instance() {
  return &InnerProductParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InputParameter::kShapeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InputParameter::InputParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.InputParameter)
}

void InputParameter::InitAsDefaultInstance() {
}

InputParameter::InputParameter(const InputParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.InputParameter)
}

void InputParameter::SharedCtor() {
  _cached_size_ = 0;
}

InputParameter::~InputParameter() {
  // @@protoc_insertion_point(destructor:caffe.InputParameter)
  SharedDtor();
}

void InputParameter::SharedDtor() {
}

void InputParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InputParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InputParameter_descriptor_;
}

const InputParameter& InputParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<InputParameter> InputParameter_default_instance_;

InputParameter* InputParameter::New(::google::protobuf::Arena* arena) const {
  InputParameter* n = new InputParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InputParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.InputParameter)
  shape_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InputParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.InputParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .caffe.BlobShape shape = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_shape:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_shape()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_shape;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.InputParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.InputParameter)
  return false;
#undef DO_
}

void InputParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.InputParameter)
  // repeated .caffe.BlobShape shape = 1;
  for (unsigned int i = 0, n = this->shape_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shape(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.InputParameter)
}

::google::protobuf::uint8* InputParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.InputParameter)
  // repeated .caffe.BlobShape shape = 1;
  for (unsigned int i = 0, n = this->shape_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->shape(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.InputParameter)
  return target;
}

size_t InputParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.InputParameter)
  size_t total_size = 0;

  // repeated .caffe.BlobShape shape = 1;
  {
    unsigned int count = this->shape_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shape(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InputParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.InputParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InputParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InputParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.InputParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.InputParameter)
    UnsafeMergeFrom(*source);
  }
}

void InputParameter::MergeFrom(const InputParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.InputParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void InputParameter::UnsafeMergeFrom(const InputParameter& from) {
  GOOGLE_DCHECK(&from != this);
  shape_.MergeFrom(from.shape_);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void InputParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.InputParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputParameter::CopyFrom(const InputParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.InputParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool InputParameter::IsInitialized() const {

  return true;
}

void InputParameter::Swap(InputParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InputParameter::InternalSwap(InputParameter* other) {
  shape_.UnsafeArenaSwap(&other->shape_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InputParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InputParameter_descriptor_;
  metadata.reflection = InputParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InputParameter

// repeated .caffe.BlobShape shape = 1;
int InputParameter::shape_size() const {
  return shape_.size();
}
void InputParameter::clear_shape() {
  shape_.Clear();
}
const ::caffe::BlobShape& InputParameter::shape(int index) const {
  // @@protoc_insertion_point(field_get:caffe.InputParameter.shape)
  return shape_.Get(index);
}
::caffe::BlobShape* InputParameter::mutable_shape(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.InputParameter.shape)
  return shape_.Mutable(index);
}
::caffe::BlobShape* InputParameter::add_shape() {
  // @@protoc_insertion_point(field_add:caffe.InputParameter.shape)
  return shape_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
InputParameter::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:caffe.InputParameter.shape)
  return &shape_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
InputParameter::shape() const {
  // @@protoc_insertion_point(field_list:caffe.InputParameter.shape)
  return shape_;
}

inline const InputParameter* InputParameter::internal_default_instance() {
  return &InputParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogParameter::kBaseFieldNumber;
const int LogParameter::kScaleFieldNumber;
const int LogParameter::kShiftFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogParameter::LogParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.LogParameter)
}

void LogParameter::InitAsDefaultInstance() {
}

LogParameter::LogParameter(const LogParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.LogParameter)
}

void LogParameter::SharedCtor() {
  _cached_size_ = 0;
  shift_ = 0;
  base_ = -1;
  scale_ = 1;
}

LogParameter::~LogParameter() {
  // @@protoc_insertion_point(destructor:caffe.LogParameter)
  SharedDtor();
}

void LogParameter::SharedDtor() {
}

void LogParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogParameter_descriptor_;
}

const LogParameter& LogParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<LogParameter> LogParameter_default_instance_;

LogParameter* LogParameter::New(::google::protobuf::Arena* arena) const {
  LogParameter* n = new LogParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.LogParameter)
  if (_has_bits_[0 / 32] & 7u) {
    base_ = -1;
    scale_ = 1;
    shift_ = 0;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LogParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.LogParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float base = 1 [default = -1];
      case 1: {
        if (tag == 13) {
          set_has_base();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &base_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_scale;
        break;
      }

      // optional float scale = 2 [default = 1];
      case 2: {
        if (tag == 21) {
         parse_scale:
          set_has_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_shift;
        break;
      }

      // optional float shift = 3 [default = 0];
      case 3: {
        if (tag == 29) {
         parse_shift:
          set_has_shift();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shift_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.LogParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.LogParameter)
  return false;
#undef DO_
}

void LogParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.LogParameter)
  // optional float base = 1 [default = -1];
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->base(), output);
  }

  // optional float scale = 2 [default = 1];
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }

  // optional float shift = 3 [default = 0];
  if (has_shift()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->shift(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.LogParameter)
}

::google::protobuf::uint8* LogParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.LogParameter)
  // optional float base = 1 [default = -1];
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->base(), target);
  }

  // optional float scale = 2 [default = 1];
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }

  // optional float shift = 3 [default = 0];
  if (has_shift()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->shift(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.LogParameter)
  return target;
}

size_t LogParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.LogParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional float base = 1 [default = -1];
    if (has_base()) {
      total_size += 1 + 4;
    }

    // optional float scale = 2 [default = 1];
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional float shift = 3 [default = 0];
    if (has_shift()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.LogParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LogParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.LogParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.LogParameter)
    UnsafeMergeFrom(*source);
  }
}

void LogParameter::MergeFrom(const LogParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.LogParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void LogParameter::UnsafeMergeFrom(const LogParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      set_base(from.base());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_shift()) {
      set_shift(from.shift());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void LogParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.LogParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogParameter::CopyFrom(const LogParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.LogParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool LogParameter::IsInitialized() const {

  return true;
}

void LogParameter::Swap(LogParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogParameter::InternalSwap(LogParameter* other) {
  std::swap(base_, other->base_);
  std::swap(scale_, other->scale_);
  std::swap(shift_, other->shift_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogParameter_descriptor_;
  metadata.reflection = LogParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogParameter

// optional float base = 1 [default = -1];
bool LogParameter::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LogParameter::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
void LogParameter::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
void LogParameter::clear_base() {
  base_ = -1;
  clear_has_base();
}
float LogParameter::base() const {
  // @@protoc_insertion_point(field_get:caffe.LogParameter.base)
  return base_;
}
void LogParameter::set_base(float value) {
  set_has_base();
  base_ = value;
  // @@protoc_insertion_point(field_set:caffe.LogParameter.base)
}

// optional float scale = 2 [default = 1];
bool LogParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LogParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000002u;
}
void LogParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
void LogParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
float LogParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.LogParameter.scale)
  return scale_;
}
void LogParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.LogParameter.scale)
}

// optional float shift = 3 [default = 0];
bool LogParameter::has_shift() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LogParameter::set_has_shift() {
  _has_bits_[0] |= 0x00000004u;
}
void LogParameter::clear_has_shift() {
  _has_bits_[0] &= ~0x00000004u;
}
void LogParameter::clear_shift() {
  shift_ = 0;
  clear_has_shift();
}
float LogParameter::shift() const {
  // @@protoc_insertion_point(field_get:caffe.LogParameter.shift)
  return shift_;
}
void LogParameter::set_shift(float value) {
  set_has_shift();
  shift_ = value;
  // @@protoc_insertion_point(field_set:caffe.LogParameter.shift)
}

inline const LogParameter* LogParameter::internal_default_instance() {
  return &LogParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* LRNParameter_NormRegion_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LRNParameter_NormRegion_descriptor_;
}
bool LRNParameter_NormRegion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LRNParameter_NormRegion LRNParameter::ACROSS_CHANNELS;
const LRNParameter_NormRegion LRNParameter::WITHIN_CHANNEL;
const LRNParameter_NormRegion LRNParameter::NormRegion_MIN;
const LRNParameter_NormRegion LRNParameter::NormRegion_MAX;
const int LRNParameter::NormRegion_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* LRNParameter_Engine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LRNParameter_Engine_descriptor_;
}
bool LRNParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LRNParameter_Engine LRNParameter::DEFAULT;
const LRNParameter_Engine LRNParameter::CAFFE;
const LRNParameter_Engine LRNParameter::CUDNN;
const LRNParameter_Engine LRNParameter::Engine_MIN;
const LRNParameter_Engine LRNParameter::Engine_MAX;
const int LRNParameter::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LRNParameter::kLocalSizeFieldNumber;
const int LRNParameter::kAlphaFieldNumber;
const int LRNParameter::kBetaFieldNumber;
const int LRNParameter::kNormRegionFieldNumber;
const int LRNParameter::kKFieldNumber;
const int LRNParameter::kEngineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LRNParameter::LRNParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.LRNParameter)
}

void LRNParameter::InitAsDefaultInstance() {
}

LRNParameter::LRNParameter(const LRNParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.LRNParameter)
}

void LRNParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&norm_region_, 0, reinterpret_cast<char*>(&engine_) -
    reinterpret_cast<char*>(&norm_region_) + sizeof(engine_));
  local_size_ = 5u;
  alpha_ = 1;
  beta_ = 0.75f;
  k_ = 1;
}

LRNParameter::~LRNParameter() {
  // @@protoc_insertion_point(destructor:caffe.LRNParameter)
  SharedDtor();
}

void LRNParameter::SharedDtor() {
}

void LRNParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LRNParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LRNParameter_descriptor_;
}

const LRNParameter& LRNParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<LRNParameter> LRNParameter_default_instance_;

LRNParameter* LRNParameter::New(::google::protobuf::Arena* arena) const {
  LRNParameter* n = new LRNParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LRNParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.LRNParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LRNParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LRNParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(norm_region_, engine_);
    local_size_ = 5u;
    alpha_ = 1;
    beta_ = 0.75f;
    k_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LRNParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.LRNParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 local_size = 1 [default = 5];
      case 1: {
        if (tag == 8) {
          set_has_local_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_alpha;
        break;
      }

      // optional float alpha = 2 [default = 1];
      case 2: {
        if (tag == 21) {
         parse_alpha:
          set_has_alpha();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_beta;
        break;
      }

      // optional float beta = 3 [default = 0.75];
      case 3: {
        if (tag == 29) {
         parse_beta:
          set_has_beta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beta_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_norm_region;
        break;
      }

      // optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
      case 4: {
        if (tag == 32) {
         parse_norm_region:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::LRNParameter_NormRegion_IsValid(value)) {
            set_norm_region(static_cast< ::caffe::LRNParameter_NormRegion >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_k;
        break;
      }

      // optional float k = 5 [default = 1];
      case 5: {
        if (tag == 45) {
         parse_k:
          set_has_k();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &k_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_engine;
        break;
      }

      // optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
      case 6: {
        if (tag == 48) {
         parse_engine:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::LRNParameter_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::LRNParameter_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.LRNParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.LRNParameter)
  return false;
#undef DO_
}

void LRNParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.LRNParameter)
  // optional uint32 local_size = 1 [default = 5];
  if (has_local_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->local_size(), output);
  }

  // optional float alpha = 2 [default = 1];
  if (has_alpha()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->alpha(), output);
  }

  // optional float beta = 3 [default = 0.75];
  if (has_beta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->beta(), output);
  }

  // optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
  if (has_norm_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->norm_region(), output);
  }

  // optional float k = 5 [default = 1];
  if (has_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->k(), output);
  }

  // optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
  if (has_engine()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->engine(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.LRNParameter)
}

::google::protobuf::uint8* LRNParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.LRNParameter)
  // optional uint32 local_size = 1 [default = 5];
  if (has_local_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->local_size(), target);
  }

  // optional float alpha = 2 [default = 1];
  if (has_alpha()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->alpha(), target);
  }

  // optional float beta = 3 [default = 0.75];
  if (has_beta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->beta(), target);
  }

  // optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
  if (has_norm_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->norm_region(), target);
  }

  // optional float k = 5 [default = 1];
  if (has_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->k(), target);
  }

  // optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
  if (has_engine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->engine(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.LRNParameter)
  return target;
}

size_t LRNParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.LRNParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 local_size = 1 [default = 5];
    if (has_local_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->local_size());
    }

    // optional float alpha = 2 [default = 1];
    if (has_alpha()) {
      total_size += 1 + 4;
    }

    // optional float beta = 3 [default = 0.75];
    if (has_beta()) {
      total_size += 1 + 4;
    }

    // optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
    if (has_norm_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->norm_region());
    }

    // optional float k = 5 [default = 1];
    if (has_k()) {
      total_size += 1 + 4;
    }

    // optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LRNParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.LRNParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LRNParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LRNParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.LRNParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.LRNParameter)
    UnsafeMergeFrom(*source);
  }
}

void LRNParameter::MergeFrom(const LRNParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.LRNParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void LRNParameter::UnsafeMergeFrom(const LRNParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_local_size()) {
      set_local_size(from.local_size());
    }
    if (from.has_alpha()) {
      set_alpha(from.alpha());
    }
    if (from.has_beta()) {
      set_beta(from.beta());
    }
    if (from.has_norm_region()) {
      set_norm_region(from.norm_region());
    }
    if (from.has_k()) {
      set_k(from.k());
    }
    if (from.has_engine()) {
      set_engine(from.engine());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void LRNParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.LRNParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LRNParameter::CopyFrom(const LRNParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.LRNParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool LRNParameter::IsInitialized() const {

  return true;
}

void LRNParameter::Swap(LRNParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LRNParameter::InternalSwap(LRNParameter* other) {
  std::swap(local_size_, other->local_size_);
  std::swap(alpha_, other->alpha_);
  std::swap(beta_, other->beta_);
  std::swap(norm_region_, other->norm_region_);
  std::swap(k_, other->k_);
  std::swap(engine_, other->engine_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LRNParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LRNParameter_descriptor_;
  metadata.reflection = LRNParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LRNParameter

// optional uint32 local_size = 1 [default = 5];
bool LRNParameter::has_local_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LRNParameter::set_has_local_size() {
  _has_bits_[0] |= 0x00000001u;
}
void LRNParameter::clear_has_local_size() {
  _has_bits_[0] &= ~0x00000001u;
}
void LRNParameter::clear_local_size() {
  local_size_ = 5u;
  clear_has_local_size();
}
::google::protobuf::uint32 LRNParameter::local_size() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.local_size)
  return local_size_;
}
void LRNParameter::set_local_size(::google::protobuf::uint32 value) {
  set_has_local_size();
  local_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.local_size)
}

// optional float alpha = 2 [default = 1];
bool LRNParameter::has_alpha() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LRNParameter::set_has_alpha() {
  _has_bits_[0] |= 0x00000002u;
}
void LRNParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000002u;
}
void LRNParameter::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
float LRNParameter::alpha() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.alpha)
  return alpha_;
}
void LRNParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.alpha)
}

// optional float beta = 3 [default = 0.75];
bool LRNParameter::has_beta() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LRNParameter::set_has_beta() {
  _has_bits_[0] |= 0x00000004u;
}
void LRNParameter::clear_has_beta() {
  _has_bits_[0] &= ~0x00000004u;
}
void LRNParameter::clear_beta() {
  beta_ = 0.75f;
  clear_has_beta();
}
float LRNParameter::beta() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.beta)
  return beta_;
}
void LRNParameter::set_beta(float value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.beta)
}

// optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
bool LRNParameter::has_norm_region() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LRNParameter::set_has_norm_region() {
  _has_bits_[0] |= 0x00000008u;
}
void LRNParameter::clear_has_norm_region() {
  _has_bits_[0] &= ~0x00000008u;
}
void LRNParameter::clear_norm_region() {
  norm_region_ = 0;
  clear_has_norm_region();
}
::caffe::LRNParameter_NormRegion LRNParameter::norm_region() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.norm_region)
  return static_cast< ::caffe::LRNParameter_NormRegion >(norm_region_);
}
void LRNParameter::set_norm_region(::caffe::LRNParameter_NormRegion value) {
  assert(::caffe::LRNParameter_NormRegion_IsValid(value));
  set_has_norm_region();
  norm_region_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.norm_region)
}

// optional float k = 5 [default = 1];
bool LRNParameter::has_k() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LRNParameter::set_has_k() {
  _has_bits_[0] |= 0x00000010u;
}
void LRNParameter::clear_has_k() {
  _has_bits_[0] &= ~0x00000010u;
}
void LRNParameter::clear_k() {
  k_ = 1;
  clear_has_k();
}
float LRNParameter::k() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.k)
  return k_;
}
void LRNParameter::set_k(float value) {
  set_has_k();
  k_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.k)
}

// optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
bool LRNParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LRNParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000020u;
}
void LRNParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000020u;
}
void LRNParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
::caffe::LRNParameter_Engine LRNParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.engine)
  return static_cast< ::caffe::LRNParameter_Engine >(engine_);
}
void LRNParameter::set_engine(::caffe::LRNParameter_Engine value) {
  assert(::caffe::LRNParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.engine)
}

inline const LRNParameter* LRNParameter::internal_default_instance() {
  return &LRNParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemoryDataParameter::kBatchSizeFieldNumber;
const int MemoryDataParameter::kChannelsFieldNumber;
const int MemoryDataParameter::kHeightFieldNumber;
const int MemoryDataParameter::kWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemoryDataParameter::MemoryDataParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.MemoryDataParameter)
}

void MemoryDataParameter::InitAsDefaultInstance() {
}

MemoryDataParameter::MemoryDataParameter(const MemoryDataParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.MemoryDataParameter)
}

void MemoryDataParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&batch_size_, 0, reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&batch_size_) + sizeof(width_));
}

MemoryDataParameter::~MemoryDataParameter() {
  // @@protoc_insertion_point(destructor:caffe.MemoryDataParameter)
  SharedDtor();
}

void MemoryDataParameter::SharedDtor() {
}

void MemoryDataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemoryDataParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemoryDataParameter_descriptor_;
}

const MemoryDataParameter& MemoryDataParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MemoryDataParameter> MemoryDataParameter_default_instance_;

MemoryDataParameter* MemoryDataParameter::New(::google::protobuf::Arena* arena) const {
  MemoryDataParameter* n = new MemoryDataParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MemoryDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.MemoryDataParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MemoryDataParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MemoryDataParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(batch_size_, width_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MemoryDataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.MemoryDataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 batch_size = 1;
      case 1: {
        if (tag == 8) {
          set_has_batch_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_channels;
        break;
      }

      // optional uint32 channels = 2;
      case 2: {
        if (tag == 16) {
         parse_channels:
          set_has_channels();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channels_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }

      // optional uint32 height = 3;
      case 3: {
        if (tag == 24) {
         parse_height:
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_width;
        break;
      }

      // optional uint32 width = 4;
      case 4: {
        if (tag == 32) {
         parse_width:
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.MemoryDataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.MemoryDataParameter)
  return false;
#undef DO_
}

void MemoryDataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.MemoryDataParameter)
  // optional uint32 batch_size = 1;
  if (has_batch_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->batch_size(), output);
  }

  // optional uint32 channels = 2;
  if (has_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channels(), output);
  }

  // optional uint32 height = 3;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->height(), output);
  }

  // optional uint32 width = 4;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->width(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.MemoryDataParameter)
}

::google::protobuf::uint8* MemoryDataParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.MemoryDataParameter)
  // optional uint32 batch_size = 1;
  if (has_batch_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->batch_size(), target);
  }

  // optional uint32 channels = 2;
  if (has_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channels(), target);
  }

  // optional uint32 height = 3;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->height(), target);
  }

  // optional uint32 width = 4;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->width(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.MemoryDataParameter)
  return target;
}

size_t MemoryDataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.MemoryDataParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 batch_size = 1;
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_size());
    }

    // optional uint32 channels = 2;
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channels());
    }

    // optional uint32 height = 3;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // optional uint32 width = 4;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemoryDataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.MemoryDataParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MemoryDataParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MemoryDataParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.MemoryDataParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.MemoryDataParameter)
    UnsafeMergeFrom(*source);
  }
}

void MemoryDataParameter::MergeFrom(const MemoryDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.MemoryDataParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MemoryDataParameter::UnsafeMergeFrom(const MemoryDataParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_batch_size()) {
      set_batch_size(from.batch_size());
    }
    if (from.has_channels()) {
      set_channels(from.channels());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void MemoryDataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.MemoryDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryDataParameter::CopyFrom(const MemoryDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.MemoryDataParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MemoryDataParameter::IsInitialized() const {

  return true;
}

void MemoryDataParameter::Swap(MemoryDataParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemoryDataParameter::InternalSwap(MemoryDataParameter* other) {
  std::swap(batch_size_, other->batch_size_);
  std::swap(channels_, other->channels_);
  std::swap(height_, other->height_);
  std::swap(width_, other->width_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MemoryDataParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemoryDataParameter_descriptor_;
  metadata.reflection = MemoryDataParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MemoryDataParameter

// optional uint32 batch_size = 1;
bool MemoryDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MemoryDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000001u;
}
void MemoryDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000001u;
}
void MemoryDataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
::google::protobuf::uint32 MemoryDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.MemoryDataParameter.batch_size)
  return batch_size_;
}
void MemoryDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.MemoryDataParameter.batch_size)
}

// optional uint32 channels = 2;
bool MemoryDataParameter::has_channels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MemoryDataParameter::set_has_channels() {
  _has_bits_[0] |= 0x00000002u;
}
void MemoryDataParameter::clear_has_channels() {
  _has_bits_[0] &= ~0x00000002u;
}
void MemoryDataParameter::clear_channels() {
  channels_ = 0u;
  clear_has_channels();
}
::google::protobuf::uint32 MemoryDataParameter::channels() const {
  // @@protoc_insertion_point(field_get:caffe.MemoryDataParameter.channels)
  return channels_;
}
void MemoryDataParameter::set_channels(::google::protobuf::uint32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.MemoryDataParameter.channels)
}

// optional uint32 height = 3;
bool MemoryDataParameter::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MemoryDataParameter::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
void MemoryDataParameter::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
void MemoryDataParameter::clear_height() {
  height_ = 0u;
  clear_has_height();
}
::google::protobuf::uint32 MemoryDataParameter::height() const {
  // @@protoc_insertion_point(field_get:caffe.MemoryDataParameter.height)
  return height_;
}
void MemoryDataParameter::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.MemoryDataParameter.height)
}

// optional uint32 width = 4;
bool MemoryDataParameter::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MemoryDataParameter::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
void MemoryDataParameter::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
void MemoryDataParameter::clear_width() {
  width_ = 0u;
  clear_has_width();
}
::google::protobuf::uint32 MemoryDataParameter::width() const {
  // @@protoc_insertion_point(field_get:caffe.MemoryDataParameter.width)
  return width_;
}
void MemoryDataParameter::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.MemoryDataParameter.width)
}

inline const MemoryDataParameter* MemoryDataParameter::internal_default_instance() {
  return &MemoryDataParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MVNParameter::kNormalizeVarianceFieldNumber;
const int MVNParameter::kAcrossChannelsFieldNumber;
const int MVNParameter::kEpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MVNParameter::MVNParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.MVNParameter)
}

void MVNParameter::InitAsDefaultInstance() {
}

MVNParameter::MVNParameter(const MVNParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.MVNParameter)
}

void MVNParameter::SharedCtor() {
  _cached_size_ = 0;
  across_channels_ = false;
  normalize_variance_ = true;
  eps_ = 1e-009f;
}

MVNParameter::~MVNParameter() {
  // @@protoc_insertion_point(destructor:caffe.MVNParameter)
  SharedDtor();
}

void MVNParameter::SharedDtor() {
}

void MVNParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MVNParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MVNParameter_descriptor_;
}

const MVNParameter& MVNParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MVNParameter> MVNParameter_default_instance_;

MVNParameter* MVNParameter::New(::google::protobuf::Arena* arena) const {
  MVNParameter* n = new MVNParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MVNParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.MVNParameter)
  if (_has_bits_[0 / 32] & 7u) {
    normalize_variance_ = true;
    across_channels_ = false;
    eps_ = 1e-009f;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MVNParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.MVNParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool normalize_variance = 1 [default = true];
      case 1: {
        if (tag == 8) {
          set_has_normalize_variance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &normalize_variance_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_across_channels;
        break;
      }

      // optional bool across_channels = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_across_channels:
          set_has_across_channels();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &across_channels_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_eps;
        break;
      }

      // optional float eps = 3 [default = 1e-009];
      case 3: {
        if (tag == 29) {
         parse_eps:
          set_has_eps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eps_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.MVNParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.MVNParameter)
  return false;
#undef DO_
}

void MVNParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.MVNParameter)
  // optional bool normalize_variance = 1 [default = true];
  if (has_normalize_variance()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->normalize_variance(), output);
  }

  // optional bool across_channels = 2 [default = false];
  if (has_across_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->across_channels(), output);
  }

  // optional float eps = 3 [default = 1e-009];
  if (has_eps()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->eps(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.MVNParameter)
}

::google::protobuf::uint8* MVNParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.MVNParameter)
  // optional bool normalize_variance = 1 [default = true];
  if (has_normalize_variance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->normalize_variance(), target);
  }

  // optional bool across_channels = 2 [default = false];
  if (has_across_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->across_channels(), target);
  }

  // optional float eps = 3 [default = 1e-009];
  if (has_eps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->eps(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.MVNParameter)
  return target;
}

size_t MVNParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.MVNParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional bool normalize_variance = 1 [default = true];
    if (has_normalize_variance()) {
      total_size += 1 + 1;
    }

    // optional bool across_channels = 2 [default = false];
    if (has_across_channels()) {
      total_size += 1 + 1;
    }

    // optional float eps = 3 [default = 1e-009];
    if (has_eps()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MVNParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.MVNParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MVNParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MVNParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.MVNParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.MVNParameter)
    UnsafeMergeFrom(*source);
  }
}

void MVNParameter::MergeFrom(const MVNParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.MVNParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MVNParameter::UnsafeMergeFrom(const MVNParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_normalize_variance()) {
      set_normalize_variance(from.normalize_variance());
    }
    if (from.has_across_channels()) {
      set_across_channels(from.across_channels());
    }
    if (from.has_eps()) {
      set_eps(from.eps());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void MVNParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.MVNParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MVNParameter::CopyFrom(const MVNParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.MVNParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MVNParameter::IsInitialized() const {

  return true;
}

void MVNParameter::Swap(MVNParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MVNParameter::InternalSwap(MVNParameter* other) {
  std::swap(normalize_variance_, other->normalize_variance_);
  std::swap(across_channels_, other->across_channels_);
  std::swap(eps_, other->eps_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MVNParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MVNParameter_descriptor_;
  metadata.reflection = MVNParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MVNParameter

// optional bool normalize_variance = 1 [default = true];
bool MVNParameter::has_normalize_variance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MVNParameter::set_has_normalize_variance() {
  _has_bits_[0] |= 0x00000001u;
}
void MVNParameter::clear_has_normalize_variance() {
  _has_bits_[0] &= ~0x00000001u;
}
void MVNParameter::clear_normalize_variance() {
  normalize_variance_ = true;
  clear_has_normalize_variance();
}
bool MVNParameter::normalize_variance() const {
  // @@protoc_insertion_point(field_get:caffe.MVNParameter.normalize_variance)
  return normalize_variance_;
}
void MVNParameter::set_normalize_variance(bool value) {
  set_has_normalize_variance();
  normalize_variance_ = value;
  // @@protoc_insertion_point(field_set:caffe.MVNParameter.normalize_variance)
}

// optional bool across_channels = 2 [default = false];
bool MVNParameter::has_across_channels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MVNParameter::set_has_across_channels() {
  _has_bits_[0] |= 0x00000002u;
}
void MVNParameter::clear_has_across_channels() {
  _has_bits_[0] &= ~0x00000002u;
}
void MVNParameter::clear_across_channels() {
  across_channels_ = false;
  clear_has_across_channels();
}
bool MVNParameter::across_channels() const {
  // @@protoc_insertion_point(field_get:caffe.MVNParameter.across_channels)
  return across_channels_;
}
void MVNParameter::set_across_channels(bool value) {
  set_has_across_channels();
  across_channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.MVNParameter.across_channels)
}

// optional float eps = 3 [default = 1e-009];
bool MVNParameter::has_eps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MVNParameter::set_has_eps() {
  _has_bits_[0] |= 0x00000004u;
}
void MVNParameter::clear_has_eps() {
  _has_bits_[0] &= ~0x00000004u;
}
void MVNParameter::clear_eps() {
  eps_ = 1e-009f;
  clear_has_eps();
}
float MVNParameter::eps() const {
  // @@protoc_insertion_point(field_get:caffe.MVNParameter.eps)
  return eps_;
}
void MVNParameter::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:caffe.MVNParameter.eps)
}

inline const MVNParameter* MVNParameter::internal_default_instance() {
  return &MVNParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParameterParameter::kShapeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParameterParameter::ParameterParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ParameterParameter)
}

void ParameterParameter::InitAsDefaultInstance() {
  shape_ = const_cast< ::caffe::BlobShape*>(
      ::caffe::BlobShape::internal_default_instance());
}

ParameterParameter::ParameterParameter(const ParameterParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ParameterParameter)
}

void ParameterParameter::SharedCtor() {
  _cached_size_ = 0;
  shape_ = NULL;
}

ParameterParameter::~ParameterParameter() {
  // @@protoc_insertion_point(destructor:caffe.ParameterParameter)
  SharedDtor();
}

void ParameterParameter::SharedDtor() {
  if (this != &ParameterParameter_default_instance_.get()) {
    delete shape_;
  }
}

void ParameterParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParameterParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParameterParameter_descriptor_;
}

const ParameterParameter& ParameterParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ParameterParameter> ParameterParameter_default_instance_;

ParameterParameter* ParameterParameter::New(::google::protobuf::Arena* arena) const {
  ParameterParameter* n = new ParameterParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ParameterParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ParameterParameter)
  if (has_shape()) {
    if (shape_ != NULL) shape_->::caffe::BlobShape::Clear();
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ParameterParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ParameterParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.BlobShape shape = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ParameterParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ParameterParameter)
  return false;
#undef DO_
}

void ParameterParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ParameterParameter)
  // optional .caffe.BlobShape shape = 1;
  if (has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->shape_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ParameterParameter)
}

::google::protobuf::uint8* ParameterParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ParameterParameter)
  // optional .caffe.BlobShape shape = 1;
  if (has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->shape_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ParameterParameter)
  return target;
}

size_t ParameterParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ParameterParameter)
  size_t total_size = 0;

  // optional .caffe.BlobShape shape = 1;
  if (has_shape()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->shape_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParameterParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ParameterParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ParameterParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ParameterParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ParameterParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ParameterParameter)
    UnsafeMergeFrom(*source);
  }
}

void ParameterParameter::MergeFrom(const ParameterParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ParameterParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ParameterParameter::UnsafeMergeFrom(const ParameterParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shape()) {
      mutable_shape()->::caffe::BlobShape::MergeFrom(from.shape());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ParameterParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ParameterParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParameterParameter::CopyFrom(const ParameterParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ParameterParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ParameterParameter::IsInitialized() const {

  return true;
}

void ParameterParameter::Swap(ParameterParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParameterParameter::InternalSwap(ParameterParameter* other) {
  std::swap(shape_, other->shape_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParameterParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParameterParameter_descriptor_;
  metadata.reflection = ParameterParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ParameterParameter

// optional .caffe.BlobShape shape = 1;
bool ParameterParameter::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ParameterParameter::set_has_shape() {
  _has_bits_[0] |= 0x00000001u;
}
void ParameterParameter::clear_has_shape() {
  _has_bits_[0] &= ~0x00000001u;
}
void ParameterParameter::clear_shape() {
  if (shape_ != NULL) shape_->::caffe::BlobShape::Clear();
  clear_has_shape();
}
const ::caffe::BlobShape& ParameterParameter::shape() const {
  // @@protoc_insertion_point(field_get:caffe.ParameterParameter.shape)
  return shape_ != NULL ? *shape_
                         : *::caffe::BlobShape::internal_default_instance();
}
::caffe::BlobShape* ParameterParameter::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) {
    shape_ = new ::caffe::BlobShape;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ParameterParameter.shape)
  return shape_;
}
::caffe::BlobShape* ParameterParameter::release_shape() {
  // @@protoc_insertion_point(field_release:caffe.ParameterParameter.shape)
  clear_has_shape();
  ::caffe::BlobShape* temp = shape_;
  shape_ = NULL;
  return temp;
}
void ParameterParameter::set_allocated_shape(::caffe::BlobShape* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ParameterParameter.shape)
}

inline const ParameterParameter* ParameterParameter::internal_default_instance() {
  return &ParameterParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* PoolingParameter_PoolMethod_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PoolingParameter_PoolMethod_descriptor_;
}
bool PoolingParameter_PoolMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PoolingParameter_PoolMethod PoolingParameter::MAX;
const PoolingParameter_PoolMethod PoolingParameter::AVE;
const PoolingParameter_PoolMethod PoolingParameter::STOCHASTIC;
const PoolingParameter_PoolMethod PoolingParameter::PoolMethod_MIN;
const PoolingParameter_PoolMethod PoolingParameter::PoolMethod_MAX;
const int PoolingParameter::PoolMethod_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PoolingParameter_Engine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PoolingParameter_Engine_descriptor_;
}
bool PoolingParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PoolingParameter_Engine PoolingParameter::DEFAULT;
const PoolingParameter_Engine PoolingParameter::CAFFE;
const PoolingParameter_Engine PoolingParameter::CUDNN;
const PoolingParameter_Engine PoolingParameter::Engine_MIN;
const PoolingParameter_Engine PoolingParameter::Engine_MAX;
const int PoolingParameter::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PoolingParameter::kPoolFieldNumber;
const int PoolingParameter::kPadFieldNumber;
const int PoolingParameter::kPadHFieldNumber;
const int PoolingParameter::kPadWFieldNumber;
const int PoolingParameter::kKernelSizeFieldNumber;
const int PoolingParameter::kKernelHFieldNumber;
const int PoolingParameter::kKernelWFieldNumber;
const int PoolingParameter::kStrideFieldNumber;
const int PoolingParameter::kStrideHFieldNumber;
const int PoolingParameter::kStrideWFieldNumber;
const int PoolingParameter::kEngineFieldNumber;
const int PoolingParameter::kGlobalPoolingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PoolingParameter::PoolingParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.PoolingParameter)
}

void PoolingParameter::InitAsDefaultInstance() {
}

PoolingParameter::PoolingParameter(const PoolingParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.PoolingParameter)
}

void PoolingParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pool_, 0, reinterpret_cast<char*>(&global_pooling_) -
    reinterpret_cast<char*>(&pool_) + sizeof(global_pooling_));
  stride_ = 1u;
}

PoolingParameter::~PoolingParameter() {
  // @@protoc_insertion_point(destructor:caffe.PoolingParameter)
  SharedDtor();
}

void PoolingParameter::SharedDtor() {
}

void PoolingParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PoolingParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PoolingParameter_descriptor_;
}

const PoolingParameter& PoolingParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PoolingParameter> PoolingParameter_default_instance_;

PoolingParameter* PoolingParameter::New(::google::protobuf::Arena* arena) const {
  PoolingParameter* n = new PoolingParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PoolingParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.PoolingParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PoolingParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PoolingParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(pool_, kernel_w_);
    stride_ = 1u;
  }
  ZR_(stride_h_, global_pooling_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PoolingParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.PoolingParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::PoolingParameter_PoolMethod_IsValid(value)) {
            set_pool(static_cast< ::caffe::PoolingParameter_PoolMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_kernel_size;
        break;
      }

      // optional uint32 kernel_size = 2;
      case 2: {
        if (tag == 16) {
         parse_kernel_size:
          set_has_kernel_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_stride;
        break;
      }

      // optional uint32 stride = 3 [default = 1];
      case 3: {
        if (tag == 24) {
         parse_stride:
          set_has_stride();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pad;
        break;
      }

      // optional uint32 pad = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_pad:
          set_has_pad();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_kernel_h;
        break;
      }

      // optional uint32 kernel_h = 5;
      case 5: {
        if (tag == 40) {
         parse_kernel_h:
          set_has_kernel_h();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_h_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_kernel_w;
        break;
      }

      // optional uint32 kernel_w = 6;
      case 6: {
        if (tag == 48) {
         parse_kernel_w:
          set_has_kernel_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_w_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_stride_h;
        break;
      }

      // optional uint32 stride_h = 7;
      case 7: {
        if (tag == 56) {
         parse_stride_h:
          set_has_stride_h();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_h_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_stride_w;
        break;
      }

      // optional uint32 stride_w = 8;
      case 8: {
        if (tag == 64) {
         parse_stride_w:
          set_has_stride_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_w_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_pad_h;
        break;
      }

      // optional uint32 pad_h = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_pad_h:
          set_has_pad_h();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_h_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_pad_w;
        break;
      }

      // optional uint32 pad_w = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_pad_w:
          set_has_pad_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_w_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_engine;
        break;
      }

      // optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
      case 11: {
        if (tag == 88) {
         parse_engine:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::PoolingParameter_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::PoolingParameter_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_global_pooling;
        break;
      }

      // optional bool global_pooling = 12 [default = false];
      case 12: {
        if (tag == 96) {
         parse_global_pooling:
          set_has_global_pooling();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &global_pooling_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.PoolingParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.PoolingParameter)
  return false;
#undef DO_
}

void PoolingParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.PoolingParameter)
  // optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
  if (has_pool()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->pool(), output);
  }

  // optional uint32 kernel_size = 2;
  if (has_kernel_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->kernel_size(), output);
  }

  // optional uint32 stride = 3 [default = 1];
  if (has_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stride(), output);
  }

  // optional uint32 pad = 4 [default = 0];
  if (has_pad()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pad(), output);
  }

  // optional uint32 kernel_h = 5;
  if (has_kernel_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->kernel_h(), output);
  }

  // optional uint32 kernel_w = 6;
  if (has_kernel_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->kernel_w(), output);
  }

  // optional uint32 stride_h = 7;
  if (has_stride_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->stride_h(), output);
  }

  // optional uint32 stride_w = 8;
  if (has_stride_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->stride_w(), output);
  }

  // optional uint32 pad_h = 9 [default = 0];
  if (has_pad_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->pad_h(), output);
  }

  // optional uint32 pad_w = 10 [default = 0];
  if (has_pad_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->pad_w(), output);
  }

  // optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
  if (has_engine()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->engine(), output);
  }

  // optional bool global_pooling = 12 [default = false];
  if (has_global_pooling()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->global_pooling(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.PoolingParameter)
}

::google::protobuf::uint8* PoolingParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.PoolingParameter)
  // optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
  if (has_pool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->pool(), target);
  }

  // optional uint32 kernel_size = 2;
  if (has_kernel_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->kernel_size(), target);
  }

  // optional uint32 stride = 3 [default = 1];
  if (has_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stride(), target);
  }

  // optional uint32 pad = 4 [default = 0];
  if (has_pad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pad(), target);
  }

  // optional uint32 kernel_h = 5;
  if (has_kernel_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->kernel_h(), target);
  }

  // optional uint32 kernel_w = 6;
  if (has_kernel_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->kernel_w(), target);
  }

  // optional uint32 stride_h = 7;
  if (has_stride_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->stride_h(), target);
  }

  // optional uint32 stride_w = 8;
  if (has_stride_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->stride_w(), target);
  }

  // optional uint32 pad_h = 9 [default = 0];
  if (has_pad_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->pad_h(), target);
  }

  // optional uint32 pad_w = 10 [default = 0];
  if (has_pad_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->pad_w(), target);
  }

  // optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
  if (has_engine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->engine(), target);
  }

  // optional bool global_pooling = 12 [default = false];
  if (has_global_pooling()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->global_pooling(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.PoolingParameter)
  return target;
}

size_t PoolingParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.PoolingParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
    if (has_pool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pool());
    }

    // optional uint32 pad = 4 [default = 0];
    if (has_pad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad());
    }

    // optional uint32 pad_h = 9 [default = 0];
    if (has_pad_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_h());
    }

    // optional uint32 pad_w = 10 [default = 0];
    if (has_pad_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_w());
    }

    // optional uint32 kernel_size = 2;
    if (has_kernel_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_size());
    }

    // optional uint32 kernel_h = 5;
    if (has_kernel_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_h());
    }

    // optional uint32 kernel_w = 6;
    if (has_kernel_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_w());
    }

    // optional uint32 stride = 3 [default = 1];
    if (has_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional uint32 stride_h = 7;
    if (has_stride_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride_h());
    }

    // optional uint32 stride_w = 8;
    if (has_stride_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride_w());
    }

    // optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
    }

    // optional bool global_pooling = 12 [default = false];
    if (has_global_pooling()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PoolingParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.PoolingParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PoolingParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PoolingParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.PoolingParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.PoolingParameter)
    UnsafeMergeFrom(*source);
  }
}

void PoolingParameter::MergeFrom(const PoolingParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.PoolingParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PoolingParameter::UnsafeMergeFrom(const PoolingParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pool()) {
      set_pool(from.pool());
    }
    if (from.has_pad()) {
      set_pad(from.pad());
    }
    if (from.has_pad_h()) {
      set_pad_h(from.pad_h());
    }
    if (from.has_pad_w()) {
      set_pad_w(from.pad_w());
    }
    if (from.has_kernel_size()) {
      set_kernel_size(from.kernel_size());
    }
    if (from.has_kernel_h()) {
      set_kernel_h(from.kernel_h());
    }
    if (from.has_kernel_w()) {
      set_kernel_w(from.kernel_w());
    }
    if (from.has_stride()) {
      set_stride(from.stride());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_stride_h()) {
      set_stride_h(from.stride_h());
    }
    if (from.has_stride_w()) {
      set_stride_w(from.stride_w());
    }
    if (from.has_engine()) {
      set_engine(from.engine());
    }
    if (from.has_global_pooling()) {
      set_global_pooling(from.global_pooling());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void PoolingParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.PoolingParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoolingParameter::CopyFrom(const PoolingParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.PoolingParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PoolingParameter::IsInitialized() const {

  return true;
}

void PoolingParameter::Swap(PoolingParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PoolingParameter::InternalSwap(PoolingParameter* other) {
  std::swap(pool_, other->pool_);
  std::swap(pad_, other->pad_);
  std::swap(pad_h_, other->pad_h_);
  std::swap(pad_w_, other->pad_w_);
  std::swap(kernel_size_, other->kernel_size_);
  std::swap(kernel_h_, other->kernel_h_);
  std::swap(kernel_w_, other->kernel_w_);
  std::swap(stride_, other->stride_);
  std::swap(stride_h_, other->stride_h_);
  std::swap(stride_w_, other->stride_w_);
  std::swap(engine_, other->engine_);
  std::swap(global_pooling_, other->global_pooling_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PoolingParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PoolingParameter_descriptor_;
  metadata.reflection = PoolingParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PoolingParameter

// optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
bool PoolingParameter::has_pool() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PoolingParameter::set_has_pool() {
  _has_bits_[0] |= 0x00000001u;
}
void PoolingParameter::clear_has_pool() {
  _has_bits_[0] &= ~0x00000001u;
}
void PoolingParameter::clear_pool() {
  pool_ = 0;
  clear_has_pool();
}
::caffe::PoolingParameter_PoolMethod PoolingParameter::pool() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.pool)
  return static_cast< ::caffe::PoolingParameter_PoolMethod >(pool_);
}
void PoolingParameter::set_pool(::caffe::PoolingParameter_PoolMethod value) {
  assert(::caffe::PoolingParameter_PoolMethod_IsValid(value));
  set_has_pool();
  pool_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.pool)
}

// optional uint32 pad = 4 [default = 0];
bool PoolingParameter::has_pad() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PoolingParameter::set_has_pad() {
  _has_bits_[0] |= 0x00000002u;
}
void PoolingParameter::clear_has_pad() {
  _has_bits_[0] &= ~0x00000002u;
}
void PoolingParameter::clear_pad() {
  pad_ = 0u;
  clear_has_pad();
}
::google::protobuf::uint32 PoolingParameter::pad() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.pad)
  return pad_;
}
void PoolingParameter::set_pad(::google::protobuf::uint32 value) {
  set_has_pad();
  pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.pad)
}

// optional uint32 pad_h = 9 [default = 0];
bool PoolingParameter::has_pad_h() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PoolingParameter::set_has_pad_h() {
  _has_bits_[0] |= 0x00000004u;
}
void PoolingParameter::clear_has_pad_h() {
  _has_bits_[0] &= ~0x00000004u;
}
void PoolingParameter::clear_pad_h() {
  pad_h_ = 0u;
  clear_has_pad_h();
}
::google::protobuf::uint32 PoolingParameter::pad_h() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.pad_h)
  return pad_h_;
}
void PoolingParameter::set_pad_h(::google::protobuf::uint32 value) {
  set_has_pad_h();
  pad_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.pad_h)
}

// optional uint32 pad_w = 10 [default = 0];
bool PoolingParameter::has_pad_w() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PoolingParameter::set_has_pad_w() {
  _has_bits_[0] |= 0x00000008u;
}
void PoolingParameter::clear_has_pad_w() {
  _has_bits_[0] &= ~0x00000008u;
}
void PoolingParameter::clear_pad_w() {
  pad_w_ = 0u;
  clear_has_pad_w();
}
::google::protobuf::uint32 PoolingParameter::pad_w() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.pad_w)
  return pad_w_;
}
void PoolingParameter::set_pad_w(::google::protobuf::uint32 value) {
  set_has_pad_w();
  pad_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.pad_w)
}

// optional uint32 kernel_size = 2;
bool PoolingParameter::has_kernel_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PoolingParameter::set_has_kernel_size() {
  _has_bits_[0] |= 0x00000010u;
}
void PoolingParameter::clear_has_kernel_size() {
  _has_bits_[0] &= ~0x00000010u;
}
void PoolingParameter::clear_kernel_size() {
  kernel_size_ = 0u;
  clear_has_kernel_size();
}
::google::protobuf::uint32 PoolingParameter::kernel_size() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.kernel_size)
  return kernel_size_;
}
void PoolingParameter::set_kernel_size(::google::protobuf::uint32 value) {
  set_has_kernel_size();
  kernel_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.kernel_size)
}

// optional uint32 kernel_h = 5;
bool PoolingParameter::has_kernel_h() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PoolingParameter::set_has_kernel_h() {
  _has_bits_[0] |= 0x00000020u;
}
void PoolingParameter::clear_has_kernel_h() {
  _has_bits_[0] &= ~0x00000020u;
}
void PoolingParameter::clear_kernel_h() {
  kernel_h_ = 0u;
  clear_has_kernel_h();
}
::google::protobuf::uint32 PoolingParameter::kernel_h() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.kernel_h)
  return kernel_h_;
}
void PoolingParameter::set_kernel_h(::google::protobuf::uint32 value) {
  set_has_kernel_h();
  kernel_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.kernel_h)
}

// optional uint32 kernel_w = 6;
bool PoolingParameter::has_kernel_w() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PoolingParameter::set_has_kernel_w() {
  _has_bits_[0] |= 0x00000040u;
}
void PoolingParameter::clear_has_kernel_w() {
  _has_bits_[0] &= ~0x00000040u;
}
void PoolingParameter::clear_kernel_w() {
  kernel_w_ = 0u;
  clear_has_kernel_w();
}
::google::protobuf::uint32 PoolingParameter::kernel_w() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.kernel_w)
  return kernel_w_;
}
void PoolingParameter::set_kernel_w(::google::protobuf::uint32 value) {
  set_has_kernel_w();
  kernel_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.kernel_w)
}

// optional uint32 stride = 3 [default = 1];
bool PoolingParameter::has_stride() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PoolingParameter::set_has_stride() {
  _has_bits_[0] |= 0x00000080u;
}
void PoolingParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x00000080u;
}
void PoolingParameter::clear_stride() {
  stride_ = 1u;
  clear_has_stride();
}
::google::protobuf::uint32 PoolingParameter::stride() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.stride)
  return stride_;
}
void PoolingParameter::set_stride(::google::protobuf::uint32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.stride)
}

// optional uint32 stride_h = 7;
bool PoolingParameter::has_stride_h() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PoolingParameter::set_has_stride_h() {
  _has_bits_[0] |= 0x00000100u;
}
void PoolingParameter::clear_has_stride_h() {
  _has_bits_[0] &= ~0x00000100u;
}
void PoolingParameter::clear_stride_h() {
  stride_h_ = 0u;
  clear_has_stride_h();
}
::google::protobuf::uint32 PoolingParameter::stride_h() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.stride_h)
  return stride_h_;
}
void PoolingParameter::set_stride_h(::google::protobuf::uint32 value) {
  set_has_stride_h();
  stride_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.stride_h)
}

// optional uint32 stride_w = 8;
bool PoolingParameter::has_stride_w() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PoolingParameter::set_has_stride_w() {
  _has_bits_[0] |= 0x00000200u;
}
void PoolingParameter::clear_has_stride_w() {
  _has_bits_[0] &= ~0x00000200u;
}
void PoolingParameter::clear_stride_w() {
  stride_w_ = 0u;
  clear_has_stride_w();
}
::google::protobuf::uint32 PoolingParameter::stride_w() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.stride_w)
  return stride_w_;
}
void PoolingParameter::set_stride_w(::google::protobuf::uint32 value) {
  set_has_stride_w();
  stride_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.stride_w)
}

// optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
bool PoolingParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PoolingParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000400u;
}
void PoolingParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000400u;
}
void PoolingParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
::caffe::PoolingParameter_Engine PoolingParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.engine)
  return static_cast< ::caffe::PoolingParameter_Engine >(engine_);
}
void PoolingParameter::set_engine(::caffe::PoolingParameter_Engine value) {
  assert(::caffe::PoolingParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.engine)
}

// optional bool global_pooling = 12 [default = false];
bool PoolingParameter::has_global_pooling() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void PoolingParameter::set_has_global_pooling() {
  _has_bits_[0] |= 0x00000800u;
}
void PoolingParameter::clear_has_global_pooling() {
  _has_bits_[0] &= ~0x00000800u;
}
void PoolingParameter::clear_global_pooling() {
  global_pooling_ = false;
  clear_has_global_pooling();
}
bool PoolingParameter::global_pooling() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.global_pooling)
  return global_pooling_;
}
void PoolingParameter::set_global_pooling(bool value) {
  set_has_global_pooling();
  global_pooling_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.global_pooling)
}

inline const PoolingParameter* PoolingParameter::internal_default_instance() {
  return &PoolingParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PowerParameter::kPowerFieldNumber;
const int PowerParameter::kScaleFieldNumber;
const int PowerParameter::kShiftFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PowerParameter::PowerParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.PowerParameter)
}

void PowerParameter::InitAsDefaultInstance() {
}

PowerParameter::PowerParameter(const PowerParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.PowerParameter)
}

void PowerParameter::SharedCtor() {
  _cached_size_ = 0;
  shift_ = 0;
  power_ = 1;
  scale_ = 1;
}

PowerParameter::~PowerParameter() {
  // @@protoc_insertion_point(destructor:caffe.PowerParameter)
  SharedDtor();
}

void PowerParameter::SharedDtor() {
}

void PowerParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PowerParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PowerParameter_descriptor_;
}

const PowerParameter& PowerParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PowerParameter> PowerParameter_default_instance_;

PowerParameter* PowerParameter::New(::google::protobuf::Arena* arena) const {
  PowerParameter* n = new PowerParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PowerParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.PowerParameter)
  if (_has_bits_[0 / 32] & 7u) {
    power_ = 1;
    scale_ = 1;
    shift_ = 0;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PowerParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.PowerParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float power = 1 [default = 1];
      case 1: {
        if (tag == 13) {
          set_has_power();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &power_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_scale;
        break;
      }

      // optional float scale = 2 [default = 1];
      case 2: {
        if (tag == 21) {
         parse_scale:
          set_has_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_shift;
        break;
      }

      // optional float shift = 3 [default = 0];
      case 3: {
        if (tag == 29) {
         parse_shift:
          set_has_shift();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shift_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.PowerParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.PowerParameter)
  return false;
#undef DO_
}

void PowerParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.PowerParameter)
  // optional float power = 1 [default = 1];
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->power(), output);
  }

  // optional float scale = 2 [default = 1];
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }

  // optional float shift = 3 [default = 0];
  if (has_shift()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->shift(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.PowerParameter)
}

::google::protobuf::uint8* PowerParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.PowerParameter)
  // optional float power = 1 [default = 1];
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->power(), target);
  }

  // optional float scale = 2 [default = 1];
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }

  // optional float shift = 3 [default = 0];
  if (has_shift()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->shift(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.PowerParameter)
  return target;
}

size_t PowerParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.PowerParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional float power = 1 [default = 1];
    if (has_power()) {
      total_size += 1 + 4;
    }

    // optional float scale = 2 [default = 1];
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional float shift = 3 [default = 0];
    if (has_shift()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PowerParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.PowerParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PowerParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PowerParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.PowerParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.PowerParameter)
    UnsafeMergeFrom(*source);
  }
}

void PowerParameter::MergeFrom(const PowerParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.PowerParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PowerParameter::UnsafeMergeFrom(const PowerParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_shift()) {
      set_shift(from.shift());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void PowerParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.PowerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PowerParameter::CopyFrom(const PowerParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.PowerParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PowerParameter::IsInitialized() const {

  return true;
}

void PowerParameter::Swap(PowerParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PowerParameter::InternalSwap(PowerParameter* other) {
  std::swap(power_, other->power_);
  std::swap(scale_, other->scale_);
  std::swap(shift_, other->shift_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PowerParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PowerParameter_descriptor_;
  metadata.reflection = PowerParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PowerParameter

// optional float power = 1 [default = 1];
bool PowerParameter::has_power() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PowerParameter::set_has_power() {
  _has_bits_[0] |= 0x00000001u;
}
void PowerParameter::clear_has_power() {
  _has_bits_[0] &= ~0x00000001u;
}
void PowerParameter::clear_power() {
  power_ = 1;
  clear_has_power();
}
float PowerParameter::power() const {
  // @@protoc_insertion_point(field_get:caffe.PowerParameter.power)
  return power_;
}
void PowerParameter::set_power(float value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:caffe.PowerParameter.power)
}

// optional float scale = 2 [default = 1];
bool PowerParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PowerParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000002u;
}
void PowerParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
void PowerParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
float PowerParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.PowerParameter.scale)
  return scale_;
}
void PowerParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.PowerParameter.scale)
}

// optional float shift = 3 [default = 0];
bool PowerParameter::has_shift() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PowerParameter::set_has_shift() {
  _has_bits_[0] |= 0x00000004u;
}
void PowerParameter::clear_has_shift() {
  _has_bits_[0] &= ~0x00000004u;
}
void PowerParameter::clear_shift() {
  shift_ = 0;
  clear_has_shift();
}
float PowerParameter::shift() const {
  // @@protoc_insertion_point(field_get:caffe.PowerParameter.shift)
  return shift_;
}
void PowerParameter::set_shift(float value) {
  set_has_shift();
  shift_ = value;
  // @@protoc_insertion_point(field_set:caffe.PowerParameter.shift)
}

inline const PowerParameter* PowerParameter::internal_default_instance() {
  return &PowerParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PythonParameter::kModuleFieldNumber;
const int PythonParameter::kLayerFieldNumber;
const int PythonParameter::kParamStrFieldNumber;
const int PythonParameter::kShareInParallelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PythonParameter::PythonParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.PythonParameter)
}

void PythonParameter::InitAsDefaultInstance() {
}

PythonParameter::PythonParameter(const PythonParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.PythonParameter)
}

void PythonParameter::SharedCtor() {
  _cached_size_ = 0;
  module_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  layer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  share_in_parallel_ = false;
}

PythonParameter::~PythonParameter() {
  // @@protoc_insertion_point(destructor:caffe.PythonParameter)
  SharedDtor();
}

void PythonParameter::SharedDtor() {
  module_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  layer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param_str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PythonParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PythonParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PythonParameter_descriptor_;
}

const PythonParameter& PythonParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PythonParameter> PythonParameter_default_instance_;

PythonParameter* PythonParameter::New(::google::protobuf::Arena* arena) const {
  PythonParameter* n = new PythonParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PythonParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.PythonParameter)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_module()) {
      module_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_layer()) {
      layer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_param_str()) {
      param_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    share_in_parallel_ = false;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PythonParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.PythonParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string module = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->module().data(), this->module().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.PythonParameter.module");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_layer;
        break;
      }

      // optional string layer = 2;
      case 2: {
        if (tag == 18) {
         parse_layer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_layer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->layer().data(), this->layer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.PythonParameter.layer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_param_str;
        break;
      }

      // optional string param_str = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_param_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->param_str().data(), this->param_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.PythonParameter.param_str");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_share_in_parallel;
        break;
      }

      // optional bool share_in_parallel = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_share_in_parallel:
          set_has_share_in_parallel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &share_in_parallel_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.PythonParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.PythonParameter)
  return false;
#undef DO_
}

void PythonParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.PythonParameter)
  // optional string module = 1;
  if (has_module()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->module().data(), this->module().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PythonParameter.module");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->module(), output);
  }

  // optional string layer = 2;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->layer().data(), this->layer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PythonParameter.layer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->layer(), output);
  }

  // optional string param_str = 3 [default = ""];
  if (has_param_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param_str().data(), this->param_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PythonParameter.param_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->param_str(), output);
  }

  // optional bool share_in_parallel = 4 [default = false];
  if (has_share_in_parallel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->share_in_parallel(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.PythonParameter)
}

::google::protobuf::uint8* PythonParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.PythonParameter)
  // optional string module = 1;
  if (has_module()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->module().data(), this->module().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PythonParameter.module");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->module(), target);
  }

  // optional string layer = 2;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->layer().data(), this->layer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PythonParameter.layer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->layer(), target);
  }

  // optional string param_str = 3 [default = ""];
  if (has_param_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param_str().data(), this->param_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PythonParameter.param_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->param_str(), target);
  }

  // optional bool share_in_parallel = 4 [default = false];
  if (has_share_in_parallel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->share_in_parallel(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.PythonParameter)
  return target;
}

size_t PythonParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.PythonParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional string module = 1;
    if (has_module()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->module());
    }

    // optional string layer = 2;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->layer());
    }

    // optional string param_str = 3 [default = ""];
    if (has_param_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param_str());
    }

    // optional bool share_in_parallel = 4 [default = false];
    if (has_share_in_parallel()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PythonParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.PythonParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PythonParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PythonParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.PythonParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.PythonParameter)
    UnsafeMergeFrom(*source);
  }
}

void PythonParameter::MergeFrom(const PythonParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.PythonParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PythonParameter::UnsafeMergeFrom(const PythonParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_module()) {
      set_has_module();
      module_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.module_);
    }
    if (from.has_layer()) {
      set_has_layer();
      layer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.layer_);
    }
    if (from.has_param_str()) {
      set_has_param_str();
      param_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.param_str_);
    }
    if (from.has_share_in_parallel()) {
      set_share_in_parallel(from.share_in_parallel());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void PythonParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.PythonParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PythonParameter::CopyFrom(const PythonParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.PythonParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PythonParameter::IsInitialized() const {

  return true;
}

void PythonParameter::Swap(PythonParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PythonParameter::InternalSwap(PythonParameter* other) {
  module_.Swap(&other->module_);
  layer_.Swap(&other->layer_);
  param_str_.Swap(&other->param_str_);
  std::swap(share_in_parallel_, other->share_in_parallel_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PythonParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PythonParameter_descriptor_;
  metadata.reflection = PythonParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PythonParameter

// optional string module = 1;
bool PythonParameter::has_module() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PythonParameter::set_has_module() {
  _has_bits_[0] |= 0x00000001u;
}
void PythonParameter::clear_has_module() {
  _has_bits_[0] &= ~0x00000001u;
}
void PythonParameter::clear_module() {
  module_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_module();
}
const ::std::string& PythonParameter::module() const {
  // @@protoc_insertion_point(field_get:caffe.PythonParameter.module)
  return module_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PythonParameter::set_module(const ::std::string& value) {
  set_has_module();
  module_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PythonParameter.module)
}
void PythonParameter::set_module(const char* value) {
  set_has_module();
  module_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PythonParameter.module)
}
void PythonParameter::set_module(const char* value, size_t size) {
  set_has_module();
  module_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PythonParameter.module)
}
::std::string* PythonParameter::mutable_module() {
  set_has_module();
  // @@protoc_insertion_point(field_mutable:caffe.PythonParameter.module)
  return module_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PythonParameter::release_module() {
  // @@protoc_insertion_point(field_release:caffe.PythonParameter.module)
  clear_has_module();
  return module_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PythonParameter::set_allocated_module(::std::string* module) {
  if (module != NULL) {
    set_has_module();
  } else {
    clear_has_module();
  }
  module_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), module);
  // @@protoc_insertion_point(field_set_allocated:caffe.PythonParameter.module)
}

// optional string layer = 2;
bool PythonParameter::has_layer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PythonParameter::set_has_layer() {
  _has_bits_[0] |= 0x00000002u;
}
void PythonParameter::clear_has_layer() {
  _has_bits_[0] &= ~0x00000002u;
}
void PythonParameter::clear_layer() {
  layer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_layer();
}
const ::std::string& PythonParameter::layer() const {
  // @@protoc_insertion_point(field_get:caffe.PythonParameter.layer)
  return layer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PythonParameter::set_layer(const ::std::string& value) {
  set_has_layer();
  layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PythonParameter.layer)
}
void PythonParameter::set_layer(const char* value) {
  set_has_layer();
  layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PythonParameter.layer)
}
void PythonParameter::set_layer(const char* value, size_t size) {
  set_has_layer();
  layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PythonParameter.layer)
}
::std::string* PythonParameter::mutable_layer() {
  set_has_layer();
  // @@protoc_insertion_point(field_mutable:caffe.PythonParameter.layer)
  return layer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PythonParameter::release_layer() {
  // @@protoc_insertion_point(field_release:caffe.PythonParameter.layer)
  clear_has_layer();
  return layer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PythonParameter::set_allocated_layer(::std::string* layer) {
  if (layer != NULL) {
    set_has_layer();
  } else {
    clear_has_layer();
  }
  layer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), layer);
  // @@protoc_insertion_point(field_set_allocated:caffe.PythonParameter.layer)
}

// optional string param_str = 3 [default = ""];
bool PythonParameter::has_param_str() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PythonParameter::set_has_param_str() {
  _has_bits_[0] |= 0x00000004u;
}
void PythonParameter::clear_has_param_str() {
  _has_bits_[0] &= ~0x00000004u;
}
void PythonParameter::clear_param_str() {
  param_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_param_str();
}
const ::std::string& PythonParameter::param_str() const {
  // @@protoc_insertion_point(field_get:caffe.PythonParameter.param_str)
  return param_str_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PythonParameter::set_param_str(const ::std::string& value) {
  set_has_param_str();
  param_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PythonParameter.param_str)
}
void PythonParameter::set_param_str(const char* value) {
  set_has_param_str();
  param_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PythonParameter.param_str)
}
void PythonParameter::set_param_str(const char* value, size_t size) {
  set_has_param_str();
  param_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PythonParameter.param_str)
}
::std::string* PythonParameter::mutable_param_str() {
  set_has_param_str();
  // @@protoc_insertion_point(field_mutable:caffe.PythonParameter.param_str)
  return param_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PythonParameter::release_param_str() {
  // @@protoc_insertion_point(field_release:caffe.PythonParameter.param_str)
  clear_has_param_str();
  return param_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PythonParameter::set_allocated_param_str(::std::string* param_str) {
  if (param_str != NULL) {
    set_has_param_str();
  } else {
    clear_has_param_str();
  }
  param_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), param_str);
  // @@protoc_insertion_point(field_set_allocated:caffe.PythonParameter.param_str)
}

// optional bool share_in_parallel = 4 [default = false];
bool PythonParameter::has_share_in_parallel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PythonParameter::set_has_share_in_parallel() {
  _has_bits_[0] |= 0x00000008u;
}
void PythonParameter::clear_has_share_in_parallel() {
  _has_bits_[0] &= ~0x00000008u;
}
void PythonParameter::clear_share_in_parallel() {
  share_in_parallel_ = false;
  clear_has_share_in_parallel();
}
bool PythonParameter::share_in_parallel() const {
  // @@protoc_insertion_point(field_get:caffe.PythonParameter.share_in_parallel)
  return share_in_parallel_;
}
void PythonParameter::set_share_in_parallel(bool value) {
  set_has_share_in_parallel();
  share_in_parallel_ = value;
  // @@protoc_insertion_point(field_set:caffe.PythonParameter.share_in_parallel)
}

inline const PythonParameter* PythonParameter::internal_default_instance() {
  return &PythonParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecurrentParameter::kNumOutputFieldNumber;
const int RecurrentParameter::kWeightFillerFieldNumber;
const int RecurrentParameter::kBiasFillerFieldNumber;
const int RecurrentParameter::kDebugInfoFieldNumber;
const int RecurrentParameter::kExposeHiddenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecurrentParameter::RecurrentParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.RecurrentParameter)
}

void RecurrentParameter::InitAsDefaultInstance() {
  weight_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  bias_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
}

RecurrentParameter::RecurrentParameter(const RecurrentParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.RecurrentParameter)
}

void RecurrentParameter::SharedCtor() {
  _cached_size_ = 0;
  weight_filler_ = NULL;
  bias_filler_ = NULL;
  ::memset(&num_output_, 0, reinterpret_cast<char*>(&expose_hidden_) -
    reinterpret_cast<char*>(&num_output_) + sizeof(expose_hidden_));
}

RecurrentParameter::~RecurrentParameter() {
  // @@protoc_insertion_point(destructor:caffe.RecurrentParameter)
  SharedDtor();
}

void RecurrentParameter::SharedDtor() {
  if (this != &RecurrentParameter_default_instance_.get()) {
    delete weight_filler_;
    delete bias_filler_;
  }
}

void RecurrentParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecurrentParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecurrentParameter_descriptor_;
}

const RecurrentParameter& RecurrentParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RecurrentParameter> RecurrentParameter_default_instance_;

RecurrentParameter* RecurrentParameter::New(::google::protobuf::Arena* arena) const {
  RecurrentParameter* n = new RecurrentParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecurrentParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.RecurrentParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RecurrentParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RecurrentParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(num_output_, expose_hidden_);
    if (has_weight_filler()) {
      if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
    }
    if (has_bias_filler()) {
      if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RecurrentParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.RecurrentParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_output = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          set_has_num_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_weight_filler;
        break;
      }

      // optional .caffe.FillerParameter weight_filler = 2;
      case 2: {
        if (tag == 18) {
         parse_weight_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bias_filler;
        break;
      }

      // optional .caffe.FillerParameter bias_filler = 3;
      case 3: {
        if (tag == 26) {
         parse_bias_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_debug_info;
        break;
      }

      // optional bool debug_info = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_debug_info:
          set_has_debug_info();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &debug_info_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_expose_hidden;
        break;
      }

      // optional bool expose_hidden = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_expose_hidden:
          set_has_expose_hidden();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &expose_hidden_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.RecurrentParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.RecurrentParameter)
  return false;
#undef DO_
}

void RecurrentParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.RecurrentParameter)
  // optional uint32 num_output = 1 [default = 0];
  if (has_num_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
  }

  // optional .caffe.FillerParameter weight_filler = 2;
  if (has_weight_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->weight_filler_, output);
  }

  // optional .caffe.FillerParameter bias_filler = 3;
  if (has_bias_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->bias_filler_, output);
  }

  // optional bool debug_info = 4 [default = false];
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->debug_info(), output);
  }

  // optional bool expose_hidden = 5 [default = false];
  if (has_expose_hidden()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->expose_hidden(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.RecurrentParameter)
}

::google::protobuf::uint8* RecurrentParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.RecurrentParameter)
  // optional uint32 num_output = 1 [default = 0];
  if (has_num_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
  }

  // optional .caffe.FillerParameter weight_filler = 2;
  if (has_weight_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->weight_filler_, false, target);
  }

  // optional .caffe.FillerParameter bias_filler = 3;
  if (has_bias_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->bias_filler_, false, target);
  }

  // optional bool debug_info = 4 [default = false];
  if (has_debug_info()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->debug_info(), target);
  }

  // optional bool expose_hidden = 5 [default = false];
  if (has_expose_hidden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->expose_hidden(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.RecurrentParameter)
  return target;
}

size_t RecurrentParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.RecurrentParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 num_output = 1 [default = 0];
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional .caffe.FillerParameter weight_filler = 2;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->weight_filler_);
    }

    // optional .caffe.FillerParameter bias_filler = 3;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bias_filler_);
    }

    // optional bool debug_info = 4 [default = false];
    if (has_debug_info()) {
      total_size += 1 + 1;
    }

    // optional bool expose_hidden = 5 [default = false];
    if (has_expose_hidden()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecurrentParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.RecurrentParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RecurrentParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecurrentParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.RecurrentParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.RecurrentParameter)
    UnsafeMergeFrom(*source);
  }
}

void RecurrentParameter::MergeFrom(const RecurrentParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.RecurrentParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RecurrentParameter::UnsafeMergeFrom(const RecurrentParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_output()) {
      set_num_output(from.num_output());
    }
    if (from.has_weight_filler()) {
      mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
    }
    if (from.has_bias_filler()) {
      mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
    }
    if (from.has_debug_info()) {
      set_debug_info(from.debug_info());
    }
    if (from.has_expose_hidden()) {
      set_expose_hidden(from.expose_hidden());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void RecurrentParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.RecurrentParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecurrentParameter::CopyFrom(const RecurrentParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.RecurrentParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RecurrentParameter::IsInitialized() const {

  return true;
}

void RecurrentParameter::Swap(RecurrentParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecurrentParameter::InternalSwap(RecurrentParameter* other) {
  std::swap(num_output_, other->num_output_);
  std::swap(weight_filler_, other->weight_filler_);
  std::swap(bias_filler_, other->bias_filler_);
  std::swap(debug_info_, other->debug_info_);
  std::swap(expose_hidden_, other->expose_hidden_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecurrentParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecurrentParameter_descriptor_;
  metadata.reflection = RecurrentParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecurrentParameter

// optional uint32 num_output = 1 [default = 0];
bool RecurrentParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RecurrentParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
void RecurrentParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
void RecurrentParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
::google::protobuf::uint32 RecurrentParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.RecurrentParameter.num_output)
  return num_output_;
}
void RecurrentParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.RecurrentParameter.num_output)
}

// optional .caffe.FillerParameter weight_filler = 2;
bool RecurrentParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RecurrentParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000002u;
}
void RecurrentParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
void RecurrentParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
const ::caffe::FillerParameter& RecurrentParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.RecurrentParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
::caffe::FillerParameter* RecurrentParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.RecurrentParameter.weight_filler)
  return weight_filler_;
}
::caffe::FillerParameter* RecurrentParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.RecurrentParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
void RecurrentParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.RecurrentParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 3;
bool RecurrentParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RecurrentParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000004u;
}
void RecurrentParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000004u;
}
void RecurrentParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
const ::caffe::FillerParameter& RecurrentParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.RecurrentParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
::caffe::FillerParameter* RecurrentParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.RecurrentParameter.bias_filler)
  return bias_filler_;
}
::caffe::FillerParameter* RecurrentParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.RecurrentParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
void RecurrentParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.RecurrentParameter.bias_filler)
}

// optional bool debug_info = 4 [default = false];
bool RecurrentParameter::has_debug_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RecurrentParameter::set_has_debug_info() {
  _has_bits_[0] |= 0x00000008u;
}
void RecurrentParameter::clear_has_debug_info() {
  _has_bits_[0] &= ~0x00000008u;
}
void RecurrentParameter::clear_debug_info() {
  debug_info_ = false;
  clear_has_debug_info();
}
bool RecurrentParameter::debug_info() const {
  // @@protoc_insertion_point(field_get:caffe.RecurrentParameter.debug_info)
  return debug_info_;
}
void RecurrentParameter::set_debug_info(bool value) {
  set_has_debug_info();
  debug_info_ = value;
  // @@protoc_insertion_point(field_set:caffe.RecurrentParameter.debug_info)
}

// optional bool expose_hidden = 5 [default = false];
bool RecurrentParameter::has_expose_hidden() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RecurrentParameter::set_has_expose_hidden() {
  _has_bits_[0] |= 0x00000010u;
}
void RecurrentParameter::clear_has_expose_hidden() {
  _has_bits_[0] &= ~0x00000010u;
}
void RecurrentParameter::clear_expose_hidden() {
  expose_hidden_ = false;
  clear_has_expose_hidden();
}
bool RecurrentParameter::expose_hidden() const {
  // @@protoc_insertion_point(field_get:caffe.RecurrentParameter.expose_hidden)
  return expose_hidden_;
}
void RecurrentParameter::set_expose_hidden(bool value) {
  set_has_expose_hidden();
  expose_hidden_ = value;
  // @@protoc_insertion_point(field_set:caffe.RecurrentParameter.expose_hidden)
}

inline const RecurrentParameter* RecurrentParameter::internal_default_instance() {
  return &RecurrentParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ReductionParameter_ReductionOp_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReductionParameter_ReductionOp_descriptor_;
}
bool ReductionParameter_ReductionOp_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReductionParameter_ReductionOp ReductionParameter::SUM;
const ReductionParameter_ReductionOp ReductionParameter::ASUM;
const ReductionParameter_ReductionOp ReductionParameter::SUMSQ;
const ReductionParameter_ReductionOp ReductionParameter::MEAN;
const ReductionParameter_ReductionOp ReductionParameter::ReductionOp_MIN;
const ReductionParameter_ReductionOp ReductionParameter::ReductionOp_MAX;
const int ReductionParameter::ReductionOp_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReductionParameter::kOperationFieldNumber;
const int ReductionParameter::kAxisFieldNumber;
const int ReductionParameter::kCoeffFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReductionParameter::ReductionParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ReductionParameter)
}

void ReductionParameter::InitAsDefaultInstance() {
}

ReductionParameter::ReductionParameter(const ReductionParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ReductionParameter)
}

void ReductionParameter::SharedCtor() {
  _cached_size_ = 0;
  axis_ = 0;
  operation_ = 1;
  coeff_ = 1;
}

ReductionParameter::~ReductionParameter() {
  // @@protoc_insertion_point(destructor:caffe.ReductionParameter)
  SharedDtor();
}

void ReductionParameter::SharedDtor() {
}

void ReductionParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReductionParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReductionParameter_descriptor_;
}

const ReductionParameter& ReductionParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReductionParameter> ReductionParameter_default_instance_;

ReductionParameter* ReductionParameter::New(::google::protobuf::Arena* arena) const {
  ReductionParameter* n = new ReductionParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReductionParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ReductionParameter)
  if (_has_bits_[0 / 32] & 7u) {
    operation_ = 1;
    axis_ = 0;
    coeff_ = 1;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReductionParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ReductionParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::ReductionParameter_ReductionOp_IsValid(value)) {
            set_operation(static_cast< ::caffe::ReductionParameter_ReductionOp >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_axis;
        break;
      }

      // optional int32 axis = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_axis:
          set_has_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_coeff;
        break;
      }

      // optional float coeff = 3 [default = 1];
      case 3: {
        if (tag == 29) {
         parse_coeff:
          set_has_coeff();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &coeff_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ReductionParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ReductionParameter)
  return false;
#undef DO_
}

void ReductionParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ReductionParameter)
  // optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->operation(), output);
  }

  // optional int32 axis = 2 [default = 0];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->axis(), output);
  }

  // optional float coeff = 3 [default = 1];
  if (has_coeff()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->coeff(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ReductionParameter)
}

::google::protobuf::uint8* ReductionParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ReductionParameter)
  // optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
  if (has_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->operation(), target);
  }

  // optional int32 axis = 2 [default = 0];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->axis(), target);
  }

  // optional float coeff = 3 [default = 1];
  if (has_coeff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->coeff(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ReductionParameter)
  return target;
}

size_t ReductionParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ReductionParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
    }

    // optional int32 axis = 2 [default = 0];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional float coeff = 3 [default = 1];
    if (has_coeff()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReductionParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ReductionParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReductionParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReductionParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ReductionParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ReductionParameter)
    UnsafeMergeFrom(*source);
  }
}

void ReductionParameter::MergeFrom(const ReductionParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ReductionParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReductionParameter::UnsafeMergeFrom(const ReductionParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operation()) {
      set_operation(from.operation());
    }
    if (from.has_axis()) {
      set_axis(from.axis());
    }
    if (from.has_coeff()) {
      set_coeff(from.coeff());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ReductionParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ReductionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReductionParameter::CopyFrom(const ReductionParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ReductionParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReductionParameter::IsInitialized() const {

  return true;
}

void ReductionParameter::Swap(ReductionParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReductionParameter::InternalSwap(ReductionParameter* other) {
  std::swap(operation_, other->operation_);
  std::swap(axis_, other->axis_);
  std::swap(coeff_, other->coeff_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReductionParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReductionParameter_descriptor_;
  metadata.reflection = ReductionParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReductionParameter

// optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
bool ReductionParameter::has_operation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReductionParameter::set_has_operation() {
  _has_bits_[0] |= 0x00000001u;
}
void ReductionParameter::clear_has_operation() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReductionParameter::clear_operation() {
  operation_ = 1;
  clear_has_operation();
}
::caffe::ReductionParameter_ReductionOp ReductionParameter::operation() const {
  // @@protoc_insertion_point(field_get:caffe.ReductionParameter.operation)
  return static_cast< ::caffe::ReductionParameter_ReductionOp >(operation_);
}
void ReductionParameter::set_operation(::caffe::ReductionParameter_ReductionOp value) {
  assert(::caffe::ReductionParameter_ReductionOp_IsValid(value));
  set_has_operation();
  operation_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReductionParameter.operation)
}

// optional int32 axis = 2 [default = 0];
bool ReductionParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReductionParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
void ReductionParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReductionParameter::clear_axis() {
  axis_ = 0;
  clear_has_axis();
}
::google::protobuf::int32 ReductionParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ReductionParameter.axis)
  return axis_;
}
void ReductionParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReductionParameter.axis)
}

// optional float coeff = 3 [default = 1];
bool ReductionParameter::has_coeff() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReductionParameter::set_has_coeff() {
  _has_bits_[0] |= 0x00000004u;
}
void ReductionParameter::clear_has_coeff() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReductionParameter::clear_coeff() {
  coeff_ = 1;
  clear_has_coeff();
}
float ReductionParameter::coeff() const {
  // @@protoc_insertion_point(field_get:caffe.ReductionParameter.coeff)
  return coeff_;
}
void ReductionParameter::set_coeff(float value) {
  set_has_coeff();
  coeff_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReductionParameter.coeff)
}

inline const ReductionParameter* ReductionParameter::internal_default_instance() {
  return &ReductionParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ReLUParameter_Engine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReLUParameter_Engine_descriptor_;
}
bool ReLUParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReLUParameter_Engine ReLUParameter::DEFAULT;
const ReLUParameter_Engine ReLUParameter::CAFFE;
const ReLUParameter_Engine ReLUParameter::CUDNN;
const ReLUParameter_Engine ReLUParameter::Engine_MIN;
const ReLUParameter_Engine ReLUParameter::Engine_MAX;
const int ReLUParameter::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReLUParameter::kNegativeSlopeFieldNumber;
const int ReLUParameter::kEngineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReLUParameter::ReLUParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ReLUParameter)
}

void ReLUParameter::InitAsDefaultInstance() {
}

ReLUParameter::ReLUParameter(const ReLUParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ReLUParameter)
}

void ReLUParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&negative_slope_, 0, reinterpret_cast<char*>(&engine_) -
    reinterpret_cast<char*>(&negative_slope_) + sizeof(engine_));
}

ReLUParameter::~ReLUParameter() {
  // @@protoc_insertion_point(destructor:caffe.ReLUParameter)
  SharedDtor();
}

void ReLUParameter::SharedDtor() {
}

void ReLUParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReLUParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReLUParameter_descriptor_;
}

const ReLUParameter& ReLUParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReLUParameter> ReLUParameter_default_instance_;

ReLUParameter* ReLUParameter::New(::google::protobuf::Arena* arena) const {
  ReLUParameter* n = new ReLUParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReLUParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ReLUParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReLUParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReLUParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(negative_slope_, engine_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReLUParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ReLUParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float negative_slope = 1 [default = 0];
      case 1: {
        if (tag == 13) {
          set_has_negative_slope();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &negative_slope_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_engine;
        break;
      }

      // optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
      case 2: {
        if (tag == 16) {
         parse_engine:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::ReLUParameter_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::ReLUParameter_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ReLUParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ReLUParameter)
  return false;
#undef DO_
}

void ReLUParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ReLUParameter)
  // optional float negative_slope = 1 [default = 0];
  if (has_negative_slope()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->negative_slope(), output);
  }

  // optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
  if (has_engine()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->engine(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ReLUParameter)
}

::google::protobuf::uint8* ReLUParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ReLUParameter)
  // optional float negative_slope = 1 [default = 0];
  if (has_negative_slope()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->negative_slope(), target);
  }

  // optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
  if (has_engine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->engine(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ReLUParameter)
  return target;
}

size_t ReLUParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ReLUParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional float negative_slope = 1 [default = 0];
    if (has_negative_slope()) {
      total_size += 1 + 4;
    }

    // optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReLUParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ReLUParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReLUParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReLUParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ReLUParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ReLUParameter)
    UnsafeMergeFrom(*source);
  }
}

void ReLUParameter::MergeFrom(const ReLUParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ReLUParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReLUParameter::UnsafeMergeFrom(const ReLUParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_negative_slope()) {
      set_negative_slope(from.negative_slope());
    }
    if (from.has_engine()) {
      set_engine(from.engine());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ReLUParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ReLUParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReLUParameter::CopyFrom(const ReLUParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ReLUParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReLUParameter::IsInitialized() const {

  return true;
}

void ReLUParameter::Swap(ReLUParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReLUParameter::InternalSwap(ReLUParameter* other) {
  std::swap(negative_slope_, other->negative_slope_);
  std::swap(engine_, other->engine_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReLUParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReLUParameter_descriptor_;
  metadata.reflection = ReLUParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReLUParameter

// optional float negative_slope = 1 [default = 0];
bool ReLUParameter::has_negative_slope() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReLUParameter::set_has_negative_slope() {
  _has_bits_[0] |= 0x00000001u;
}
void ReLUParameter::clear_has_negative_slope() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReLUParameter::clear_negative_slope() {
  negative_slope_ = 0;
  clear_has_negative_slope();
}
float ReLUParameter::negative_slope() const {
  // @@protoc_insertion_point(field_get:caffe.ReLUParameter.negative_slope)
  return negative_slope_;
}
void ReLUParameter::set_negative_slope(float value) {
  set_has_negative_slope();
  negative_slope_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReLUParameter.negative_slope)
}

// optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
bool ReLUParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReLUParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000002u;
}
void ReLUParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReLUParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
::caffe::ReLUParameter_Engine ReLUParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.ReLUParameter.engine)
  return static_cast< ::caffe::ReLUParameter_Engine >(engine_);
}
void ReLUParameter::set_engine(::caffe::ReLUParameter_Engine value) {
  assert(::caffe::ReLUParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReLUParameter.engine)
}

inline const ReLUParameter* ReLUParameter::internal_default_instance() {
  return &ReLUParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReshapeParameter::kShapeFieldNumber;
const int ReshapeParameter::kAxisFieldNumber;
const int ReshapeParameter::kNumAxesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReshapeParameter::ReshapeParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ReshapeParameter)
}

void ReshapeParameter::InitAsDefaultInstance() {
  shape_ = const_cast< ::caffe::BlobShape*>(
      ::caffe::BlobShape::internal_default_instance());
}

ReshapeParameter::ReshapeParameter(const ReshapeParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ReshapeParameter)
}

void ReshapeParameter::SharedCtor() {
  _cached_size_ = 0;
  shape_ = NULL;
  axis_ = 0;
  num_axes_ = -1;
}

ReshapeParameter::~ReshapeParameter() {
  // @@protoc_insertion_point(destructor:caffe.ReshapeParameter)
  SharedDtor();
}

void ReshapeParameter::SharedDtor() {
  if (this != &ReshapeParameter_default_instance_.get()) {
    delete shape_;
  }
}

void ReshapeParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReshapeParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReshapeParameter_descriptor_;
}

const ReshapeParameter& ReshapeParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReshapeParameter> ReshapeParameter_default_instance_;

ReshapeParameter* ReshapeParameter::New(::google::protobuf::Arena* arena) const {
  ReshapeParameter* n = new ReshapeParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReshapeParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ReshapeParameter)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_shape()) {
      if (shape_ != NULL) shape_->::caffe::BlobShape::Clear();
    }
    axis_ = 0;
    num_axes_ = -1;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReshapeParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ReshapeParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.BlobShape shape = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_axis;
        break;
      }

      // optional int32 axis = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_axis:
          set_has_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num_axes;
        break;
      }

      // optional int32 num_axes = 3 [default = -1];
      case 3: {
        if (tag == 24) {
         parse_num_axes:
          set_has_num_axes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_axes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ReshapeParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ReshapeParameter)
  return false;
#undef DO_
}

void ReshapeParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ReshapeParameter)
  // optional .caffe.BlobShape shape = 1;
  if (has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->shape_, output);
  }

  // optional int32 axis = 2 [default = 0];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->axis(), output);
  }

  // optional int32 num_axes = 3 [default = -1];
  if (has_num_axes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_axes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ReshapeParameter)
}

::google::protobuf::uint8* ReshapeParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ReshapeParameter)
  // optional .caffe.BlobShape shape = 1;
  if (has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->shape_, false, target);
  }

  // optional int32 axis = 2 [default = 0];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->axis(), target);
  }

  // optional int32 num_axes = 3 [default = -1];
  if (has_num_axes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_axes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ReshapeParameter)
  return target;
}

size_t ReshapeParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ReshapeParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .caffe.BlobShape shape = 1;
    if (has_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->shape_);
    }

    // optional int32 axis = 2 [default = 0];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional int32 num_axes = 3 [default = -1];
    if (has_num_axes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_axes());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReshapeParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ReshapeParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReshapeParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReshapeParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ReshapeParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ReshapeParameter)
    UnsafeMergeFrom(*source);
  }
}

void ReshapeParameter::MergeFrom(const ReshapeParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ReshapeParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReshapeParameter::UnsafeMergeFrom(const ReshapeParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shape()) {
      mutable_shape()->::caffe::BlobShape::MergeFrom(from.shape());
    }
    if (from.has_axis()) {
      set_axis(from.axis());
    }
    if (from.has_num_axes()) {
      set_num_axes(from.num_axes());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ReshapeParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ReshapeParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReshapeParameter::CopyFrom(const ReshapeParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ReshapeParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReshapeParameter::IsInitialized() const {

  return true;
}

void ReshapeParameter::Swap(ReshapeParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReshapeParameter::InternalSwap(ReshapeParameter* other) {
  std::swap(shape_, other->shape_);
  std::swap(axis_, other->axis_);
  std::swap(num_axes_, other->num_axes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReshapeParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReshapeParameter_descriptor_;
  metadata.reflection = ReshapeParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReshapeParameter

// optional .caffe.BlobShape shape = 1;
bool ReshapeParameter::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReshapeParameter::set_has_shape() {
  _has_bits_[0] |= 0x00000001u;
}
void ReshapeParameter::clear_has_shape() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReshapeParameter::clear_shape() {
  if (shape_ != NULL) shape_->::caffe::BlobShape::Clear();
  clear_has_shape();
}
const ::caffe::BlobShape& ReshapeParameter::shape() const {
  // @@protoc_insertion_point(field_get:caffe.ReshapeParameter.shape)
  return shape_ != NULL ? *shape_
                         : *::caffe::BlobShape::internal_default_instance();
}
::caffe::BlobShape* ReshapeParameter::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) {
    shape_ = new ::caffe::BlobShape;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ReshapeParameter.shape)
  return shape_;
}
::caffe::BlobShape* ReshapeParameter::release_shape() {
  // @@protoc_insertion_point(field_release:caffe.ReshapeParameter.shape)
  clear_has_shape();
  ::caffe::BlobShape* temp = shape_;
  shape_ = NULL;
  return temp;
}
void ReshapeParameter::set_allocated_shape(::caffe::BlobShape* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ReshapeParameter.shape)
}

// optional int32 axis = 2 [default = 0];
bool ReshapeParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReshapeParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
void ReshapeParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReshapeParameter::clear_axis() {
  axis_ = 0;
  clear_has_axis();
}
::google::protobuf::int32 ReshapeParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ReshapeParameter.axis)
  return axis_;
}
void ReshapeParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReshapeParameter.axis)
}

// optional int32 num_axes = 3 [default = -1];
bool ReshapeParameter::has_num_axes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReshapeParameter::set_has_num_axes() {
  _has_bits_[0] |= 0x00000004u;
}
void ReshapeParameter::clear_has_num_axes() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReshapeParameter::clear_num_axes() {
  num_axes_ = -1;
  clear_has_num_axes();
}
::google::protobuf::int32 ReshapeParameter::num_axes() const {
  // @@protoc_insertion_point(field_get:caffe.ReshapeParameter.num_axes)
  return num_axes_;
}
void ReshapeParameter::set_num_axes(::google::protobuf::int32 value) {
  set_has_num_axes();
  num_axes_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReshapeParameter.num_axes)
}

inline const ReshapeParameter* ReshapeParameter::internal_default_instance() {
  return &ReshapeParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScaleParameter::kAxisFieldNumber;
const int ScaleParameter::kNumAxesFieldNumber;
const int ScaleParameter::kFillerFieldNumber;
const int ScaleParameter::kBiasTermFieldNumber;
const int ScaleParameter::kBiasFillerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScaleParameter::ScaleParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ScaleParameter)
}

void ScaleParameter::InitAsDefaultInstance() {
  filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  bias_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
}

ScaleParameter::ScaleParameter(const ScaleParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ScaleParameter)
}

void ScaleParameter::SharedCtor() {
  _cached_size_ = 0;
  filler_ = NULL;
  bias_filler_ = NULL;
  bias_term_ = false;
  axis_ = 1;
  num_axes_ = 1;
}

ScaleParameter::~ScaleParameter() {
  // @@protoc_insertion_point(destructor:caffe.ScaleParameter)
  SharedDtor();
}

void ScaleParameter::SharedDtor() {
  if (this != &ScaleParameter_default_instance_.get()) {
    delete filler_;
    delete bias_filler_;
  }
}

void ScaleParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScaleParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScaleParameter_descriptor_;
}

const ScaleParameter& ScaleParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ScaleParameter> ScaleParameter_default_instance_;

ScaleParameter* ScaleParameter::New(::google::protobuf::Arena* arena) const {
  ScaleParameter* n = new ScaleParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScaleParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ScaleParameter)
  if (_has_bits_[0 / 32] & 31u) {
    axis_ = 1;
    num_axes_ = 1;
    if (has_filler()) {
      if (filler_ != NULL) filler_->::caffe::FillerParameter::Clear();
    }
    bias_term_ = false;
    if (has_bias_filler()) {
      if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ScaleParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ScaleParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 axis = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          set_has_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_axes;
        break;
      }

      // optional int32 num_axes = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_num_axes:
          set_has_num_axes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_axes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_filler;
        break;
      }

      // optional .caffe.FillerParameter filler = 3;
      case 3: {
        if (tag == 26) {
         parse_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bias_term;
        break;
      }

      // optional bool bias_term = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_bias_term:
          set_has_bias_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bias_term_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_bias_filler;
        break;
      }

      // optional .caffe.FillerParameter bias_filler = 5;
      case 5: {
        if (tag == 42) {
         parse_bias_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ScaleParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ScaleParameter)
  return false;
#undef DO_
}

void ScaleParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ScaleParameter)
  // optional int32 axis = 1 [default = 1];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->axis(), output);
  }

  // optional int32 num_axes = 2 [default = 1];
  if (has_num_axes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_axes(), output);
  }

  // optional .caffe.FillerParameter filler = 3;
  if (has_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->filler_, output);
  }

  // optional bool bias_term = 4 [default = false];
  if (has_bias_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bias_term(), output);
  }

  // optional .caffe.FillerParameter bias_filler = 5;
  if (has_bias_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->bias_filler_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ScaleParameter)
}

::google::protobuf::uint8* ScaleParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ScaleParameter)
  // optional int32 axis = 1 [default = 1];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->axis(), target);
  }

  // optional int32 num_axes = 2 [default = 1];
  if (has_num_axes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_axes(), target);
  }

  // optional .caffe.FillerParameter filler = 3;
  if (has_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->filler_, false, target);
  }

  // optional bool bias_term = 4 [default = false];
  if (has_bias_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->bias_term(), target);
  }

  // optional .caffe.FillerParameter bias_filler = 5;
  if (has_bias_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->bias_filler_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ScaleParameter)
  return target;
}

size_t ScaleParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ScaleParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 axis = 1 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional int32 num_axes = 2 [default = 1];
    if (has_num_axes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_axes());
    }

    // optional .caffe.FillerParameter filler = 3;
    if (has_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->filler_);
    }

    // optional bool bias_term = 4 [default = false];
    if (has_bias_term()) {
      total_size += 1 + 1;
    }

    // optional .caffe.FillerParameter bias_filler = 5;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bias_filler_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScaleParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ScaleParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ScaleParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScaleParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ScaleParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ScaleParameter)
    UnsafeMergeFrom(*source);
  }
}

void ScaleParameter::MergeFrom(const ScaleParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ScaleParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ScaleParameter::UnsafeMergeFrom(const ScaleParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_axis()) {
      set_axis(from.axis());
    }
    if (from.has_num_axes()) {
      set_num_axes(from.num_axes());
    }
    if (from.has_filler()) {
      mutable_filler()->::caffe::FillerParameter::MergeFrom(from.filler());
    }
    if (from.has_bias_term()) {
      set_bias_term(from.bias_term());
    }
    if (from.has_bias_filler()) {
      mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ScaleParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ScaleParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScaleParameter::CopyFrom(const ScaleParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ScaleParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ScaleParameter::IsInitialized() const {

  return true;
}

void ScaleParameter::Swap(ScaleParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScaleParameter::InternalSwap(ScaleParameter* other) {
  std::swap(axis_, other->axis_);
  std::swap(num_axes_, other->num_axes_);
  std::swap(filler_, other->filler_);
  std::swap(bias_term_, other->bias_term_);
  std::swap(bias_filler_, other->bias_filler_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScaleParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScaleParameter_descriptor_;
  metadata.reflection = ScaleParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScaleParameter

// optional int32 axis = 1 [default = 1];
bool ScaleParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ScaleParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
void ScaleParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
void ScaleParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
::google::protobuf::int32 ScaleParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.axis)
  return axis_;
}
void ScaleParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ScaleParameter.axis)
}

// optional int32 num_axes = 2 [default = 1];
bool ScaleParameter::has_num_axes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ScaleParameter::set_has_num_axes() {
  _has_bits_[0] |= 0x00000002u;
}
void ScaleParameter::clear_has_num_axes() {
  _has_bits_[0] &= ~0x00000002u;
}
void ScaleParameter::clear_num_axes() {
  num_axes_ = 1;
  clear_has_num_axes();
}
::google::protobuf::int32 ScaleParameter::num_axes() const {
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.num_axes)
  return num_axes_;
}
void ScaleParameter::set_num_axes(::google::protobuf::int32 value) {
  set_has_num_axes();
  num_axes_ = value;
  // @@protoc_insertion_point(field_set:caffe.ScaleParameter.num_axes)
}

// optional .caffe.FillerParameter filler = 3;
bool ScaleParameter::has_filler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ScaleParameter::set_has_filler() {
  _has_bits_[0] |= 0x00000004u;
}
void ScaleParameter::clear_has_filler() {
  _has_bits_[0] &= ~0x00000004u;
}
void ScaleParameter::clear_filler() {
  if (filler_ != NULL) filler_->::caffe::FillerParameter::Clear();
  clear_has_filler();
}
const ::caffe::FillerParameter& ScaleParameter::filler() const {
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.filler)
  return filler_ != NULL ? *filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
::caffe::FillerParameter* ScaleParameter::mutable_filler() {
  set_has_filler();
  if (filler_ == NULL) {
    filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ScaleParameter.filler)
  return filler_;
}
::caffe::FillerParameter* ScaleParameter::release_filler() {
  // @@protoc_insertion_point(field_release:caffe.ScaleParameter.filler)
  clear_has_filler();
  ::caffe::FillerParameter* temp = filler_;
  filler_ = NULL;
  return temp;
}
void ScaleParameter::set_allocated_filler(::caffe::FillerParameter* filler) {
  delete filler_;
  filler_ = filler;
  if (filler) {
    set_has_filler();
  } else {
    clear_has_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ScaleParameter.filler)
}

// optional bool bias_term = 4 [default = false];
bool ScaleParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ScaleParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000008u;
}
void ScaleParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000008u;
}
void ScaleParameter::clear_bias_term() {
  bias_term_ = false;
  clear_has_bias_term();
}
bool ScaleParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.bias_term)
  return bias_term_;
}
void ScaleParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.ScaleParameter.bias_term)
}

// optional .caffe.FillerParameter bias_filler = 5;
bool ScaleParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ScaleParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000010u;
}
void ScaleParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000010u;
}
void ScaleParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
const ::caffe::FillerParameter& ScaleParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
::caffe::FillerParameter* ScaleParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ScaleParameter.bias_filler)
  return bias_filler_;
}
::caffe::FillerParameter* ScaleParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.ScaleParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
void ScaleParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ScaleParameter.bias_filler)
}

inline const ScaleParameter* ScaleParameter::internal_default_instance() {
  return &ScaleParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* SigmoidParameter_Engine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SigmoidParameter_Engine_descriptor_;
}
bool SigmoidParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SigmoidParameter_Engine SigmoidParameter::DEFAULT;
const SigmoidParameter_Engine SigmoidParameter::CAFFE;
const SigmoidParameter_Engine SigmoidParameter::CUDNN;
const SigmoidParameter_Engine SigmoidParameter::Engine_MIN;
const SigmoidParameter_Engine SigmoidParameter::Engine_MAX;
const int SigmoidParameter::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SigmoidParameter::kEngineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SigmoidParameter::SigmoidParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SigmoidParameter)
}

void SigmoidParameter::InitAsDefaultInstance() {
}

SigmoidParameter::SigmoidParameter(const SigmoidParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.SigmoidParameter)
}

void SigmoidParameter::SharedCtor() {
  _cached_size_ = 0;
  engine_ = 0;
}

SigmoidParameter::~SigmoidParameter() {
  // @@protoc_insertion_point(destructor:caffe.SigmoidParameter)
  SharedDtor();
}

void SigmoidParameter::SharedDtor() {
}

void SigmoidParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SigmoidParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SigmoidParameter_descriptor_;
}

const SigmoidParameter& SigmoidParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SigmoidParameter> SigmoidParameter_default_instance_;

SigmoidParameter* SigmoidParameter::New(::google::protobuf::Arena* arena) const {
  SigmoidParameter* n = new SigmoidParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SigmoidParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SigmoidParameter)
  engine_ = 0;
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SigmoidParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SigmoidParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::SigmoidParameter_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::SigmoidParameter_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SigmoidParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SigmoidParameter)
  return false;
#undef DO_
}

void SigmoidParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SigmoidParameter)
  // optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
  if (has_engine()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->engine(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SigmoidParameter)
}

::google::protobuf::uint8* SigmoidParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SigmoidParameter)
  // optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
  if (has_engine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->engine(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SigmoidParameter)
  return target;
}

size_t SigmoidParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SigmoidParameter)
  size_t total_size = 0;

  // optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
  if (has_engine()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SigmoidParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SigmoidParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SigmoidParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SigmoidParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SigmoidParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SigmoidParameter)
    UnsafeMergeFrom(*source);
  }
}

void SigmoidParameter::MergeFrom(const SigmoidParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SigmoidParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SigmoidParameter::UnsafeMergeFrom(const SigmoidParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_engine()) {
      set_engine(from.engine());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void SigmoidParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SigmoidParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigmoidParameter::CopyFrom(const SigmoidParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SigmoidParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SigmoidParameter::IsInitialized() const {

  return true;
}

void SigmoidParameter::Swap(SigmoidParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SigmoidParameter::InternalSwap(SigmoidParameter* other) {
  std::swap(engine_, other->engine_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SigmoidParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SigmoidParameter_descriptor_;
  metadata.reflection = SigmoidParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SigmoidParameter

// optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
bool SigmoidParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SigmoidParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000001u;
}
void SigmoidParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000001u;
}
void SigmoidParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
::caffe::SigmoidParameter_Engine SigmoidParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.SigmoidParameter.engine)
  return static_cast< ::caffe::SigmoidParameter_Engine >(engine_);
}
void SigmoidParameter::set_engine(::caffe::SigmoidParameter_Engine value) {
  assert(::caffe::SigmoidParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.SigmoidParameter.engine)
}

inline const SigmoidParameter* SigmoidParameter::internal_default_instance() {
  return &SigmoidParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SliceParameter::kAxisFieldNumber;
const int SliceParameter::kSlicePointFieldNumber;
const int SliceParameter::kSliceDimFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SliceParameter::SliceParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SliceParameter)
}

void SliceParameter::InitAsDefaultInstance() {
}

SliceParameter::SliceParameter(const SliceParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.SliceParameter)
}

void SliceParameter::SharedCtor() {
  _cached_size_ = 0;
  axis_ = 1;
  slice_dim_ = 1u;
}

SliceParameter::~SliceParameter() {
  // @@protoc_insertion_point(destructor:caffe.SliceParameter)
  SharedDtor();
}

void SliceParameter::SharedDtor() {
}

void SliceParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SliceParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SliceParameter_descriptor_;
}

const SliceParameter& SliceParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SliceParameter> SliceParameter_default_instance_;

SliceParameter* SliceParameter::New(::google::protobuf::Arena* arena) const {
  SliceParameter* n = new SliceParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SliceParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SliceParameter)
  if (_has_bits_[0 / 32] & 5u) {
    axis_ = 1;
    slice_dim_ = 1u;
  }
  slice_point_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SliceParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SliceParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 slice_dim = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          set_has_slice_dim();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slice_dim_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_slice_point;
        break;
      }

      // repeated uint32 slice_point = 2;
      case 2: {
        if (tag == 16) {
         parse_slice_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_slice_point())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_slice_point())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_slice_point;
        if (input->ExpectTag(24)) goto parse_axis;
        break;
      }

      // optional int32 axis = 3 [default = 1];
      case 3: {
        if (tag == 24) {
         parse_axis:
          set_has_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SliceParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SliceParameter)
  return false;
#undef DO_
}

void SliceParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SliceParameter)
  // optional uint32 slice_dim = 1 [default = 1];
  if (has_slice_dim()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slice_dim(), output);
  }

  // repeated uint32 slice_point = 2;
  for (int i = 0; i < this->slice_point_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->slice_point(i), output);
  }

  // optional int32 axis = 3 [default = 1];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->axis(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SliceParameter)
}

::google::protobuf::uint8* SliceParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SliceParameter)
  // optional uint32 slice_dim = 1 [default = 1];
  if (has_slice_dim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slice_dim(), target);
  }

  // repeated uint32 slice_point = 2;
  for (int i = 0; i < this->slice_point_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->slice_point(i), target);
  }

  // optional int32 axis = 3 [default = 1];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->axis(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SliceParameter)
  return target;
}

size_t SliceParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SliceParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 5u) {
    // optional int32 axis = 3 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional uint32 slice_dim = 1 [default = 1];
    if (has_slice_dim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slice_dim());
    }

  }
  // repeated uint32 slice_point = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->slice_point_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->slice_point(i));
    }
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->slice_point_size());
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SliceParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SliceParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SliceParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SliceParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SliceParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SliceParameter)
    UnsafeMergeFrom(*source);
  }
}

void SliceParameter::MergeFrom(const SliceParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SliceParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SliceParameter::UnsafeMergeFrom(const SliceParameter& from) {
  GOOGLE_DCHECK(&from != this);
  slice_point_.UnsafeMergeFrom(from.slice_point_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_axis()) {
      set_axis(from.axis());
    }
    if (from.has_slice_dim()) {
      set_slice_dim(from.slice_dim());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void SliceParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SliceParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SliceParameter::CopyFrom(const SliceParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SliceParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SliceParameter::IsInitialized() const {

  return true;
}

void SliceParameter::Swap(SliceParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SliceParameter::InternalSwap(SliceParameter* other) {
  std::swap(axis_, other->axis_);
  slice_point_.UnsafeArenaSwap(&other->slice_point_);
  std::swap(slice_dim_, other->slice_dim_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SliceParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SliceParameter_descriptor_;
  metadata.reflection = SliceParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SliceParameter

// optional int32 axis = 3 [default = 1];
bool SliceParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SliceParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
void SliceParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
void SliceParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
::google::protobuf::int32 SliceParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.SliceParameter.axis)
  return axis_;
}
void SliceParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.SliceParameter.axis)
}

// repeated uint32 slice_point = 2;
int SliceParameter::slice_point_size() const {
  return slice_point_.size();
}
void SliceParameter::clear_slice_point() {
  slice_point_.Clear();
}
::google::protobuf::uint32 SliceParameter::slice_point(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SliceParameter.slice_point)
  return slice_point_.Get(index);
}
void SliceParameter::set_slice_point(int index, ::google::protobuf::uint32 value) {
  slice_point_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SliceParameter.slice_point)
}
void SliceParameter::add_slice_point(::google::protobuf::uint32 value) {
  slice_point_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SliceParameter.slice_point)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SliceParameter::slice_point() const {
  // @@protoc_insertion_point(field_list:caffe.SliceParameter.slice_point)
  return slice_point_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SliceParameter::mutable_slice_point() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SliceParameter.slice_point)
  return &slice_point_;
}

// optional uint32 slice_dim = 1 [default = 1];
bool SliceParameter::has_slice_dim() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SliceParameter::set_has_slice_dim() {
  _has_bits_[0] |= 0x00000004u;
}
void SliceParameter::clear_has_slice_dim() {
  _has_bits_[0] &= ~0x00000004u;
}
void SliceParameter::clear_slice_dim() {
  slice_dim_ = 1u;
  clear_has_slice_dim();
}
::google::protobuf::uint32 SliceParameter::slice_dim() const {
  // @@protoc_insertion_point(field_get:caffe.SliceParameter.slice_dim)
  return slice_dim_;
}
void SliceParameter::set_slice_dim(::google::protobuf::uint32 value) {
  set_has_slice_dim();
  slice_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.SliceParameter.slice_dim)
}

inline const SliceParameter* SliceParameter::internal_default_instance() {
  return &SliceParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* SoftmaxParameter_Engine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoftmaxParameter_Engine_descriptor_;
}
bool SoftmaxParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SoftmaxParameter_Engine SoftmaxParameter::DEFAULT;
const SoftmaxParameter_Engine SoftmaxParameter::CAFFE;
const SoftmaxParameter_Engine SoftmaxParameter::CUDNN;
const SoftmaxParameter_Engine SoftmaxParameter::Engine_MIN;
const SoftmaxParameter_Engine SoftmaxParameter::Engine_MAX;
const int SoftmaxParameter::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SoftmaxParameter::kEngineFieldNumber;
const int SoftmaxParameter::kAxisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SoftmaxParameter::SoftmaxParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SoftmaxParameter)
}

void SoftmaxParameter::InitAsDefaultInstance() {
}

SoftmaxParameter::SoftmaxParameter(const SoftmaxParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.SoftmaxParameter)
}

void SoftmaxParameter::SharedCtor() {
  _cached_size_ = 0;
  engine_ = 0;
  axis_ = 1;
}

SoftmaxParameter::~SoftmaxParameter() {
  // @@protoc_insertion_point(destructor:caffe.SoftmaxParameter)
  SharedDtor();
}

void SoftmaxParameter::SharedDtor() {
}

void SoftmaxParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoftmaxParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoftmaxParameter_descriptor_;
}

const SoftmaxParameter& SoftmaxParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SoftmaxParameter> SoftmaxParameter_default_instance_;

SoftmaxParameter* SoftmaxParameter::New(::google::protobuf::Arena* arena) const {
  SoftmaxParameter* n = new SoftmaxParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SoftmaxParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SoftmaxParameter)
  if (_has_bits_[0 / 32] & 3u) {
    engine_ = 0;
    axis_ = 1;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SoftmaxParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SoftmaxParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::SoftmaxParameter_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::SoftmaxParameter_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_axis;
        break;
      }

      // optional int32 axis = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_axis:
          set_has_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SoftmaxParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SoftmaxParameter)
  return false;
#undef DO_
}

void SoftmaxParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SoftmaxParameter)
  // optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
  if (has_engine()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->engine(), output);
  }

  // optional int32 axis = 2 [default = 1];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->axis(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SoftmaxParameter)
}

::google::protobuf::uint8* SoftmaxParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SoftmaxParameter)
  // optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
  if (has_engine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->engine(), target);
  }

  // optional int32 axis = 2 [default = 1];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->axis(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SoftmaxParameter)
  return target;
}

size_t SoftmaxParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SoftmaxParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
    }

    // optional int32 axis = 2 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoftmaxParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SoftmaxParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SoftmaxParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SoftmaxParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SoftmaxParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SoftmaxParameter)
    UnsafeMergeFrom(*source);
  }
}

void SoftmaxParameter::MergeFrom(const SoftmaxParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SoftmaxParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SoftmaxParameter::UnsafeMergeFrom(const SoftmaxParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_engine()) {
      set_engine(from.engine());
    }
    if (from.has_axis()) {
      set_axis(from.axis());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void SoftmaxParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SoftmaxParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoftmaxParameter::CopyFrom(const SoftmaxParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SoftmaxParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SoftmaxParameter::IsInitialized() const {

  return true;
}

void SoftmaxParameter::Swap(SoftmaxParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SoftmaxParameter::InternalSwap(SoftmaxParameter* other) {
  std::swap(engine_, other->engine_);
  std::swap(axis_, other->axis_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SoftmaxParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SoftmaxParameter_descriptor_;
  metadata.reflection = SoftmaxParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SoftmaxParameter

// optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
bool SoftmaxParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SoftmaxParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000001u;
}
void SoftmaxParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000001u;
}
void SoftmaxParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
::caffe::SoftmaxParameter_Engine SoftmaxParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.SoftmaxParameter.engine)
  return static_cast< ::caffe::SoftmaxParameter_Engine >(engine_);
}
void SoftmaxParameter::set_engine(::caffe::SoftmaxParameter_Engine value) {
  assert(::caffe::SoftmaxParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.SoftmaxParameter.engine)
}

// optional int32 axis = 2 [default = 1];
bool SoftmaxParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SoftmaxParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
void SoftmaxParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
void SoftmaxParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
::google::protobuf::int32 SoftmaxParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.SoftmaxParameter.axis)
  return axis_;
}
void SoftmaxParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.SoftmaxParameter.axis)
}

inline const SoftmaxParameter* SoftmaxParameter::internal_default_instance() {
  return &SoftmaxParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* TanHParameter_Engine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TanHParameter_Engine_descriptor_;
}
bool TanHParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TanHParameter_Engine TanHParameter::DEFAULT;
const TanHParameter_Engine TanHParameter::CAFFE;
const TanHParameter_Engine TanHParameter::CUDNN;
const TanHParameter_Engine TanHParameter::Engine_MIN;
const TanHParameter_Engine TanHParameter::Engine_MAX;
const int TanHParameter::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TanHParameter::kEngineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TanHParameter::TanHParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.TanHParameter)
}

void TanHParameter::InitAsDefaultInstance() {
}

TanHParameter::TanHParameter(const TanHParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.TanHParameter)
}

void TanHParameter::SharedCtor() {
  _cached_size_ = 0;
  engine_ = 0;
}

TanHParameter::~TanHParameter() {
  // @@protoc_insertion_point(destructor:caffe.TanHParameter)
  SharedDtor();
}

void TanHParameter::SharedDtor() {
}

void TanHParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TanHParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TanHParameter_descriptor_;
}

const TanHParameter& TanHParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TanHParameter> TanHParameter_default_instance_;

TanHParameter* TanHParameter::New(::google::protobuf::Arena* arena) const {
  TanHParameter* n = new TanHParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TanHParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.TanHParameter)
  engine_ = 0;
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TanHParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.TanHParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::TanHParameter_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::TanHParameter_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.TanHParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.TanHParameter)
  return false;
#undef DO_
}

void TanHParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.TanHParameter)
  // optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
  if (has_engine()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->engine(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.TanHParameter)
}

::google::protobuf::uint8* TanHParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.TanHParameter)
  // optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
  if (has_engine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->engine(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.TanHParameter)
  return target;
}

size_t TanHParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.TanHParameter)
  size_t total_size = 0;

  // optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
  if (has_engine()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TanHParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.TanHParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TanHParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TanHParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.TanHParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.TanHParameter)
    UnsafeMergeFrom(*source);
  }
}

void TanHParameter::MergeFrom(const TanHParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.TanHParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TanHParameter::UnsafeMergeFrom(const TanHParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_engine()) {
      set_engine(from.engine());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void TanHParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.TanHParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TanHParameter::CopyFrom(const TanHParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.TanHParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TanHParameter::IsInitialized() const {

  return true;
}

void TanHParameter::Swap(TanHParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TanHParameter::InternalSwap(TanHParameter* other) {
  std::swap(engine_, other->engine_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TanHParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TanHParameter_descriptor_;
  metadata.reflection = TanHParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TanHParameter

// optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
bool TanHParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TanHParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000001u;
}
void TanHParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000001u;
}
void TanHParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
::caffe::TanHParameter_Engine TanHParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.TanHParameter.engine)
  return static_cast< ::caffe::TanHParameter_Engine >(engine_);
}
void TanHParameter::set_engine(::caffe::TanHParameter_Engine value) {
  assert(::caffe::TanHParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.TanHParameter.engine)
}

inline const TanHParameter* TanHParameter::internal_default_instance() {
  return &TanHParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TileParameter::kAxisFieldNumber;
const int TileParameter::kTilesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TileParameter::TileParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.TileParameter)
}

void TileParameter::InitAsDefaultInstance() {
}

TileParameter::TileParameter(const TileParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.TileParameter)
}

void TileParameter::SharedCtor() {
  _cached_size_ = 0;
  tiles_ = 0;
  axis_ = 1;
}

TileParameter::~TileParameter() {
  // @@protoc_insertion_point(destructor:caffe.TileParameter)
  SharedDtor();
}

void TileParameter::SharedDtor() {
}

void TileParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TileParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TileParameter_descriptor_;
}

const TileParameter& TileParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TileParameter> TileParameter_default_instance_;

TileParameter* TileParameter::New(::google::protobuf::Arena* arena) const {
  TileParameter* n = new TileParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TileParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.TileParameter)
  if (_has_bits_[0 / 32] & 3u) {
    axis_ = 1;
    tiles_ = 0;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TileParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.TileParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 axis = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          set_has_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tiles;
        break;
      }

      // optional int32 tiles = 2;
      case 2: {
        if (tag == 16) {
         parse_tiles:
          set_has_tiles();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tiles_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.TileParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.TileParameter)
  return false;
#undef DO_
}

void TileParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.TileParameter)
  // optional int32 axis = 1 [default = 1];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->axis(), output);
  }

  // optional int32 tiles = 2;
  if (has_tiles()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tiles(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.TileParameter)
}

::google::protobuf::uint8* TileParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.TileParameter)
  // optional int32 axis = 1 [default = 1];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->axis(), target);
  }

  // optional int32 tiles = 2;
  if (has_tiles()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tiles(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.TileParameter)
  return target;
}

size_t TileParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.TileParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 axis = 1 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional int32 tiles = 2;
    if (has_tiles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tiles());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TileParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.TileParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TileParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TileParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.TileParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.TileParameter)
    UnsafeMergeFrom(*source);
  }
}

void TileParameter::MergeFrom(const TileParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.TileParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TileParameter::UnsafeMergeFrom(const TileParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_axis()) {
      set_axis(from.axis());
    }
    if (from.has_tiles()) {
      set_tiles(from.tiles());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void TileParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.TileParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TileParameter::CopyFrom(const TileParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.TileParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TileParameter::IsInitialized() const {

  return true;
}

void TileParameter::Swap(TileParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TileParameter::InternalSwap(TileParameter* other) {
  std::swap(axis_, other->axis_);
  std::swap(tiles_, other->tiles_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TileParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TileParameter_descriptor_;
  metadata.reflection = TileParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TileParameter

// optional int32 axis = 1 [default = 1];
bool TileParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TileParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
void TileParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
void TileParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
::google::protobuf::int32 TileParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.TileParameter.axis)
  return axis_;
}
void TileParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.TileParameter.axis)
}

// optional int32 tiles = 2;
bool TileParameter::has_tiles() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TileParameter::set_has_tiles() {
  _has_bits_[0] |= 0x00000002u;
}
void TileParameter::clear_has_tiles() {
  _has_bits_[0] &= ~0x00000002u;
}
void TileParameter::clear_tiles() {
  tiles_ = 0;
  clear_has_tiles();
}
::google::protobuf::int32 TileParameter::tiles() const {
  // @@protoc_insertion_point(field_get:caffe.TileParameter.tiles)
  return tiles_;
}
void TileParameter::set_tiles(::google::protobuf::int32 value) {
  set_has_tiles();
  tiles_ = value;
  // @@protoc_insertion_point(field_set:caffe.TileParameter.tiles)
}

inline const TileParameter* TileParameter::internal_default_instance() {
  return &TileParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ThresholdParameter::kThresholdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ThresholdParameter::ThresholdParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ThresholdParameter)
}

void ThresholdParameter::InitAsDefaultInstance() {
}

ThresholdParameter::ThresholdParameter(const ThresholdParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ThresholdParameter)
}

void ThresholdParameter::SharedCtor() {
  _cached_size_ = 0;
  threshold_ = 0;
}

ThresholdParameter::~ThresholdParameter() {
  // @@protoc_insertion_point(destructor:caffe.ThresholdParameter)
  SharedDtor();
}

void ThresholdParameter::SharedDtor() {
}

void ThresholdParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThresholdParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThresholdParameter_descriptor_;
}

const ThresholdParameter& ThresholdParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ThresholdParameter> ThresholdParameter_default_instance_;

ThresholdParameter* ThresholdParameter::New(::google::protobuf::Arena* arena) const {
  ThresholdParameter* n = new ThresholdParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ThresholdParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ThresholdParameter)
  threshold_ = 0;
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ThresholdParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ThresholdParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float threshold = 1 [default = 0];
      case 1: {
        if (tag == 13) {
          set_has_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &threshold_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ThresholdParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ThresholdParameter)
  return false;
#undef DO_
}

void ThresholdParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ThresholdParameter)
  // optional float threshold = 1 [default = 0];
  if (has_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->threshold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ThresholdParameter)
}

::google::protobuf::uint8* ThresholdParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ThresholdParameter)
  // optional float threshold = 1 [default = 0];
  if (has_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->threshold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ThresholdParameter)
  return target;
}

size_t ThresholdParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ThresholdParameter)
  size_t total_size = 0;

  // optional float threshold = 1 [default = 0];
  if (has_threshold()) {
    total_size += 1 + 4;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThresholdParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ThresholdParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ThresholdParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ThresholdParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ThresholdParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ThresholdParameter)
    UnsafeMergeFrom(*source);
  }
}

void ThresholdParameter::MergeFrom(const ThresholdParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ThresholdParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ThresholdParameter::UnsafeMergeFrom(const ThresholdParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_threshold()) {
      set_threshold(from.threshold());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ThresholdParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ThresholdParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThresholdParameter::CopyFrom(const ThresholdParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ThresholdParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ThresholdParameter::IsInitialized() const {

  return true;
}

void ThresholdParameter::Swap(ThresholdParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ThresholdParameter::InternalSwap(ThresholdParameter* other) {
  std::swap(threshold_, other->threshold_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ThresholdParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThresholdParameter_descriptor_;
  metadata.reflection = ThresholdParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ThresholdParameter

// optional float threshold = 1 [default = 0];
bool ThresholdParameter::has_threshold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ThresholdParameter::set_has_threshold() {
  _has_bits_[0] |= 0x00000001u;
}
void ThresholdParameter::clear_has_threshold() {
  _has_bits_[0] &= ~0x00000001u;
}
void ThresholdParameter::clear_threshold() {
  threshold_ = 0;
  clear_has_threshold();
}
float ThresholdParameter::threshold() const {
  // @@protoc_insertion_point(field_get:caffe.ThresholdParameter.threshold)
  return threshold_;
}
void ThresholdParameter::set_threshold(float value) {
  set_has_threshold();
  threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.ThresholdParameter.threshold)
}

inline const ThresholdParameter* ThresholdParameter::internal_default_instance() {
  return &ThresholdParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::std::string* WindowDataParameter::_default_crop_mode_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WindowDataParameter::kSourceFieldNumber;
const int WindowDataParameter::kScaleFieldNumber;
const int WindowDataParameter::kMeanFileFieldNumber;
const int WindowDataParameter::kBatchSizeFieldNumber;
const int WindowDataParameter::kCropSizeFieldNumber;
const int WindowDataParameter::kMirrorFieldNumber;
const int WindowDataParameter::kFgThresholdFieldNumber;
const int WindowDataParameter::kBgThresholdFieldNumber;
const int WindowDataParameter::kFgFractionFieldNumber;
const int WindowDataParameter::kContextPadFieldNumber;
const int WindowDataParameter::kCropModeFieldNumber;
const int WindowDataParameter::kCacheImagesFieldNumber;
const int WindowDataParameter::kRootFolderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WindowDataParameter::WindowDataParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.WindowDataParameter)
}

void WindowDataParameter::InitAsDefaultInstance() {
}

WindowDataParameter::WindowDataParameter(const WindowDataParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.WindowDataParameter)
}

void WindowDataParameter::SharedCtor() {
  _cached_size_ = 0;
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mean_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  crop_mode_.UnsafeSetDefault(_default_crop_mode_);
  root_folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&batch_size_, 0, reinterpret_cast<char*>(&context_pad_) -
    reinterpret_cast<char*>(&batch_size_) + sizeof(context_pad_));
  scale_ = 1;
  fg_threshold_ = 0.5f;
  bg_threshold_ = 0.5f;
  fg_fraction_ = 0.25f;
}

WindowDataParameter::~WindowDataParameter() {
  // @@protoc_insertion_point(destructor:caffe.WindowDataParameter)
  SharedDtor();
}

void WindowDataParameter::SharedDtor() {
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mean_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  crop_mode_.DestroyNoArena(_default_crop_mode_);
  root_folder_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WindowDataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WindowDataParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WindowDataParameter_descriptor_;
}

const WindowDataParameter& WindowDataParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<WindowDataParameter> WindowDataParameter_default_instance_;

WindowDataParameter* WindowDataParameter::New(::google::protobuf::Arena* arena) const {
  WindowDataParameter* n = new WindowDataParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WindowDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.WindowDataParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(WindowDataParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WindowDataParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(batch_size_, mirror_);
    if (has_source()) {
      source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    scale_ = 1;
    if (has_mean_file()) {
      mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    fg_threshold_ = 0.5f;
    bg_threshold_ = 0.5f;
  }
  if (_has_bits_[8 / 32] & 7936u) {
    ZR_(cache_images_, context_pad_);
    fg_fraction_ = 0.25f;
    if (has_crop_mode()) {
      crop_mode_.ClearToDefaultNoArena(_default_crop_mode_);
    }
    if (has_root_folder()) {
      root_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WindowDataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.WindowDataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.WindowDataParameter.source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_scale;
        break;
      }

      // optional float scale = 2 [default = 1];
      case 2: {
        if (tag == 21) {
         parse_scale:
          set_has_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mean_file;
        break;
      }

      // optional string mean_file = 3;
      case 3: {
        if (tag == 26) {
         parse_mean_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mean_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mean_file().data(), this->mean_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.WindowDataParameter.mean_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_batch_size;
        break;
      }

      // optional uint32 batch_size = 4;
      case 4: {
        if (tag == 32) {
         parse_batch_size:
          set_has_batch_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_crop_size;
        break;
      }

      // optional uint32 crop_size = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_crop_size:
          set_has_crop_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crop_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_mirror;
        break;
      }

      // optional bool mirror = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_mirror:
          set_has_mirror();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mirror_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_fg_threshold;
        break;
      }

      // optional float fg_threshold = 7 [default = 0.5];
      case 7: {
        if (tag == 61) {
         parse_fg_threshold:
          set_has_fg_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fg_threshold_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_bg_threshold;
        break;
      }

      // optional float bg_threshold = 8 [default = 0.5];
      case 8: {
        if (tag == 69) {
         parse_bg_threshold:
          set_has_bg_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bg_threshold_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_fg_fraction;
        break;
      }

      // optional float fg_fraction = 9 [default = 0.25];
      case 9: {
        if (tag == 77) {
         parse_fg_fraction:
          set_has_fg_fraction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fg_fraction_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_context_pad;
        break;
      }

      // optional uint32 context_pad = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_context_pad:
          set_has_context_pad();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &context_pad_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_crop_mode;
        break;
      }

      // optional string crop_mode = 11 [default = "warp"];
      case 11: {
        if (tag == 90) {
         parse_crop_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_crop_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->crop_mode().data(), this->crop_mode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.WindowDataParameter.crop_mode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_cache_images;
        break;
      }

      // optional bool cache_images = 12 [default = false];
      case 12: {
        if (tag == 96) {
         parse_cache_images:
          set_has_cache_images();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cache_images_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_root_folder;
        break;
      }

      // optional string root_folder = 13 [default = ""];
      case 13: {
        if (tag == 106) {
         parse_root_folder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_root_folder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->root_folder().data(), this->root_folder().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.WindowDataParameter.root_folder");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.WindowDataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.WindowDataParameter)
  return false;
#undef DO_
}

void WindowDataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.WindowDataParameter)
  // optional string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.WindowDataParameter.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  // optional float scale = 2 [default = 1];
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }

  // optional string mean_file = 3;
  if (has_mean_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), this->mean_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.WindowDataParameter.mean_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mean_file(), output);
  }

  // optional uint32 batch_size = 4;
  if (has_batch_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->batch_size(), output);
  }

  // optional uint32 crop_size = 5 [default = 0];
  if (has_crop_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->crop_size(), output);
  }

  // optional bool mirror = 6 [default = false];
  if (has_mirror()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->mirror(), output);
  }

  // optional float fg_threshold = 7 [default = 0.5];
  if (has_fg_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->fg_threshold(), output);
  }

  // optional float bg_threshold = 8 [default = 0.5];
  if (has_bg_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->bg_threshold(), output);
  }

  // optional float fg_fraction = 9 [default = 0.25];
  if (has_fg_fraction()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->fg_fraction(), output);
  }

  // optional uint32 context_pad = 10 [default = 0];
  if (has_context_pad()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->context_pad(), output);
  }

  // optional string crop_mode = 11 [default = "warp"];
  if (has_crop_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->crop_mode().data(), this->crop_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.WindowDataParameter.crop_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->crop_mode(), output);
  }

  // optional bool cache_images = 12 [default = false];
  if (has_cache_images()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->cache_images(), output);
  }

  // optional string root_folder = 13 [default = ""];
  if (has_root_folder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->root_folder().data(), this->root_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.WindowDataParameter.root_folder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->root_folder(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.WindowDataParameter)
}

::google::protobuf::uint8* WindowDataParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.WindowDataParameter)
  // optional string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.WindowDataParameter.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // optional float scale = 2 [default = 1];
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }

  // optional string mean_file = 3;
  if (has_mean_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), this->mean_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.WindowDataParameter.mean_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mean_file(), target);
  }

  // optional uint32 batch_size = 4;
  if (has_batch_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->batch_size(), target);
  }

  // optional uint32 crop_size = 5 [default = 0];
  if (has_crop_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->crop_size(), target);
  }

  // optional bool mirror = 6 [default = false];
  if (has_mirror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->mirror(), target);
  }

  // optional float fg_threshold = 7 [default = 0.5];
  if (has_fg_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->fg_threshold(), target);
  }

  // optional float bg_threshold = 8 [default = 0.5];
  if (has_bg_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->bg_threshold(), target);
  }

  // optional float fg_fraction = 9 [default = 0.25];
  if (has_fg_fraction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->fg_fraction(), target);
  }

  // optional uint32 context_pad = 10 [default = 0];
  if (has_context_pad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->context_pad(), target);
  }

  // optional string crop_mode = 11 [default = "warp"];
  if (has_crop_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->crop_mode().data(), this->crop_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.WindowDataParameter.crop_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->crop_mode(), target);
  }

  // optional bool cache_images = 12 [default = false];
  if (has_cache_images()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->cache_images(), target);
  }

  // optional string root_folder = 13 [default = ""];
  if (has_root_folder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->root_folder().data(), this->root_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.WindowDataParameter.root_folder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->root_folder(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.WindowDataParameter)
  return target;
}

size_t WindowDataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.WindowDataParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional float scale = 2 [default = 1];
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional string mean_file = 3;
    if (has_mean_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mean_file());
    }

    // optional uint32 batch_size = 4;
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_size());
    }

    // optional uint32 crop_size = 5 [default = 0];
    if (has_crop_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crop_size());
    }

    // optional bool mirror = 6 [default = false];
    if (has_mirror()) {
      total_size += 1 + 1;
    }

    // optional float fg_threshold = 7 [default = 0.5];
    if (has_fg_threshold()) {
      total_size += 1 + 4;
    }

    // optional float bg_threshold = 8 [default = 0.5];
    if (has_bg_threshold()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional float fg_fraction = 9 [default = 0.25];
    if (has_fg_fraction()) {
      total_size += 1 + 4;
    }

    // optional uint32 context_pad = 10 [default = 0];
    if (has_context_pad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->context_pad());
    }

    // optional string crop_mode = 11 [default = "warp"];
    if (has_crop_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->crop_mode());
    }

    // optional bool cache_images = 12 [default = false];
    if (has_cache_images()) {
      total_size += 1 + 1;
    }

    // optional string root_folder = 13 [default = ""];
    if (has_root_folder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->root_folder());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WindowDataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.WindowDataParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WindowDataParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WindowDataParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.WindowDataParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.WindowDataParameter)
    UnsafeMergeFrom(*source);
  }
}

void WindowDataParameter::MergeFrom(const WindowDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.WindowDataParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void WindowDataParameter::UnsafeMergeFrom(const WindowDataParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source()) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_mean_file()) {
      set_has_mean_file();
      mean_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mean_file_);
    }
    if (from.has_batch_size()) {
      set_batch_size(from.batch_size());
    }
    if (from.has_crop_size()) {
      set_crop_size(from.crop_size());
    }
    if (from.has_mirror()) {
      set_mirror(from.mirror());
    }
    if (from.has_fg_threshold()) {
      set_fg_threshold(from.fg_threshold());
    }
    if (from.has_bg_threshold()) {
      set_bg_threshold(from.bg_threshold());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fg_fraction()) {
      set_fg_fraction(from.fg_fraction());
    }
    if (from.has_context_pad()) {
      set_context_pad(from.context_pad());
    }
    if (from.has_crop_mode()) {
      set_has_crop_mode();
      crop_mode_.AssignWithDefault(_default_crop_mode_, from.crop_mode_);
    }
    if (from.has_cache_images()) {
      set_cache_images(from.cache_images());
    }
    if (from.has_root_folder()) {
      set_has_root_folder();
      root_folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.root_folder_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void WindowDataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.WindowDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WindowDataParameter::CopyFrom(const WindowDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.WindowDataParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool WindowDataParameter::IsInitialized() const {

  return true;
}

void WindowDataParameter::Swap(WindowDataParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WindowDataParameter::InternalSwap(WindowDataParameter* other) {
  source_.Swap(&other->source_);
  std::swap(scale_, other->scale_);
  mean_file_.Swap(&other->mean_file_);
  std::swap(batch_size_, other->batch_size_);
  std::swap(crop_size_, other->crop_size_);
  std::swap(mirror_, other->mirror_);
  std::swap(fg_threshold_, other->fg_threshold_);
  std::swap(bg_threshold_, other->bg_threshold_);
  std::swap(fg_fraction_, other->fg_fraction_);
  std::swap(context_pad_, other->context_pad_);
  crop_mode_.Swap(&other->crop_mode_);
  std::swap(cache_images_, other->cache_images_);
  root_folder_.Swap(&other->root_folder_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WindowDataParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WindowDataParameter_descriptor_;
  metadata.reflection = WindowDataParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WindowDataParameter

// optional string source = 1;
bool WindowDataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WindowDataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
void WindowDataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
void WindowDataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
const ::std::string& WindowDataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.source)
  return source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WindowDataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.source)
}
void WindowDataParameter::set_source(const char* value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.WindowDataParameter.source)
}
void WindowDataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.WindowDataParameter.source)
}
::std::string* WindowDataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.WindowDataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WindowDataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.WindowDataParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WindowDataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.WindowDataParameter.source)
}

// optional float scale = 2 [default = 1];
bool WindowDataParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WindowDataParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000002u;
}
void WindowDataParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
void WindowDataParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
float WindowDataParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.scale)
  return scale_;
}
void WindowDataParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.scale)
}

// optional string mean_file = 3;
bool WindowDataParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void WindowDataParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000004u;
}
void WindowDataParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000004u;
}
void WindowDataParameter::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mean_file();
}
const ::std::string& WindowDataParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.mean_file)
  return mean_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WindowDataParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.mean_file)
}
void WindowDataParameter::set_mean_file(const char* value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.WindowDataParameter.mean_file)
}
void WindowDataParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.WindowDataParameter.mean_file)
}
::std::string* WindowDataParameter::mutable_mean_file() {
  set_has_mean_file();
  // @@protoc_insertion_point(field_mutable:caffe.WindowDataParameter.mean_file)
  return mean_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WindowDataParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:caffe.WindowDataParameter.mean_file)
  clear_has_mean_file();
  return mean_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WindowDataParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file != NULL) {
    set_has_mean_file();
  } else {
    clear_has_mean_file();
  }
  mean_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.WindowDataParameter.mean_file)
}

// optional uint32 batch_size = 4;
bool WindowDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void WindowDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000008u;
}
void WindowDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void WindowDataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
::google::protobuf::uint32 WindowDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.batch_size)
  return batch_size_;
}
void WindowDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.batch_size)
}

// optional uint32 crop_size = 5 [default = 0];
bool WindowDataParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void WindowDataParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000010u;
}
void WindowDataParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000010u;
}
void WindowDataParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
::google::protobuf::uint32 WindowDataParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.crop_size)
  return crop_size_;
}
void WindowDataParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.crop_size)
}

// optional bool mirror = 6 [default = false];
bool WindowDataParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void WindowDataParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000020u;
}
void WindowDataParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000020u;
}
void WindowDataParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
bool WindowDataParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.mirror)
  return mirror_;
}
void WindowDataParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.mirror)
}

// optional float fg_threshold = 7 [default = 0.5];
bool WindowDataParameter::has_fg_threshold() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void WindowDataParameter::set_has_fg_threshold() {
  _has_bits_[0] |= 0x00000040u;
}
void WindowDataParameter::clear_has_fg_threshold() {
  _has_bits_[0] &= ~0x00000040u;
}
void WindowDataParameter::clear_fg_threshold() {
  fg_threshold_ = 0.5f;
  clear_has_fg_threshold();
}
float WindowDataParameter::fg_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.fg_threshold)
  return fg_threshold_;
}
void WindowDataParameter::set_fg_threshold(float value) {
  set_has_fg_threshold();
  fg_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.fg_threshold)
}

// optional float bg_threshold = 8 [default = 0.5];
bool WindowDataParameter::has_bg_threshold() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void WindowDataParameter::set_has_bg_threshold() {
  _has_bits_[0] |= 0x00000080u;
}
void WindowDataParameter::clear_has_bg_threshold() {
  _has_bits_[0] &= ~0x00000080u;
}
void WindowDataParameter::clear_bg_threshold() {
  bg_threshold_ = 0.5f;
  clear_has_bg_threshold();
}
float WindowDataParameter::bg_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.bg_threshold)
  return bg_threshold_;
}
void WindowDataParameter::set_bg_threshold(float value) {
  set_has_bg_threshold();
  bg_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.bg_threshold)
}

// optional float fg_fraction = 9 [default = 0.25];
bool WindowDataParameter::has_fg_fraction() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void WindowDataParameter::set_has_fg_fraction() {
  _has_bits_[0] |= 0x00000100u;
}
void WindowDataParameter::clear_has_fg_fraction() {
  _has_bits_[0] &= ~0x00000100u;
}
void WindowDataParameter::clear_fg_fraction() {
  fg_fraction_ = 0.25f;
  clear_has_fg_fraction();
}
float WindowDataParameter::fg_fraction() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.fg_fraction)
  return fg_fraction_;
}
void WindowDataParameter::set_fg_fraction(float value) {
  set_has_fg_fraction();
  fg_fraction_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.fg_fraction)
}

// optional uint32 context_pad = 10 [default = 0];
bool WindowDataParameter::has_context_pad() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void WindowDataParameter::set_has_context_pad() {
  _has_bits_[0] |= 0x00000200u;
}
void WindowDataParameter::clear_has_context_pad() {
  _has_bits_[0] &= ~0x00000200u;
}
void WindowDataParameter::clear_context_pad() {
  context_pad_ = 0u;
  clear_has_context_pad();
}
::google::protobuf::uint32 WindowDataParameter::context_pad() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.context_pad)
  return context_pad_;
}
void WindowDataParameter::set_context_pad(::google::protobuf::uint32 value) {
  set_has_context_pad();
  context_pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.context_pad)
}

// optional string crop_mode = 11 [default = "warp"];
bool WindowDataParameter::has_crop_mode() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void WindowDataParameter::set_has_crop_mode() {
  _has_bits_[0] |= 0x00000400u;
}
void WindowDataParameter::clear_has_crop_mode() {
  _has_bits_[0] &= ~0x00000400u;
}
void WindowDataParameter::clear_crop_mode() {
  crop_mode_.ClearToDefaultNoArena(_default_crop_mode_);
  clear_has_crop_mode();
}
const ::std::string& WindowDataParameter::crop_mode() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.crop_mode)
  return crop_mode_.GetNoArena(_default_crop_mode_);
}
void WindowDataParameter::set_crop_mode(const ::std::string& value) {
  set_has_crop_mode();
  crop_mode_.SetNoArena(_default_crop_mode_, value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.crop_mode)
}
void WindowDataParameter::set_crop_mode(const char* value) {
  set_has_crop_mode();
  crop_mode_.SetNoArena(_default_crop_mode_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.WindowDataParameter.crop_mode)
}
void WindowDataParameter::set_crop_mode(const char* value, size_t size) {
  set_has_crop_mode();
  crop_mode_.SetNoArena(_default_crop_mode_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.WindowDataParameter.crop_mode)
}
::std::string* WindowDataParameter::mutable_crop_mode() {
  set_has_crop_mode();
  // @@protoc_insertion_point(field_mutable:caffe.WindowDataParameter.crop_mode)
  return crop_mode_.MutableNoArena(_default_crop_mode_);
}
::std::string* WindowDataParameter::release_crop_mode() {
  // @@protoc_insertion_point(field_release:caffe.WindowDataParameter.crop_mode)
  clear_has_crop_mode();
  return crop_mode_.ReleaseNoArena(_default_crop_mode_);
}
void WindowDataParameter::set_allocated_crop_mode(::std::string* crop_mode) {
  if (crop_mode != NULL) {
    set_has_crop_mode();
  } else {
    clear_has_crop_mode();
  }
  crop_mode_.SetAllocatedNoArena(_default_crop_mode_, crop_mode);
  // @@protoc_insertion_point(field_set_allocated:caffe.WindowDataParameter.crop_mode)
}

// optional bool cache_images = 12 [default = false];
bool WindowDataParameter::has_cache_images() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void WindowDataParameter::set_has_cache_images() {
  _has_bits_[0] |= 0x00000800u;
}
void WindowDataParameter::clear_has_cache_images() {
  _has_bits_[0] &= ~0x00000800u;
}
void WindowDataParameter::clear_cache_images() {
  cache_images_ = false;
  clear_has_cache_images();
}
bool WindowDataParameter::cache_images() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.cache_images)
  return cache_images_;
}
void WindowDataParameter::set_cache_images(bool value) {
  set_has_cache_images();
  cache_images_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.cache_images)
}

// optional string root_folder = 13 [default = ""];
bool WindowDataParameter::has_root_folder() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void WindowDataParameter::set_has_root_folder() {
  _has_bits_[0] |= 0x00001000u;
}
void WindowDataParameter::clear_has_root_folder() {
  _has_bits_[0] &= ~0x00001000u;
}
void WindowDataParameter::clear_root_folder() {
  root_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_root_folder();
}
const ::std::string& WindowDataParameter::root_folder() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.root_folder)
  return root_folder_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WindowDataParameter::set_root_folder(const ::std::string& value) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.root_folder)
}
void WindowDataParameter::set_root_folder(const char* value) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.WindowDataParameter.root_folder)
}
void WindowDataParameter::set_root_folder(const char* value, size_t size) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.WindowDataParameter.root_folder)
}
::std::string* WindowDataParameter::mutable_root_folder() {
  set_has_root_folder();
  // @@protoc_insertion_point(field_mutable:caffe.WindowDataParameter.root_folder)
  return root_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WindowDataParameter::release_root_folder() {
  // @@protoc_insertion_point(field_release:caffe.WindowDataParameter.root_folder)
  clear_has_root_folder();
  return root_folder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WindowDataParameter::set_allocated_root_folder(::std::string* root_folder) {
  if (root_folder != NULL) {
    set_has_root_folder();
  } else {
    clear_has_root_folder();
  }
  root_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), root_folder);
  // @@protoc_insertion_point(field_set_allocated:caffe.WindowDataParameter.root_folder)
}

inline const WindowDataParameter* WindowDataParameter::internal_default_instance() {
  return &WindowDataParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* SPPParameter_PoolMethod_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SPPParameter_PoolMethod_descriptor_;
}
bool SPPParameter_PoolMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SPPParameter_PoolMethod SPPParameter::MAX;
const SPPParameter_PoolMethod SPPParameter::AVE;
const SPPParameter_PoolMethod SPPParameter::STOCHASTIC;
const SPPParameter_PoolMethod SPPParameter::PoolMethod_MIN;
const SPPParameter_PoolMethod SPPParameter::PoolMethod_MAX;
const int SPPParameter::PoolMethod_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SPPParameter_Engine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SPPParameter_Engine_descriptor_;
}
bool SPPParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SPPParameter_Engine SPPParameter::DEFAULT;
const SPPParameter_Engine SPPParameter::CAFFE;
const SPPParameter_Engine SPPParameter::CUDNN;
const SPPParameter_Engine SPPParameter::Engine_MIN;
const SPPParameter_Engine SPPParameter::Engine_MAX;
const int SPPParameter::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SPPParameter::kPyramidHeightFieldNumber;
const int SPPParameter::kPoolFieldNumber;
const int SPPParameter::kEngineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SPPParameter::SPPParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SPPParameter)
}

void SPPParameter::InitAsDefaultInstance() {
}

SPPParameter::SPPParameter(const SPPParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.SPPParameter)
}

void SPPParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pyramid_height_, 0, reinterpret_cast<char*>(&engine_) -
    reinterpret_cast<char*>(&pyramid_height_) + sizeof(engine_));
}

SPPParameter::~SPPParameter() {
  // @@protoc_insertion_point(destructor:caffe.SPPParameter)
  SharedDtor();
}

void SPPParameter::SharedDtor() {
}

void SPPParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SPPParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SPPParameter_descriptor_;
}

const SPPParameter& SPPParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SPPParameter> SPPParameter_default_instance_;

SPPParameter* SPPParameter::New(::google::protobuf::Arena* arena) const {
  SPPParameter* n = new SPPParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SPPParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SPPParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SPPParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SPPParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(pyramid_height_, engine_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SPPParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SPPParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pyramid_height = 1;
      case 1: {
        if (tag == 8) {
          set_has_pyramid_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pyramid_height_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pool;
        break;
      }

      // optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
      case 2: {
        if (tag == 16) {
         parse_pool:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::SPPParameter_PoolMethod_IsValid(value)) {
            set_pool(static_cast< ::caffe::SPPParameter_PoolMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_engine;
        break;
      }

      // optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
      case 6: {
        if (tag == 48) {
         parse_engine:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::SPPParameter_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::SPPParameter_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SPPParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SPPParameter)
  return false;
#undef DO_
}

void SPPParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SPPParameter)
  // optional uint32 pyramid_height = 1;
  if (has_pyramid_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pyramid_height(), output);
  }

  // optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
  if (has_pool()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->pool(), output);
  }

  // optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
  if (has_engine()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->engine(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SPPParameter)
}

::google::protobuf::uint8* SPPParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SPPParameter)
  // optional uint32 pyramid_height = 1;
  if (has_pyramid_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pyramid_height(), target);
  }

  // optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
  if (has_pool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->pool(), target);
  }

  // optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
  if (has_engine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->engine(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SPPParameter)
  return target;
}

size_t SPPParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SPPParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 pyramid_height = 1;
    if (has_pyramid_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pyramid_height());
    }

    // optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
    if (has_pool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pool());
    }

    // optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SPPParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SPPParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SPPParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SPPParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SPPParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SPPParameter)
    UnsafeMergeFrom(*source);
  }
}

void SPPParameter::MergeFrom(const SPPParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SPPParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SPPParameter::UnsafeMergeFrom(const SPPParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pyramid_height()) {
      set_pyramid_height(from.pyramid_height());
    }
    if (from.has_pool()) {
      set_pool(from.pool());
    }
    if (from.has_engine()) {
      set_engine(from.engine());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void SPPParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SPPParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SPPParameter::CopyFrom(const SPPParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SPPParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SPPParameter::IsInitialized() const {

  return true;
}

void SPPParameter::Swap(SPPParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SPPParameter::InternalSwap(SPPParameter* other) {
  std::swap(pyramid_height_, other->pyramid_height_);
  std::swap(pool_, other->pool_);
  std::swap(engine_, other->engine_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SPPParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SPPParameter_descriptor_;
  metadata.reflection = SPPParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SPPParameter

// optional uint32 pyramid_height = 1;
bool SPPParameter::has_pyramid_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SPPParameter::set_has_pyramid_height() {
  _has_bits_[0] |= 0x00000001u;
}
void SPPParameter::clear_has_pyramid_height() {
  _has_bits_[0] &= ~0x00000001u;
}
void SPPParameter::clear_pyramid_height() {
  pyramid_height_ = 0u;
  clear_has_pyramid_height();
}
::google::protobuf::uint32 SPPParameter::pyramid_height() const {
  // @@protoc_insertion_point(field_get:caffe.SPPParameter.pyramid_height)
  return pyramid_height_;
}
void SPPParameter::set_pyramid_height(::google::protobuf::uint32 value) {
  set_has_pyramid_height();
  pyramid_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.SPPParameter.pyramid_height)
}

// optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
bool SPPParameter::has_pool() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SPPParameter::set_has_pool() {
  _has_bits_[0] |= 0x00000002u;
}
void SPPParameter::clear_has_pool() {
  _has_bits_[0] &= ~0x00000002u;
}
void SPPParameter::clear_pool() {
  pool_ = 0;
  clear_has_pool();
}
::caffe::SPPParameter_PoolMethod SPPParameter::pool() const {
  // @@protoc_insertion_point(field_get:caffe.SPPParameter.pool)
  return static_cast< ::caffe::SPPParameter_PoolMethod >(pool_);
}
void SPPParameter::set_pool(::caffe::SPPParameter_PoolMethod value) {
  assert(::caffe::SPPParameter_PoolMethod_IsValid(value));
  set_has_pool();
  pool_ = value;
  // @@protoc_insertion_point(field_set:caffe.SPPParameter.pool)
}

// optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
bool SPPParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SPPParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000004u;
}
void SPPParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000004u;
}
void SPPParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
::caffe::SPPParameter_Engine SPPParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.SPPParameter.engine)
  return static_cast< ::caffe::SPPParameter_Engine >(engine_);
}
void SPPParameter::set_engine(::caffe::SPPParameter_Engine value) {
  assert(::caffe::SPPParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.SPPParameter.engine)
}

inline const SPPParameter* SPPParameter::internal_default_instance() {
  return &SPPParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* V1LayerParameter_LayerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return V1LayerParameter_LayerType_descriptor_;
}
bool V1LayerParameter_LayerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const V1LayerParameter_LayerType V1LayerParameter::NONE;
const V1LayerParameter_LayerType V1LayerParameter::ABSVAL;
const V1LayerParameter_LayerType V1LayerParameter::ACCURACY;
const V1LayerParameter_LayerType V1LayerParameter::ARGMAX;
const V1LayerParameter_LayerType V1LayerParameter::BNLL;
const V1LayerParameter_LayerType V1LayerParameter::CONCAT;
const V1LayerParameter_LayerType V1LayerParameter::CONTRASTIVE_LOSS;
const V1LayerParameter_LayerType V1LayerParameter::CONVOLUTION;
const V1LayerParameter_LayerType V1LayerParameter::DATA;
const V1LayerParameter_LayerType V1LayerParameter::DECONVOLUTION;
const V1LayerParameter_LayerType V1LayerParameter::DROPOUT;
const V1LayerParameter_LayerType V1LayerParameter::DUMMY_DATA;
const V1LayerParameter_LayerType V1LayerParameter::EUCLIDEAN_LOSS;
const V1LayerParameter_LayerType V1LayerParameter::ELTWISE;
const V1LayerParameter_LayerType V1LayerParameter::EXP;
const V1LayerParameter_LayerType V1LayerParameter::FLATTEN;
const V1LayerParameter_LayerType V1LayerParameter::HDF5_DATA;
const V1LayerParameter_LayerType V1LayerParameter::HDF5_OUTPUT;
const V1LayerParameter_LayerType V1LayerParameter::HINGE_LOSS;
const V1LayerParameter_LayerType V1LayerParameter::IM2COL;
const V1LayerParameter_LayerType V1LayerParameter::IMAGE_DATA;
const V1LayerParameter_LayerType V1LayerParameter::INFOGAIN_LOSS;
const V1LayerParameter_LayerType V1LayerParameter::INNER_PRODUCT;
const V1LayerParameter_LayerType V1LayerParameter::LRN;
const V1LayerParameter_LayerType V1LayerParameter::MEMORY_DATA;
const V1LayerParameter_LayerType V1LayerParameter::MULTINOMIAL_LOGISTIC_LOSS;
const V1LayerParameter_LayerType V1LayerParameter::MVN;
const V1LayerParameter_LayerType V1LayerParameter::POOLING;
const V1LayerParameter_LayerType V1LayerParameter::POWER;
const V1LayerParameter_LayerType V1LayerParameter::RELU;
const V1LayerParameter_LayerType V1LayerParameter::SIGMOID;
const V1LayerParameter_LayerType V1LayerParameter::SIGMOID_CROSS_ENTROPY_LOSS;
const V1LayerParameter_LayerType V1LayerParameter::SILENCE;
const V1LayerParameter_LayerType V1LayerParameter::SOFTMAX;
const V1LayerParameter_LayerType V1LayerParameter::SOFTMAX_LOSS;
const V1LayerParameter_LayerType V1LayerParameter::SPLIT;
const V1LayerParameter_LayerType V1LayerParameter::SLICE;
const V1LayerParameter_LayerType V1LayerParameter::TANH;
const V1LayerParameter_LayerType V1LayerParameter::WINDOW_DATA;
const V1LayerParameter_LayerType V1LayerParameter::THRESHOLD;
const V1LayerParameter_LayerType V1LayerParameter::LayerType_MIN;
const V1LayerParameter_LayerType V1LayerParameter::LayerType_MAX;
const int V1LayerParameter::LayerType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* V1LayerParameter_DimCheckMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return V1LayerParameter_DimCheckMode_descriptor_;
}
bool V1LayerParameter_DimCheckMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const V1LayerParameter_DimCheckMode V1LayerParameter::STRICT;
const V1LayerParameter_DimCheckMode V1LayerParameter::PERMISSIVE;
const V1LayerParameter_DimCheckMode V1LayerParameter::DimCheckMode_MIN;
const V1LayerParameter_DimCheckMode V1LayerParameter::DimCheckMode_MAX;
const int V1LayerParameter::DimCheckMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int V1LayerParameter::kBottomFieldNumber;
const int V1LayerParameter::kTopFieldNumber;
const int V1LayerParameter::kNameFieldNumber;
const int V1LayerParameter::kIncludeFieldNumber;
const int V1LayerParameter::kExcludeFieldNumber;
const int V1LayerParameter::kTypeFieldNumber;
const int V1LayerParameter::kBlobsFieldNumber;
const int V1LayerParameter::kParamFieldNumber;
const int V1LayerParameter::kBlobShareModeFieldNumber;
const int V1LayerParameter::kBlobsLrFieldNumber;
const int V1LayerParameter::kWeightDecayFieldNumber;
const int V1LayerParameter::kLossWeightFieldNumber;
const int V1LayerParameter::kAccuracyParamFieldNumber;
const int V1LayerParameter::kArgmaxParamFieldNumber;
const int V1LayerParameter::kConcatParamFieldNumber;
const int V1LayerParameter::kContrastiveLossParamFieldNumber;
const int V1LayerParameter::kConvolutionParamFieldNumber;
const int V1LayerParameter::kDataParamFieldNumber;
const int V1LayerParameter::kDropoutParamFieldNumber;
const int V1LayerParameter::kDummyDataParamFieldNumber;
const int V1LayerParameter::kEltwiseParamFieldNumber;
const int V1LayerParameter::kExpParamFieldNumber;
const int V1LayerParameter::kHdf5DataParamFieldNumber;
const int V1LayerParameter::kHdf5OutputParamFieldNumber;
const int V1LayerParameter::kHingeLossParamFieldNumber;
const int V1LayerParameter::kImageDataParamFieldNumber;
const int V1LayerParameter::kInfogainLossParamFieldNumber;
const int V1LayerParameter::kInnerProductParamFieldNumber;
const int V1LayerParameter::kLrnParamFieldNumber;
const int V1LayerParameter::kMemoryDataParamFieldNumber;
const int V1LayerParameter::kMvnParamFieldNumber;
const int V1LayerParameter::kPoolingParamFieldNumber;
const int V1LayerParameter::kPowerParamFieldNumber;
const int V1LayerParameter::kReluParamFieldNumber;
const int V1LayerParameter::kSigmoidParamFieldNumber;
const int V1LayerParameter::kSoftmaxParamFieldNumber;
const int V1LayerParameter::kSliceParamFieldNumber;
const int V1LayerParameter::kTanhParamFieldNumber;
const int V1LayerParameter::kThresholdParamFieldNumber;
const int V1LayerParameter::kWindowDataParamFieldNumber;
const int V1LayerParameter::kTransformParamFieldNumber;
const int V1LayerParameter::kLossParamFieldNumber;
const int V1LayerParameter::kLayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

V1LayerParameter::V1LayerParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.V1LayerParameter)
}

void V1LayerParameter::InitAsDefaultInstance() {
  accuracy_param_ = const_cast< ::caffe::AccuracyParameter*>(
      ::caffe::AccuracyParameter::internal_default_instance());
  argmax_param_ = const_cast< ::caffe::ArgMaxParameter*>(
      ::caffe::ArgMaxParameter::internal_default_instance());
  concat_param_ = const_cast< ::caffe::ConcatParameter*>(
      ::caffe::ConcatParameter::internal_default_instance());
  contrastive_loss_param_ = const_cast< ::caffe::ContrastiveLossParameter*>(
      ::caffe::ContrastiveLossParameter::internal_default_instance());
  convolution_param_ = const_cast< ::caffe::ConvolutionParameter*>(
      ::caffe::ConvolutionParameter::internal_default_instance());
  data_param_ = const_cast< ::caffe::DataParameter*>(
      ::caffe::DataParameter::internal_default_instance());
  dropout_param_ = const_cast< ::caffe::DropoutParameter*>(
      ::caffe::DropoutParameter::internal_default_instance());
  dummy_data_param_ = const_cast< ::caffe::DummyDataParameter*>(
      ::caffe::DummyDataParameter::internal_default_instance());
  eltwise_param_ = const_cast< ::caffe::EltwiseParameter*>(
      ::caffe::EltwiseParameter::internal_default_instance());
  exp_param_ = const_cast< ::caffe::ExpParameter*>(
      ::caffe::ExpParameter::internal_default_instance());
  hdf5_data_param_ = const_cast< ::caffe::HDF5DataParameter*>(
      ::caffe::HDF5DataParameter::internal_default_instance());
  hdf5_output_param_ = const_cast< ::caffe::HDF5OutputParameter*>(
      ::caffe::HDF5OutputParameter::internal_default_instance());
  hinge_loss_param_ = const_cast< ::caffe::HingeLossParameter*>(
      ::caffe::HingeLossParameter::internal_default_instance());
  image_data_param_ = const_cast< ::caffe::ImageDataParameter*>(
      ::caffe::ImageDataParameter::internal_default_instance());
  infogain_loss_param_ = const_cast< ::caffe::InfogainLossParameter*>(
      ::caffe::InfogainLossParameter::internal_default_instance());
  inner_product_param_ = const_cast< ::caffe::InnerProductParameter*>(
      ::caffe::InnerProductParameter::internal_default_instance());
  lrn_param_ = const_cast< ::caffe::LRNParameter*>(
      ::caffe::LRNParameter::internal_default_instance());
  memory_data_param_ = const_cast< ::caffe::MemoryDataParameter*>(
      ::caffe::MemoryDataParameter::internal_default_instance());
  mvn_param_ = const_cast< ::caffe::MVNParameter*>(
      ::caffe::MVNParameter::internal_default_instance());
  pooling_param_ = const_cast< ::caffe::PoolingParameter*>(
      ::caffe::PoolingParameter::internal_default_instance());
  power_param_ = const_cast< ::caffe::PowerParameter*>(
      ::caffe::PowerParameter::internal_default_instance());
  relu_param_ = const_cast< ::caffe::ReLUParameter*>(
      ::caffe::ReLUParameter::internal_default_instance());
  sigmoid_param_ = const_cast< ::caffe::SigmoidParameter*>(
      ::caffe::SigmoidParameter::internal_default_instance());
  softmax_param_ = const_cast< ::caffe::SoftmaxParameter*>(
      ::caffe::SoftmaxParameter::internal_default_instance());
  slice_param_ = const_cast< ::caffe::SliceParameter*>(
      ::caffe::SliceParameter::internal_default_instance());
  tanh_param_ = const_cast< ::caffe::TanHParameter*>(
      ::caffe::TanHParameter::internal_default_instance());
  threshold_param_ = const_cast< ::caffe::ThresholdParameter*>(
      ::caffe::ThresholdParameter::internal_default_instance());
  window_data_param_ = const_cast< ::caffe::WindowDataParameter*>(
      ::caffe::WindowDataParameter::internal_default_instance());
  transform_param_ = const_cast< ::caffe::TransformationParameter*>(
      ::caffe::TransformationParameter::internal_default_instance());
  loss_param_ = const_cast< ::caffe::LossParameter*>(
      ::caffe::LossParameter::internal_default_instance());
  layer_ = const_cast< ::caffe::V0LayerParameter*>(
      ::caffe::V0LayerParameter::internal_default_instance());
}

V1LayerParameter::V1LayerParameter(const V1LayerParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.V1LayerParameter)
}

void V1LayerParameter::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accuracy_param_ = NULL;
  argmax_param_ = NULL;
  concat_param_ = NULL;
  contrastive_loss_param_ = NULL;
  convolution_param_ = NULL;
  data_param_ = NULL;
  dropout_param_ = NULL;
  dummy_data_param_ = NULL;
  eltwise_param_ = NULL;
  exp_param_ = NULL;
  hdf5_data_param_ = NULL;
  hdf5_output_param_ = NULL;
  hinge_loss_param_ = NULL;
  image_data_param_ = NULL;
  infogain_loss_param_ = NULL;
  inner_product_param_ = NULL;
  lrn_param_ = NULL;
  memory_data_param_ = NULL;
  mvn_param_ = NULL;
  pooling_param_ = NULL;
  power_param_ = NULL;
  relu_param_ = NULL;
  sigmoid_param_ = NULL;
  softmax_param_ = NULL;
  slice_param_ = NULL;
  tanh_param_ = NULL;
  threshold_param_ = NULL;
  window_data_param_ = NULL;
  transform_param_ = NULL;
  loss_param_ = NULL;
  layer_ = NULL;
  type_ = 0;
  _cached_size_ = 0;
}

V1LayerParameter::~V1LayerParameter() {
  // @@protoc_insertion_point(destructor:caffe.V1LayerParameter)
  SharedDtor();
}

void V1LayerParameter::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &V1LayerParameter_default_instance_.get()) {
    delete accuracy_param_;
    delete argmax_param_;
    delete concat_param_;
    delete contrastive_loss_param_;
    delete convolution_param_;
    delete data_param_;
    delete dropout_param_;
    delete dummy_data_param_;
    delete eltwise_param_;
    delete exp_param_;
    delete hdf5_data_param_;
    delete hdf5_output_param_;
    delete hinge_loss_param_;
    delete image_data_param_;
    delete infogain_loss_param_;
    delete inner_product_param_;
    delete lrn_param_;
    delete memory_data_param_;
    delete mvn_param_;
    delete pooling_param_;
    delete power_param_;
    delete relu_param_;
    delete sigmoid_param_;
    delete softmax_param_;
    delete slice_param_;
    delete tanh_param_;
    delete threshold_param_;
    delete window_data_param_;
    delete transform_param_;
    delete loss_param_;
    delete layer_;
  }
}

void V1LayerParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* V1LayerParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return V1LayerParameter_descriptor_;
}

const V1LayerParameter& V1LayerParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<V1LayerParameter> V1LayerParameter_default_instance_;

V1LayerParameter* V1LayerParameter::New(::google::protobuf::Arena* arena) const {
  V1LayerParameter* n = new V1LayerParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void V1LayerParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.V1LayerParameter)
  if (_has_bits_[0 / 32] & 36u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    type_ = 0;
  }
  if (_has_bits_[8 / 32] & 61440u) {
    if (has_accuracy_param()) {
      if (accuracy_param_ != NULL) accuracy_param_->::caffe::AccuracyParameter::Clear();
    }
    if (has_argmax_param()) {
      if (argmax_param_ != NULL) argmax_param_->::caffe::ArgMaxParameter::Clear();
    }
    if (has_concat_param()) {
      if (concat_param_ != NULL) concat_param_->::caffe::ConcatParameter::Clear();
    }
    if (has_contrastive_loss_param()) {
      if (contrastive_loss_param_ != NULL) contrastive_loss_param_->::caffe::ContrastiveLossParameter::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    if (has_convolution_param()) {
      if (convolution_param_ != NULL) convolution_param_->::caffe::ConvolutionParameter::Clear();
    }
    if (has_data_param()) {
      if (data_param_ != NULL) data_param_->::caffe::DataParameter::Clear();
    }
    if (has_dropout_param()) {
      if (dropout_param_ != NULL) dropout_param_->::caffe::DropoutParameter::Clear();
    }
    if (has_dummy_data_param()) {
      if (dummy_data_param_ != NULL) dummy_data_param_->::caffe::DummyDataParameter::Clear();
    }
    if (has_eltwise_param()) {
      if (eltwise_param_ != NULL) eltwise_param_->::caffe::EltwiseParameter::Clear();
    }
    if (has_exp_param()) {
      if (exp_param_ != NULL) exp_param_->::caffe::ExpParameter::Clear();
    }
    if (has_hdf5_data_param()) {
      if (hdf5_data_param_ != NULL) hdf5_data_param_->::caffe::HDF5DataParameter::Clear();
    }
    if (has_hdf5_output_param()) {
      if (hdf5_output_param_ != NULL) hdf5_output_param_->::caffe::HDF5OutputParameter::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    if (has_hinge_loss_param()) {
      if (hinge_loss_param_ != NULL) hinge_loss_param_->::caffe::HingeLossParameter::Clear();
    }
    if (has_image_data_param()) {
      if (image_data_param_ != NULL) image_data_param_->::caffe::ImageDataParameter::Clear();
    }
    if (has_infogain_loss_param()) {
      if (infogain_loss_param_ != NULL) infogain_loss_param_->::caffe::InfogainLossParameter::Clear();
    }
    if (has_inner_product_param()) {
      if (inner_product_param_ != NULL) inner_product_param_->::caffe::InnerProductParameter::Clear();
    }
    if (has_lrn_param()) {
      if (lrn_param_ != NULL) lrn_param_->::caffe::LRNParameter::Clear();
    }
    if (has_memory_data_param()) {
      if (memory_data_param_ != NULL) memory_data_param_->::caffe::MemoryDataParameter::Clear();
    }
    if (has_mvn_param()) {
      if (mvn_param_ != NULL) mvn_param_->::caffe::MVNParameter::Clear();
    }
    if (has_pooling_param()) {
      if (pooling_param_ != NULL) pooling_param_->::caffe::PoolingParameter::Clear();
    }
  }
  if (_has_bits_[32 / 32] & 255u) {
    if (has_power_param()) {
      if (power_param_ != NULL) power_param_->::caffe::PowerParameter::Clear();
    }
    if (has_relu_param()) {
      if (relu_param_ != NULL) relu_param_->::caffe::ReLUParameter::Clear();
    }
    if (has_sigmoid_param()) {
      if (sigmoid_param_ != NULL) sigmoid_param_->::caffe::SigmoidParameter::Clear();
    }
    if (has_softmax_param()) {
      if (softmax_param_ != NULL) softmax_param_->::caffe::SoftmaxParameter::Clear();
    }
    if (has_slice_param()) {
      if (slice_param_ != NULL) slice_param_->::caffe::SliceParameter::Clear();
    }
    if (has_tanh_param()) {
      if (tanh_param_ != NULL) tanh_param_->::caffe::TanHParameter::Clear();
    }
    if (has_threshold_param()) {
      if (threshold_param_ != NULL) threshold_param_->::caffe::ThresholdParameter::Clear();
    }
    if (has_window_data_param()) {
      if (window_data_param_ != NULL) window_data_param_->::caffe::WindowDataParameter::Clear();
    }
  }
  if (_has_bits_[40 / 32] & 1792u) {
    if (has_transform_param()) {
      if (transform_param_ != NULL) transform_param_->::caffe::TransformationParameter::Clear();
    }
    if (has_loss_param()) {
      if (loss_param_ != NULL) loss_param_->::caffe::LossParameter::Clear();
    }
    if (has_layer()) {
      if (layer_ != NULL) layer_->::caffe::V0LayerParameter::Clear();
    }
  }
  bottom_.Clear();
  top_.Clear();
  include_.Clear();
  exclude_.Clear();
  blobs_.Clear();
  param_.Clear();
  blob_share_mode_.Clear();
  blobs_lr_.Clear();
  weight_decay_.Clear();
  loss_weight_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool V1LayerParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.V1LayerParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.V0LayerParameter layer = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_layer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bottom;
        break;
      }

      // repeated string bottom = 2;
      case 2: {
        if (tag == 18) {
         parse_bottom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_bottom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bottom(this->bottom_size() - 1).data(),
            this->bottom(this->bottom_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.V1LayerParameter.bottom");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bottom;
        if (input->ExpectTag(26)) goto parse_top;
        break;
      }

      // repeated string top = 3;
      case 3: {
        if (tag == 26) {
         parse_top:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_top()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->top(this->top_size() - 1).data(),
            this->top(this->top_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.V1LayerParameter.top");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_top;
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.V1LayerParameter.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional .caffe.V1LayerParameter.LayerType type = 5;
      case 5: {
        if (tag == 40) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::V1LayerParameter_LayerType_IsValid(value)) {
            set_type(static_cast< ::caffe::V1LayerParameter_LayerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_blobs;
        break;
      }

      // repeated .caffe.BlobProto blobs = 6;
      case 6: {
        if (tag == 50) {
         parse_blobs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_blobs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_blobs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_blobs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(61)) goto parse_blobs_lr;
        break;
      }

      // repeated float blobs_lr = 7;
      case 7: {
        if (tag == 61) {
         parse_blobs_lr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 61, input, this->mutable_blobs_lr())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_blobs_lr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_blobs_lr;
        if (input->ExpectTag(69)) goto parse_weight_decay;
        break;
      }

      // repeated float weight_decay = 8;
      case 8: {
        if (tag == 69) {
         parse_weight_decay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 69, input, this->mutable_weight_decay())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_weight_decay())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_weight_decay;
        if (input->ExpectTag(74)) goto parse_concat_param;
        break;
      }

      // optional .caffe.ConcatParameter concat_param = 9;
      case 9: {
        if (tag == 74) {
         parse_concat_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_concat_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_convolution_param;
        break;
      }

      // optional .caffe.ConvolutionParameter convolution_param = 10;
      case 10: {
        if (tag == 82) {
         parse_convolution_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_convolution_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_data_param;
        break;
      }

      // optional .caffe.DataParameter data_param = 11;
      case 11: {
        if (tag == 90) {
         parse_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_dropout_param;
        break;
      }

      // optional .caffe.DropoutParameter dropout_param = 12;
      case 12: {
        if (tag == 98) {
         parse_dropout_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dropout_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_hdf5_data_param;
        break;
      }

      // optional .caffe.HDF5DataParameter hdf5_data_param = 13;
      case 13: {
        if (tag == 106) {
         parse_hdf5_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hdf5_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_hdf5_output_param;
        break;
      }

      // optional .caffe.HDF5OutputParameter hdf5_output_param = 14;
      case 14: {
        if (tag == 114) {
         parse_hdf5_output_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hdf5_output_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_image_data_param;
        break;
      }

      // optional .caffe.ImageDataParameter image_data_param = 15;
      case 15: {
        if (tag == 122) {
         parse_image_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_infogain_loss_param;
        break;
      }

      // optional .caffe.InfogainLossParameter infogain_loss_param = 16;
      case 16: {
        if (tag == 130) {
         parse_infogain_loss_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_infogain_loss_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_inner_product_param;
        break;
      }

      // optional .caffe.InnerProductParameter inner_product_param = 17;
      case 17: {
        if (tag == 138) {
         parse_inner_product_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inner_product_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_lrn_param;
        break;
      }

      // optional .caffe.LRNParameter lrn_param = 18;
      case 18: {
        if (tag == 146) {
         parse_lrn_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lrn_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_pooling_param;
        break;
      }

      // optional .caffe.PoolingParameter pooling_param = 19;
      case 19: {
        if (tag == 154) {
         parse_pooling_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pooling_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_window_data_param;
        break;
      }

      // optional .caffe.WindowDataParameter window_data_param = 20;
      case 20: {
        if (tag == 162) {
         parse_window_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_window_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_power_param;
        break;
      }

      // optional .caffe.PowerParameter power_param = 21;
      case 21: {
        if (tag == 170) {
         parse_power_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_power_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_memory_data_param;
        break;
      }

      // optional .caffe.MemoryDataParameter memory_data_param = 22;
      case 22: {
        if (tag == 178) {
         parse_memory_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memory_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_argmax_param;
        break;
      }

      // optional .caffe.ArgMaxParameter argmax_param = 23;
      case 23: {
        if (tag == 186) {
         parse_argmax_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_argmax_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_eltwise_param;
        break;
      }

      // optional .caffe.EltwiseParameter eltwise_param = 24;
      case 24: {
        if (tag == 194) {
         parse_eltwise_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eltwise_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_threshold_param;
        break;
      }

      // optional .caffe.ThresholdParameter threshold_param = 25;
      case 25: {
        if (tag == 202) {
         parse_threshold_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_threshold_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_dummy_data_param;
        break;
      }

      // optional .caffe.DummyDataParameter dummy_data_param = 26;
      case 26: {
        if (tag == 210) {
         parse_dummy_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dummy_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_accuracy_param;
        break;
      }

      // optional .caffe.AccuracyParameter accuracy_param = 27;
      case 27: {
        if (tag == 218) {
         parse_accuracy_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accuracy_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_hinge_loss_param;
        break;
      }

      // optional .caffe.HingeLossParameter hinge_loss_param = 29;
      case 29: {
        if (tag == 234) {
         parse_hinge_loss_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hinge_loss_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_relu_param;
        break;
      }

      // optional .caffe.ReLUParameter relu_param = 30;
      case 30: {
        if (tag == 242) {
         parse_relu_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relu_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_slice_param;
        break;
      }

      // optional .caffe.SliceParameter slice_param = 31;
      case 31: {
        if (tag == 250) {
         parse_slice_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slice_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_include;
        break;
      }

      // repeated .caffe.NetStateRule include = 32;
      case 32: {
        if (tag == 258) {
         parse_include:
          DO_(input->IncrementRecursionDepth());
         parse_loop_include:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_include()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_loop_include;
        if (input->ExpectTag(266)) goto parse_loop_exclude;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .caffe.NetStateRule exclude = 33;
      case 33: {
        if (tag == 266) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_exclude:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_exclude()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(266)) goto parse_loop_exclude;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(274)) goto parse_mvn_param;
        break;
      }

      // optional .caffe.MVNParameter mvn_param = 34;
      case 34: {
        if (tag == 274) {
         parse_mvn_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mvn_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(285)) goto parse_loss_weight;
        break;
      }

      // repeated float loss_weight = 35;
      case 35: {
        if (tag == 285) {
         parse_loss_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 285, input, this->mutable_loss_weight())));
        } else if (tag == 282) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_loss_weight())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(285)) goto parse_loss_weight;
        if (input->ExpectTag(290)) goto parse_transform_param;
        break;
      }

      // optional .caffe.TransformationParameter transform_param = 36;
      case 36: {
        if (tag == 290) {
         parse_transform_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(298)) goto parse_tanh_param;
        break;
      }

      // optional .caffe.TanHParameter tanh_param = 37;
      case 37: {
        if (tag == 298) {
         parse_tanh_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tanh_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(306)) goto parse_sigmoid_param;
        break;
      }

      // optional .caffe.SigmoidParameter sigmoid_param = 38;
      case 38: {
        if (tag == 306) {
         parse_sigmoid_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sigmoid_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(314)) goto parse_softmax_param;
        break;
      }

      // optional .caffe.SoftmaxParameter softmax_param = 39;
      case 39: {
        if (tag == 314) {
         parse_softmax_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_softmax_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(322)) goto parse_contrastive_loss_param;
        break;
      }

      // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;
      case 40: {
        if (tag == 322) {
         parse_contrastive_loss_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contrastive_loss_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(330)) goto parse_exp_param;
        break;
      }

      // optional .caffe.ExpParameter exp_param = 41;
      case 41: {
        if (tag == 330) {
         parse_exp_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exp_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(338)) goto parse_loss_param;
        break;
      }

      // optional .caffe.LossParameter loss_param = 42;
      case 42: {
        if (tag == 338) {
         parse_loss_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loss_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8010)) goto parse_param;
        break;
      }

      // repeated string param = 1001;
      case 1001: {
        if (tag == 8010) {
         parse_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->param(this->param_size() - 1).data(),
            this->param(this->param_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.V1LayerParameter.param");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8010)) goto parse_param;
        if (input->ExpectTag(8016)) goto parse_blob_share_mode;
        break;
      }

      // repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
      case 1002: {
        if (tag == 8016) {
         parse_blob_share_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::V1LayerParameter_DimCheckMode_IsValid(value)) {
            add_blob_share_mode(static_cast< ::caffe::V1LayerParameter_DimCheckMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1002, value);
          }
        } else if (tag == 8018) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 1002,
                 ::caffe::V1LayerParameter_DimCheckMode_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_blob_share_mode())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8016)) goto parse_blob_share_mode;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.V1LayerParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.V1LayerParameter)
  return false;
#undef DO_
}

void V1LayerParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.V1LayerParameter)
  // optional .caffe.V0LayerParameter layer = 1;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->layer_, output);
  }

  // repeated string bottom = 2;
  for (int i = 0; i < this->bottom_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bottom(i).data(), this->bottom(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V1LayerParameter.bottom");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->bottom(i), output);
  }

  // repeated string top = 3;
  for (int i = 0; i < this->top_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->top(i).data(), this->top(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V1LayerParameter.top");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->top(i), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V1LayerParameter.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // optional .caffe.V1LayerParameter.LayerType type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // repeated .caffe.BlobProto blobs = 6;
  for (unsigned int i = 0, n = this->blobs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->blobs(i), output);
  }

  // repeated float blobs_lr = 7;
  for (int i = 0; i < this->blobs_lr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      7, this->blobs_lr(i), output);
  }

  // repeated float weight_decay = 8;
  for (int i = 0; i < this->weight_decay_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      8, this->weight_decay(i), output);
  }

  // optional .caffe.ConcatParameter concat_param = 9;
  if (has_concat_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->concat_param_, output);
  }

  // optional .caffe.ConvolutionParameter convolution_param = 10;
  if (has_convolution_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->convolution_param_, output);
  }

  // optional .caffe.DataParameter data_param = 11;
  if (has_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->data_param_, output);
  }

  // optional .caffe.DropoutParameter dropout_param = 12;
  if (has_dropout_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->dropout_param_, output);
  }

  // optional .caffe.HDF5DataParameter hdf5_data_param = 13;
  if (has_hdf5_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->hdf5_data_param_, output);
  }

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 14;
  if (has_hdf5_output_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->hdf5_output_param_, output);
  }

  // optional .caffe.ImageDataParameter image_data_param = 15;
  if (has_image_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->image_data_param_, output);
  }

  // optional .caffe.InfogainLossParameter infogain_loss_param = 16;
  if (has_infogain_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->infogain_loss_param_, output);
  }

  // optional .caffe.InnerProductParameter inner_product_param = 17;
  if (has_inner_product_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->inner_product_param_, output);
  }

  // optional .caffe.LRNParameter lrn_param = 18;
  if (has_lrn_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->lrn_param_, output);
  }

  // optional .caffe.PoolingParameter pooling_param = 19;
  if (has_pooling_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->pooling_param_, output);
  }

  // optional .caffe.WindowDataParameter window_data_param = 20;
  if (has_window_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->window_data_param_, output);
  }

  // optional .caffe.PowerParameter power_param = 21;
  if (has_power_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->power_param_, output);
  }

  // optional .caffe.MemoryDataParameter memory_data_param = 22;
  if (has_memory_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->memory_data_param_, output);
  }

  // optional .caffe.ArgMaxParameter argmax_param = 23;
  if (has_argmax_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *this->argmax_param_, output);
  }

  // optional .caffe.EltwiseParameter eltwise_param = 24;
  if (has_eltwise_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, *this->eltwise_param_, output);
  }

  // optional .caffe.ThresholdParameter threshold_param = 25;
  if (has_threshold_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, *this->threshold_param_, output);
  }

  // optional .caffe.DummyDataParameter dummy_data_param = 26;
  if (has_dummy_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, *this->dummy_data_param_, output);
  }

  // optional .caffe.AccuracyParameter accuracy_param = 27;
  if (has_accuracy_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, *this->accuracy_param_, output);
  }

  // optional .caffe.HingeLossParameter hinge_loss_param = 29;
  if (has_hinge_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, *this->hinge_loss_param_, output);
  }

  // optional .caffe.ReLUParameter relu_param = 30;
  if (has_relu_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *this->relu_param_, output);
  }

  // optional .caffe.SliceParameter slice_param = 31;
  if (has_slice_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, *this->slice_param_, output);
  }

  // repeated .caffe.NetStateRule include = 32;
  for (unsigned int i = 0, n = this->include_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->include(i), output);
  }

  // repeated .caffe.NetStateRule exclude = 33;
  for (unsigned int i = 0, n = this->exclude_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->exclude(i), output);
  }

  // optional .caffe.MVNParameter mvn_param = 34;
  if (has_mvn_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, *this->mvn_param_, output);
  }

  // repeated float loss_weight = 35;
  for (int i = 0; i < this->loss_weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      35, this->loss_weight(i), output);
  }

  // optional .caffe.TransformationParameter transform_param = 36;
  if (has_transform_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, *this->transform_param_, output);
  }

  // optional .caffe.TanHParameter tanh_param = 37;
  if (has_tanh_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, *this->tanh_param_, output);
  }

  // optional .caffe.SigmoidParameter sigmoid_param = 38;
  if (has_sigmoid_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, *this->sigmoid_param_, output);
  }

  // optional .caffe.SoftmaxParameter softmax_param = 39;
  if (has_softmax_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, *this->softmax_param_, output);
  }

  // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;
  if (has_contrastive_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, *this->contrastive_loss_param_, output);
  }

  // optional .caffe.ExpParameter exp_param = 41;
  if (has_exp_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, *this->exp_param_, output);
  }

  // optional .caffe.LossParameter loss_param = 42;
  if (has_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, *this->loss_param_, output);
  }

  // repeated string param = 1001;
  for (int i = 0; i < this->param_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param(i).data(), this->param(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V1LayerParameter.param");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1001, this->param(i), output);
  }

  // repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
  for (int i = 0; i < this->blob_share_mode_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1002, this->blob_share_mode(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.V1LayerParameter)
}

::google::protobuf::uint8* V1LayerParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.V1LayerParameter)
  // optional .caffe.V0LayerParameter layer = 1;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->layer_, false, target);
  }

  // repeated string bottom = 2;
  for (int i = 0; i < this->bottom_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bottom(i).data(), this->bottom(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V1LayerParameter.bottom");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->bottom(i), target);
  }

  // repeated string top = 3;
  for (int i = 0; i < this->top_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->top(i).data(), this->top(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V1LayerParameter.top");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->top(i), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V1LayerParameter.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional .caffe.V1LayerParameter.LayerType type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // repeated .caffe.BlobProto blobs = 6;
  for (unsigned int i = 0, n = this->blobs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->blobs(i), false, target);
  }

  // repeated float blobs_lr = 7;
  for (int i = 0; i < this->blobs_lr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(7, this->blobs_lr(i), target);
  }

  // repeated float weight_decay = 8;
  for (int i = 0; i < this->weight_decay_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(8, this->weight_decay(i), target);
  }

  // optional .caffe.ConcatParameter concat_param = 9;
  if (has_concat_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->concat_param_, false, target);
  }

  // optional .caffe.ConvolutionParameter convolution_param = 10;
  if (has_convolution_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->convolution_param_, false, target);
  }

  // optional .caffe.DataParameter data_param = 11;
  if (has_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->data_param_, false, target);
  }

  // optional .caffe.DropoutParameter dropout_param = 12;
  if (has_dropout_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->dropout_param_, false, target);
  }

  // optional .caffe.HDF5DataParameter hdf5_data_param = 13;
  if (has_hdf5_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->hdf5_data_param_, false, target);
  }

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 14;
  if (has_hdf5_output_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->hdf5_output_param_, false, target);
  }

  // optional .caffe.ImageDataParameter image_data_param = 15;
  if (has_image_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->image_data_param_, false, target);
  }

  // optional .caffe.InfogainLossParameter infogain_loss_param = 16;
  if (has_infogain_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->infogain_loss_param_, false, target);
  }

  // optional .caffe.InnerProductParameter inner_product_param = 17;
  if (has_inner_product_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->inner_product_param_, false, target);
  }

  // optional .caffe.LRNParameter lrn_param = 18;
  if (has_lrn_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->lrn_param_, false, target);
  }

  // optional .caffe.PoolingParameter pooling_param = 19;
  if (has_pooling_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *this->pooling_param_, false, target);
  }

  // optional .caffe.WindowDataParameter window_data_param = 20;
  if (has_window_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->window_data_param_, false, target);
  }

  // optional .caffe.PowerParameter power_param = 21;
  if (has_power_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->power_param_, false, target);
  }

  // optional .caffe.MemoryDataParameter memory_data_param = 22;
  if (has_memory_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *this->memory_data_param_, false, target);
  }

  // optional .caffe.ArgMaxParameter argmax_param = 23;
  if (has_argmax_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, *this->argmax_param_, false, target);
  }

  // optional .caffe.EltwiseParameter eltwise_param = 24;
  if (has_eltwise_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, *this->eltwise_param_, false, target);
  }

  // optional .caffe.ThresholdParameter threshold_param = 25;
  if (has_threshold_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        25, *this->threshold_param_, false, target);
  }

  // optional .caffe.DummyDataParameter dummy_data_param = 26;
  if (has_dummy_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        26, *this->dummy_data_param_, false, target);
  }

  // optional .caffe.AccuracyParameter accuracy_param = 27;
  if (has_accuracy_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        27, *this->accuracy_param_, false, target);
  }

  // optional .caffe.HingeLossParameter hinge_loss_param = 29;
  if (has_hinge_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        29, *this->hinge_loss_param_, false, target);
  }

  // optional .caffe.ReLUParameter relu_param = 30;
  if (has_relu_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        30, *this->relu_param_, false, target);
  }

  // optional .caffe.SliceParameter slice_param = 31;
  if (has_slice_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        31, *this->slice_param_, false, target);
  }

  // repeated .caffe.NetStateRule include = 32;
  for (unsigned int i = 0, n = this->include_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        32, this->include(i), false, target);
  }

  // repeated .caffe.NetStateRule exclude = 33;
  for (unsigned int i = 0, n = this->exclude_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        33, this->exclude(i), false, target);
  }

  // optional .caffe.MVNParameter mvn_param = 34;
  if (has_mvn_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        34, *this->mvn_param_, false, target);
  }

  // repeated float loss_weight = 35;
  for (int i = 0; i < this->loss_weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(35, this->loss_weight(i), target);
  }

  // optional .caffe.TransformationParameter transform_param = 36;
  if (has_transform_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        36, *this->transform_param_, false, target);
  }

  // optional .caffe.TanHParameter tanh_param = 37;
  if (has_tanh_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        37, *this->tanh_param_, false, target);
  }

  // optional .caffe.SigmoidParameter sigmoid_param = 38;
  if (has_sigmoid_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        38, *this->sigmoid_param_, false, target);
  }

  // optional .caffe.SoftmaxParameter softmax_param = 39;
  if (has_softmax_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        39, *this->softmax_param_, false, target);
  }

  // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;
  if (has_contrastive_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        40, *this->contrastive_loss_param_, false, target);
  }

  // optional .caffe.ExpParameter exp_param = 41;
  if (has_exp_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        41, *this->exp_param_, false, target);
  }

  // optional .caffe.LossParameter loss_param = 42;
  if (has_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        42, *this->loss_param_, false, target);
  }

  // repeated string param = 1001;
  for (int i = 0; i < this->param_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param(i).data(), this->param(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V1LayerParameter.param");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1001, this->param(i), target);
  }

  // repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
  for (int i = 0; i < this->blob_share_mode_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1002, this->blob_share_mode(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.V1LayerParameter)
  return target;
}

size_t V1LayerParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.V1LayerParameter)
  size_t total_size = 0;

  if (_has_bits_[2 / 32] & 36u) {
    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .caffe.V1LayerParameter.LayerType type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (_has_bits_[12 / 32] & 61440u) {
    // optional .caffe.AccuracyParameter accuracy_param = 27;
    if (has_accuracy_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->accuracy_param_);
    }

    // optional .caffe.ArgMaxParameter argmax_param = 23;
    if (has_argmax_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->argmax_param_);
    }

    // optional .caffe.ConcatParameter concat_param = 9;
    if (has_concat_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->concat_param_);
    }

    // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;
    if (has_contrastive_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->contrastive_loss_param_);
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional .caffe.ConvolutionParameter convolution_param = 10;
    if (has_convolution_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->convolution_param_);
    }

    // optional .caffe.DataParameter data_param = 11;
    if (has_data_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->data_param_);
    }

    // optional .caffe.DropoutParameter dropout_param = 12;
    if (has_dropout_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dropout_param_);
    }

    // optional .caffe.DummyDataParameter dummy_data_param = 26;
    if (has_dummy_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dummy_data_param_);
    }

    // optional .caffe.EltwiseParameter eltwise_param = 24;
    if (has_eltwise_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->eltwise_param_);
    }

    // optional .caffe.ExpParameter exp_param = 41;
    if (has_exp_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->exp_param_);
    }

    // optional .caffe.HDF5DataParameter hdf5_data_param = 13;
    if (has_hdf5_data_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hdf5_data_param_);
    }

    // optional .caffe.HDF5OutputParameter hdf5_output_param = 14;
    if (has_hdf5_output_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hdf5_output_param_);
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional .caffe.HingeLossParameter hinge_loss_param = 29;
    if (has_hinge_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hinge_loss_param_);
    }

    // optional .caffe.ImageDataParameter image_data_param = 15;
    if (has_image_data_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->image_data_param_);
    }

    // optional .caffe.InfogainLossParameter infogain_loss_param = 16;
    if (has_infogain_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->infogain_loss_param_);
    }

    // optional .caffe.InnerProductParameter inner_product_param = 17;
    if (has_inner_product_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->inner_product_param_);
    }

    // optional .caffe.LRNParameter lrn_param = 18;
    if (has_lrn_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lrn_param_);
    }

    // optional .caffe.MemoryDataParameter memory_data_param = 22;
    if (has_memory_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->memory_data_param_);
    }

    // optional .caffe.MVNParameter mvn_param = 34;
    if (has_mvn_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mvn_param_);
    }

    // optional .caffe.PoolingParameter pooling_param = 19;
    if (has_pooling_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pooling_param_);
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional .caffe.PowerParameter power_param = 21;
    if (has_power_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->power_param_);
    }

    // optional .caffe.ReLUParameter relu_param = 30;
    if (has_relu_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->relu_param_);
    }

    // optional .caffe.SigmoidParameter sigmoid_param = 38;
    if (has_sigmoid_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sigmoid_param_);
    }

    // optional .caffe.SoftmaxParameter softmax_param = 39;
    if (has_softmax_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->softmax_param_);
    }

    // optional .caffe.SliceParameter slice_param = 31;
    if (has_slice_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->slice_param_);
    }

    // optional .caffe.TanHParameter tanh_param = 37;
    if (has_tanh_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tanh_param_);
    }

    // optional .caffe.ThresholdParameter threshold_param = 25;
    if (has_threshold_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->threshold_param_);
    }

    // optional .caffe.WindowDataParameter window_data_param = 20;
    if (has_window_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->window_data_param_);
    }

  }
  if (_has_bits_[40 / 32] & 1792u) {
    // optional .caffe.TransformationParameter transform_param = 36;
    if (has_transform_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->transform_param_);
    }

    // optional .caffe.LossParameter loss_param = 42;
    if (has_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->loss_param_);
    }

    // optional .caffe.V0LayerParameter layer = 1;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->layer_);
    }

  }
  // repeated string bottom = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->bottom_size());
  for (int i = 0; i < this->bottom_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->bottom(i));
  }

  // repeated string top = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->top_size());
  for (int i = 0; i < this->top_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->top(i));
  }

  // repeated .caffe.NetStateRule include = 32;
  {
    unsigned int count = this->include_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->include(i));
    }
  }

  // repeated .caffe.NetStateRule exclude = 33;
  {
    unsigned int count = this->exclude_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->exclude(i));
    }
  }

  // repeated .caffe.BlobProto blobs = 6;
  {
    unsigned int count = this->blobs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blobs(i));
    }
  }

  // repeated string param = 1001;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->param_size());
  for (int i = 0; i < this->param_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->param(i));
  }

  // repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
  {
    size_t data_size = 0;
    unsigned int count = this->blob_share_mode_size();for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->blob_share_mode(i));
    }
    total_size += (2UL * count) + data_size;
  }

  // repeated float blobs_lr = 7;
  {
    size_t data_size = 0;
    unsigned int count = this->blobs_lr_size();
    data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->blobs_lr_size());
    total_size += data_size;
  }

  // repeated float weight_decay = 8;
  {
    size_t data_size = 0;
    unsigned int count = this->weight_decay_size();
    data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->weight_decay_size());
    total_size += data_size;
  }

  // repeated float loss_weight = 35;
  {
    size_t data_size = 0;
    unsigned int count = this->loss_weight_size();
    data_size = 4UL * count;
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->loss_weight_size());
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void V1LayerParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.V1LayerParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const V1LayerParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const V1LayerParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.V1LayerParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.V1LayerParameter)
    UnsafeMergeFrom(*source);
  }
}

void V1LayerParameter::MergeFrom(const V1LayerParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.V1LayerParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void V1LayerParameter::UnsafeMergeFrom(const V1LayerParameter& from) {
  GOOGLE_DCHECK(&from != this);
  bottom_.UnsafeMergeFrom(from.bottom_);
  top_.UnsafeMergeFrom(from.top_);
  include_.MergeFrom(from.include_);
  exclude_.MergeFrom(from.exclude_);
  blobs_.MergeFrom(from.blobs_);
  param_.UnsafeMergeFrom(from.param_);
  blob_share_mode_.UnsafeMergeFrom(from.blob_share_mode_);
  blobs_lr_.UnsafeMergeFrom(from.blobs_lr_);
  weight_decay_.UnsafeMergeFrom(from.weight_decay_);
  loss_weight_.UnsafeMergeFrom(from.loss_weight_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    if (from.has_accuracy_param()) {
      mutable_accuracy_param()->::caffe::AccuracyParameter::MergeFrom(from.accuracy_param());
    }
    if (from.has_argmax_param()) {
      mutable_argmax_param()->::caffe::ArgMaxParameter::MergeFrom(from.argmax_param());
    }
    if (from.has_concat_param()) {
      mutable_concat_param()->::caffe::ConcatParameter::MergeFrom(from.concat_param());
    }
    if (from.has_contrastive_loss_param()) {
      mutable_contrastive_loss_param()->::caffe::ContrastiveLossParameter::MergeFrom(from.contrastive_loss_param());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_convolution_param()) {
      mutable_convolution_param()->::caffe::ConvolutionParameter::MergeFrom(from.convolution_param());
    }
    if (from.has_data_param()) {
      mutable_data_param()->::caffe::DataParameter::MergeFrom(from.data_param());
    }
    if (from.has_dropout_param()) {
      mutable_dropout_param()->::caffe::DropoutParameter::MergeFrom(from.dropout_param());
    }
    if (from.has_dummy_data_param()) {
      mutable_dummy_data_param()->::caffe::DummyDataParameter::MergeFrom(from.dummy_data_param());
    }
    if (from.has_eltwise_param()) {
      mutable_eltwise_param()->::caffe::EltwiseParameter::MergeFrom(from.eltwise_param());
    }
    if (from.has_exp_param()) {
      mutable_exp_param()->::caffe::ExpParameter::MergeFrom(from.exp_param());
    }
    if (from.has_hdf5_data_param()) {
      mutable_hdf5_data_param()->::caffe::HDF5DataParameter::MergeFrom(from.hdf5_data_param());
    }
    if (from.has_hdf5_output_param()) {
      mutable_hdf5_output_param()->::caffe::HDF5OutputParameter::MergeFrom(from.hdf5_output_param());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_hinge_loss_param()) {
      mutable_hinge_loss_param()->::caffe::HingeLossParameter::MergeFrom(from.hinge_loss_param());
    }
    if (from.has_image_data_param()) {
      mutable_image_data_param()->::caffe::ImageDataParameter::MergeFrom(from.image_data_param());
    }
    if (from.has_infogain_loss_param()) {
      mutable_infogain_loss_param()->::caffe::InfogainLossParameter::MergeFrom(from.infogain_loss_param());
    }
    if (from.has_inner_product_param()) {
      mutable_inner_product_param()->::caffe::InnerProductParameter::MergeFrom(from.inner_product_param());
    }
    if (from.has_lrn_param()) {
      mutable_lrn_param()->::caffe::LRNParameter::MergeFrom(from.lrn_param());
    }
    if (from.has_memory_data_param()) {
      mutable_memory_data_param()->::caffe::MemoryDataParameter::MergeFrom(from.memory_data_param());
    }
    if (from.has_mvn_param()) {
      mutable_mvn_param()->::caffe::MVNParameter::MergeFrom(from.mvn_param());
    }
    if (from.has_pooling_param()) {
      mutable_pooling_param()->::caffe::PoolingParameter::MergeFrom(from.pooling_param());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_power_param()) {
      mutable_power_param()->::caffe::PowerParameter::MergeFrom(from.power_param());
    }
    if (from.has_relu_param()) {
      mutable_relu_param()->::caffe::ReLUParameter::MergeFrom(from.relu_param());
    }
    if (from.has_sigmoid_param()) {
      mutable_sigmoid_param()->::caffe::SigmoidParameter::MergeFrom(from.sigmoid_param());
    }
    if (from.has_softmax_param()) {
      mutable_softmax_param()->::caffe::SoftmaxParameter::MergeFrom(from.softmax_param());
    }
    if (from.has_slice_param()) {
      mutable_slice_param()->::caffe::SliceParameter::MergeFrom(from.slice_param());
    }
    if (from.has_tanh_param()) {
      mutable_tanh_param()->::caffe::TanHParameter::MergeFrom(from.tanh_param());
    }
    if (from.has_threshold_param()) {
      mutable_threshold_param()->::caffe::ThresholdParameter::MergeFrom(from.threshold_param());
    }
    if (from.has_window_data_param()) {
      mutable_window_data_param()->::caffe::WindowDataParameter::MergeFrom(from.window_data_param());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_transform_param()) {
      mutable_transform_param()->::caffe::TransformationParameter::MergeFrom(from.transform_param());
    }
    if (from.has_loss_param()) {
      mutable_loss_param()->::caffe::LossParameter::MergeFrom(from.loss_param());
    }
    if (from.has_layer()) {
      mutable_layer()->::caffe::V0LayerParameter::MergeFrom(from.layer());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void V1LayerParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.V1LayerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void V1LayerParameter::CopyFrom(const V1LayerParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.V1LayerParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool V1LayerParameter::IsInitialized() const {

  return true;
}

void V1LayerParameter::Swap(V1LayerParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void V1LayerParameter::InternalSwap(V1LayerParameter* other) {
  bottom_.UnsafeArenaSwap(&other->bottom_);
  top_.UnsafeArenaSwap(&other->top_);
  name_.Swap(&other->name_);
  include_.UnsafeArenaSwap(&other->include_);
  exclude_.UnsafeArenaSwap(&other->exclude_);
  std::swap(type_, other->type_);
  blobs_.UnsafeArenaSwap(&other->blobs_);
  param_.UnsafeArenaSwap(&other->param_);
  blob_share_mode_.UnsafeArenaSwap(&other->blob_share_mode_);
  blobs_lr_.UnsafeArenaSwap(&other->blobs_lr_);
  weight_decay_.UnsafeArenaSwap(&other->weight_decay_);
  loss_weight_.UnsafeArenaSwap(&other->loss_weight_);
  std::swap(accuracy_param_, other->accuracy_param_);
  std::swap(argmax_param_, other->argmax_param_);
  std::swap(concat_param_, other->concat_param_);
  std::swap(contrastive_loss_param_, other->contrastive_loss_param_);
  std::swap(convolution_param_, other->convolution_param_);
  std::swap(data_param_, other->data_param_);
  std::swap(dropout_param_, other->dropout_param_);
  std::swap(dummy_data_param_, other->dummy_data_param_);
  std::swap(eltwise_param_, other->eltwise_param_);
  std::swap(exp_param_, other->exp_param_);
  std::swap(hdf5_data_param_, other->hdf5_data_param_);
  std::swap(hdf5_output_param_, other->hdf5_output_param_);
  std::swap(hinge_loss_param_, other->hinge_loss_param_);
  std::swap(image_data_param_, other->image_data_param_);
  std::swap(infogain_loss_param_, other->infogain_loss_param_);
  std::swap(inner_product_param_, other->inner_product_param_);
  std::swap(lrn_param_, other->lrn_param_);
  std::swap(memory_data_param_, other->memory_data_param_);
  std::swap(mvn_param_, other->mvn_param_);
  std::swap(pooling_param_, other->pooling_param_);
  std::swap(power_param_, other->power_param_);
  std::swap(relu_param_, other->relu_param_);
  std::swap(sigmoid_param_, other->sigmoid_param_);
  std::swap(softmax_param_, other->softmax_param_);
  std::swap(slice_param_, other->slice_param_);
  std::swap(tanh_param_, other->tanh_param_);
  std::swap(threshold_param_, other->threshold_param_);
  std::swap(window_data_param_, other->window_data_param_);
  std::swap(transform_param_, other->transform_param_);
  std::swap(loss_param_, other->loss_param_);
  std::swap(layer_, other->layer_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata V1LayerParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = V1LayerParameter_descriptor_;
  metadata.reflection = V1LayerParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// V1LayerParameter

// repeated string bottom = 2;
int V1LayerParameter::bottom_size() const {
  return bottom_.size();
}
void V1LayerParameter::clear_bottom() {
  bottom_.Clear();
}
const ::std::string& V1LayerParameter::bottom(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.bottom)
  return bottom_.Get(index);
}
::std::string* V1LayerParameter::mutable_bottom(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.bottom)
  return bottom_.Mutable(index);
}
void V1LayerParameter::set_bottom(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.bottom)
  bottom_.Mutable(index)->assign(value);
}
void V1LayerParameter::set_bottom(int index, const char* value) {
  bottom_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.V1LayerParameter.bottom)
}
void V1LayerParameter::set_bottom(int index, const char* value, size_t size) {
  bottom_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.V1LayerParameter.bottom)
}
::std::string* V1LayerParameter::add_bottom() {
  // @@protoc_insertion_point(field_add_mutable:caffe.V1LayerParameter.bottom)
  return bottom_.Add();
}
void V1LayerParameter::add_bottom(const ::std::string& value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.bottom)
}
void V1LayerParameter::add_bottom(const char* value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.V1LayerParameter.bottom)
}
void V1LayerParameter::add_bottom(const char* value, size_t size) {
  bottom_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.V1LayerParameter.bottom)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
V1LayerParameter::bottom() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.bottom)
  return bottom_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
V1LayerParameter::mutable_bottom() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.bottom)
  return &bottom_;
}

// repeated string top = 3;
int V1LayerParameter::top_size() const {
  return top_.size();
}
void V1LayerParameter::clear_top() {
  top_.Clear();
}
const ::std::string& V1LayerParameter::top(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.top)
  return top_.Get(index);
}
::std::string* V1LayerParameter::mutable_top(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.top)
  return top_.Mutable(index);
}
void V1LayerParameter::set_top(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.top)
  top_.Mutable(index)->assign(value);
}
void V1LayerParameter::set_top(int index, const char* value) {
  top_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.V1LayerParameter.top)
}
void V1LayerParameter::set_top(int index, const char* value, size_t size) {
  top_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.V1LayerParameter.top)
}
::std::string* V1LayerParameter::add_top() {
  // @@protoc_insertion_point(field_add_mutable:caffe.V1LayerParameter.top)
  return top_.Add();
}
void V1LayerParameter::add_top(const ::std::string& value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.top)
}
void V1LayerParameter::add_top(const char* value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.V1LayerParameter.top)
}
void V1LayerParameter::add_top(const char* value, size_t size) {
  top_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.V1LayerParameter.top)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
V1LayerParameter::top() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.top)
  return top_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
V1LayerParameter::mutable_top() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.top)
  return &top_;
}

// optional string name = 4;
bool V1LayerParameter::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void V1LayerParameter::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
void V1LayerParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void V1LayerParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& V1LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void V1LayerParameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.name)
}
void V1LayerParameter::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V1LayerParameter.name)
}
void V1LayerParameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V1LayerParameter.name)
}
::std::string* V1LayerParameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* V1LayerParameter::release_name() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void V1LayerParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.name)
}

// repeated .caffe.NetStateRule include = 32;
int V1LayerParameter::include_size() const {
  return include_.size();
}
void V1LayerParameter::clear_include() {
  include_.Clear();
}
const ::caffe::NetStateRule& V1LayerParameter::include(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.include)
  return include_.Get(index);
}
::caffe::NetStateRule* V1LayerParameter::mutable_include(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.include)
  return include_.Mutable(index);
}
::caffe::NetStateRule* V1LayerParameter::add_include() {
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.include)
  return include_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
V1LayerParameter::mutable_include() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.include)
  return &include_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
V1LayerParameter::include() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.include)
  return include_;
}

// repeated .caffe.NetStateRule exclude = 33;
int V1LayerParameter::exclude_size() const {
  return exclude_.size();
}
void V1LayerParameter::clear_exclude() {
  exclude_.Clear();
}
const ::caffe::NetStateRule& V1LayerParameter::exclude(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.exclude)
  return exclude_.Get(index);
}
::caffe::NetStateRule* V1LayerParameter::mutable_exclude(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.exclude)
  return exclude_.Mutable(index);
}
::caffe::NetStateRule* V1LayerParameter::add_exclude() {
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.exclude)
  return exclude_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
V1LayerParameter::mutable_exclude() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.exclude)
  return &exclude_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
V1LayerParameter::exclude() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.exclude)
  return exclude_;
}

// optional .caffe.V1LayerParameter.LayerType type = 5;
bool V1LayerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void V1LayerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
void V1LayerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void V1LayerParameter::clear_type() {
  type_ = 0;
  clear_has_type();
}
::caffe::V1LayerParameter_LayerType V1LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.type)
  return static_cast< ::caffe::V1LayerParameter_LayerType >(type_);
}
void V1LayerParameter::set_type(::caffe::V1LayerParameter_LayerType value) {
  assert(::caffe::V1LayerParameter_LayerType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.type)
}

// repeated .caffe.BlobProto blobs = 6;
int V1LayerParameter::blobs_size() const {
  return blobs_.size();
}
void V1LayerParameter::clear_blobs() {
  blobs_.Clear();
}
const ::caffe::BlobProto& V1LayerParameter::blobs(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.blobs)
  return blobs_.Get(index);
}
::caffe::BlobProto* V1LayerParameter::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.blobs)
  return blobs_.Mutable(index);
}
::caffe::BlobProto* V1LayerParameter::add_blobs() {
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.blobs)
  return blobs_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
V1LayerParameter::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.blobs)
  return &blobs_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
V1LayerParameter::blobs() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.blobs)
  return blobs_;
}

// repeated string param = 1001;
int V1LayerParameter::param_size() const {
  return param_.size();
}
void V1LayerParameter::clear_param() {
  param_.Clear();
}
const ::std::string& V1LayerParameter::param(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.param)
  return param_.Get(index);
}
::std::string* V1LayerParameter::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.param)
  return param_.Mutable(index);
}
void V1LayerParameter::set_param(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.param)
  param_.Mutable(index)->assign(value);
}
void V1LayerParameter::set_param(int index, const char* value) {
  param_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.V1LayerParameter.param)
}
void V1LayerParameter::set_param(int index, const char* value, size_t size) {
  param_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.V1LayerParameter.param)
}
::std::string* V1LayerParameter::add_param() {
  // @@protoc_insertion_point(field_add_mutable:caffe.V1LayerParameter.param)
  return param_.Add();
}
void V1LayerParameter::add_param(const ::std::string& value) {
  param_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.param)
}
void V1LayerParameter::add_param(const char* value) {
  param_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.V1LayerParameter.param)
}
void V1LayerParameter::add_param(const char* value, size_t size) {
  param_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.V1LayerParameter.param)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
V1LayerParameter::param() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.param)
  return param_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
V1LayerParameter::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.param)
  return &param_;
}

// repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
int V1LayerParameter::blob_share_mode_size() const {
  return blob_share_mode_.size();
}
void V1LayerParameter::clear_blob_share_mode() {
  blob_share_mode_.Clear();
}
::caffe::V1LayerParameter_DimCheckMode V1LayerParameter::blob_share_mode(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.blob_share_mode)
  return static_cast< ::caffe::V1LayerParameter_DimCheckMode >(blob_share_mode_.Get(index));
}
void V1LayerParameter::set_blob_share_mode(int index, ::caffe::V1LayerParameter_DimCheckMode value) {
  assert(::caffe::V1LayerParameter_DimCheckMode_IsValid(value));
  blob_share_mode_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.blob_share_mode)
}
void V1LayerParameter::add_blob_share_mode(::caffe::V1LayerParameter_DimCheckMode value) {
  assert(::caffe::V1LayerParameter_DimCheckMode_IsValid(value));
  blob_share_mode_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.blob_share_mode)
}
const ::google::protobuf::RepeatedField<int>&
V1LayerParameter::blob_share_mode() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.blob_share_mode)
  return blob_share_mode_;
}
::google::protobuf::RepeatedField<int>*
V1LayerParameter::mutable_blob_share_mode() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.blob_share_mode)
  return &blob_share_mode_;
}

// repeated float blobs_lr = 7;
int V1LayerParameter::blobs_lr_size() const {
  return blobs_lr_.size();
}
void V1LayerParameter::clear_blobs_lr() {
  blobs_lr_.Clear();
}
float V1LayerParameter::blobs_lr(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.blobs_lr)
  return blobs_lr_.Get(index);
}
void V1LayerParameter::set_blobs_lr(int index, float value) {
  blobs_lr_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.blobs_lr)
}
void V1LayerParameter::add_blobs_lr(float value) {
  blobs_lr_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.blobs_lr)
}
const ::google::protobuf::RepeatedField< float >&
V1LayerParameter::blobs_lr() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.blobs_lr)
  return blobs_lr_;
}
::google::protobuf::RepeatedField< float >*
V1LayerParameter::mutable_blobs_lr() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.blobs_lr)
  return &blobs_lr_;
}

// repeated float weight_decay = 8;
int V1LayerParameter::weight_decay_size() const {
  return weight_decay_.size();
}
void V1LayerParameter::clear_weight_decay() {
  weight_decay_.Clear();
}
float V1LayerParameter::weight_decay(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.weight_decay)
  return weight_decay_.Get(index);
}
void V1LayerParameter::set_weight_decay(int index, float value) {
  weight_decay_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.weight_decay)
}
void V1LayerParameter::add_weight_decay(float value) {
  weight_decay_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.weight_decay)
}
const ::google::protobuf::RepeatedField< float >&
V1LayerParameter::weight_decay() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.weight_decay)
  return weight_decay_;
}
::google::protobuf::RepeatedField< float >*
V1LayerParameter::mutable_weight_decay() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.weight_decay)
  return &weight_decay_;
}

// repeated float loss_weight = 35;
int V1LayerParameter::loss_weight_size() const {
  return loss_weight_.size();
}
void V1LayerParameter::clear_loss_weight() {
  loss_weight_.Clear();
}
float V1LayerParameter::loss_weight(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.loss_weight)
  return loss_weight_.Get(index);
}
void V1LayerParameter::set_loss_weight(int index, float value) {
  loss_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.loss_weight)
}
void V1LayerParameter::add_loss_weight(float value) {
  loss_weight_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.loss_weight)
}
const ::google::protobuf::RepeatedField< float >&
V1LayerParameter::loss_weight() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.loss_weight)
  return loss_weight_;
}
::google::protobuf::RepeatedField< float >*
V1LayerParameter::mutable_loss_weight() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.loss_weight)
  return &loss_weight_;
}

// optional .caffe.AccuracyParameter accuracy_param = 27;
bool V1LayerParameter::has_accuracy_param() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void V1LayerParameter::set_has_accuracy_param() {
  _has_bits_[0] |= 0x00001000u;
}
void V1LayerParameter::clear_has_accuracy_param() {
  _has_bits_[0] &= ~0x00001000u;
}
void V1LayerParameter::clear_accuracy_param() {
  if (accuracy_param_ != NULL) accuracy_param_->::caffe::AccuracyParameter::Clear();
  clear_has_accuracy_param();
}
const ::caffe::AccuracyParameter& V1LayerParameter::accuracy_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.accuracy_param)
  return accuracy_param_ != NULL ? *accuracy_param_
                         : *::caffe::AccuracyParameter::internal_default_instance();
}
::caffe::AccuracyParameter* V1LayerParameter::mutable_accuracy_param() {
  set_has_accuracy_param();
  if (accuracy_param_ == NULL) {
    accuracy_param_ = new ::caffe::AccuracyParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.accuracy_param)
  return accuracy_param_;
}
::caffe::AccuracyParameter* V1LayerParameter::release_accuracy_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.accuracy_param)
  clear_has_accuracy_param();
  ::caffe::AccuracyParameter* temp = accuracy_param_;
  accuracy_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_accuracy_param(::caffe::AccuracyParameter* accuracy_param) {
  delete accuracy_param_;
  accuracy_param_ = accuracy_param;
  if (accuracy_param) {
    set_has_accuracy_param();
  } else {
    clear_has_accuracy_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.accuracy_param)
}

// optional .caffe.ArgMaxParameter argmax_param = 23;
bool V1LayerParameter::has_argmax_param() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void V1LayerParameter::set_has_argmax_param() {
  _has_bits_[0] |= 0x00002000u;
}
void V1LayerParameter::clear_has_argmax_param() {
  _has_bits_[0] &= ~0x00002000u;
}
void V1LayerParameter::clear_argmax_param() {
  if (argmax_param_ != NULL) argmax_param_->::caffe::ArgMaxParameter::Clear();
  clear_has_argmax_param();
}
const ::caffe::ArgMaxParameter& V1LayerParameter::argmax_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.argmax_param)
  return argmax_param_ != NULL ? *argmax_param_
                         : *::caffe::ArgMaxParameter::internal_default_instance();
}
::caffe::ArgMaxParameter* V1LayerParameter::mutable_argmax_param() {
  set_has_argmax_param();
  if (argmax_param_ == NULL) {
    argmax_param_ = new ::caffe::ArgMaxParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.argmax_param)
  return argmax_param_;
}
::caffe::ArgMaxParameter* V1LayerParameter::release_argmax_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.argmax_param)
  clear_has_argmax_param();
  ::caffe::ArgMaxParameter* temp = argmax_param_;
  argmax_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_argmax_param(::caffe::ArgMaxParameter* argmax_param) {
  delete argmax_param_;
  argmax_param_ = argmax_param;
  if (argmax_param) {
    set_has_argmax_param();
  } else {
    clear_has_argmax_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.argmax_param)
}

// optional .caffe.ConcatParameter concat_param = 9;
bool V1LayerParameter::has_concat_param() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void V1LayerParameter::set_has_concat_param() {
  _has_bits_[0] |= 0x00004000u;
}
void V1LayerParameter::clear_has_concat_param() {
  _has_bits_[0] &= ~0x00004000u;
}
void V1LayerParameter::clear_concat_param() {
  if (concat_param_ != NULL) concat_param_->::caffe::ConcatParameter::Clear();
  clear_has_concat_param();
}
const ::caffe::ConcatParameter& V1LayerParameter::concat_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.concat_param)
  return concat_param_ != NULL ? *concat_param_
                         : *::caffe::ConcatParameter::internal_default_instance();
}
::caffe::ConcatParameter* V1LayerParameter::mutable_concat_param() {
  set_has_concat_param();
  if (concat_param_ == NULL) {
    concat_param_ = new ::caffe::ConcatParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.concat_param)
  return concat_param_;
}
::caffe::ConcatParameter* V1LayerParameter::release_concat_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.concat_param)
  clear_has_concat_param();
  ::caffe::ConcatParameter* temp = concat_param_;
  concat_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_concat_param(::caffe::ConcatParameter* concat_param) {
  delete concat_param_;
  concat_param_ = concat_param;
  if (concat_param) {
    set_has_concat_param();
  } else {
    clear_has_concat_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.concat_param)
}

// optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;
bool V1LayerParameter::has_contrastive_loss_param() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void V1LayerParameter::set_has_contrastive_loss_param() {
  _has_bits_[0] |= 0x00008000u;
}
void V1LayerParameter::clear_has_contrastive_loss_param() {
  _has_bits_[0] &= ~0x00008000u;
}
void V1LayerParameter::clear_contrastive_loss_param() {
  if (contrastive_loss_param_ != NULL) contrastive_loss_param_->::caffe::ContrastiveLossParameter::Clear();
  clear_has_contrastive_loss_param();
}
const ::caffe::ContrastiveLossParameter& V1LayerParameter::contrastive_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.contrastive_loss_param)
  return contrastive_loss_param_ != NULL ? *contrastive_loss_param_
                         : *::caffe::ContrastiveLossParameter::internal_default_instance();
}
::caffe::ContrastiveLossParameter* V1LayerParameter::mutable_contrastive_loss_param() {
  set_has_contrastive_loss_param();
  if (contrastive_loss_param_ == NULL) {
    contrastive_loss_param_ = new ::caffe::ContrastiveLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.contrastive_loss_param)
  return contrastive_loss_param_;
}
::caffe::ContrastiveLossParameter* V1LayerParameter::release_contrastive_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.contrastive_loss_param)
  clear_has_contrastive_loss_param();
  ::caffe::ContrastiveLossParameter* temp = contrastive_loss_param_;
  contrastive_loss_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_contrastive_loss_param(::caffe::ContrastiveLossParameter* contrastive_loss_param) {
  delete contrastive_loss_param_;
  contrastive_loss_param_ = contrastive_loss_param;
  if (contrastive_loss_param) {
    set_has_contrastive_loss_param();
  } else {
    clear_has_contrastive_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.contrastive_loss_param)
}

// optional .caffe.ConvolutionParameter convolution_param = 10;
bool V1LayerParameter::has_convolution_param() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void V1LayerParameter::set_has_convolution_param() {
  _has_bits_[0] |= 0x00010000u;
}
void V1LayerParameter::clear_has_convolution_param() {
  _has_bits_[0] &= ~0x00010000u;
}
void V1LayerParameter::clear_convolution_param() {
  if (convolution_param_ != NULL) convolution_param_->::caffe::ConvolutionParameter::Clear();
  clear_has_convolution_param();
}
const ::caffe::ConvolutionParameter& V1LayerParameter::convolution_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.convolution_param)
  return convolution_param_ != NULL ? *convolution_param_
                         : *::caffe::ConvolutionParameter::internal_default_instance();
}
::caffe::ConvolutionParameter* V1LayerParameter::mutable_convolution_param() {
  set_has_convolution_param();
  if (convolution_param_ == NULL) {
    convolution_param_ = new ::caffe::ConvolutionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.convolution_param)
  return convolution_param_;
}
::caffe::ConvolutionParameter* V1LayerParameter::release_convolution_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.convolution_param)
  clear_has_convolution_param();
  ::caffe::ConvolutionParameter* temp = convolution_param_;
  convolution_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_convolution_param(::caffe::ConvolutionParameter* convolution_param) {
  delete convolution_param_;
  convolution_param_ = convolution_param;
  if (convolution_param) {
    set_has_convolution_param();
  } else {
    clear_has_convolution_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.convolution_param)
}

// optional .caffe.DataParameter data_param = 11;
bool V1LayerParameter::has_data_param() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void V1LayerParameter::set_has_data_param() {
  _has_bits_[0] |= 0x00020000u;
}
void V1LayerParameter::clear_has_data_param() {
  _has_bits_[0] &= ~0x00020000u;
}
void V1LayerParameter::clear_data_param() {
  if (data_param_ != NULL) data_param_->::caffe::DataParameter::Clear();
  clear_has_data_param();
}
const ::caffe::DataParameter& V1LayerParameter::data_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.data_param)
  return data_param_ != NULL ? *data_param_
                         : *::caffe::DataParameter::internal_default_instance();
}
::caffe::DataParameter* V1LayerParameter::mutable_data_param() {
  set_has_data_param();
  if (data_param_ == NULL) {
    data_param_ = new ::caffe::DataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.data_param)
  return data_param_;
}
::caffe::DataParameter* V1LayerParameter::release_data_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.data_param)
  clear_has_data_param();
  ::caffe::DataParameter* temp = data_param_;
  data_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_data_param(::caffe::DataParameter* data_param) {
  delete data_param_;
  data_param_ = data_param;
  if (data_param) {
    set_has_data_param();
  } else {
    clear_has_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.data_param)
}

// optional .caffe.DropoutParameter dropout_param = 12;
bool V1LayerParameter::has_dropout_param() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void V1LayerParameter::set_has_dropout_param() {
  _has_bits_[0] |= 0x00040000u;
}
void V1LayerParameter::clear_has_dropout_param() {
  _has_bits_[0] &= ~0x00040000u;
}
void V1LayerParameter::clear_dropout_param() {
  if (dropout_param_ != NULL) dropout_param_->::caffe::DropoutParameter::Clear();
  clear_has_dropout_param();
}
const ::caffe::DropoutParameter& V1LayerParameter::dropout_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.dropout_param)
  return dropout_param_ != NULL ? *dropout_param_
                         : *::caffe::DropoutParameter::internal_default_instance();
}
::caffe::DropoutParameter* V1LayerParameter::mutable_dropout_param() {
  set_has_dropout_param();
  if (dropout_param_ == NULL) {
    dropout_param_ = new ::caffe::DropoutParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.dropout_param)
  return dropout_param_;
}
::caffe::DropoutParameter* V1LayerParameter::release_dropout_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.dropout_param)
  clear_has_dropout_param();
  ::caffe::DropoutParameter* temp = dropout_param_;
  dropout_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_dropout_param(::caffe::DropoutParameter* dropout_param) {
  delete dropout_param_;
  dropout_param_ = dropout_param;
  if (dropout_param) {
    set_has_dropout_param();
  } else {
    clear_has_dropout_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.dropout_param)
}

// optional .caffe.DummyDataParameter dummy_data_param = 26;
bool V1LayerParameter::has_dummy_data_param() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void V1LayerParameter::set_has_dummy_data_param() {
  _has_bits_[0] |= 0x00080000u;
}
void V1LayerParameter::clear_has_dummy_data_param() {
  _has_bits_[0] &= ~0x00080000u;
}
void V1LayerParameter::clear_dummy_data_param() {
  if (dummy_data_param_ != NULL) dummy_data_param_->::caffe::DummyDataParameter::Clear();
  clear_has_dummy_data_param();
}
const ::caffe::DummyDataParameter& V1LayerParameter::dummy_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.dummy_data_param)
  return dummy_data_param_ != NULL ? *dummy_data_param_
                         : *::caffe::DummyDataParameter::internal_default_instance();
}
::caffe::DummyDataParameter* V1LayerParameter::mutable_dummy_data_param() {
  set_has_dummy_data_param();
  if (dummy_data_param_ == NULL) {
    dummy_data_param_ = new ::caffe::DummyDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.dummy_data_param)
  return dummy_data_param_;
}
::caffe::DummyDataParameter* V1LayerParameter::release_dummy_data_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.dummy_data_param)
  clear_has_dummy_data_param();
  ::caffe::DummyDataParameter* temp = dummy_data_param_;
  dummy_data_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_dummy_data_param(::caffe::DummyDataParameter* dummy_data_param) {
  delete dummy_data_param_;
  dummy_data_param_ = dummy_data_param;
  if (dummy_data_param) {
    set_has_dummy_data_param();
  } else {
    clear_has_dummy_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.dummy_data_param)
}

// optional .caffe.EltwiseParameter eltwise_param = 24;
bool V1LayerParameter::has_eltwise_param() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void V1LayerParameter::set_has_eltwise_param() {
  _has_bits_[0] |= 0x00100000u;
}
void V1LayerParameter::clear_has_eltwise_param() {
  _has_bits_[0] &= ~0x00100000u;
}
void V1LayerParameter::clear_eltwise_param() {
  if (eltwise_param_ != NULL) eltwise_param_->::caffe::EltwiseParameter::Clear();
  clear_has_eltwise_param();
}
const ::caffe::EltwiseParameter& V1LayerParameter::eltwise_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.eltwise_param)
  return eltwise_param_ != NULL ? *eltwise_param_
                         : *::caffe::EltwiseParameter::internal_default_instance();
}
::caffe::EltwiseParameter* V1LayerParameter::mutable_eltwise_param() {
  set_has_eltwise_param();
  if (eltwise_param_ == NULL) {
    eltwise_param_ = new ::caffe::EltwiseParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.eltwise_param)
  return eltwise_param_;
}
::caffe::EltwiseParameter* V1LayerParameter::release_eltwise_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.eltwise_param)
  clear_has_eltwise_param();
  ::caffe::EltwiseParameter* temp = eltwise_param_;
  eltwise_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_eltwise_param(::caffe::EltwiseParameter* eltwise_param) {
  delete eltwise_param_;
  eltwise_param_ = eltwise_param;
  if (eltwise_param) {
    set_has_eltwise_param();
  } else {
    clear_has_eltwise_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.eltwise_param)
}

// optional .caffe.ExpParameter exp_param = 41;
bool V1LayerParameter::has_exp_param() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void V1LayerParameter::set_has_exp_param() {
  _has_bits_[0] |= 0x00200000u;
}
void V1LayerParameter::clear_has_exp_param() {
  _has_bits_[0] &= ~0x00200000u;
}
void V1LayerParameter::clear_exp_param() {
  if (exp_param_ != NULL) exp_param_->::caffe::ExpParameter::Clear();
  clear_has_exp_param();
}
const ::caffe::ExpParameter& V1LayerParameter::exp_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.exp_param)
  return exp_param_ != NULL ? *exp_param_
                         : *::caffe::ExpParameter::internal_default_instance();
}
::caffe::ExpParameter* V1LayerParameter::mutable_exp_param() {
  set_has_exp_param();
  if (exp_param_ == NULL) {
    exp_param_ = new ::caffe::ExpParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.exp_param)
  return exp_param_;
}
::caffe::ExpParameter* V1LayerParameter::release_exp_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.exp_param)
  clear_has_exp_param();
  ::caffe::ExpParameter* temp = exp_param_;
  exp_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_exp_param(::caffe::ExpParameter* exp_param) {
  delete exp_param_;
  exp_param_ = exp_param;
  if (exp_param) {
    set_has_exp_param();
  } else {
    clear_has_exp_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.exp_param)
}

// optional .caffe.HDF5DataParameter hdf5_data_param = 13;
bool V1LayerParameter::has_hdf5_data_param() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void V1LayerParameter::set_has_hdf5_data_param() {
  _has_bits_[0] |= 0x00400000u;
}
void V1LayerParameter::clear_has_hdf5_data_param() {
  _has_bits_[0] &= ~0x00400000u;
}
void V1LayerParameter::clear_hdf5_data_param() {
  if (hdf5_data_param_ != NULL) hdf5_data_param_->::caffe::HDF5DataParameter::Clear();
  clear_has_hdf5_data_param();
}
const ::caffe::HDF5DataParameter& V1LayerParameter::hdf5_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.hdf5_data_param)
  return hdf5_data_param_ != NULL ? *hdf5_data_param_
                         : *::caffe::HDF5DataParameter::internal_default_instance();
}
::caffe::HDF5DataParameter* V1LayerParameter::mutable_hdf5_data_param() {
  set_has_hdf5_data_param();
  if (hdf5_data_param_ == NULL) {
    hdf5_data_param_ = new ::caffe::HDF5DataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.hdf5_data_param)
  return hdf5_data_param_;
}
::caffe::HDF5DataParameter* V1LayerParameter::release_hdf5_data_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.hdf5_data_param)
  clear_has_hdf5_data_param();
  ::caffe::HDF5DataParameter* temp = hdf5_data_param_;
  hdf5_data_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_hdf5_data_param(::caffe::HDF5DataParameter* hdf5_data_param) {
  delete hdf5_data_param_;
  hdf5_data_param_ = hdf5_data_param;
  if (hdf5_data_param) {
    set_has_hdf5_data_param();
  } else {
    clear_has_hdf5_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.hdf5_data_param)
}

// optional .caffe.HDF5OutputParameter hdf5_output_param = 14;
bool V1LayerParameter::has_hdf5_output_param() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void V1LayerParameter::set_has_hdf5_output_param() {
  _has_bits_[0] |= 0x00800000u;
}
void V1LayerParameter::clear_has_hdf5_output_param() {
  _has_bits_[0] &= ~0x00800000u;
}
void V1LayerParameter::clear_hdf5_output_param() {
  if (hdf5_output_param_ != NULL) hdf5_output_param_->::caffe::HDF5OutputParameter::Clear();
  clear_has_hdf5_output_param();
}
const ::caffe::HDF5OutputParameter& V1LayerParameter::hdf5_output_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.hdf5_output_param)
  return hdf5_output_param_ != NULL ? *hdf5_output_param_
                         : *::caffe::HDF5OutputParameter::internal_default_instance();
}
::caffe::HDF5OutputParameter* V1LayerParameter::mutable_hdf5_output_param() {
  set_has_hdf5_output_param();
  if (hdf5_output_param_ == NULL) {
    hdf5_output_param_ = new ::caffe::HDF5OutputParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.hdf5_output_param)
  return hdf5_output_param_;
}
::caffe::HDF5OutputParameter* V1LayerParameter::release_hdf5_output_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.hdf5_output_param)
  clear_has_hdf5_output_param();
  ::caffe::HDF5OutputParameter* temp = hdf5_output_param_;
  hdf5_output_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param) {
  delete hdf5_output_param_;
  hdf5_output_param_ = hdf5_output_param;
  if (hdf5_output_param) {
    set_has_hdf5_output_param();
  } else {
    clear_has_hdf5_output_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.hdf5_output_param)
}

// optional .caffe.HingeLossParameter hinge_loss_param = 29;
bool V1LayerParameter::has_hinge_loss_param() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void V1LayerParameter::set_has_hinge_loss_param() {
  _has_bits_[0] |= 0x01000000u;
}
void V1LayerParameter::clear_has_hinge_loss_param() {
  _has_bits_[0] &= ~0x01000000u;
}
void V1LayerParameter::clear_hinge_loss_param() {
  if (hinge_loss_param_ != NULL) hinge_loss_param_->::caffe::HingeLossParameter::Clear();
  clear_has_hinge_loss_param();
}
const ::caffe::HingeLossParameter& V1LayerParameter::hinge_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.hinge_loss_param)
  return hinge_loss_param_ != NULL ? *hinge_loss_param_
                         : *::caffe::HingeLossParameter::internal_default_instance();
}
::caffe::HingeLossParameter* V1LayerParameter::mutable_hinge_loss_param() {
  set_has_hinge_loss_param();
  if (hinge_loss_param_ == NULL) {
    hinge_loss_param_ = new ::caffe::HingeLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.hinge_loss_param)
  return hinge_loss_param_;
}
::caffe::HingeLossParameter* V1LayerParameter::release_hinge_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.hinge_loss_param)
  clear_has_hinge_loss_param();
  ::caffe::HingeLossParameter* temp = hinge_loss_param_;
  hinge_loss_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_hinge_loss_param(::caffe::HingeLossParameter* hinge_loss_param) {
  delete hinge_loss_param_;
  hinge_loss_param_ = hinge_loss_param;
  if (hinge_loss_param) {
    set_has_hinge_loss_param();
  } else {
    clear_has_hinge_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.hinge_loss_param)
}

// optional .caffe.ImageDataParameter image_data_param = 15;
bool V1LayerParameter::has_image_data_param() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void V1LayerParameter::set_has_image_data_param() {
  _has_bits_[0] |= 0x02000000u;
}
void V1LayerParameter::clear_has_image_data_param() {
  _has_bits_[0] &= ~0x02000000u;
}
void V1LayerParameter::clear_image_data_param() {
  if (image_data_param_ != NULL) image_data_param_->::caffe::ImageDataParameter::Clear();
  clear_has_image_data_param();
}
const ::caffe::ImageDataParameter& V1LayerParameter::image_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.image_data_param)
  return image_data_param_ != NULL ? *image_data_param_
                         : *::caffe::ImageDataParameter::internal_default_instance();
}
::caffe::ImageDataParameter* V1LayerParameter::mutable_image_data_param() {
  set_has_image_data_param();
  if (image_data_param_ == NULL) {
    image_data_param_ = new ::caffe::ImageDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.image_data_param)
  return image_data_param_;
}
::caffe::ImageDataParameter* V1LayerParameter::release_image_data_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.image_data_param)
  clear_has_image_data_param();
  ::caffe::ImageDataParameter* temp = image_data_param_;
  image_data_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_image_data_param(::caffe::ImageDataParameter* image_data_param) {
  delete image_data_param_;
  image_data_param_ = image_data_param;
  if (image_data_param) {
    set_has_image_data_param();
  } else {
    clear_has_image_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.image_data_param)
}

// optional .caffe.InfogainLossParameter infogain_loss_param = 16;
bool V1LayerParameter::has_infogain_loss_param() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void V1LayerParameter::set_has_infogain_loss_param() {
  _has_bits_[0] |= 0x04000000u;
}
void V1LayerParameter::clear_has_infogain_loss_param() {
  _has_bits_[0] &= ~0x04000000u;
}
void V1LayerParameter::clear_infogain_loss_param() {
  if (infogain_loss_param_ != NULL) infogain_loss_param_->::caffe::InfogainLossParameter::Clear();
  clear_has_infogain_loss_param();
}
const ::caffe::InfogainLossParameter& V1LayerParameter::infogain_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.infogain_loss_param)
  return infogain_loss_param_ != NULL ? *infogain_loss_param_
                         : *::caffe::InfogainLossParameter::internal_default_instance();
}
::caffe::InfogainLossParameter* V1LayerParameter::mutable_infogain_loss_param() {
  set_has_infogain_loss_param();
  if (infogain_loss_param_ == NULL) {
    infogain_loss_param_ = new ::caffe::InfogainLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.infogain_loss_param)
  return infogain_loss_param_;
}
::caffe::InfogainLossParameter* V1LayerParameter::release_infogain_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.infogain_loss_param)
  clear_has_infogain_loss_param();
  ::caffe::InfogainLossParameter* temp = infogain_loss_param_;
  infogain_loss_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_infogain_loss_param(::caffe::InfogainLossParameter* infogain_loss_param) {
  delete infogain_loss_param_;
  infogain_loss_param_ = infogain_loss_param;
  if (infogain_loss_param) {
    set_has_infogain_loss_param();
  } else {
    clear_has_infogain_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.infogain_loss_param)
}

// optional .caffe.InnerProductParameter inner_product_param = 17;
bool V1LayerParameter::has_inner_product_param() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void V1LayerParameter::set_has_inner_product_param() {
  _has_bits_[0] |= 0x08000000u;
}
void V1LayerParameter::clear_has_inner_product_param() {
  _has_bits_[0] &= ~0x08000000u;
}
void V1LayerParameter::clear_inner_product_param() {
  if (inner_product_param_ != NULL) inner_product_param_->::caffe::InnerProductParameter::Clear();
  clear_has_inner_product_param();
}
const ::caffe::InnerProductParameter& V1LayerParameter::inner_product_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.inner_product_param)
  return inner_product_param_ != NULL ? *inner_product_param_
                         : *::caffe::InnerProductParameter::internal_default_instance();
}
::caffe::InnerProductParameter* V1LayerParameter::mutable_inner_product_param() {
  set_has_inner_product_param();
  if (inner_product_param_ == NULL) {
    inner_product_param_ = new ::caffe::InnerProductParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.inner_product_param)
  return inner_product_param_;
}
::caffe::InnerProductParameter* V1LayerParameter::release_inner_product_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.inner_product_param)
  clear_has_inner_product_param();
  ::caffe::InnerProductParameter* temp = inner_product_param_;
  inner_product_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_inner_product_param(::caffe::InnerProductParameter* inner_product_param) {
  delete inner_product_param_;
  inner_product_param_ = inner_product_param;
  if (inner_product_param) {
    set_has_inner_product_param();
  } else {
    clear_has_inner_product_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.inner_product_param)
}

// optional .caffe.LRNParameter lrn_param = 18;
bool V1LayerParameter::has_lrn_param() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void V1LayerParameter::set_has_lrn_param() {
  _has_bits_[0] |= 0x10000000u;
}
void V1LayerParameter::clear_has_lrn_param() {
  _has_bits_[0] &= ~0x10000000u;
}
void V1LayerParameter::clear_lrn_param() {
  if (lrn_param_ != NULL) lrn_param_->::caffe::LRNParameter::Clear();
  clear_has_lrn_param();
}
const ::caffe::LRNParameter& V1LayerParameter::lrn_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.lrn_param)
  return lrn_param_ != NULL ? *lrn_param_
                         : *::caffe::LRNParameter::internal_default_instance();
}
::caffe::LRNParameter* V1LayerParameter::mutable_lrn_param() {
  set_has_lrn_param();
  if (lrn_param_ == NULL) {
    lrn_param_ = new ::caffe::LRNParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.lrn_param)
  return lrn_param_;
}
::caffe::LRNParameter* V1LayerParameter::release_lrn_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.lrn_param)
  clear_has_lrn_param();
  ::caffe::LRNParameter* temp = lrn_param_;
  lrn_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_lrn_param(::caffe::LRNParameter* lrn_param) {
  delete lrn_param_;
  lrn_param_ = lrn_param;
  if (lrn_param) {
    set_has_lrn_param();
  } else {
    clear_has_lrn_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.lrn_param)
}

// optional .caffe.MemoryDataParameter memory_data_param = 22;
bool V1LayerParameter::has_memory_data_param() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void V1LayerParameter::set_has_memory_data_param() {
  _has_bits_[0] |= 0x20000000u;
}
void V1LayerParameter::clear_has_memory_data_param() {
  _has_bits_[0] &= ~0x20000000u;
}
void V1LayerParameter::clear_memory_data_param() {
  if (memory_data_param_ != NULL) memory_data_param_->::caffe::MemoryDataParameter::Clear();
  clear_has_memory_data_param();
}
const ::caffe::MemoryDataParameter& V1LayerParameter::memory_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.memory_data_param)
  return memory_data_param_ != NULL ? *memory_data_param_
                         : *::caffe::MemoryDataParameter::internal_default_instance();
}
::caffe::MemoryDataParameter* V1LayerParameter::mutable_memory_data_param() {
  set_has_memory_data_param();
  if (memory_data_param_ == NULL) {
    memory_data_param_ = new ::caffe::MemoryDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.memory_data_param)
  return memory_data_param_;
}
::caffe::MemoryDataParameter* V1LayerParameter::release_memory_data_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.memory_data_param)
  clear_has_memory_data_param();
  ::caffe::MemoryDataParameter* temp = memory_data_param_;
  memory_data_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_memory_data_param(::caffe::MemoryDataParameter* memory_data_param) {
  delete memory_data_param_;
  memory_data_param_ = memory_data_param;
  if (memory_data_param) {
    set_has_memory_data_param();
  } else {
    clear_has_memory_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.memory_data_param)
}

// optional .caffe.MVNParameter mvn_param = 34;
bool V1LayerParameter::has_mvn_param() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void V1LayerParameter::set_has_mvn_param() {
  _has_bits_[0] |= 0x40000000u;
}
void V1LayerParameter::clear_has_mvn_param() {
  _has_bits_[0] &= ~0x40000000u;
}
void V1LayerParameter::clear_mvn_param() {
  if (mvn_param_ != NULL) mvn_param_->::caffe::MVNParameter::Clear();
  clear_has_mvn_param();
}
const ::caffe::MVNParameter& V1LayerParameter::mvn_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.mvn_param)
  return mvn_param_ != NULL ? *mvn_param_
                         : *::caffe::MVNParameter::internal_default_instance();
}
::caffe::MVNParameter* V1LayerParameter::mutable_mvn_param() {
  set_has_mvn_param();
  if (mvn_param_ == NULL) {
    mvn_param_ = new ::caffe::MVNParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.mvn_param)
  return mvn_param_;
}
::caffe::MVNParameter* V1LayerParameter::release_mvn_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.mvn_param)
  clear_has_mvn_param();
  ::caffe::MVNParameter* temp = mvn_param_;
  mvn_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_mvn_param(::caffe::MVNParameter* mvn_param) {
  delete mvn_param_;
  mvn_param_ = mvn_param;
  if (mvn_param) {
    set_has_mvn_param();
  } else {
    clear_has_mvn_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.mvn_param)
}

// optional .caffe.PoolingParameter pooling_param = 19;
bool V1LayerParameter::has_pooling_param() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void V1LayerParameter::set_has_pooling_param() {
  _has_bits_[0] |= 0x80000000u;
}
void V1LayerParameter::clear_has_pooling_param() {
  _has_bits_[0] &= ~0x80000000u;
}
void V1LayerParameter::clear_pooling_param() {
  if (pooling_param_ != NULL) pooling_param_->::caffe::PoolingParameter::Clear();
  clear_has_pooling_param();
}
const ::caffe::PoolingParameter& V1LayerParameter::pooling_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.pooling_param)
  return pooling_param_ != NULL ? *pooling_param_
                         : *::caffe::PoolingParameter::internal_default_instance();
}
::caffe::PoolingParameter* V1LayerParameter::mutable_pooling_param() {
  set_has_pooling_param();
  if (pooling_param_ == NULL) {
    pooling_param_ = new ::caffe::PoolingParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.pooling_param)
  return pooling_param_;
}
::caffe::PoolingParameter* V1LayerParameter::release_pooling_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.pooling_param)
  clear_has_pooling_param();
  ::caffe::PoolingParameter* temp = pooling_param_;
  pooling_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_pooling_param(::caffe::PoolingParameter* pooling_param) {
  delete pooling_param_;
  pooling_param_ = pooling_param;
  if (pooling_param) {
    set_has_pooling_param();
  } else {
    clear_has_pooling_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.pooling_param)
}

// optional .caffe.PowerParameter power_param = 21;
bool V1LayerParameter::has_power_param() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void V1LayerParameter::set_has_power_param() {
  _has_bits_[1] |= 0x00000001u;
}
void V1LayerParameter::clear_has_power_param() {
  _has_bits_[1] &= ~0x00000001u;
}
void V1LayerParameter::clear_power_param() {
  if (power_param_ != NULL) power_param_->::caffe::PowerParameter::Clear();
  clear_has_power_param();
}
const ::caffe::PowerParameter& V1LayerParameter::power_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.power_param)
  return power_param_ != NULL ? *power_param_
                         : *::caffe::PowerParameter::internal_default_instance();
}
::caffe::PowerParameter* V1LayerParameter::mutable_power_param() {
  set_has_power_param();
  if (power_param_ == NULL) {
    power_param_ = new ::caffe::PowerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.power_param)
  return power_param_;
}
::caffe::PowerParameter* V1LayerParameter::release_power_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.power_param)
  clear_has_power_param();
  ::caffe::PowerParameter* temp = power_param_;
  power_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_power_param(::caffe::PowerParameter* power_param) {
  delete power_param_;
  power_param_ = power_param;
  if (power_param) {
    set_has_power_param();
  } else {
    clear_has_power_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.power_param)
}

// optional .caffe.ReLUParameter relu_param = 30;
bool V1LayerParameter::has_relu_param() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void V1LayerParameter::set_has_relu_param() {
  _has_bits_[1] |= 0x00000002u;
}
void V1LayerParameter::clear_has_relu_param() {
  _has_bits_[1] &= ~0x00000002u;
}
void V1LayerParameter::clear_relu_param() {
  if (relu_param_ != NULL) relu_param_->::caffe::ReLUParameter::Clear();
  clear_has_relu_param();
}
const ::caffe::ReLUParameter& V1LayerParameter::relu_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.relu_param)
  return relu_param_ != NULL ? *relu_param_
                         : *::caffe::ReLUParameter::internal_default_instance();
}
::caffe::ReLUParameter* V1LayerParameter::mutable_relu_param() {
  set_has_relu_param();
  if (relu_param_ == NULL) {
    relu_param_ = new ::caffe::ReLUParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.relu_param)
  return relu_param_;
}
::caffe::ReLUParameter* V1LayerParameter::release_relu_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.relu_param)
  clear_has_relu_param();
  ::caffe::ReLUParameter* temp = relu_param_;
  relu_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_relu_param(::caffe::ReLUParameter* relu_param) {
  delete relu_param_;
  relu_param_ = relu_param;
  if (relu_param) {
    set_has_relu_param();
  } else {
    clear_has_relu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.relu_param)
}

// optional .caffe.SigmoidParameter sigmoid_param = 38;
bool V1LayerParameter::has_sigmoid_param() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void V1LayerParameter::set_has_sigmoid_param() {
  _has_bits_[1] |= 0x00000004u;
}
void V1LayerParameter::clear_has_sigmoid_param() {
  _has_bits_[1] &= ~0x00000004u;
}
void V1LayerParameter::clear_sigmoid_param() {
  if (sigmoid_param_ != NULL) sigmoid_param_->::caffe::SigmoidParameter::Clear();
  clear_has_sigmoid_param();
}
const ::caffe::SigmoidParameter& V1LayerParameter::sigmoid_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.sigmoid_param)
  return sigmoid_param_ != NULL ? *sigmoid_param_
                         : *::caffe::SigmoidParameter::internal_default_instance();
}
::caffe::SigmoidParameter* V1LayerParameter::mutable_sigmoid_param() {
  set_has_sigmoid_param();
  if (sigmoid_param_ == NULL) {
    sigmoid_param_ = new ::caffe::SigmoidParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.sigmoid_param)
  return sigmoid_param_;
}
::caffe::SigmoidParameter* V1LayerParameter::release_sigmoid_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.sigmoid_param)
  clear_has_sigmoid_param();
  ::caffe::SigmoidParameter* temp = sigmoid_param_;
  sigmoid_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_sigmoid_param(::caffe::SigmoidParameter* sigmoid_param) {
  delete sigmoid_param_;
  sigmoid_param_ = sigmoid_param;
  if (sigmoid_param) {
    set_has_sigmoid_param();
  } else {
    clear_has_sigmoid_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.sigmoid_param)
}

// optional .caffe.SoftmaxParameter softmax_param = 39;
bool V1LayerParameter::has_softmax_param() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void V1LayerParameter::set_has_softmax_param() {
  _has_bits_[1] |= 0x00000008u;
}
void V1LayerParameter::clear_has_softmax_param() {
  _has_bits_[1] &= ~0x00000008u;
}
void V1LayerParameter::clear_softmax_param() {
  if (softmax_param_ != NULL) softmax_param_->::caffe::SoftmaxParameter::Clear();
  clear_has_softmax_param();
}
const ::caffe::SoftmaxParameter& V1LayerParameter::softmax_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.softmax_param)
  return softmax_param_ != NULL ? *softmax_param_
                         : *::caffe::SoftmaxParameter::internal_default_instance();
}
::caffe::SoftmaxParameter* V1LayerParameter::mutable_softmax_param() {
  set_has_softmax_param();
  if (softmax_param_ == NULL) {
    softmax_param_ = new ::caffe::SoftmaxParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.softmax_param)
  return softmax_param_;
}
::caffe::SoftmaxParameter* V1LayerParameter::release_softmax_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.softmax_param)
  clear_has_softmax_param();
  ::caffe::SoftmaxParameter* temp = softmax_param_;
  softmax_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_softmax_param(::caffe::SoftmaxParameter* softmax_param) {
  delete softmax_param_;
  softmax_param_ = softmax_param;
  if (softmax_param) {
    set_has_softmax_param();
  } else {
    clear_has_softmax_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.softmax_param)
}

// optional .caffe.SliceParameter slice_param = 31;
bool V1LayerParameter::has_slice_param() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void V1LayerParameter::set_has_slice_param() {
  _has_bits_[1] |= 0x00000010u;
}
void V1LayerParameter::clear_has_slice_param() {
  _has_bits_[1] &= ~0x00000010u;
}
void V1LayerParameter::clear_slice_param() {
  if (slice_param_ != NULL) slice_param_->::caffe::SliceParameter::Clear();
  clear_has_slice_param();
}
const ::caffe::SliceParameter& V1LayerParameter::slice_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.slice_param)
  return slice_param_ != NULL ? *slice_param_
                         : *::caffe::SliceParameter::internal_default_instance();
}
::caffe::SliceParameter* V1LayerParameter::mutable_slice_param() {
  set_has_slice_param();
  if (slice_param_ == NULL) {
    slice_param_ = new ::caffe::SliceParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.slice_param)
  return slice_param_;
}
::caffe::SliceParameter* V1LayerParameter::release_slice_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.slice_param)
  clear_has_slice_param();
  ::caffe::SliceParameter* temp = slice_param_;
  slice_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_slice_param(::caffe::SliceParameter* slice_param) {
  delete slice_param_;
  slice_param_ = slice_param;
  if (slice_param) {
    set_has_slice_param();
  } else {
    clear_has_slice_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.slice_param)
}

// optional .caffe.TanHParameter tanh_param = 37;
bool V1LayerParameter::has_tanh_param() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void V1LayerParameter::set_has_tanh_param() {
  _has_bits_[1] |= 0x00000020u;
}
void V1LayerParameter::clear_has_tanh_param() {
  _has_bits_[1] &= ~0x00000020u;
}
void V1LayerParameter::clear_tanh_param() {
  if (tanh_param_ != NULL) tanh_param_->::caffe::TanHParameter::Clear();
  clear_has_tanh_param();
}
const ::caffe::TanHParameter& V1LayerParameter::tanh_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.tanh_param)
  return tanh_param_ != NULL ? *tanh_param_
                         : *::caffe::TanHParameter::internal_default_instance();
}
::caffe::TanHParameter* V1LayerParameter::mutable_tanh_param() {
  set_has_tanh_param();
  if (tanh_param_ == NULL) {
    tanh_param_ = new ::caffe::TanHParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.tanh_param)
  return tanh_param_;
}
::caffe::TanHParameter* V1LayerParameter::release_tanh_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.tanh_param)
  clear_has_tanh_param();
  ::caffe::TanHParameter* temp = tanh_param_;
  tanh_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_tanh_param(::caffe::TanHParameter* tanh_param) {
  delete tanh_param_;
  tanh_param_ = tanh_param;
  if (tanh_param) {
    set_has_tanh_param();
  } else {
    clear_has_tanh_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.tanh_param)
}

// optional .caffe.ThresholdParameter threshold_param = 25;
bool V1LayerParameter::has_threshold_param() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void V1LayerParameter::set_has_threshold_param() {
  _has_bits_[1] |= 0x00000040u;
}
void V1LayerParameter::clear_has_threshold_param() {
  _has_bits_[1] &= ~0x00000040u;
}
void V1LayerParameter::clear_threshold_param() {
  if (threshold_param_ != NULL) threshold_param_->::caffe::ThresholdParameter::Clear();
  clear_has_threshold_param();
}
const ::caffe::ThresholdParameter& V1LayerParameter::threshold_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.threshold_param)
  return threshold_param_ != NULL ? *threshold_param_
                         : *::caffe::ThresholdParameter::internal_default_instance();
}
::caffe::ThresholdParameter* V1LayerParameter::mutable_threshold_param() {
  set_has_threshold_param();
  if (threshold_param_ == NULL) {
    threshold_param_ = new ::caffe::ThresholdParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.threshold_param)
  return threshold_param_;
}
::caffe::ThresholdParameter* V1LayerParameter::release_threshold_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.threshold_param)
  clear_has_threshold_param();
  ::caffe::ThresholdParameter* temp = threshold_param_;
  threshold_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_threshold_param(::caffe::ThresholdParameter* threshold_param) {
  delete threshold_param_;
  threshold_param_ = threshold_param;
  if (threshold_param) {
    set_has_threshold_param();
  } else {
    clear_has_threshold_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.threshold_param)
}

// optional .caffe.WindowDataParameter window_data_param = 20;
bool V1LayerParameter::has_window_data_param() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void V1LayerParameter::set_has_window_data_param() {
  _has_bits_[1] |= 0x00000080u;
}
void V1LayerParameter::clear_has_window_data_param() {
  _has_bits_[1] &= ~0x00000080u;
}
void V1LayerParameter::clear_window_data_param() {
  if (window_data_param_ != NULL) window_data_param_->::caffe::WindowDataParameter::Clear();
  clear_has_window_data_param();
}
const ::caffe::WindowDataParameter& V1LayerParameter::window_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.window_data_param)
  return window_data_param_ != NULL ? *window_data_param_
                         : *::caffe::WindowDataParameter::internal_default_instance();
}
::caffe::WindowDataParameter* V1LayerParameter::mutable_window_data_param() {
  set_has_window_data_param();
  if (window_data_param_ == NULL) {
    window_data_param_ = new ::caffe::WindowDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.window_data_param)
  return window_data_param_;
}
::caffe::WindowDataParameter* V1LayerParameter::release_window_data_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.window_data_param)
  clear_has_window_data_param();
  ::caffe::WindowDataParameter* temp = window_data_param_;
  window_data_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_window_data_param(::caffe::WindowDataParameter* window_data_param) {
  delete window_data_param_;
  window_data_param_ = window_data_param;
  if (window_data_param) {
    set_has_window_data_param();
  } else {
    clear_has_window_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.window_data_param)
}

// optional .caffe.TransformationParameter transform_param = 36;
bool V1LayerParameter::has_transform_param() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void V1LayerParameter::set_has_transform_param() {
  _has_bits_[1] |= 0x00000100u;
}
void V1LayerParameter::clear_has_transform_param() {
  _has_bits_[1] &= ~0x00000100u;
}
void V1LayerParameter::clear_transform_param() {
  if (transform_param_ != NULL) transform_param_->::caffe::TransformationParameter::Clear();
  clear_has_transform_param();
}
const ::caffe::TransformationParameter& V1LayerParameter::transform_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.transform_param)
  return transform_param_ != NULL ? *transform_param_
                         : *::caffe::TransformationParameter::internal_default_instance();
}
::caffe::TransformationParameter* V1LayerParameter::mutable_transform_param() {
  set_has_transform_param();
  if (transform_param_ == NULL) {
    transform_param_ = new ::caffe::TransformationParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.transform_param)
  return transform_param_;
}
::caffe::TransformationParameter* V1LayerParameter::release_transform_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.transform_param)
  clear_has_transform_param();
  ::caffe::TransformationParameter* temp = transform_param_;
  transform_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_transform_param(::caffe::TransformationParameter* transform_param) {
  delete transform_param_;
  transform_param_ = transform_param;
  if (transform_param) {
    set_has_transform_param();
  } else {
    clear_has_transform_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.transform_param)
}

// optional .caffe.LossParameter loss_param = 42;
bool V1LayerParameter::has_loss_param() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
void V1LayerParameter::set_has_loss_param() {
  _has_bits_[1] |= 0x00000200u;
}
void V1LayerParameter::clear_has_loss_param() {
  _has_bits_[1] &= ~0x00000200u;
}
void V1LayerParameter::clear_loss_param() {
  if (loss_param_ != NULL) loss_param_->::caffe::LossParameter::Clear();
  clear_has_loss_param();
}
const ::caffe::LossParameter& V1LayerParameter::loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.loss_param)
  return loss_param_ != NULL ? *loss_param_
                         : *::caffe::LossParameter::internal_default_instance();
}
::caffe::LossParameter* V1LayerParameter::mutable_loss_param() {
  set_has_loss_param();
  if (loss_param_ == NULL) {
    loss_param_ = new ::caffe::LossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.loss_param)
  return loss_param_;
}
::caffe::LossParameter* V1LayerParameter::release_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.loss_param)
  clear_has_loss_param();
  ::caffe::LossParameter* temp = loss_param_;
  loss_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_loss_param(::caffe::LossParameter* loss_param) {
  delete loss_param_;
  loss_param_ = loss_param;
  if (loss_param) {
    set_has_loss_param();
  } else {
    clear_has_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.loss_param)
}

// optional .caffe.V0LayerParameter layer = 1;
bool V1LayerParameter::has_layer() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
void V1LayerParameter::set_has_layer() {
  _has_bits_[1] |= 0x00000400u;
}
void V1LayerParameter::clear_has_layer() {
  _has_bits_[1] &= ~0x00000400u;
}
void V1LayerParameter::clear_layer() {
  if (layer_ != NULL) layer_->::caffe::V0LayerParameter::Clear();
  clear_has_layer();
}
const ::caffe::V0LayerParameter& V1LayerParameter::layer() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.layer)
  return layer_ != NULL ? *layer_
                         : *::caffe::V0LayerParameter::internal_default_instance();
}
::caffe::V0LayerParameter* V1LayerParameter::mutable_layer() {
  set_has_layer();
  if (layer_ == NULL) {
    layer_ = new ::caffe::V0LayerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.layer)
  return layer_;
}
::caffe::V0LayerParameter* V1LayerParameter::release_layer() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.layer)
  clear_has_layer();
  ::caffe::V0LayerParameter* temp = layer_;
  layer_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_layer(::caffe::V0LayerParameter* layer) {
  delete layer_;
  layer_ = layer;
  if (layer) {
    set_has_layer();
  } else {
    clear_has_layer();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.layer)
}

inline const V1LayerParameter* V1LayerParameter::internal_default_instance() {
  return &V1LayerParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* V0LayerParameter_PoolMethod_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return V0LayerParameter_PoolMethod_descriptor_;
}
bool V0LayerParameter_PoolMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const V0LayerParameter_PoolMethod V0LayerParameter::MAX;
const V0LayerParameter_PoolMethod V0LayerParameter::AVE;
const V0LayerParameter_PoolMethod V0LayerParameter::STOCHASTIC;
const V0LayerParameter_PoolMethod V0LayerParameter::PoolMethod_MIN;
const V0LayerParameter_PoolMethod V0LayerParameter::PoolMethod_MAX;
const int V0LayerParameter::PoolMethod_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
::std::string* V0LayerParameter::_default_det_crop_mode_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int V0LayerParameter::kNameFieldNumber;
const int V0LayerParameter::kTypeFieldNumber;
const int V0LayerParameter::kNumOutputFieldNumber;
const int V0LayerParameter::kBiastermFieldNumber;
const int V0LayerParameter::kWeightFillerFieldNumber;
const int V0LayerParameter::kBiasFillerFieldNumber;
const int V0LayerParameter::kPadFieldNumber;
const int V0LayerParameter::kKernelsizeFieldNumber;
const int V0LayerParameter::kGroupFieldNumber;
const int V0LayerParameter::kStrideFieldNumber;
const int V0LayerParameter::kPoolFieldNumber;
const int V0LayerParameter::kDropoutRatioFieldNumber;
const int V0LayerParameter::kLocalSizeFieldNumber;
const int V0LayerParameter::kAlphaFieldNumber;
const int V0LayerParameter::kBetaFieldNumber;
const int V0LayerParameter::kKFieldNumber;
const int V0LayerParameter::kSourceFieldNumber;
const int V0LayerParameter::kScaleFieldNumber;
const int V0LayerParameter::kMeanfileFieldNumber;
const int V0LayerParameter::kBatchsizeFieldNumber;
const int V0LayerParameter::kCropsizeFieldNumber;
const int V0LayerParameter::kMirrorFieldNumber;
const int V0LayerParameter::kBlobsFieldNumber;
const int V0LayerParameter::kBlobsLrFieldNumber;
const int V0LayerParameter::kWeightDecayFieldNumber;
const int V0LayerParameter::kRandSkipFieldNumber;
const int V0LayerParameter::kDetFgThresholdFieldNumber;
const int V0LayerParameter::kDetBgThresholdFieldNumber;
const int V0LayerParameter::kDetFgFractionFieldNumber;
const int V0LayerParameter::kDetContextPadFieldNumber;
const int V0LayerParameter::kDetCropModeFieldNumber;
const int V0LayerParameter::kNewNumFieldNumber;
const int V0LayerParameter::kNewChannelsFieldNumber;
const int V0LayerParameter::kNewHeightFieldNumber;
const int V0LayerParameter::kNewWidthFieldNumber;
const int V0LayerParameter::kShuffleImagesFieldNumber;
const int V0LayerParameter::kConcatDimFieldNumber;
const int V0LayerParameter::kHdf5OutputParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

V0LayerParameter::V0LayerParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.V0LayerParameter)
}

void V0LayerParameter::InitAsDefaultInstance() {
  weight_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  bias_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  hdf5_output_param_ = const_cast< ::caffe::HDF5OutputParameter*>(
      ::caffe::HDF5OutputParameter::internal_default_instance());
}

V0LayerParameter::V0LayerParameter(const V0LayerParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.V0LayerParameter)
}

void V0LayerParameter::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  meanfile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  det_crop_mode_.UnsafeSetDefault(_default_det_crop_mode_);
  weight_filler_ = NULL;
  bias_filler_ = NULL;
  hdf5_output_param_ = NULL;
  ::memset(&num_output_, 0, reinterpret_cast<char*>(&new_width_) -
    reinterpret_cast<char*>(&num_output_) + sizeof(new_width_));
  concat_dim_ = 1u;
  biasterm_ = true;
  group_ = 1u;
  stride_ = 1u;
  dropout_ratio_ = 0.5f;
  local_size_ = 5u;
  alpha_ = 1;
  beta_ = 0.75f;
  k_ = 1;
  scale_ = 1;
  det_fg_threshold_ = 0.5f;
  det_bg_threshold_ = 0.5f;
  det_fg_fraction_ = 0.25f;
  _cached_size_ = 0;
}

V0LayerParameter::~V0LayerParameter() {
  // @@protoc_insertion_point(destructor:caffe.V0LayerParameter)
  SharedDtor();
}

void V0LayerParameter::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  meanfile_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  det_crop_mode_.DestroyNoArena(_default_det_crop_mode_);
  if (this != &V0LayerParameter_default_instance_.get()) {
    delete weight_filler_;
    delete bias_filler_;
    delete hdf5_output_param_;
  }
}

void V0LayerParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* V0LayerParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return V0LayerParameter_descriptor_;
}

const V0LayerParameter& V0LayerParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<V0LayerParameter> V0LayerParameter_default_instance_;

V0LayerParameter* V0LayerParameter::New(::google::protobuf::Arena* arena) const {
  V0LayerParameter* n = new V0LayerParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void V0LayerParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.V0LayerParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(V0LayerParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<V0LayerParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(num_output_, kernelsize_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_type()) {
      type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    biasterm_ = true;
    if (has_weight_filler()) {
      if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
    }
    if (has_bias_filler()) {
      if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    group_ = 1u;
    stride_ = 1u;
    pool_ = 0;
    dropout_ratio_ = 0.5f;
    local_size_ = 5u;
    alpha_ = 1;
    beta_ = 0.75f;
    k_ = 1;
  }
  if (_has_bits_[16 / 32] & 4128768u) {
    ZR_(batchsize_, cropsize_);
    if (has_source()) {
      source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    scale_ = 1;
    if (has_meanfile()) {
      meanfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    mirror_ = false;
  }
  if (_has_bits_[24 / 32] & 4261412864u) {
    ZR_(det_context_pad_, new_num_);
    rand_skip_ = 0u;
    det_fg_threshold_ = 0.5f;
    det_bg_threshold_ = 0.5f;
    det_fg_fraction_ = 0.25f;
    if (has_det_crop_mode()) {
      det_crop_mode_.ClearToDefaultNoArena(_default_det_crop_mode_);
    }
  }
  if (_has_bits_[32 / 32] & 63u) {
    ZR_(new_channels_, new_width_);
    shuffle_images_ = false;
    concat_dim_ = 1u;
    if (has_hdf5_output_param()) {
      if (hdf5_output_param_ != NULL) hdf5_output_param_->::caffe::HDF5OutputParameter::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  blobs_.Clear();
  blobs_lr_.Clear();
  weight_decay_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool V0LayerParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.V0LayerParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.V0LayerParameter.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional string type = 2;
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.V0LayerParameter.type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num_output;
        break;
      }

      // optional uint32 num_output = 3;
      case 3: {
        if (tag == 24) {
         parse_num_output:
          set_has_num_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_biasterm;
        break;
      }

      // optional bool biasterm = 4 [default = true];
      case 4: {
        if (tag == 32) {
         parse_biasterm:
          set_has_biasterm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &biasterm_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_weight_filler;
        break;
      }

      // optional .caffe.FillerParameter weight_filler = 5;
      case 5: {
        if (tag == 42) {
         parse_weight_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_bias_filler;
        break;
      }

      // optional .caffe.FillerParameter bias_filler = 6;
      case 6: {
        if (tag == 50) {
         parse_bias_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pad;
        break;
      }

      // optional uint32 pad = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_pad:
          set_has_pad();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_kernelsize;
        break;
      }

      // optional uint32 kernelsize = 8;
      case 8: {
        if (tag == 64) {
         parse_kernelsize:
          set_has_kernelsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernelsize_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_group;
        break;
      }

      // optional uint32 group = 9 [default = 1];
      case 9: {
        if (tag == 72) {
         parse_group:
          set_has_group();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_stride;
        break;
      }

      // optional uint32 stride = 10 [default = 1];
      case 10: {
        if (tag == 80) {
         parse_stride:
          set_has_stride();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_pool;
        break;
      }

      // optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
      case 11: {
        if (tag == 88) {
         parse_pool:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::V0LayerParameter_PoolMethod_IsValid(value)) {
            set_pool(static_cast< ::caffe::V0LayerParameter_PoolMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_dropout_ratio;
        break;
      }

      // optional float dropout_ratio = 12 [default = 0.5];
      case 12: {
        if (tag == 101) {
         parse_dropout_ratio:
          set_has_dropout_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dropout_ratio_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_local_size;
        break;
      }

      // optional uint32 local_size = 13 [default = 5];
      case 13: {
        if (tag == 104) {
         parse_local_size:
          set_has_local_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_alpha;
        break;
      }

      // optional float alpha = 14 [default = 1];
      case 14: {
        if (tag == 117) {
         parse_alpha:
          set_has_alpha();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_beta;
        break;
      }

      // optional float beta = 15 [default = 0.75];
      case 15: {
        if (tag == 125) {
         parse_beta:
          set_has_beta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beta_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_source;
        break;
      }

      // optional string source = 16;
      case 16: {
        if (tag == 130) {
         parse_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.V0LayerParameter.source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(141)) goto parse_scale;
        break;
      }

      // optional float scale = 17 [default = 1];
      case 17: {
        if (tag == 141) {
         parse_scale:
          set_has_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_meanfile;
        break;
      }

      // optional string meanfile = 18;
      case 18: {
        if (tag == 146) {
         parse_meanfile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_meanfile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->meanfile().data(), this->meanfile().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.V0LayerParameter.meanfile");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_batchsize;
        break;
      }

      // optional uint32 batchsize = 19;
      case 19: {
        if (tag == 152) {
         parse_batchsize:
          set_has_batchsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batchsize_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_cropsize;
        break;
      }

      // optional uint32 cropsize = 20 [default = 0];
      case 20: {
        if (tag == 160) {
         parse_cropsize:
          set_has_cropsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cropsize_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_mirror;
        break;
      }

      // optional bool mirror = 21 [default = false];
      case 21: {
        if (tag == 168) {
         parse_mirror:
          set_has_mirror();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mirror_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(181)) goto parse_k;
        break;
      }

      // optional float k = 22 [default = 1];
      case 22: {
        if (tag == 181) {
         parse_k:
          set_has_k();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &k_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(402)) goto parse_blobs;
        break;
      }

      // repeated .caffe.BlobProto blobs = 50;
      case 50: {
        if (tag == 402) {
         parse_blobs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_blobs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_blobs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(402)) goto parse_loop_blobs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(413)) goto parse_blobs_lr;
        break;
      }

      // repeated float blobs_lr = 51;
      case 51: {
        if (tag == 413) {
         parse_blobs_lr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 413, input, this->mutable_blobs_lr())));
        } else if (tag == 410) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_blobs_lr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(413)) goto parse_blobs_lr;
        if (input->ExpectTag(421)) goto parse_weight_decay;
        break;
      }

      // repeated float weight_decay = 52;
      case 52: {
        if (tag == 421) {
         parse_weight_decay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 421, input, this->mutable_weight_decay())));
        } else if (tag == 418) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_weight_decay())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(421)) goto parse_weight_decay;
        if (input->ExpectTag(424)) goto parse_rand_skip;
        break;
      }

      // optional uint32 rand_skip = 53 [default = 0];
      case 53: {
        if (tag == 424) {
         parse_rand_skip:
          set_has_rand_skip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rand_skip_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(437)) goto parse_det_fg_threshold;
        break;
      }

      // optional float det_fg_threshold = 54 [default = 0.5];
      case 54: {
        if (tag == 437) {
         parse_det_fg_threshold:
          set_has_det_fg_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &det_fg_threshold_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(445)) goto parse_det_bg_threshold;
        break;
      }

      // optional float det_bg_threshold = 55 [default = 0.5];
      case 55: {
        if (tag == 445) {
         parse_det_bg_threshold:
          set_has_det_bg_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &det_bg_threshold_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(453)) goto parse_det_fg_fraction;
        break;
      }

      // optional float det_fg_fraction = 56 [default = 0.25];
      case 56: {
        if (tag == 453) {
         parse_det_fg_fraction:
          set_has_det_fg_fraction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &det_fg_fraction_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(464)) goto parse_det_context_pad;
        break;
      }

      // optional uint32 det_context_pad = 58 [default = 0];
      case 58: {
        if (tag == 464) {
         parse_det_context_pad:
          set_has_det_context_pad();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &det_context_pad_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(474)) goto parse_det_crop_mode;
        break;
      }

      // optional string det_crop_mode = 59 [default = "warp"];
      case 59: {
        if (tag == 474) {
         parse_det_crop_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_det_crop_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->det_crop_mode().data(), this->det_crop_mode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.V0LayerParameter.det_crop_mode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(480)) goto parse_new_num;
        break;
      }

      // optional int32 new_num = 60 [default = 0];
      case 60: {
        if (tag == 480) {
         parse_new_num:
          set_has_new_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_num_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(488)) goto parse_new_channels;
        break;
      }

      // optional int32 new_channels = 61 [default = 0];
      case 61: {
        if (tag == 488) {
         parse_new_channels:
          set_has_new_channels();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_channels_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(496)) goto parse_new_height;
        break;
      }

      // optional int32 new_height = 62 [default = 0];
      case 62: {
        if (tag == 496) {
         parse_new_height:
          set_has_new_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_height_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(504)) goto parse_new_width;
        break;
      }

      // optional int32 new_width = 63 [default = 0];
      case 63: {
        if (tag == 504) {
         parse_new_width:
          set_has_new_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_width_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(512)) goto parse_shuffle_images;
        break;
      }

      // optional bool shuffle_images = 64 [default = false];
      case 64: {
        if (tag == 512) {
         parse_shuffle_images:
          set_has_shuffle_images();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shuffle_images_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(520)) goto parse_concat_dim;
        break;
      }

      // optional uint32 concat_dim = 65 [default = 1];
      case 65: {
        if (tag == 520) {
         parse_concat_dim:
          set_has_concat_dim();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &concat_dim_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8010)) goto parse_hdf5_output_param;
        break;
      }

      // optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;
      case 1001: {
        if (tag == 8010) {
         parse_hdf5_output_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hdf5_output_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.V0LayerParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.V0LayerParameter)
  return false;
#undef DO_
}

void V0LayerParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.V0LayerParameter)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V0LayerParameter.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V0LayerParameter.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // optional uint32 num_output = 3;
  if (has_num_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num_output(), output);
  }

  // optional bool biasterm = 4 [default = true];
  if (has_biasterm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->biasterm(), output);
  }

  // optional .caffe.FillerParameter weight_filler = 5;
  if (has_weight_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->weight_filler_, output);
  }

  // optional .caffe.FillerParameter bias_filler = 6;
  if (has_bias_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->bias_filler_, output);
  }

  // optional uint32 pad = 7 [default = 0];
  if (has_pad()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->pad(), output);
  }

  // optional uint32 kernelsize = 8;
  if (has_kernelsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->kernelsize(), output);
  }

  // optional uint32 group = 9 [default = 1];
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->group(), output);
  }

  // optional uint32 stride = 10 [default = 1];
  if (has_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->stride(), output);
  }

  // optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
  if (has_pool()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->pool(), output);
  }

  // optional float dropout_ratio = 12 [default = 0.5];
  if (has_dropout_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->dropout_ratio(), output);
  }

  // optional uint32 local_size = 13 [default = 5];
  if (has_local_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->local_size(), output);
  }

  // optional float alpha = 14 [default = 1];
  if (has_alpha()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->alpha(), output);
  }

  // optional float beta = 15 [default = 0.75];
  if (has_beta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->beta(), output);
  }

  // optional string source = 16;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V0LayerParameter.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->source(), output);
  }

  // optional float scale = 17 [default = 1];
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->scale(), output);
  }

  // optional string meanfile = 18;
  if (has_meanfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->meanfile().data(), this->meanfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V0LayerParameter.meanfile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->meanfile(), output);
  }

  // optional uint32 batchsize = 19;
  if (has_batchsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->batchsize(), output);
  }

  // optional uint32 cropsize = 20 [default = 0];
  if (has_cropsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->cropsize(), output);
  }

  // optional bool mirror = 21 [default = false];
  if (has_mirror()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->mirror(), output);
  }

  // optional float k = 22 [default = 1];
  if (has_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->k(), output);
  }

  // repeated .caffe.BlobProto blobs = 50;
  for (unsigned int i = 0, n = this->blobs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->blobs(i), output);
  }

  // repeated float blobs_lr = 51;
  for (int i = 0; i < this->blobs_lr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      51, this->blobs_lr(i), output);
  }

  // repeated float weight_decay = 52;
  for (int i = 0; i < this->weight_decay_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      52, this->weight_decay(i), output);
  }

  // optional uint32 rand_skip = 53 [default = 0];
  if (has_rand_skip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(53, this->rand_skip(), output);
  }

  // optional float det_fg_threshold = 54 [default = 0.5];
  if (has_det_fg_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(54, this->det_fg_threshold(), output);
  }

  // optional float det_bg_threshold = 55 [default = 0.5];
  if (has_det_bg_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(55, this->det_bg_threshold(), output);
  }

  // optional float det_fg_fraction = 56 [default = 0.25];
  if (has_det_fg_fraction()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(56, this->det_fg_fraction(), output);
  }

  // optional uint32 det_context_pad = 58 [default = 0];
  if (has_det_context_pad()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(58, this->det_context_pad(), output);
  }

  // optional string det_crop_mode = 59 [default = "warp"];
  if (has_det_crop_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->det_crop_mode().data(), this->det_crop_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V0LayerParameter.det_crop_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      59, this->det_crop_mode(), output);
  }

  // optional int32 new_num = 60 [default = 0];
  if (has_new_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->new_num(), output);
  }

  // optional int32 new_channels = 61 [default = 0];
  if (has_new_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(61, this->new_channels(), output);
  }

  // optional int32 new_height = 62 [default = 0];
  if (has_new_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(62, this->new_height(), output);
  }

  // optional int32 new_width = 63 [default = 0];
  if (has_new_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(63, this->new_width(), output);
  }

  // optional bool shuffle_images = 64 [default = false];
  if (has_shuffle_images()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(64, this->shuffle_images(), output);
  }

  // optional uint32 concat_dim = 65 [default = 1];
  if (has_concat_dim()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(65, this->concat_dim(), output);
  }

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;
  if (has_hdf5_output_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1001, *this->hdf5_output_param_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.V0LayerParameter)
}

::google::protobuf::uint8* V0LayerParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.V0LayerParameter)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V0LayerParameter.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V0LayerParameter.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // optional uint32 num_output = 3;
  if (has_num_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num_output(), target);
  }

  // optional bool biasterm = 4 [default = true];
  if (has_biasterm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->biasterm(), target);
  }

  // optional .caffe.FillerParameter weight_filler = 5;
  if (has_weight_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->weight_filler_, false, target);
  }

  // optional .caffe.FillerParameter bias_filler = 6;
  if (has_bias_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->bias_filler_, false, target);
  }

  // optional uint32 pad = 7 [default = 0];
  if (has_pad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->pad(), target);
  }

  // optional uint32 kernelsize = 8;
  if (has_kernelsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->kernelsize(), target);
  }

  // optional uint32 group = 9 [default = 1];
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->group(), target);
  }

  // optional uint32 stride = 10 [default = 1];
  if (has_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->stride(), target);
  }

  // optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
  if (has_pool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->pool(), target);
  }

  // optional float dropout_ratio = 12 [default = 0.5];
  if (has_dropout_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->dropout_ratio(), target);
  }

  // optional uint32 local_size = 13 [default = 5];
  if (has_local_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->local_size(), target);
  }

  // optional float alpha = 14 [default = 1];
  if (has_alpha()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->alpha(), target);
  }

  // optional float beta = 15 [default = 0.75];
  if (has_beta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->beta(), target);
  }

  // optional string source = 16;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V0LayerParameter.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->source(), target);
  }

  // optional float scale = 17 [default = 1];
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->scale(), target);
  }

  // optional string meanfile = 18;
  if (has_meanfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->meanfile().data(), this->meanfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V0LayerParameter.meanfile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->meanfile(), target);
  }

  // optional uint32 batchsize = 19;
  if (has_batchsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->batchsize(), target);
  }

  // optional uint32 cropsize = 20 [default = 0];
  if (has_cropsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->cropsize(), target);
  }

  // optional bool mirror = 21 [default = false];
  if (has_mirror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->mirror(), target);
  }

  // optional float k = 22 [default = 1];
  if (has_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->k(), target);
  }

  // repeated .caffe.BlobProto blobs = 50;
  for (unsigned int i = 0, n = this->blobs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        50, this->blobs(i), false, target);
  }

  // repeated float blobs_lr = 51;
  for (int i = 0; i < this->blobs_lr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(51, this->blobs_lr(i), target);
  }

  // repeated float weight_decay = 52;
  for (int i = 0; i < this->weight_decay_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(52, this->weight_decay(i), target);
  }

  // optional uint32 rand_skip = 53 [default = 0];
  if (has_rand_skip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(53, this->rand_skip(), target);
  }

  // optional float det_fg_threshold = 54 [default = 0.5];
  if (has_det_fg_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(54, this->det_fg_threshold(), target);
  }

  // optional float det_bg_threshold = 55 [default = 0.5];
  if (has_det_bg_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(55, this->det_bg_threshold(), target);
  }

  // optional float det_fg_fraction = 56 [default = 0.25];
  if (has_det_fg_fraction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(56, this->det_fg_fraction(), target);
  }

  // optional uint32 det_context_pad = 58 [default = 0];
  if (has_det_context_pad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(58, this->det_context_pad(), target);
  }

  // optional string det_crop_mode = 59 [default = "warp"];
  if (has_det_crop_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->det_crop_mode().data(), this->det_crop_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V0LayerParameter.det_crop_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        59, this->det_crop_mode(), target);
  }

  // optional int32 new_num = 60 [default = 0];
  if (has_new_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->new_num(), target);
  }

  // optional int32 new_channels = 61 [default = 0];
  if (has_new_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(61, this->new_channels(), target);
  }

  // optional int32 new_height = 62 [default = 0];
  if (has_new_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(62, this->new_height(), target);
  }

  // optional int32 new_width = 63 [default = 0];
  if (has_new_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(63, this->new_width(), target);
  }

  // optional bool shuffle_images = 64 [default = false];
  if (has_shuffle_images()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(64, this->shuffle_images(), target);
  }

  // optional uint32 concat_dim = 65 [default = 1];
  if (has_concat_dim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(65, this->concat_dim(), target);
  }

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;
  if (has_hdf5_output_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1001, *this->hdf5_output_param_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.V0LayerParameter)
  return target;
}

size_t V0LayerParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.V0LayerParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional uint32 num_output = 3;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional bool biasterm = 4 [default = true];
    if (has_biasterm()) {
      total_size += 1 + 1;
    }

    // optional .caffe.FillerParameter weight_filler = 5;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->weight_filler_);
    }

    // optional .caffe.FillerParameter bias_filler = 6;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bias_filler_);
    }

    // optional uint32 pad = 7 [default = 0];
    if (has_pad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad());
    }

    // optional uint32 kernelsize = 8;
    if (has_kernelsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernelsize());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 group = 9 [default = 1];
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group());
    }

    // optional uint32 stride = 10 [default = 1];
    if (has_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride());
    }

    // optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
    if (has_pool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pool());
    }

    // optional float dropout_ratio = 12 [default = 0.5];
    if (has_dropout_ratio()) {
      total_size += 1 + 4;
    }

    // optional uint32 local_size = 13 [default = 5];
    if (has_local_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->local_size());
    }

    // optional float alpha = 14 [default = 1];
    if (has_alpha()) {
      total_size += 1 + 4;
    }

    // optional float beta = 15 [default = 0.75];
    if (has_beta()) {
      total_size += 1 + 4;
    }

    // optional float k = 22 [default = 1];
    if (has_k()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & 4128768u) {
    // optional string source = 16;
    if (has_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional float scale = 17 [default = 1];
    if (has_scale()) {
      total_size += 2 + 4;
    }

    // optional string meanfile = 18;
    if (has_meanfile()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->meanfile());
    }

    // optional uint32 batchsize = 19;
    if (has_batchsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batchsize());
    }

    // optional uint32 cropsize = 20 [default = 0];
    if (has_cropsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cropsize());
    }

    // optional bool mirror = 21 [default = false];
    if (has_mirror()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[25 / 32] & 4261412864u) {
    // optional uint32 rand_skip = 53 [default = 0];
    if (has_rand_skip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rand_skip());
    }

    // optional float det_fg_threshold = 54 [default = 0.5];
    if (has_det_fg_threshold()) {
      total_size += 2 + 4;
    }

    // optional float det_bg_threshold = 55 [default = 0.5];
    if (has_det_bg_threshold()) {
      total_size += 2 + 4;
    }

    // optional float det_fg_fraction = 56 [default = 0.25];
    if (has_det_fg_fraction()) {
      total_size += 2 + 4;
    }

    // optional uint32 det_context_pad = 58 [default = 0];
    if (has_det_context_pad()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->det_context_pad());
    }

    // optional string det_crop_mode = 59 [default = "warp"];
    if (has_det_crop_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->det_crop_mode());
    }

    // optional int32 new_num = 60 [default = 0];
    if (has_new_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_num());
    }

  }
  if (_has_bits_[32 / 32] & 63u) {
    // optional int32 new_channels = 61 [default = 0];
    if (has_new_channels()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_channels());
    }

    // optional int32 new_height = 62 [default = 0];
    if (has_new_height()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_height());
    }

    // optional int32 new_width = 63 [default = 0];
    if (has_new_width()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_width());
    }

    // optional bool shuffle_images = 64 [default = false];
    if (has_shuffle_images()) {
      total_size += 2 + 1;
    }

    // optional uint32 concat_dim = 65 [default = 1];
    if (has_concat_dim()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->concat_dim());
    }

    // optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;
    if (has_hdf5_output_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hdf5_output_param_);
    }

  }
  // repeated .caffe.BlobProto blobs = 50;
  {
    unsigned int count = this->blobs_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blobs(i));
    }
  }

  // repeated float blobs_lr = 51;
  {
    size_t data_size = 0;
    unsigned int count = this->blobs_lr_size();
    data_size = 4UL * count;
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->blobs_lr_size());
    total_size += data_size;
  }

  // repeated float weight_decay = 52;
  {
    size_t data_size = 0;
    unsigned int count = this->weight_decay_size();
    data_size = 4UL * count;
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->weight_decay_size());
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void V0LayerParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.V0LayerParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const V0LayerParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const V0LayerParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.V0LayerParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.V0LayerParameter)
    UnsafeMergeFrom(*source);
  }
}

void V0LayerParameter::MergeFrom(const V0LayerParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.V0LayerParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void V0LayerParameter::UnsafeMergeFrom(const V0LayerParameter& from) {
  GOOGLE_DCHECK(&from != this);
  blobs_.MergeFrom(from.blobs_);
  blobs_lr_.UnsafeMergeFrom(from.blobs_lr_);
  weight_decay_.UnsafeMergeFrom(from.weight_decay_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (from.has_num_output()) {
      set_num_output(from.num_output());
    }
    if (from.has_biasterm()) {
      set_biasterm(from.biasterm());
    }
    if (from.has_weight_filler()) {
      mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
    }
    if (from.has_bias_filler()) {
      mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
    }
    if (from.has_pad()) {
      set_pad(from.pad());
    }
    if (from.has_kernelsize()) {
      set_kernelsize(from.kernelsize());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_stride()) {
      set_stride(from.stride());
    }
    if (from.has_pool()) {
      set_pool(from.pool());
    }
    if (from.has_dropout_ratio()) {
      set_dropout_ratio(from.dropout_ratio());
    }
    if (from.has_local_size()) {
      set_local_size(from.local_size());
    }
    if (from.has_alpha()) {
      set_alpha(from.alpha());
    }
    if (from.has_beta()) {
      set_beta(from.beta());
    }
    if (from.has_k()) {
      set_k(from.k());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_source()) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_meanfile()) {
      set_has_meanfile();
      meanfile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.meanfile_);
    }
    if (from.has_batchsize()) {
      set_batchsize(from.batchsize());
    }
    if (from.has_cropsize()) {
      set_cropsize(from.cropsize());
    }
    if (from.has_mirror()) {
      set_mirror(from.mirror());
    }
  }
  if (from._has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    if (from.has_rand_skip()) {
      set_rand_skip(from.rand_skip());
    }
    if (from.has_det_fg_threshold()) {
      set_det_fg_threshold(from.det_fg_threshold());
    }
    if (from.has_det_bg_threshold()) {
      set_det_bg_threshold(from.det_bg_threshold());
    }
    if (from.has_det_fg_fraction()) {
      set_det_fg_fraction(from.det_fg_fraction());
    }
    if (from.has_det_context_pad()) {
      set_det_context_pad(from.det_context_pad());
    }
    if (from.has_det_crop_mode()) {
      set_has_det_crop_mode();
      det_crop_mode_.AssignWithDefault(_default_det_crop_mode_, from.det_crop_mode_);
    }
    if (from.has_new_num()) {
      set_new_num(from.new_num());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_new_channels()) {
      set_new_channels(from.new_channels());
    }
    if (from.has_new_height()) {
      set_new_height(from.new_height());
    }
    if (from.has_new_width()) {
      set_new_width(from.new_width());
    }
    if (from.has_shuffle_images()) {
      set_shuffle_images(from.shuffle_images());
    }
    if (from.has_concat_dim()) {
      set_concat_dim(from.concat_dim());
    }
    if (from.has_hdf5_output_param()) {
      mutable_hdf5_output_param()->::caffe::HDF5OutputParameter::MergeFrom(from.hdf5_output_param());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void V0LayerParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.V0LayerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void V0LayerParameter::CopyFrom(const V0LayerParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.V0LayerParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool V0LayerParameter::IsInitialized() const {

  return true;
}

void V0LayerParameter::Swap(V0LayerParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void V0LayerParameter::InternalSwap(V0LayerParameter* other) {
  name_.Swap(&other->name_);
  type_.Swap(&other->type_);
  std::swap(num_output_, other->num_output_);
  std::swap(biasterm_, other->biasterm_);
  std::swap(weight_filler_, other->weight_filler_);
  std::swap(bias_filler_, other->bias_filler_);
  std::swap(pad_, other->pad_);
  std::swap(kernelsize_, other->kernelsize_);
  std::swap(group_, other->group_);
  std::swap(stride_, other->stride_);
  std::swap(pool_, other->pool_);
  std::swap(dropout_ratio_, other->dropout_ratio_);
  std::swap(local_size_, other->local_size_);
  std::swap(alpha_, other->alpha_);
  std::swap(beta_, other->beta_);
  std::swap(k_, other->k_);
  source_.Swap(&other->source_);
  std::swap(scale_, other->scale_);
  meanfile_.Swap(&other->meanfile_);
  std::swap(batchsize_, other->batchsize_);
  std::swap(cropsize_, other->cropsize_);
  std::swap(mirror_, other->mirror_);
  blobs_.UnsafeArenaSwap(&other->blobs_);
  blobs_lr_.UnsafeArenaSwap(&other->blobs_lr_);
  weight_decay_.UnsafeArenaSwap(&other->weight_decay_);
  std::swap(rand_skip_, other->rand_skip_);
  std::swap(det_fg_threshold_, other->det_fg_threshold_);
  std::swap(det_bg_threshold_, other->det_bg_threshold_);
  std::swap(det_fg_fraction_, other->det_fg_fraction_);
  std::swap(det_context_pad_, other->det_context_pad_);
  det_crop_mode_.Swap(&other->det_crop_mode_);
  std::swap(new_num_, other->new_num_);
  std::swap(new_channels_, other->new_channels_);
  std::swap(new_height_, other->new_height_);
  std::swap(new_width_, other->new_width_);
  std::swap(shuffle_images_, other->shuffle_images_);
  std::swap(concat_dim_, other->concat_dim_);
  std::swap(hdf5_output_param_, other->hdf5_output_param_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata V0LayerParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = V0LayerParameter_descriptor_;
  metadata.reflection = V0LayerParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// V0LayerParameter

// optional string name = 1;
bool V0LayerParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void V0LayerParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void V0LayerParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void V0LayerParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& V0LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void V0LayerParameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.name)
}
void V0LayerParameter::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.name)
}
void V0LayerParameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.name)
}
::std::string* V0LayerParameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* V0LayerParameter::release_name() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void V0LayerParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.name)
}

// optional string type = 2;
bool V0LayerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void V0LayerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void V0LayerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void V0LayerParameter::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
const ::std::string& V0LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void V0LayerParameter::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.type)
}
void V0LayerParameter::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.type)
}
void V0LayerParameter::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.type)
}
::std::string* V0LayerParameter::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* V0LayerParameter::release_type() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void V0LayerParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.type)
}

// optional uint32 num_output = 3;
bool V0LayerParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void V0LayerParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000004u;
}
void V0LayerParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000004u;
}
void V0LayerParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
::google::protobuf::uint32 V0LayerParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.num_output)
  return num_output_;
}
void V0LayerParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.num_output)
}

// optional bool biasterm = 4 [default = true];
bool V0LayerParameter::has_biasterm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void V0LayerParameter::set_has_biasterm() {
  _has_bits_[0] |= 0x00000008u;
}
void V0LayerParameter::clear_has_biasterm() {
  _has_bits_[0] &= ~0x00000008u;
}
void V0LayerParameter::clear_biasterm() {
  biasterm_ = true;
  clear_has_biasterm();
}
bool V0LayerParameter::biasterm() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.biasterm)
  return biasterm_;
}
void V0LayerParameter::set_biasterm(bool value) {
  set_has_biasterm();
  biasterm_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.biasterm)
}

// optional .caffe.FillerParameter weight_filler = 5;
bool V0LayerParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void V0LayerParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000010u;
}
void V0LayerParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000010u;
}
void V0LayerParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
const ::caffe::FillerParameter& V0LayerParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
::caffe::FillerParameter* V0LayerParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.weight_filler)
  return weight_filler_;
}
::caffe::FillerParameter* V0LayerParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
void V0LayerParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 6;
bool V0LayerParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void V0LayerParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000020u;
}
void V0LayerParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000020u;
}
void V0LayerParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
const ::caffe::FillerParameter& V0LayerParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
::caffe::FillerParameter* V0LayerParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.bias_filler)
  return bias_filler_;
}
::caffe::FillerParameter* V0LayerParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
void V0LayerParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.bias_filler)
}

// optional uint32 pad = 7 [default = 0];
bool V0LayerParameter::has_pad() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void V0LayerParameter::set_has_pad() {
  _has_bits_[0] |= 0x00000040u;
}
void V0LayerParameter::clear_has_pad() {
  _has_bits_[0] &= ~0x00000040u;
}
void V0LayerParameter::clear_pad() {
  pad_ = 0u;
  clear_has_pad();
}
::google::protobuf::uint32 V0LayerParameter::pad() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.pad)
  return pad_;
}
void V0LayerParameter::set_pad(::google::protobuf::uint32 value) {
  set_has_pad();
  pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.pad)
}

// optional uint32 kernelsize = 8;
bool V0LayerParameter::has_kernelsize() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void V0LayerParameter::set_has_kernelsize() {
  _has_bits_[0] |= 0x00000080u;
}
void V0LayerParameter::clear_has_kernelsize() {
  _has_bits_[0] &= ~0x00000080u;
}
void V0LayerParameter::clear_kernelsize() {
  kernelsize_ = 0u;
  clear_has_kernelsize();
}
::google::protobuf::uint32 V0LayerParameter::kernelsize() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.kernelsize)
  return kernelsize_;
}
void V0LayerParameter::set_kernelsize(::google::protobuf::uint32 value) {
  set_has_kernelsize();
  kernelsize_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.kernelsize)
}

// optional uint32 group = 9 [default = 1];
bool V0LayerParameter::has_group() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void V0LayerParameter::set_has_group() {
  _has_bits_[0] |= 0x00000100u;
}
void V0LayerParameter::clear_has_group() {
  _has_bits_[0] &= ~0x00000100u;
}
void V0LayerParameter::clear_group() {
  group_ = 1u;
  clear_has_group();
}
::google::protobuf::uint32 V0LayerParameter::group() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.group)
  return group_;
}
void V0LayerParameter::set_group(::google::protobuf::uint32 value) {
  set_has_group();
  group_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.group)
}

// optional uint32 stride = 10 [default = 1];
bool V0LayerParameter::has_stride() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void V0LayerParameter::set_has_stride() {
  _has_bits_[0] |= 0x00000200u;
}
void V0LayerParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x00000200u;
}
void V0LayerParameter::clear_stride() {
  stride_ = 1u;
  clear_has_stride();
}
::google::protobuf::uint32 V0LayerParameter::stride() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.stride)
  return stride_;
}
void V0LayerParameter::set_stride(::google::protobuf::uint32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.stride)
}

// optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
bool V0LayerParameter::has_pool() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void V0LayerParameter::set_has_pool() {
  _has_bits_[0] |= 0x00000400u;
}
void V0LayerParameter::clear_has_pool() {
  _has_bits_[0] &= ~0x00000400u;
}
void V0LayerParameter::clear_pool() {
  pool_ = 0;
  clear_has_pool();
}
::caffe::V0LayerParameter_PoolMethod V0LayerParameter::pool() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.pool)
  return static_cast< ::caffe::V0LayerParameter_PoolMethod >(pool_);
}
void V0LayerParameter::set_pool(::caffe::V0LayerParameter_PoolMethod value) {
  assert(::caffe::V0LayerParameter_PoolMethod_IsValid(value));
  set_has_pool();
  pool_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.pool)
}

// optional float dropout_ratio = 12 [default = 0.5];
bool V0LayerParameter::has_dropout_ratio() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void V0LayerParameter::set_has_dropout_ratio() {
  _has_bits_[0] |= 0x00000800u;
}
void V0LayerParameter::clear_has_dropout_ratio() {
  _has_bits_[0] &= ~0x00000800u;
}
void V0LayerParameter::clear_dropout_ratio() {
  dropout_ratio_ = 0.5f;
  clear_has_dropout_ratio();
}
float V0LayerParameter::dropout_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.dropout_ratio)
  return dropout_ratio_;
}
void V0LayerParameter::set_dropout_ratio(float value) {
  set_has_dropout_ratio();
  dropout_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.dropout_ratio)
}

// optional uint32 local_size = 13 [default = 5];
bool V0LayerParameter::has_local_size() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void V0LayerParameter::set_has_local_size() {
  _has_bits_[0] |= 0x00001000u;
}
void V0LayerParameter::clear_has_local_size() {
  _has_bits_[0] &= ~0x00001000u;
}
void V0LayerParameter::clear_local_size() {
  local_size_ = 5u;
  clear_has_local_size();
}
::google::protobuf::uint32 V0LayerParameter::local_size() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.local_size)
  return local_size_;
}
void V0LayerParameter::set_local_size(::google::protobuf::uint32 value) {
  set_has_local_size();
  local_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.local_size)
}

// optional float alpha = 14 [default = 1];
bool V0LayerParameter::has_alpha() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void V0LayerParameter::set_has_alpha() {
  _has_bits_[0] |= 0x00002000u;
}
void V0LayerParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x00002000u;
}
void V0LayerParameter::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
float V0LayerParameter::alpha() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.alpha)
  return alpha_;
}
void V0LayerParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.alpha)
}

// optional float beta = 15 [default = 0.75];
bool V0LayerParameter::has_beta() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void V0LayerParameter::set_has_beta() {
  _has_bits_[0] |= 0x00004000u;
}
void V0LayerParameter::clear_has_beta() {
  _has_bits_[0] &= ~0x00004000u;
}
void V0LayerParameter::clear_beta() {
  beta_ = 0.75f;
  clear_has_beta();
}
float V0LayerParameter::beta() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.beta)
  return beta_;
}
void V0LayerParameter::set_beta(float value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.beta)
}

// optional float k = 22 [default = 1];
bool V0LayerParameter::has_k() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void V0LayerParameter::set_has_k() {
  _has_bits_[0] |= 0x00008000u;
}
void V0LayerParameter::clear_has_k() {
  _has_bits_[0] &= ~0x00008000u;
}
void V0LayerParameter::clear_k() {
  k_ = 1;
  clear_has_k();
}
float V0LayerParameter::k() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.k)
  return k_;
}
void V0LayerParameter::set_k(float value) {
  set_has_k();
  k_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.k)
}

// optional string source = 16;
bool V0LayerParameter::has_source() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void V0LayerParameter::set_has_source() {
  _has_bits_[0] |= 0x00010000u;
}
void V0LayerParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00010000u;
}
void V0LayerParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
const ::std::string& V0LayerParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.source)
  return source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void V0LayerParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.source)
}
void V0LayerParameter::set_source(const char* value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.source)
}
void V0LayerParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.source)
}
::std::string* V0LayerParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* V0LayerParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void V0LayerParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.source)
}

// optional float scale = 17 [default = 1];
bool V0LayerParameter::has_scale() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void V0LayerParameter::set_has_scale() {
  _has_bits_[0] |= 0x00020000u;
}
void V0LayerParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00020000u;
}
void V0LayerParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
float V0LayerParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.scale)
  return scale_;
}
void V0LayerParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.scale)
}

// optional string meanfile = 18;
bool V0LayerParameter::has_meanfile() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void V0LayerParameter::set_has_meanfile() {
  _has_bits_[0] |= 0x00040000u;
}
void V0LayerParameter::clear_has_meanfile() {
  _has_bits_[0] &= ~0x00040000u;
}
void V0LayerParameter::clear_meanfile() {
  meanfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_meanfile();
}
const ::std::string& V0LayerParameter::meanfile() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.meanfile)
  return meanfile_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void V0LayerParameter::set_meanfile(const ::std::string& value) {
  set_has_meanfile();
  meanfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.meanfile)
}
void V0LayerParameter::set_meanfile(const char* value) {
  set_has_meanfile();
  meanfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.meanfile)
}
void V0LayerParameter::set_meanfile(const char* value, size_t size) {
  set_has_meanfile();
  meanfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.meanfile)
}
::std::string* V0LayerParameter::mutable_meanfile() {
  set_has_meanfile();
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.meanfile)
  return meanfile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* V0LayerParameter::release_meanfile() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.meanfile)
  clear_has_meanfile();
  return meanfile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void V0LayerParameter::set_allocated_meanfile(::std::string* meanfile) {
  if (meanfile != NULL) {
    set_has_meanfile();
  } else {
    clear_has_meanfile();
  }
  meanfile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), meanfile);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.meanfile)
}

// optional uint32 batchsize = 19;
bool V0LayerParameter::has_batchsize() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void V0LayerParameter::set_has_batchsize() {
  _has_bits_[0] |= 0x00080000u;
}
void V0LayerParameter::clear_has_batchsize() {
  _has_bits_[0] &= ~0x00080000u;
}
void V0LayerParameter::clear_batchsize() {
  batchsize_ = 0u;
  clear_has_batchsize();
}
::google::protobuf::uint32 V0LayerParameter::batchsize() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.batchsize)
  return batchsize_;
}
void V0LayerParameter::set_batchsize(::google::protobuf::uint32 value) {
  set_has_batchsize();
  batchsize_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.batchsize)
}

// optional uint32 cropsize = 20 [default = 0];
bool V0LayerParameter::has_cropsize() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void V0LayerParameter::set_has_cropsize() {
  _has_bits_[0] |= 0x00100000u;
}
void V0LayerParameter::clear_has_cropsize() {
  _has_bits_[0] &= ~0x00100000u;
}
void V0LayerParameter::clear_cropsize() {
  cropsize_ = 0u;
  clear_has_cropsize();
}
::google::protobuf::uint32 V0LayerParameter::cropsize() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.cropsize)
  return cropsize_;
}
void V0LayerParameter::set_cropsize(::google::protobuf::uint32 value) {
  set_has_cropsize();
  cropsize_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.cropsize)
}

// optional bool mirror = 21 [default = false];
bool V0LayerParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void V0LayerParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00200000u;
}
void V0LayerParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00200000u;
}
void V0LayerParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
bool V0LayerParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.mirror)
  return mirror_;
}
void V0LayerParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.mirror)
}

// repeated .caffe.BlobProto blobs = 50;
int V0LayerParameter::blobs_size() const {
  return blobs_.size();
}
void V0LayerParameter::clear_blobs() {
  blobs_.Clear();
}
const ::caffe::BlobProto& V0LayerParameter::blobs(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.blobs)
  return blobs_.Get(index);
}
::caffe::BlobProto* V0LayerParameter::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.blobs)
  return blobs_.Mutable(index);
}
::caffe::BlobProto* V0LayerParameter::add_blobs() {
  // @@protoc_insertion_point(field_add:caffe.V0LayerParameter.blobs)
  return blobs_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
V0LayerParameter::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V0LayerParameter.blobs)
  return &blobs_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
V0LayerParameter::blobs() const {
  // @@protoc_insertion_point(field_list:caffe.V0LayerParameter.blobs)
  return blobs_;
}

// repeated float blobs_lr = 51;
int V0LayerParameter::blobs_lr_size() const {
  return blobs_lr_.size();
}
void V0LayerParameter::clear_blobs_lr() {
  blobs_lr_.Clear();
}
float V0LayerParameter::blobs_lr(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.blobs_lr)
  return blobs_lr_.Get(index);
}
void V0LayerParameter::set_blobs_lr(int index, float value) {
  blobs_lr_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.blobs_lr)
}
void V0LayerParameter::add_blobs_lr(float value) {
  blobs_lr_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V0LayerParameter.blobs_lr)
}
const ::google::protobuf::RepeatedField< float >&
V0LayerParameter::blobs_lr() const {
  // @@protoc_insertion_point(field_list:caffe.V0LayerParameter.blobs_lr)
  return blobs_lr_;
}
::google::protobuf::RepeatedField< float >*
V0LayerParameter::mutable_blobs_lr() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V0LayerParameter.blobs_lr)
  return &blobs_lr_;
}

// repeated float weight_decay = 52;
int V0LayerParameter::weight_decay_size() const {
  return weight_decay_.size();
}
void V0LayerParameter::clear_weight_decay() {
  weight_decay_.Clear();
}
float V0LayerParameter::weight_decay(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.weight_decay)
  return weight_decay_.Get(index);
}
void V0LayerParameter::set_weight_decay(int index, float value) {
  weight_decay_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.weight_decay)
}
void V0LayerParameter::add_weight_decay(float value) {
  weight_decay_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V0LayerParameter.weight_decay)
}
const ::google::protobuf::RepeatedField< float >&
V0LayerParameter::weight_decay() const {
  // @@protoc_insertion_point(field_list:caffe.V0LayerParameter.weight_decay)
  return weight_decay_;
}
::google::protobuf::RepeatedField< float >*
V0LayerParameter::mutable_weight_decay() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V0LayerParameter.weight_decay)
  return &weight_decay_;
}

// optional uint32 rand_skip = 53 [default = 0];
bool V0LayerParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void V0LayerParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x02000000u;
}
void V0LayerParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x02000000u;
}
void V0LayerParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
::google::protobuf::uint32 V0LayerParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.rand_skip)
  return rand_skip_;
}
void V0LayerParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.rand_skip)
}

// optional float det_fg_threshold = 54 [default = 0.5];
bool V0LayerParameter::has_det_fg_threshold() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void V0LayerParameter::set_has_det_fg_threshold() {
  _has_bits_[0] |= 0x04000000u;
}
void V0LayerParameter::clear_has_det_fg_threshold() {
  _has_bits_[0] &= ~0x04000000u;
}
void V0LayerParameter::clear_det_fg_threshold() {
  det_fg_threshold_ = 0.5f;
  clear_has_det_fg_threshold();
}
float V0LayerParameter::det_fg_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_fg_threshold)
  return det_fg_threshold_;
}
void V0LayerParameter::set_det_fg_threshold(float value) {
  set_has_det_fg_threshold();
  det_fg_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_fg_threshold)
}

// optional float det_bg_threshold = 55 [default = 0.5];
bool V0LayerParameter::has_det_bg_threshold() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void V0LayerParameter::set_has_det_bg_threshold() {
  _has_bits_[0] |= 0x08000000u;
}
void V0LayerParameter::clear_has_det_bg_threshold() {
  _has_bits_[0] &= ~0x08000000u;
}
void V0LayerParameter::clear_det_bg_threshold() {
  det_bg_threshold_ = 0.5f;
  clear_has_det_bg_threshold();
}
float V0LayerParameter::det_bg_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_bg_threshold)
  return det_bg_threshold_;
}
void V0LayerParameter::set_det_bg_threshold(float value) {
  set_has_det_bg_threshold();
  det_bg_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_bg_threshold)
}

// optional float det_fg_fraction = 56 [default = 0.25];
bool V0LayerParameter::has_det_fg_fraction() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void V0LayerParameter::set_has_det_fg_fraction() {
  _has_bits_[0] |= 0x10000000u;
}
void V0LayerParameter::clear_has_det_fg_fraction() {
  _has_bits_[0] &= ~0x10000000u;
}
void V0LayerParameter::clear_det_fg_fraction() {
  det_fg_fraction_ = 0.25f;
  clear_has_det_fg_fraction();
}
float V0LayerParameter::det_fg_fraction() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_fg_fraction)
  return det_fg_fraction_;
}
void V0LayerParameter::set_det_fg_fraction(float value) {
  set_has_det_fg_fraction();
  det_fg_fraction_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_fg_fraction)
}

// optional uint32 det_context_pad = 58 [default = 0];
bool V0LayerParameter::has_det_context_pad() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void V0LayerParameter::set_has_det_context_pad() {
  _has_bits_[0] |= 0x20000000u;
}
void V0LayerParameter::clear_has_det_context_pad() {
  _has_bits_[0] &= ~0x20000000u;
}
void V0LayerParameter::clear_det_context_pad() {
  det_context_pad_ = 0u;
  clear_has_det_context_pad();
}
::google::protobuf::uint32 V0LayerParameter::det_context_pad() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_context_pad)
  return det_context_pad_;
}
void V0LayerParameter::set_det_context_pad(::google::protobuf::uint32 value) {
  set_has_det_context_pad();
  det_context_pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_context_pad)
}

// optional string det_crop_mode = 59 [default = "warp"];
bool V0LayerParameter::has_det_crop_mode() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void V0LayerParameter::set_has_det_crop_mode() {
  _has_bits_[0] |= 0x40000000u;
}
void V0LayerParameter::clear_has_det_crop_mode() {
  _has_bits_[0] &= ~0x40000000u;
}
void V0LayerParameter::clear_det_crop_mode() {
  det_crop_mode_.ClearToDefaultNoArena(_default_det_crop_mode_);
  clear_has_det_crop_mode();
}
const ::std::string& V0LayerParameter::det_crop_mode() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_crop_mode)
  return det_crop_mode_.GetNoArena(_default_det_crop_mode_);
}
void V0LayerParameter::set_det_crop_mode(const ::std::string& value) {
  set_has_det_crop_mode();
  det_crop_mode_.SetNoArena(_default_det_crop_mode_, value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_crop_mode)
}
void V0LayerParameter::set_det_crop_mode(const char* value) {
  set_has_det_crop_mode();
  det_crop_mode_.SetNoArena(_default_det_crop_mode_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.det_crop_mode)
}
void V0LayerParameter::set_det_crop_mode(const char* value, size_t size) {
  set_has_det_crop_mode();
  det_crop_mode_.SetNoArena(_default_det_crop_mode_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.det_crop_mode)
}
::std::string* V0LayerParameter::mutable_det_crop_mode() {
  set_has_det_crop_mode();
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.det_crop_mode)
  return det_crop_mode_.MutableNoArena(_default_det_crop_mode_);
}
::std::string* V0LayerParameter::release_det_crop_mode() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.det_crop_mode)
  clear_has_det_crop_mode();
  return det_crop_mode_.ReleaseNoArena(_default_det_crop_mode_);
}
void V0LayerParameter::set_allocated_det_crop_mode(::std::string* det_crop_mode) {
  if (det_crop_mode != NULL) {
    set_has_det_crop_mode();
  } else {
    clear_has_det_crop_mode();
  }
  det_crop_mode_.SetAllocatedNoArena(_default_det_crop_mode_, det_crop_mode);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.det_crop_mode)
}

// optional int32 new_num = 60 [default = 0];
bool V0LayerParameter::has_new_num() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void V0LayerParameter::set_has_new_num() {
  _has_bits_[0] |= 0x80000000u;
}
void V0LayerParameter::clear_has_new_num() {
  _has_bits_[0] &= ~0x80000000u;
}
void V0LayerParameter::clear_new_num() {
  new_num_ = 0;
  clear_has_new_num();
}
::google::protobuf::int32 V0LayerParameter::new_num() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.new_num)
  return new_num_;
}
void V0LayerParameter::set_new_num(::google::protobuf::int32 value) {
  set_has_new_num();
  new_num_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.new_num)
}

// optional int32 new_channels = 61 [default = 0];
bool V0LayerParameter::has_new_channels() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void V0LayerParameter::set_has_new_channels() {
  _has_bits_[1] |= 0x00000001u;
}
void V0LayerParameter::clear_has_new_channels() {
  _has_bits_[1] &= ~0x00000001u;
}
void V0LayerParameter::clear_new_channels() {
  new_channels_ = 0;
  clear_has_new_channels();
}
::google::protobuf::int32 V0LayerParameter::new_channels() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.new_channels)
  return new_channels_;
}
void V0LayerParameter::set_new_channels(::google::protobuf::int32 value) {
  set_has_new_channels();
  new_channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.new_channels)
}

// optional int32 new_height = 62 [default = 0];
bool V0LayerParameter::has_new_height() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void V0LayerParameter::set_has_new_height() {
  _has_bits_[1] |= 0x00000002u;
}
void V0LayerParameter::clear_has_new_height() {
  _has_bits_[1] &= ~0x00000002u;
}
void V0LayerParameter::clear_new_height() {
  new_height_ = 0;
  clear_has_new_height();
}
::google::protobuf::int32 V0LayerParameter::new_height() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.new_height)
  return new_height_;
}
void V0LayerParameter::set_new_height(::google::protobuf::int32 value) {
  set_has_new_height();
  new_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.new_height)
}

// optional int32 new_width = 63 [default = 0];
bool V0LayerParameter::has_new_width() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void V0LayerParameter::set_has_new_width() {
  _has_bits_[1] |= 0x00000004u;
}
void V0LayerParameter::clear_has_new_width() {
  _has_bits_[1] &= ~0x00000004u;
}
void V0LayerParameter::clear_new_width() {
  new_width_ = 0;
  clear_has_new_width();
}
::google::protobuf::int32 V0LayerParameter::new_width() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.new_width)
  return new_width_;
}
void V0LayerParameter::set_new_width(::google::protobuf::int32 value) {
  set_has_new_width();
  new_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.new_width)
}

// optional bool shuffle_images = 64 [default = false];
bool V0LayerParameter::has_shuffle_images() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void V0LayerParameter::set_has_shuffle_images() {
  _has_bits_[1] |= 0x00000008u;
}
void V0LayerParameter::clear_has_shuffle_images() {
  _has_bits_[1] &= ~0x00000008u;
}
void V0LayerParameter::clear_shuffle_images() {
  shuffle_images_ = false;
  clear_has_shuffle_images();
}
bool V0LayerParameter::shuffle_images() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.shuffle_images)
  return shuffle_images_;
}
void V0LayerParameter::set_shuffle_images(bool value) {
  set_has_shuffle_images();
  shuffle_images_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.shuffle_images)
}

// optional uint32 concat_dim = 65 [default = 1];
bool V0LayerParameter::has_concat_dim() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void V0LayerParameter::set_has_concat_dim() {
  _has_bits_[1] |= 0x00000010u;
}
void V0LayerParameter::clear_has_concat_dim() {
  _has_bits_[1] &= ~0x00000010u;
}
void V0LayerParameter::clear_concat_dim() {
  concat_dim_ = 1u;
  clear_has_concat_dim();
}
::google::protobuf::uint32 V0LayerParameter::concat_dim() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.concat_dim)
  return concat_dim_;
}
void V0LayerParameter::set_concat_dim(::google::protobuf::uint32 value) {
  set_has_concat_dim();
  concat_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.concat_dim)
}

// optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;
bool V0LayerParameter::has_hdf5_output_param() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void V0LayerParameter::set_has_hdf5_output_param() {
  _has_bits_[1] |= 0x00000020u;
}
void V0LayerParameter::clear_has_hdf5_output_param() {
  _has_bits_[1] &= ~0x00000020u;
}
void V0LayerParameter::clear_hdf5_output_param() {
  if (hdf5_output_param_ != NULL) hdf5_output_param_->::caffe::HDF5OutputParameter::Clear();
  clear_has_hdf5_output_param();
}
const ::caffe::HDF5OutputParameter& V0LayerParameter::hdf5_output_param() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.hdf5_output_param)
  return hdf5_output_param_ != NULL ? *hdf5_output_param_
                         : *::caffe::HDF5OutputParameter::internal_default_instance();
}
::caffe::HDF5OutputParameter* V0LayerParameter::mutable_hdf5_output_param() {
  set_has_hdf5_output_param();
  if (hdf5_output_param_ == NULL) {
    hdf5_output_param_ = new ::caffe::HDF5OutputParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.hdf5_output_param)
  return hdf5_output_param_;
}
::caffe::HDF5OutputParameter* V0LayerParameter::release_hdf5_output_param() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.hdf5_output_param)
  clear_has_hdf5_output_param();
  ::caffe::HDF5OutputParameter* temp = hdf5_output_param_;
  hdf5_output_param_ = NULL;
  return temp;
}
void V0LayerParameter::set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param) {
  delete hdf5_output_param_;
  hdf5_output_param_ = hdf5_output_param;
  if (hdf5_output_param) {
    set_has_hdf5_output_param();
  } else {
    clear_has_hdf5_output_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.hdf5_output_param)
}

inline const V0LayerParameter* V0LayerParameter::internal_default_instance() {
  return &V0LayerParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PReLUParameter::kFillerFieldNumber;
const int PReLUParameter::kChannelSharedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PReLUParameter::PReLUParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.PReLUParameter)
}

void PReLUParameter::InitAsDefaultInstance() {
  filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
}

PReLUParameter::PReLUParameter(const PReLUParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.PReLUParameter)
}

void PReLUParameter::SharedCtor() {
  _cached_size_ = 0;
  filler_ = NULL;
  channel_shared_ = false;
}

PReLUParameter::~PReLUParameter() {
  // @@protoc_insertion_point(destructor:caffe.PReLUParameter)
  SharedDtor();
}

void PReLUParameter::SharedDtor() {
  if (this != &PReLUParameter_default_instance_.get()) {
    delete filler_;
  }
}

void PReLUParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PReLUParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PReLUParameter_descriptor_;
}

const PReLUParameter& PReLUParameter::default_instance() {
  protobuf_InitDefaults_caffe_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PReLUParameter> PReLUParameter_default_instance_;

PReLUParameter* PReLUParameter::New(::google::protobuf::Arena* arena) const {
  PReLUParameter* n = new PReLUParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PReLUParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.PReLUParameter)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_filler()) {
      if (filler_ != NULL) filler_->::caffe::FillerParameter::Clear();
    }
    channel_shared_ = false;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PReLUParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.PReLUParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.FillerParameter filler = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_channel_shared;
        break;
      }

      // optional bool channel_shared = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_channel_shared:
          set_has_channel_shared();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &channel_shared_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.PReLUParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.PReLUParameter)
  return false;
#undef DO_
}

void PReLUParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.PReLUParameter)
  // optional .caffe.FillerParameter filler = 1;
  if (has_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->filler_, output);
  }

  // optional bool channel_shared = 2 [default = false];
  if (has_channel_shared()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->channel_shared(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.PReLUParameter)
}

::google::protobuf::uint8* PReLUParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.PReLUParameter)
  // optional .caffe.FillerParameter filler = 1;
  if (has_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->filler_, false, target);
  }

  // optional bool channel_shared = 2 [default = false];
  if (has_channel_shared()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->channel_shared(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.PReLUParameter)
  return target;
}

size_t PReLUParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.PReLUParameter)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .caffe.FillerParameter filler = 1;
    if (has_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->filler_);
    }

    // optional bool channel_shared = 2 [default = false];
    if (has_channel_shared()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PReLUParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.PReLUParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PReLUParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PReLUParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.PReLUParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.PReLUParameter)
    UnsafeMergeFrom(*source);
  }
}

void PReLUParameter::MergeFrom(const PReLUParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.PReLUParameter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PReLUParameter::UnsafeMergeFrom(const PReLUParameter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filler()) {
      mutable_filler()->::caffe::FillerParameter::MergeFrom(from.filler());
    }
    if (from.has_channel_shared()) {
      set_channel_shared(from.channel_shared());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void PReLUParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.PReLUParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PReLUParameter::CopyFrom(const PReLUParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.PReLUParameter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PReLUParameter::IsInitialized() const {

  return true;
}

void PReLUParameter::Swap(PReLUParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PReLUParameter::InternalSwap(PReLUParameter* other) {
  std::swap(filler_, other->filler_);
  std::swap(channel_shared_, other->channel_shared_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PReLUParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PReLUParameter_descriptor_;
  metadata.reflection = PReLUParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PReLUParameter

// optional .caffe.FillerParameter filler = 1;
bool PReLUParameter::has_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PReLUParameter::set_has_filler() {
  _has_bits_[0] |= 0x00000001u;
}
void PReLUParameter::clear_has_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
void PReLUParameter::clear_filler() {
  if (filler_ != NULL) filler_->::caffe::FillerParameter::Clear();
  clear_has_filler();
}
const ::caffe::FillerParameter& PReLUParameter::filler() const {
  // @@protoc_insertion_point(field_get:caffe.PReLUParameter.filler)
  return filler_ != NULL ? *filler_
                         : *::caffe::FillerParameter::internal_default_instance();
}
::caffe::FillerParameter* PReLUParameter::mutable_filler() {
  set_has_filler();
  if (filler_ == NULL) {
    filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.PReLUParameter.filler)
  return filler_;
}
::caffe::FillerParameter* PReLUParameter::release_filler() {
  // @@protoc_insertion_point(field_release:caffe.PReLUParameter.filler)
  clear_has_filler();
  ::caffe::FillerParameter* temp = filler_;
  filler_ = NULL;
  return temp;
}
void PReLUParameter::set_allocated_filler(::caffe::FillerParameter* filler) {
  delete filler_;
  filler_ = filler;
  if (filler) {
    set_has_filler();
  } else {
    clear_has_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.PReLUParameter.filler)
}

// optional bool channel_shared = 2 [default = false];
bool PReLUParameter::has_channel_shared() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PReLUParameter::set_has_channel_shared() {
  _has_bits_[0] |= 0x00000002u;
}
void PReLUParameter::clear_has_channel_shared() {
  _has_bits_[0] &= ~0x00000002u;
}
void PReLUParameter::clear_channel_shared() {
  channel_shared_ = false;
  clear_has_channel_shared();
}
bool PReLUParameter::channel_shared() const {
  // @@protoc_insertion_point(field_get:caffe.PReLUParameter.channel_shared)
  return channel_shared_;
}
void PReLUParameter::set_channel_shared(bool value) {
  set_has_channel_shared();
  channel_shared_ = value;
  // @@protoc_insertion_point(field_set:caffe.PReLUParameter.channel_shared)
}

inline const PReLUParameter* PReLUParameter::internal_default_instance() {
  return &PReLUParameter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace caffe

// @@protoc_insertion_point(global_scope)
